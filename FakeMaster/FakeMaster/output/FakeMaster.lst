0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0116) ; Generated by PSoC Designer 5.0.985.0
                                   (0117) ;
                                   (0118) ;@Id: boot.tpl#895 @
0004: 30       HALT                (0119) ;=============================================================================
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0120) ;  FILENAME:   boot.asm
                                   (0121) ;  VERSION:    4.18
                                   (0122) ;  DATE:       28 June 2007
0008: 7E       RETI                (0123) ;
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0124) ;  DESCRIPTION:
                                   (0125) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                   (0126) ;
000C: 7E       RETI                (0127) ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
                                   (0128) ;
                                   (0129) ; NOTES:
                                   (0130) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
0010: 7E       RETI                (0131) ; the project's root directory to create BOOT.ASM. Any changes made to
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
                                   (0132) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                   (0133) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0134) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
0014: 7E       RETI                (0135) ; are not accidentally modified.
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0136) ;
                                   (0137) ;=============================================================================
                                   (0138) 
0018: 7E       RETI                (0139) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
0019: 30       HALT  
001A: 30       HALT  
001B: 30       HALT  
                                   (0140) include "m8c.inc"			;Part specific file
                                   (0141) include "m8ssc.inc"			;Part specific file
                                   (0142) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
001C: 7E       RETI                (0143) 
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0144) ;--------------------------------------
                                   (0145) ; Export Declarations
                                   (0146) ;--------------------------------------
0020: 7E       RETI                (0147) 
0021: 30       HALT  
0022: 30       HALT  
0023: 30       HALT  
                                   (0148) export __Start
                                   (0149) IF	(TOOLCHAIN & HITECH)
0024: 7D 1C 42 LJMP  Dispatch_INTERRUPT_9(0150) ELSE
0027: 7E       RETI                (0151) export __bss_start
                                   (0152) export __data_start
                                   (0153) export __idata_start
0028: 7D 1C 18 LJMP  Dispatch_INTERRUPT_10(0154) export __func_lit_start
002B: 7E       RETI                (0155) export __text_start
                                   (0156) ENDIF
                                   (0157) export  _bGetPowerSetting
                                   (0158) export   bGetPowerSetting
002C: 7E       RETI                (0159) 
002D: 30       HALT  
002E: 30       HALT  
002F: 30       HALT  
                                   (0160) 
                                   (0161) ;--------------------------------------
                                   (0162) ; Optimization flags
0030: 7E       RETI                (0163) ;--------------------------------------
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
                                   (0164) ;
                                   (0165) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0166) ; boot.asm. See the notes in the banner comment at the beginning of
0034: 7E       RETI                (0167) ; this file.
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
                                   (0168) 
                                   (0169) ; Optimization for Assembly language (only) projects and C-language projects
0038: 7D 0B F8 LJMP  0x0BF8        (0170) ; that do not depend on the C compiler to initialize the values of RAM variables.
003B: 7E       RETI                (0171) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0172) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0173) ;
003C: 7D 0B F9 LJMP  0x0BF9        (0174) IF	(TOOLCHAIN & HITECH)
003F: 7E       RETI                (0175) ; The C compiler will customize the startup code - it's not required here
                                   (0176) 
                                   (0177) C_LANGUAGE_SUPPORT:              equ 0
                                   (0178) ELSE
0040: 7E       RETI                (0179) C_LANGUAGE_SUPPORT:              equ 1
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
                                   (0180) ENDIF
                                   (0181) 
                                   (0182) 
0044: 7E       RETI                (0183) ; The following equate is required for proper operation. Reseting its value
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
                                   (0184) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                   (0185) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                   (0186) ; and PLL_Lock must take place within user code. See the family data sheet for
0048: 7E       RETI                (0187) ; the requirements of starting the ECO and PLL lock mode.
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
                                   (0188) ;
                                   (0189) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                   (0190) ;                invoking main
004C: 7E       RETI                (0191) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
                                   (0192) ;               the time code in main starts executing.
                                   (0193) ;
                                   (0194) WAIT_FOR_32K:                    equ 1
0050: 7E       RETI                (0195) 
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
                                   (0196) 
                                   (0197) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0198) ; to invoke the user's _main code. If _main executes a return instruction,
0054: 7E       RETI                (0199) ; boot provides an infinite loop. By changing the following equate from zero
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
                                   (0200) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0201) ; bytes on the stack which are otherwise required for the return address. If
                                   (0202) ; this option is enabled, _main must not return. (Beginning with the 4.2
0058: 7E       RETI                (0203) ; release, the C compiler automatically places an infinite loop at the end
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
                                   (0204) ; of main, rather than a return instruction.)
                                   (0205) ;
                                   (0206) ENABLE_LJMP_TO_MAIN:             equ 0
005C: 7E       RETI                (0207) 
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0208) 
                                   (0209) ;-----------------------------------------------------------------------------
                                   (0210) ; Interrupt Vector Table
0060: 7E       RETI                (0211) ;-----------------------------------------------------------------------------
0061: 30       HALT  
0062: 30       HALT  
0063: 30       HALT  
                                   (0212) ;
                                   (0213) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0214) ; a jump instruction to an ISR (Interrupt Service Routine), although
0064: 7E       RETI                (0215) ; very short ISRs could be encoded within the table itself. Normally,
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0216) ; vector jump targets are modified automatically according to the user
                                   (0217) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0218) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0219) ; configuration files. If you need to hard code a vector, update the
                                   (0220) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0221) ; of this file.
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) 
                                   (0224)     AREA TOP (ROM, ABS, CON)
                                   (0225) 
                                   (0226)     org   0                        ;Reset Interrupt Vector
                                   (0227) IF	(TOOLCHAIN & HITECH)
                                   (0228) ;   jmp   __Start                  ;C compiler fills in this vector
                                   (0229) ELSE
                                   (0230)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0231) ENDIF
                                   (0232) 
                                   (0233)     org   04h                      ;Supply Monitor Interrupt Vector
                                   (0234)     halt                           ;Stop execution if power falls too low
0068: 71 10    OR    F,16          (0235) 
006A: 62 FA 00 MOV   REG[250],0    (0236)     org   08h                      ;Analog Column 0 Interrupt Vector
006D: 62 E3 87 MOV   REG[227],135  (0237)     // call	void_handler
0070: 70 EF    AND   F,239         (0238)     reti
                                   (0239) 
                                   (0240)     org   0Ch                      ;Analog Column 1 Interrupt Vector
0072: 50 20    MOV   A,32          (0241)     // call	void_handler
0074: 28       ROMX                (0242)     reti
0075: 50 40    MOV   A,64          (0243) 
0077: 28       ROMX                (0244)     org   10h                      ;Analog Column 2 Interrupt Vector
0078: 50 60    MOV   A,96          (0245)     // call	void_handler
007A: 28       ROMX                (0246)     reti
                                   (0247) 
                                   (0248)     org   14h                      ;Analog Column 3 Interrupt Vector
                                   (0249)     // call	void_handler
                                   (0250)     reti
                                   (0251) 
                                   (0252)     org   18h                      ;VC3 Interrupt Vector
                                   (0253)     // call	void_handler
                                   (0254)     reti
                                   (0255) 
007B: 41 FE FB AND   REG[254],251  (0256)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0257)     // call	void_handler
                                   (0258)     reti
                                   (0259) 
                                   (0260)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                   (0261)     // call	void_handler
                                   (0262)     reti
                                   (0263) 
                                   (0264)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                   (0265)     ljmp	Dispatch_INTERRUPT_9
007E: 50 80    MOV   A,128         (0266)     reti
0080: 4E       SWAP  SP,A          (0267) 
                                   (0268)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                   (0269)     ljmp	Dispatch_INTERRUPT_10
                                   (0270)     reti
                                   (0271) 
                                   (0272)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                   (0273)     // call	void_handler
                                   (0274)     reti
                                   (0275) 
                                   (0276)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                   (0277)     // call	void_handler
                                   (0278)     reti
                                   (0279) 
                                   (0280)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                   (0281)     // call	void_handler
                                   (0282)     reti
                                   (0283) 
                                   (0284)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                   (0285)     ljmp	_COMP_SERIAL_TX_ISR
                                   (0286)     reti
                                   (0287) 
                                   (0288)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                   (0289)     ljmp	_COMP_SERIAL_RX_ISR
                                   (0290)     reti
                                   (0291) 
                                   (0292)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                   (0293)     // call	void_handler
                                   (0294)     reti
                                   (0295) 
                                   (0296)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                   (0297)     // call	void_handler
0081: 55 F8 00 MOV   [248],0       (0298)     reti
0084: 55 F9 00 MOV   [249],0       (0299) 
                                   (0300)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                   (0301)     // call	void_handler
                                   (0302)     reti
                                   (0303) 
                                   (0304)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                   (0305)     // call	void_handler
                                   (0306)     reti
                                   (0307) 
                                   (0308)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                   (0309)     // call	void_handler
                                   (0310)     reti
                                   (0311) 
                                   (0312)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                   (0313)     // call	void_handler
                                   (0314)     reti
                                   (0315) 
                                   (0316)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                   (0317)     // call	void_handler
                                   (0318)     reti
                                   (0319) 
                                   (0320)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                   (0321)     // call	void_handler
                                   (0322)     reti
0087: 71 10    OR    F,16          (0323) 
0089: 62 E0 1A MOV   REG[224],26   (0324)     org   60h                      ;PSoC I2C Interrupt Vector
008C: 70 EF    AND   F,239         (0325)     // call	void_handler
008E: 62 E3 38 MOV   REG[227],56   (0326)     reti
                                   (0327) 
                                   (0328)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0329)     // call	void_handler
                                   (0330)     reti
                                   (0331) 
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;  Start of Execution.
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0336) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0337) ;
                                   (0338) 
                                   (0339) IF	(TOOLCHAIN & HITECH)
                                   (0340)  	AREA PD_startup(CODE, REL, CON)
                                   (0341) ELSE
                                   (0342)     org 68h
                                   (0343) ENDIF
                                   (0344) __Start:
                                   (0345) 
                                   (0346)     ; initialize SMP values for voltage stabilization, if required,
                                   (0347)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0348)     ; least for now. 
                                   (0349)     ;
                                   (0350)     M8C_SetBank1
                                   (0351)     mov reg[0FAh], 0				;Reset flash location
                                   (0352)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
                                   (0353)     M8C_SetBank0
                                   (0354) 
                                   (0355)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
                                   (0356)     mov   A, 20h
0091: 62 71 05 MOV   REG[113],5    (0357)     romx
0094: 62 75 05 MOV   REG[117],5    (0358)     mov   A, 40h
0097: 62 79 05 MOV   REG[121],5    (0359)     romx
009A: 62 7D 05 MOV   REG[125],5    (0360)     mov   A, 60h
                                   (0361)     romx
                                   (0362)     ; %45%20%46%46% End workaround
                                   (0363) 
                                   (0364) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0365)     M8C_EnableWatchDog
                                   (0366) ENDIF
                                   (0367) 
                                   (0368) IF ( SELECT_32K )
                                   (0369)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                   (0370) ELSE
                                   (0371)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0372) ENDIF
                                   (0373) 
                                   (0374)     ;---------------------------
                                   (0375)     ; Set up the Temporary stack
                                   (0376)     ;---------------------------
                                   (0377)     ; A temporary stack is set up for the SSC instructions.
                                   (0378)     ; The real stack start will be assigned later.
                                   (0379)     ;
                                   (0380) _stack_start:          equ 80h
                                   (0381)     mov   A, _stack_start          ; Set top of stack to end of used RAM
                                   (0382)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0383) 
                                   (0384)     ;-----------------------------------------------
                                   (0385)     ; Set Power-related Trim & the AGND Bypass bit.
                                   (0386)     ;-----------------------------------------------
                                   (0387) 
009D: 62 D1 07 MOV   REG[209],7    (0388) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
00A0: 50 00    MOV   A,0           (0389)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
00A2: 4E       SWAP  SP,A          (0390)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
00A3: 62 D3 07 MOV   REG[211],7    (0391)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
00A6: 62 D0 00 MOV   REG[208],0    (0392)  ELSE                                          ; *** 12MHZ Main Oscillator ***
00A9: 62 D5 00 MOV   REG[213],0    (0393)   IF ( AGND_BYPASS )
00AC: 62 D4 00 MOV   REG[212],0    (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0395)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                   (0396)     ; bit in the write-only BDG_TR register. Recalculate the register
00AF: 71 C0    OR    F,192         (0397)     ; value using the proper trim values.
                                   (0398)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0399)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0400)   ENDIF
                                   (0401)  ENDIF
                                   (0402) ENDIF ; 5.0 V Operation
                                   (0403) 
                                   (0404) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                   (0405)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0406)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0407)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0408)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0409)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0410)  ENDIF
                                   (0411) ENDIF ; 3.3 Volt Operation
                                   (0412) 
                                   (0413)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
                                   (0414)     mov  [bSSC_KEYSP], 0
00B1: 7C 05 C9 LCALL 0x05C9        (0415) 
                                   (0416)     ;---------------------------------------
                                   (0417)     ; Initialize Crystal Oscillator and PLL
                                   (0418)     ;---------------------------------------
                                   (0419) 
                                   (0420) IF ( SELECT_32K & WAIT_FOR_32K )
                                   (0421)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                   (0422)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                   (0423)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                   (0424)     ; the ECO to stabilize.
                                   (0425)     ;
                                   (0426)     M8C_SetBank1
                                   (0427)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                   (0428)     M8C_SetBank0
                                   (0429)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                   (0430)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                   (0431)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                   (0432) .WaitFor1s:
                                   (0433)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                   (0434)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                   (0435)                                           ;   since interrupts are not globally enabled
                                   (0436) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                   (0437)     ; Either no ECO, or waiting for stable clock is to be done in main
                                   (0438)     M8C_SetBank1
                                   (0439)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                   (0440)     M8C_SetBank0
                                   (0441)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0442) 
                                   (0443) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                   (0444) 
                                   (0445) IF ( PLL_MODE )
                                   (0446)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
00B4: 62 D0 00 MOV   REG[208],0    (0447)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                   (0448)     ;
                                   (0449)     M8C_SetBank1
                                   (0450)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                   (0451)     M8C_SetBank0
                                   (0452)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                   (0453)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
00B7: 50 05    MOV   A,5           (0454) 
00B9: 57 C7    MOV   X,199         (0455) .WaitFor16ms:
00BB: 08       PUSH  A             (0456)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
00BC: 28       ROMX                (0457)     jz   .WaitFor16ms
00BD: 53 97    MOV   [__r0],A      (0458)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
00BF: 18       POP   A             (0459)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
00C0: 75       INC   X             (0460)     M8C_SetBank0
00C1: 09 00    ADC   A,0           (0461) 
00C3: 28       ROMX                (0462) IF      ( WAIT_FOR_32K )
00C4: 4B       SWAP  A,X           (0463) ELSE ; !( WAIT_FOR_32K )
00C5: 51 97    MOV   A,[151]       (0464)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                   (0465)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
00C7: 80 04    JMP   0x00CC        (0466) ENDIF ;(WAIT_FOR_32K)
                                   (0467) ENDIF ;(PLL_MODE)
                                   (0468) 
                                   (0469)     ;------------------------
                                   (0470)     ; Close CT leakage path.
                                   (0471)     ;------------------------
                                   (0472)     mov   reg[ACB00CR0], 05h
                                   (0473)     mov   reg[ACB01CR0], 05h
                                   (0474)     mov   reg[ACB02CR0], 05h
                                   (0475)     mov   reg[ACB03CR0], 05h
                                   (0476) 
                                   (0477) 
                                   (0478) IF	(TOOLCHAIN & HITECH)
                                   (0479)     ;---------------------------------------------
                                   (0480)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                   (0481)     ;---------------------------------------------
                                   (0482) 	global		__Lstackps
                                   (0483) 	mov     a,low __Lstackps
00C9: 75       INC   X             (0484) 	swap    a,sp
00CA: 09 00    ADC   A,0           (0485) 
                                   (0486) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0487)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                   (0488)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                   (0489)     RAM_SETPAGE_CUR 0
00CC: 62 E3 00 MOV   REG[227],0    (0490)     RAM_SETPAGE_MVW 0
00CF: 08       PUSH  A             (0491)     RAM_SETPAGE_MVR 0
00D0: 28       ROMX                (0492)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D1: 60 D5    MOV   REG[213],A    (0493)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
00D3: 74       INC   A             (0494)     ELSE
00D4: A0 4B    JZ    0x0120        (0495)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
00D6: 18       POP   A             (0496)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
00D7: 75       INC   X             (0497) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00D8: 09 00    ADC   A,0           (0498) ELSE
00DA: 08       PUSH  A             (0499)     ;---------------------------------------------
00DB: 28       ROMX                (0500)     ; ImageCraft Enter the Large Memory Model, if applicable
00DC: 53 97    MOV   [__r0],A      (0501)     ;---------------------------------------------
00DE: 18       POP   A             (0502) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DF: 75       INC   X             (0503)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00E0: 09 00    ADC   A,0           (0504)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00E2: 08       PUSH  A             (0505)     swap  A, SP
00E3: 28       ROMX                (0506)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00E4: A0 1C    JZ    0x0101        (0507)     RAM_SETPAGE_CUR 0
00E6: 53 96    MOV   [__r1],A      (0508)     RAM_SETPAGE_MVW 0
00E8: 18       POP   A             (0509)     RAM_SETPAGE_MVR 0
                                   (0510) 
                                   (0511)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                   (0512)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0513)   ELSE
                                   (0514)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0515)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0516) ELSE
00E9: 75       INC   X             (0517)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
00EA: 09 00    ADC   A,0           (0518)     swap  SP, A
00EC: 08       PUSH  A             (0519) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00ED: 28       ROMX                (0520) ENDIF ;	TOOLCHAIN
00EE: 3F 97    MVI   [__r0],A      (0521) 
00F0: 47 97 FF TST   [151],255     (0522)     ;-------------------------
00F3: B0 06    JNZ   0x00FA        (0523)     ; Load Base Configuration
00F5: 5D D5    MOV   A,REG[213]    (0524)     ;-------------------------
00F7: 74       INC   A             (0525)     ; Load global parameter settings and load the user modules in the
00F8: 60 D5    MOV   REG[213],A    (0526)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0527)     ; to minimize start up time; (2) We may still need to play with the
00FA: 18       POP   A             (0528)     ; Sleep Timer.
00FB: 7A 96    DEC   [__r1]        (0529)     ;
00FD: BF EB    JNZ   0x00E9        (0530)     lcall LoadConfigInit
00FF: 8F C9    JMP   0x00C9        (0531) 
                                   (0532)     ;-----------------------------------
                                   (0533)     ; Initialize C Run-Time Environment
0101: 18       POP   A             (0534)     ;-----------------------------------
0102: 75       INC   X             (0535) IF ( C_LANGUAGE_SUPPORT )
0103: 09 00    ADC   A,0           (0536) IF ( SYSTEM_SMALL_MEMORY_MODEL )
0105: 08       PUSH  A             (0537)     mov  A,0                           ; clear the 'bss' segment to zero
0106: 28       ROMX                (0538)     mov  [__r0],<__bss_start
0107: 53 96    MOV   [__r1],A      (0539) BssLoop:
0109: 50 00    MOV   A,0           (0540)     cmp  [__r0],<__bss_end
                                   (0541)     jz   BssDone
                                   (0542)     mvi  [__r0],A
                                   (0543)     jmp  BssLoop
                                   (0544) BssDone:
                                   (0545)     mov  A,>__idata_start              ; copy idata to data segment
010B: 3F 97    MVI   [__r0],A      (0546)     mov  X,<__idata_start
010D: 47 97 FF TST   [151],255     (0547)     mov  [__r0],<__data_start
0110: B0 08    JNZ   0x0119        (0548) IDataLoop:
0112: 5D D5    MOV   A,REG[213]    (0549)     cmp  [__r0],<__data_end
0114: 74       INC   A             (0550)     jz   C_RTE_Done
0115: 60 D5    MOV   REG[213],A    (0551)     push A
0117: 50 00    MOV   A,0           (0552)     romx
                                   (0553)     mvi  [__r0],A
0119: 7A 96    DEC   [__r1]        (0554)     pop  A
011B: BF EF    JNZ   0x010B        (0555)     inc  X
011D: 18       POP   A             (0556)     adc  A,0
011E: 8F AA    JMP   0x00C9        (0557)     jmp  IDataLoop
                                   (0558) 
                                   (0559) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
0120: 18       POP   A             (0560) 
                                   (0561) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0562)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                   (0563)                                        ; to use the Virtual Register page.
                                   (0564) 
                                   (0565)     ; Dereference the constant (flash) pointer pXIData to access the start
                                   (0566)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                   (0567)     ; text segment and may have been relocated by the Code Compressor.
                                   (0568)     ;
                                   (0569)     mov   A, >__pXIData                ; Get the address of the flash
                                   (0570)     mov   X, <__pXIData                ;   pointer to the xidata area.
                                   (0571)     push  A
                                   (0572)     romx                               ; get the MSB of xidata's address
                                   (0573)     mov   [__r0], A
                                   (0574)     pop   A
                                   (0575)     inc   X
                                   (0576)     adc   A, 0
                                   (0577)     romx                               ; get the LSB of xidata's address
                                   (0578)     swap  A, X
                                   (0579)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                   (0580)                                        ;   XIData structure list in flash
                                   (0581)     jmp   .AccessStruct
                                   (0582) 
                                   (0583)     ; Unpack one element in the xidata "structure list" that specifies the
                                   (0584)     ; values of C variables. Each structure contains 3 member elements.
                                   (0585)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                   (0586)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                   (0587)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                   (0588)     ; contains 0xFF. There are two formats for the struct depending on the
                                   (0589)     ; value in the second member element, an unsigned byte:
                                   (0590)     ; (1) If the value of the second element is non-zero, it represents
                                   (0591)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                   (0592)     ; third member of the struct is an array of bytes of length 'size' and
                                   (0593)     ; the bytes are copied to the block of RAM.
                                   (0594)     ; (2) If the value of the second element is zero, the block of RAM is
                                   (0595)     ; to be cleared to zero. In this case, the third member of the struct
                                   (0596)     ; is an unsigned byte containing the number of bytes to clear.
                                   (0597) 
                                   (0598) .AccessNextStructLoop:
                                   (0599)     inc   X                            ; pXIData++
                                   (0600)     adc   A, 0
0121: 71 10    OR    F,16          (0601) .AccessStruct:                         ; Entry point for first block
                                   (0602)     ;
                                   (0603)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                   (0604)     ;
                                   (0605)     M8C_ClearWDT                       ; Clear the watchdog for long inits
                                   (0606)     push  A
                                   (0607)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
                                   (0608)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
0123: 43 E3 20 OR    REG[227],32   (0609)     inc   A                            ; End of Struct List? (MSB==0xFF?)
                                   (0610)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
                                   (0611)     pop   A                            ; restore pXIData to [A,X]
                                   (0612)     inc   X                            ; pXIData++
                                   (0613)     adc   A, 0
0126: 70 EF    AND   F,239         (0614)     push  A
                                   (0615)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
                                   (0616)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
                                   (0617)     pop   A                            ; restore pXIData to [A,X]
                                   (0618)     inc   X                            ; pXIData++ (point to size)
                                   (0619)     adc   A, 0
                                   (0620)     push  A
                                   (0621)     romx                               ; Get the size (CPU.A <- *pXIData)
                                   (0622)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
0128: 62 E0 00 MOV   REG[224],0    (0623)     mov   [__r1], A                    ;             else downcount in __r1
                                   (0624)     pop   A                            ; restore pXIData to [A,X]
                                   (0625) 
                                   (0626) .CopyNextByteLoop:
                                   (0627)     ; For each byte in the structure's array member, copy from flash to RAM.
012B: 71 10    OR    F,16          (0628)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
012D: 62 E0 1B MOV   REG[224],27   (0629)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
0130: 43 E7 80 OR    REG[231],128  (0630)     ;         __r1 holds a non-zero count of the number of bytes remaining.
0133: 70 EF    AND   F,239         (0631)     ;
                                   (0632)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0633)     adc   A, 0
                                   (0634)     push  A
                                   (0635)     romx                               ; Get the data value (CPU.A <- *pXIData)
                                   (0636)     mvi   [__r0], A                    ; Transfer the data to RAM
0135: 62 E2 00 MOV   REG[226],0    (0637)     tst   [__r0], 0xff                 ; Check for page crossing
                                   (0638)     jnz   .CopyLoopTail                ;   No crossing, keep going
                                   (0639)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
                                   (0640)     inc   A
                                   (0641)     mov   reg[ MVW_PP], A
                                   (0642) .CopyLoopTail:
                                   (0643)     pop   A                            ; restore pXIData to [A,X]
                                   (0644)     dec   [__r1]                       ; End of this array in flash?
0138: 7C 0E 58 LCALL __text_start  (0645)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
                                   (0646)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
013B: 8F FF    JMP   0x013B        (0647) 
                                   (0648) .ClearRAMBlockToZero:
                                   (0649)     pop   A                            ; restore pXIData to [A,X]
                                   (0650)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0651)     adc   A, 0
                                   (0652)     push  A
                                   (0653)     romx                               ; Get the run length (CPU.A <- *pXIData)
                                   (0654)     mov   [__r1], A                    ; Initialize downcounter
                                   (0655)     mov   A, 0                         ; Initialize source data
                                   (0656) 
                                   (0657) .ClearRAMBlockLoop:
                                   (0658)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                   (0659)     ;         __r1 holds a non-zero count of the number of bytes remaining.
013D: 50 10    MOV   A,16          (0660)     ;
02BA: 71 10    OR    F,16          (0661)     mvi   [__r0], A                    ; Clear a byte

FILE: lib\psocconfigtbl.asm
02BC: 62 00 02 MOV   REG[0],2      (0247) ; Generated by PSoC Designer 5.0.985.0
02BF: 62 01 FD MOV   REG[1],253    (0248) ;
02C2: 70 EF    AND   F,239         (0249) include "m8c.inc"
02C4: 62 03 FD MOV   REG[3],253    (0250) ;  Personalization tables 
02C7: 62 02 02 MOV   REG[2],2      (0251) export LoadConfigTBL_transmitter_config_Bank1
02CA: 71 10    OR    F,16          (0252) export LoadConfigTBL_transmitter_config_Bank0
02CC: 62 02 00 MOV   REG[2],0      (0253) export LoadConfigTBL_transmitter_config_Ordered
02CF: 62 03 00 MOV   REG[3],0      (0254) export UnloadConfigTBL_transmitter_config_Bank1
02D2: 70 EF    AND   F,239         (0255) export UnloadConfigTBL_transmitter_config_Bank0
02D4: 62 01 00 MOV   REG[1],0      (0256) export ReloadConfigTBL_transmitter_config_Bank1
02D7: 71 10    OR    F,16          (0257) export ReloadConfigTBL_transmitter_config_Bank0
02D9: 62 04 01 MOV   REG[4],1      (0258) export LoadConfigTBL_pc_listener_Bank1
02DC: 62 05 FE MOV   REG[5],254    (0259) export LoadConfigTBL_pc_listener_Bank0
02DF: 70 EF    AND   F,239         (0260) export UnloadConfigTBL_pc_listener_Bank1
02E1: 62 07 FE MOV   REG[7],254    (0261) export UnloadConfigTBL_pc_listener_Bank0
02E4: 62 06 00 MOV   REG[6],0      (0262) export LoadConfigTBL_receiver_config_Bank1
02E7: 71 10    OR    F,16          (0263) export LoadConfigTBL_receiver_config_Bank0
02E9: 62 06 00 MOV   REG[6],0      (0264) export UnloadConfigTBL_receiver_config_Bank1
02EC: 62 07 00 MOV   REG[7],0      (0265) export UnloadConfigTBL_receiver_config_Bank0
02EF: 70 EF    AND   F,239         (0266) export UnloadConfigTBL_Total_Bank1
02F1: 62 05 00 MOV   REG[5],0      (0267) export UnloadConfigTBL_Total_Bank0
02F4: 71 10    OR    F,16          (0268) AREA lit(rom, rel)
02F6: 62 08 01 MOV   REG[8],1      (0269) LoadConfigTBL_pc_listener_Bank0:
02F9: 62 09 FE MOV   REG[9],254    (0270) ;  Instance name COMP_SERIAL, User Module UART
02FC: 70 EF    AND   F,239         (0271) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
02FE: 62 0B FE MOV   REG[11],254   (0272) 	db		3fh, 00h		;COMP_SERIAL_RX_CONTROL_REG(DCB13CR0)
0301: 62 0A 00 MOV   REG[10],0     (0273) 	db		3dh, 00h		;COMP_SERIAL_(DCB13DR1)
0304: 71 10    OR    F,16          (0274) 	db		3eh, 00h		;COMP_SERIAL_RX_BUFFER_REG (DCB13DR2)
0306: 62 0A 00 MOV   REG[10],0     (0275) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0309: 62 0B 00 MOV   REG[11],0     (0276) 	db		3bh, 00h		;COMP_SERIAL_TX_CONTROL_REG(DCB12CR0)
030C: 70 EF    AND   F,239         (0277) 	db		39h, 00h		;COMP_SERIAL_TX_BUFFER_REG (DCB12DR1)
030E: 62 09 00 MOV   REG[9],0      (0278) 	db		3ah, 00h		;COMP_SERIAL_(DCB12DR2)
0311: 71 10    OR    F,16          (0279) ;  Instance name TX_REPEATER, User Module TX8
0313: 62 0C 00 MOV   REG[12],0     (0280) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0316: 62 0D 00 MOV   REG[13],0     (0281) 	db		2bh, 00h		;TX_REPEATER_CONTROL_REG  (DCB02CR0)
0319: 70 EF    AND   F,239         (0282) 	db		29h, 00h		;TX_REPEATER_TX_BUFFER_REG(DCB02DR1)
031B: 62 0F 00 MOV   REG[15],0     (0283) 	db		2ah, 00h		;TX_REPEATER_(DCB02DR2)
031E: 62 0E 00 MOV   REG[14],0     (0284) 	db		ffh
0321: 71 10    OR    F,16          (0285) LoadConfigTBL_pc_listener_Bank1:
0323: 62 0E 00 MOV   REG[14],0     (0286) ;  Instance name COMP_SERIAL, User Module UART
0326: 62 0F 00 MOV   REG[15],0     (0287) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0329: 70 EF    AND   F,239         (0288) 	db		3ch, 05h		;COMP_SERIAL_RX_FUNC_REG   (DCB13FN)
032B: 62 0D 00 MOV   REG[13],0     (0289) 	db		3dh, f6h		;COMP_SERIAL_RX_INPUT_REG  (DCB13IN)
032E: 71 10    OR    F,16          (0290) 	db		3eh, 80h		;COMP_SERIAL_RX_OUTPUT_REG (DCB13OU)
0330: 62 10 00 MOV   REG[16],0     (0291) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0333: 62 11 00 MOV   REG[17],0     (0292) 	db		38h, 1dh		;COMP_SERIAL_TX_FUNC_REG   (DCB12FN)
0336: 70 EF    AND   F,239         (0293) 	db		39h, 06h		;COMP_SERIAL_TX_INPUT_REG  (DCB12IN)
0338: 62 13 00 MOV   REG[19],0     (0294) 	db		3ah, 85h		;COMP_SERIAL_TX_OUTPUT_REG (DCB12OU)
033B: 62 12 00 MOV   REG[18],0     (0295) ;  Instance name TX_REPEATER, User Module TX8
033E: 71 10    OR    F,16          (0296) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0340: 62 12 00 MOV   REG[18],0     (0297) 	db		28h, 1dh		;TX_REPEATER_FUNC_REG     (DCB02FN)
0343: 62 13 00 MOV   REG[19],0     (0298) 	db		29h, 01h		;TX_REPEATER_INPUT_REG    (DCB02IN)
0346: 70 EF    AND   F,239         (0299) 	db		2ah, 85h		;TX_REPEATER_OUTPUT_REG   (DCB02OU)
0348: 62 11 00 MOV   REG[17],0     (0300) 	db		ffh
034B: 71 10    OR    F,16          (0301) UnloadConfigTBL_pc_listener_Bank0:
034D: 62 14 00 MOV   REG[20],0     (0302) ;  Instance name COMP_SERIAL, User Module UART
0350: 62 15 00 MOV   REG[21],0     (0303) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0353: 70 EF    AND   F,239         (0304) 	db		3fh, 00h		;COMP_SERIAL_CONTROL_0 (DCB13CR0)
0355: 62 17 00 MOV   REG[23],0     (0305) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0358: 62 16 00 MOV   REG[22],0     (0306) 	db		3bh, 00h		;COMP_SERIAL_CONTROL_0 (DCB12CR0)
035B: 71 10    OR    F,16          (0307) ;  Instance name TX_REPEATER, User Module TX8
035D: 62 16 00 MOV   REG[22],0     (0308) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0360: 62 17 00 MOV   REG[23],0     (0309) 	db		2bh, 00h		;TX_REPEATER_CONTROL_0 (DCB02CR0)
0363: 70 EF    AND   F,239         (0310) 	db		ffh
0365: 62 15 00 MOV   REG[21],0     (0311) UnloadConfigTBL_pc_listener_Bank1:
0368: 71 10    OR    F,16          (0312) ;  Instance name COMP_SERIAL, User Module UART
036A: 62 18 00 MOV   REG[24],0     (0313) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
036D: 62 19 00 MOV   REG[25],0     (0314) 	db		3ch, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB13FN)
0370: 70 EF    AND   F,239         (0315) 	db		3dh, 00h		;COMP_SERIAL_DIG_Input (DCB13IN)
0372: 62 1B 00 MOV   REG[27],0     (0316) 	db		3eh, 00h		;COMP_SERIAL_DIG_Output (DCB13OU)
0375: 62 1A 00 MOV   REG[26],0     (0317) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0378: 71 10    OR    F,16          (0318) 	db		38h, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB12FN)
037A: 62 1A 00 MOV   REG[26],0     (0319) 	db		39h, 00h		;COMP_SERIAL_DIG_Input (DCB12IN)
037D: 62 1B 00 MOV   REG[27],0     (0320) 	db		3ah, 00h		;COMP_SERIAL_DIG_Output (DCB12OU)
0380: 70 EF    AND   F,239         (0321) ;  Instance name TX_REPEATER, User Module TX8
0382: 62 19 00 MOV   REG[25],0     (0322) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0385: 71 10    OR    F,16          (0323) 	db		28h, 00h		;TX_REPEATER_DIG_BasicFunction (DCB02FN)
0387: 62 1C 00 MOV   REG[28],0     (0324) 	db		29h, 00h		;TX_REPEATER_DIG_Input (DCB02IN)
038A: 62 1D 00 MOV   REG[29],0     (0325) 	db		2ah, 00h		;TX_REPEATER_DIG_Output (DCB02OU)
038D: 70 EF    AND   F,239         (0326) 	db		ffh
038F: 62 1F 00 MOV   REG[31],0     (0327) 
0392: 62 1E 00 MOV   REG[30],0     (0328) ;  Instance name COMP_SERIAL, User Module UART
0395: 71 10    OR    F,16          (0329) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0397: 62 1E 00 MOV   REG[30],0     (0330) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
039A: 62 1F 00 MOV   REG[31],0     (0331) ;  Instance name TX_REPEATER, User Module TX8
039D: 70 EF    AND   F,239         (0332) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
039F: 62 1D 00 MOV   REG[29],0     (0333) 	db		ffh
05C9: 62 D0 00 MOV   REG[208],0    (0334) LoadConfigTBL_receiver_config_Bank0:

FILE: lib\psocconfig.asm
05CC: 55 02 00 MOV   [2],0         (0074) ; Generated by PSoC Designer 5.0.985.0
                                   (0075) ;
05CF: 7C 05 D6 LCALL 0x05D6        (0076) INCLUDE "PSoCDynamic.inc"
05D2: 7C 02 BA LCALL 0x02BA        (0077) ;==========================================================================
                                   (0078) ;  PSoCConfig.asm
                                   (0079) ;  @PSOC_VERSION
                                   (0080) ;
05D5: 7F       RET                 (0081) ;  Version: 0.85
                                   (0082) ;  Revised: June 22, 2004
                                   (0083) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0084) ;
                                   (0085) ;  This file is generated by the Device Editor on Application Generation.
                                   (0086) ;  It contains code which loads the configuration data table generated in
                                   (0087) ;  the file PSoCConfigTBL.asm
                                   (0088) ;
                                   (0089) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0090) ;  Edits to this file will not be preserved.
                                   (0091) ;==========================================================================
                                   (0092) ;
                                   (0093) include "m8c.inc"
                                   (0094) include "memory.inc"
                                   (0095) include "GlobalParams.inc"
                                   (0096) 
                                   (0097) export LoadConfigInit
                                   (0098) export _LoadConfigInit
                                   (0099) export LoadConfig_transmitter_config
                                   (0100) export _LoadConfig_transmitter_config
                                   (0101) export UnloadConfig_transmitter_config
                                   (0102) export _UnloadConfig_transmitter_config
                                   (0103) export ReloadConfig_transmitter_config
                                   (0104) export _ReloadConfig_transmitter_config
05D6: 71 10    OR    F,16          (0105) export LoadConfig_pc_listener
                                   (0106) export _LoadConfig_pc_listener
05D8: 10       PUSH  X             (0107) export UnloadConfig_pc_listener
05D9: 70 EF    AND   F,239         (0108) export _UnloadConfig_pc_listener
05DB: 50 00    MOV   A,0           (0109) export LoadConfig_receiver_config
05DD: 67       ASR   A             (0110) export _LoadConfig_receiver_config
                                   (0111) export UnloadConfig_receiver_config
05DE: 50 02    MOV   A,2           (0112) export _UnloadConfig_receiver_config
05E0: 57 22    MOV   X,34          (0113) export UnloadConfig_Total
05E2: 7C 07 E9 LCALL 0x07E9        (0114) export _UnloadConfig_Total
                                   (0115) export ACTIVE_CONFIG_STATUS
05E5: 50 01    MOV   A,1           (0116) 
05E7: 67       ASR   A             (0117) export NO_SHADOW
                                   (0118) export _NO_SHADOW
05E8: 50 02    MOV   A,2           (0119) 
05EA: 57 83    MOV   X,131         (0120) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
05EC: 7C 07 E9 LCALL 0x07E9        (0121) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                   (0122) 
05EF: 62 D0 00 MOV   REG[208],0    (0123) AREA psoc_config(rom, rel)
                                   (0124) 
05F2: 2E 02 01 OR    [2],1         (0125) ;---------------------------------------------------------------------------
05F5: 70 EF    AND   F,239         (0126) ; LoadConfigInit - Establish the start-up configuration (except for a few
05F7: 20       POP   X             (0127) ;                  parameters handled by boot code, like CPU speed). This
                                   (0128) ;                  function can be called from user code, but typically it
                                   (0129) ;                  is only called from boot.
05F8: 7F       RET                 (0130) ;
                                   (0131) ;       INPUTS: None.
                                   (0132) ;      RETURNS: Nothing.
                                   (0133) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0134) ;               In the large memory model currently only the page
                                   (0135) ;               pointer registers listed below are modified.  This does
                                   (0136) ;               not guarantee that in future implementations of this
                                   (0137) ;               function other page pointer registers will not be
                                   (0138) ;               modified.
                                   (0139) ;          
                                   (0140) ;               Page Pointer Registers Modified: 
                                   (0141) ;               CUR_PP
                                   (0142) ;
                                   (0143) _LoadConfigInit:
                                   (0144)  LoadConfigInit:
                                   (0145)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0146)     RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0147) 	mov		[ACTIVE_CONFIG_STATUS], 0
                                   (0148) 
                                   (0149) 	lcall	LoadConfig_transmitter_config
                                   (0150) 	lcall	LoadConfigTBL_transmitter_config_Ordered
                                   (0151) 
                                   (0152) 
                                   (0153)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0154)     ret
05F9: 10       PUSH  X             (0155) 
05FA: 70 EF    AND   F,239         (0156) ;---------------------------------------------------------------------------
05FC: 50 00    MOV   A,0           (0157) ; Load Configuration transmitter_config
05FE: 67       ASR   A             (0158) ;
                                   (0159) ;    Load configuration registers for transmitter_config.
05FF: 50 03    MOV   A,3           (0160) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0601: 57 A3    MOV   X,163         (0161) ;
0603: 7C 07 E9 LCALL 0x07E9        (0162) ;       INPUTS: None.
                                   (0163) ;      RETURNS: Nothing.
0606: 50 01    MOV   A,1           (0164) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0608: 67       ASR   A             (0165) ;               modified as may the Page Pointer registers!
                                   (0166) ;               In the large memory model currently only the page
0609: 50 03    MOV   A,3           (0167) ;               pointer registers listed below are modified.  This does
060B: 57 B6    MOV   X,182         (0168) ;               not guarantee that in future implementations of this
060D: 7C 07 E9 LCALL 0x07E9        (0169) ;               function other page pointer registers will not be
                                   (0170) ;               modified.
                                   (0171) ;          
0610: 62 D0 00 MOV   REG[208],0    (0172) ;               Page Pointer Registers Modified: 
0613: 2E 02 01 OR    [2],1         (0173) ;               CUR_PP
0616: 70 EF    AND   F,239         (0174) ;
0618: 20       POP   X             (0175) _LoadConfig_transmitter_config:
                                   (0176)  LoadConfig_transmitter_config:
                                   (0177)     RAM_PROLOGUE RAM_USE_CLASS_4
0619: 7F       RET                 (0178) 	M8C_SetBank1
                                   (0179) 
                                   (0180) 	push	x
                                   (0181)     M8C_SetBank0                    ; Force bank 0
                                   (0182)     mov     a, 0                    ; Specify bank 0
                                   (0183)     asr     a                       ; Store in carry flag
                                   (0184)                                     ; Load bank 0 table:
                                   (0185)     mov     A, >LoadConfigTBL_transmitter_config_Bank0
                                   (0186)     mov     X, <LoadConfigTBL_transmitter_config_Bank0
                                   (0187)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0188) 
                                   (0189)     mov     a, 1                    ; Specify bank 1
                                   (0190)     asr     a                       ; Store in carry flag
                                   (0191)                                     ; Load bank 1 table:
                                   (0192)     mov     A, >LoadConfigTBL_transmitter_config_Bank1
                                   (0193)     mov     X, <LoadConfigTBL_transmitter_config_Bank1
                                   (0194)     lcall   LoadConfig              ; Load the bank 1 values
                                   (0195) 
                                   (0196) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0197) ; set config active bit
                                   (0198) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
                                   (0199)     M8C_SetBank0                    ; Force return to bank 0
                                   (0200) 	pop		x
                                   (0201) 
                                   (0202)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0203)     ret
061A: 10       PUSH  X             (0204) 
061B: 70 EF    AND   F,239         (0205) ;---------------------------------------------------------------------------
061D: 50 00    MOV   A,0           (0206) ; Reload Configuration transmitter_config
061F: 67       ASR   A             (0207) ;
                                   (0208) ;    Reload configuration registers for transmitter_config.
0620: 50 03    MOV   A,3           (0209) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0622: 57 C9    MOV   X,201         (0210) ;
0624: 7C 07 E9 LCALL 0x07E9        (0211) ;       INPUTS: None.
                                   (0212) ;      RETURNS: Nothing.
0627: 50 01    MOV   A,1           (0213) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0629: 67       ASR   A             (0214) ;               modified as may the Page Pointer registers!
                                   (0215) ;               In the large memory model currently only the page
062A: 50 03    MOV   A,3           (0216) ;               pointer registers listed below are modified.  This does
062C: 57 D0    MOV   X,208         (0217) ;               not guarantee that in future implementations of this
062E: 7C 07 E9 LCALL 0x07E9        (0218) ;               function other page pointer registers will not be
                                   (0219) ;               modified.
0631: 71 10    OR    F,16          (0220) ;          
0633: 70 EF    AND   F,239         (0221) ;               Page Pointer Registers Modified: 
                                   (0222) ;               CUR_PP
0635: 62 D0 00 MOV   REG[208],0    (0223) ;
0638: 26 02 FE AND   [2],254       (0224) _ReloadConfig_transmitter_config:
063B: 70 EF    AND   F,239         (0225)  ReloadConfig_transmitter_config:
063D: 20       POP   X             (0226)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0227) 
                                   (0228) 	push	x
063E: 7F       RET                 (0229)     M8C_SetBank0                    ; Force bank 0
                                   (0230)     mov     a, 0                    ; Specify bank 0
                                   (0231)     asr     a                       ; Store in carry flag
                                   (0232)                                     ; Bank 0 table address:
                                   (0233)     mov     A, >ReloadConfigTBL_transmitter_config_Bank0
                                   (0234)     mov     X, <ReloadConfigTBL_transmitter_config_Bank0
                                   (0235)     lcall   LoadConfig              ; Reload the bank 0 values
                                   (0236) 
                                   (0237)     mov     a, 1                    ; Specify bank 1
                                   (0238)     asr     a                       ; Store in carry flag
                                   (0239)                                     ; Bank 1 table address:
                                   (0240)     mov     A, >ReloadConfigTBL_transmitter_config_Bank1
                                   (0241)     mov     X, <ReloadConfigTBL_transmitter_config_Bank1
                                   (0242)     lcall   LoadConfig              ; Reload the bank 1 values
                                   (0243) 
                                   (0244) ; set config active bit
                                   (0245) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0246) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
                                   (0247)     M8C_SetBank0                    ; Force return to bank 0
                                   (0248) 	pop		x
                                   (0249) 
                                   (0250)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0251)     ret
                                   (0252) 
063F: 71 10    OR    F,16          (0253) ;---------------------------------------------------------------------------
                                   (0254) ; Unload Configuration transmitter_config
0641: 41 00 DF AND   REG[0],223    (0255) ;
0644: 43 00 20 OR    REG[0],32     (0256) ;    Reset configuration registers for transmitter_config
                                   (0257) ;    to their values as initially configured.
0647: 41 01 DF AND   REG[1],223    (0258) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0259) ;
064A: 70 EF    AND   F,239         (0260) ;       INPUTS: None.
064C: 41 03 5F AND   REG[3],95     (0261) ;      RETURNS: Nothing.
                                   (0262) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
064F: 41 02 5F AND   REG[2],95     (0263) ;               modified as may the Page Pointer registers!
0652: 43 02 A0 OR    REG[2],160    (0264) ;               In the large memory model currently only the page
                                   (0265) ;               pointer registers listed below are modified.  This does
0655: 71 10    OR    F,16          (0266) ;               not guarantee that in future implementations of this
0657: 41 08 FE AND   REG[8],254    (0267) ;               function other page pointer registers will not be
                                   (0268) ;               modified.
065A: 41 09 FE AND   REG[9],254    (0269) ;          
065D: 43 09 01 OR    REG[9],1      (0270) ;               Page Pointer Registers Modified: 
                                   (0271) ;               CUR_PP
0660: 70 EF    AND   F,239         (0272) ;
0662: 41 0B FE AND   REG[11],254   (0273) _UnloadConfig_transmitter_config:
0665: 43 0B 01 OR    REG[11],1     (0274)  UnloadConfig_transmitter_config:
                                   (0275)     RAM_PROLOGUE RAM_USE_CLASS_4
0668: 41 60 F3 AND   REG[96],243   (0276) 
066B: 43 60 0C OR    REG[96],12    (0277) 	push	x
                                   (0278)     M8C_SetBank0                    ; Force bank 0
066E: 71 10    OR    F,16          (0279)     mov     a, 0                    ; Specify bank 0
0670: 41 E1 00 AND   REG[225],0    (0280)     asr     a                       ; Store in carry flag
0673: 43 E1 C1 OR    REG[225],193  (0281)                                     ; Bank 0 table address:
                                   (0282)     mov     A, >UnloadConfigTBL_transmitter_config_Bank0
0676: 70 EF    AND   F,239         (0283)     mov     X, <UnloadConfigTBL_transmitter_config_Bank0
0678: 41 B0 0F AND   REG[176],15   (0284)     lcall   LoadConfig              ; Unload the bank 0 values
                                   (0285) 
067B: 41 B8 CC AND   REG[184],204  (0286)     mov     a, 1                    ; Specify bank 1
067E: 43 B8 11 OR    REG[184],17   (0287)     asr     a                       ; Store in carry flag
                                   (0288)                                     ; Bank 1 table address:
0681: 41 BD DF AND   REG[189],223  (0289)     mov     A, >UnloadConfigTBL_transmitter_config_Bank1
0684: 43 BD 20 OR    REG[189],32   (0290)     mov     X, <UnloadConfigTBL_transmitter_config_Bank1
                                   (0291)     lcall   LoadConfig              ; Unload the bank 1 values
0687: 10       PUSH  X             (0292) 
0688: 70 EF    AND   F,239         (0293) 	M8C_SetBank1
068A: 50 00    MOV   A,0           (0294) 	M8C_SetBank0
068C: 67       ASR   A             (0295) ; clear config active bit
                                   (0296) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
068D: 50 01    MOV   A,1           (0297) 	and		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], ~transmitter_config_BIT
068F: 57 A0    MOV   X,160         (0298)     M8C_SetBank0                    ; Force return to bank 0
0691: 7C 07 E9 LCALL 0x07E9        (0299) 	pop		x
                                   (0300) 
0694: 50 01    MOV   A,1           (0301)     RAM_EPILOGUE RAM_USE_CLASS_4
0696: 67       ASR   A             (0302)     ret
                                   (0303) 
0697: 50 01    MOV   A,1           (0304) ;---------------------------------------------------------------------------
0699: 57 B3    MOV   X,179         (0305) ; Load Configuration pc_listener
069B: 7C 07 E9 LCALL 0x07E9        (0306) ;
                                   (0307) ;    Load configuration registers for pc_listener.
069E: 62 D0 00 MOV   REG[208],0    (0308) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0309) ;
06A1: 2E 02 02 OR    [2],2         (0310) ;       INPUTS: None.
06A4: 70 EF    AND   F,239         (0311) ;      RETURNS: Nothing.
06A6: 20       POP   X             (0312) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0313) ;               modified as may the Page Pointer registers!
                                   (0314) ;               In the large memory model currently only the page
06A7: 7F       RET                 (0315) ;               pointer registers listed below are modified.  This does
                                   (0316) ;               not guarantee that in future implementations of this
                                   (0317) ;               function other page pointer registers will not be
                                   (0318) ;               modified.
                                   (0319) ;          
                                   (0320) ;               Page Pointer Registers Modified: 
                                   (0321) ;               CUR_PP
                                   (0322) ;
                                   (0323) _LoadConfig_pc_listener:
                                   (0324)  LoadConfig_pc_listener:
                                   (0325)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0326) 	M8C_SetBank1
                                   (0327) ; writing Port_0_DriveMode_0 register
                                   (0328) 	and		reg[ 0h], ~20h
                                   (0329) 	or		reg[ 0h], 20h
                                   (0330) ; writing Port_0_DriveMode_1 register
                                   (0331) 	and		reg[ 1h], ~20h
                                   (0332) ; writing Port_0_DriveMode_2 register
                                   (0333) 	M8C_SetBank0
                                   (0334) 	and		reg[ 3h], ~a0h
                                   (0335) ; writing Port_0_GlobalSelect register
                                   (0336) 	and		reg[ 2h], ~a0h
                                   (0337) 	or		reg[ 2h], a0h
                                   (0338) ; writing Port_2_DriveMode_0 register
                                   (0339) 	M8C_SetBank1
                                   (0340) 	and		reg[ 8h], ~ 1h
06A8: 10       PUSH  X             (0341) ; writing Port_2_DriveMode_1 register
06A9: 70 EF    AND   F,239         (0342) 	and		reg[ 9h], ~ 1h
06AB: 50 00    MOV   A,0           (0343) 	or		reg[ 9h],  1h
06AD: 67       ASR   A             (0344) ; writing Port_2_DriveMode_2 register
                                   (0345) 	M8C_SetBank0
06AE: 50 01    MOV   A,1           (0346) 	and		reg[ bh], ~ 1h
06B0: 57 C6    MOV   X,198         (0347) 	or		reg[ bh],  1h
06B2: 7C 07 E9 LCALL 0x07E9        (0348) ; writing AnalogColumnInputSelect register
                                   (0349) 	and		reg[60h], ~ ch
06B5: 50 01    MOV   A,1           (0350) 	or		reg[60h],  ch
06B7: 67       ASR   A             (0351) ; writing OscillatorControl_1 register
                                   (0352) 	M8C_SetBank1
06B8: 50 01    MOV   A,1           (0353) 	and		reg[e1h], ~ffh
06BA: 57 CD    MOV   X,205         (0354) 	or		reg[e1h], c1h
06BC: 7C 07 E9 LCALL 0x07E9        (0355) ; writing Row_0_InputMux register
                                   (0356) 	M8C_SetBank0
06BF: 71 10    OR    F,16          (0357) 	and		reg[b0h], ~f0h
                                   (0358) ; writing Row_1_InputMux register
06C1: 70 EF    AND   F,239         (0359) 	and		reg[b8h], ~33h
06C3: 41 60 F3 AND   REG[96],243   (0360) 	or		reg[b8h], 11h
06C6: 43 60 08 OR    REG[96],8     (0361) ; writing Row_1_OutputDrive_0 register
                                   (0362) 	and		reg[bdh], ~20h
06C9: 71 10    OR    F,16          (0363) 	or		reg[bdh], 20h
06CB: 41 E1 00 AND   REG[225],0    (0364) 
06CE: 43 E1 99 OR    REG[225],153  (0365) 	push	x
                                   (0366)     M8C_SetBank0                    ; Force bank 0
06D1: 70 EF    AND   F,239         (0367)     mov     a, 0                    ; Specify bank 0
06D3: 41 B0 0F AND   REG[176],15   (0368)     asr     a                       ; Store in carry flag
06D6: 43 B0 50 OR    REG[176],80   (0369)                                     ; Load bank 0 table:
                                   (0370)     mov     A, >LoadConfigTBL_pc_listener_Bank0
06D9: 41 B8 CC AND   REG[184],204  (0371)     mov     X, <LoadConfigTBL_pc_listener_Bank0
06DC: 43 B8 02 OR    REG[184],2    (0372)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0373) 
06DF: 41 BD DF AND   REG[189],223  (0374)     mov     a, 1                    ; Specify bank 1
                                   (0375)     asr     a                       ; Store in carry flag
06E2: 41 0B FE AND   REG[11],254   (0376)                                     ; Load bank 1 table:
                                   (0377)     mov     A, >LoadConfigTBL_pc_listener_Bank1
06E5: 71 10    OR    F,16          (0378)     mov     X, <LoadConfigTBL_pc_listener_Bank1
06E7: 41 09 FE AND   REG[9],254    (0379)     lcall   LoadConfig              ; Load the bank 1 values
                                   (0380) 
06EA: 41 08 FE AND   REG[8],254    (0381) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
06ED: 43 08 01 OR    REG[8],1      (0382) ; set config active bit
                                   (0383) 	or		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
06F0: 70 EF    AND   F,239         (0384)     M8C_SetBank0                    ; Force return to bank 0
06F2: 41 02 5F AND   REG[2],95     (0385) 	pop		x
                                   (0386) 
06F5: 41 03 5F AND   REG[3],95     (0387)     RAM_EPILOGUE RAM_USE_CLASS_4
06F8: 43 03 A0 OR    REG[3],160    (0388)     ret
                                   (0389) 
06FB: 71 10    OR    F,16          (0390) ;---------------------------------------------------------------------------
06FD: 41 01 DF AND   REG[1],223    (0391) ; Unload Configuration pc_listener
0700: 43 01 20 OR    REG[1],32     (0392) ;
                                   (0393) ;    Reset configuration registers for pc_listener
0703: 41 00 DF AND   REG[0],223    (0394) ;    to their values as initially configured.
0706: 70 EF    AND   F,239         (0395) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0396) ;
0708: 62 D0 00 MOV   REG[208],0    (0397) ;       INPUTS: None.
070B: 26 02 FD AND   [2],253       (0398) ;      RETURNS: Nothing.
070E: 70 EF    AND   F,239         (0399) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0710: 20       POP   X             (0400) ;               modified as may the Page Pointer registers!
                                   (0401) ;               In the large memory model currently only the page
                                   (0402) ;               pointer registers listed below are modified.  This does
0711: 7F       RET                 (0403) ;               not guarantee that in future implementations of this
                                   (0404) ;               function other page pointer registers will not be
                                   (0405) ;               modified.
                                   (0406) ;          
                                   (0407) ;               Page Pointer Registers Modified: 
                                   (0408) ;               CUR_PP
                                   (0409) ;
                                   (0410) _UnloadConfig_pc_listener:
                                   (0411)  UnloadConfig_pc_listener:
                                   (0412)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0413) 
                                   (0414) 	push	x
                                   (0415)     M8C_SetBank0                    ; Force bank 0
                                   (0416)     mov     a, 0                    ; Specify bank 0
                                   (0417)     asr     a                       ; Store in carry flag
                                   (0418)                                     ; Bank 0 table address:
                                   (0419)     mov     A, >UnloadConfigTBL_pc_listener_Bank0
                                   (0420)     mov     X, <UnloadConfigTBL_pc_listener_Bank0
                                   (0421)     lcall   LoadConfig              ; Unload the bank 0 values
                                   (0422) 
                                   (0423)     mov     a, 1                    ; Specify bank 1
                                   (0424)     asr     a                       ; Store in carry flag
                                   (0425)                                     ; Bank 1 table address:
                                   (0426)     mov     A, >UnloadConfigTBL_pc_listener_Bank1
0712: 71 10    OR    F,16          (0427)     mov     X, <UnloadConfigTBL_pc_listener_Bank1
                                   (0428)     lcall   LoadConfig              ; Unload the bank 1 values
0714: 41 00 FD AND   REG[0],253    (0429) 
                                   (0430) 	M8C_SetBank1
0717: 41 01 FD AND   REG[1],253    (0431) ; writing AnalogColumnInputSelect register
071A: 43 01 02 OR    REG[1],2      (0432) 	M8C_SetBank0
                                   (0433) 	and		reg[60h], ~ ch
071D: 41 04 FE AND   REG[4],254    (0434) 	or		reg[60h],  8h
                                   (0435) ; writing OscillatorControl_1 register
0720: 41 05 FE AND   REG[5],254    (0436) 	M8C_SetBank1
0723: 43 05 01 OR    REG[5],1      (0437) 	and		reg[e1h], ~ffh
                                   (0438) 	or		reg[e1h], 99h
0726: 70 EF    AND   F,239         (0439) ; writing Row_0_InputMux register
0728: 41 07 FE AND   REG[7],254    (0440) 	M8C_SetBank0
072B: 43 07 01 OR    REG[7],1      (0441) 	and		reg[b0h], ~f0h
                                   (0442) 	or		reg[b0h], 50h
072E: 71 10    OR    F,16          (0443) ; writing Row_1_InputMux register
0730: 41 60 CF AND   REG[96],207   (0444) 	and		reg[b8h], ~33h
0733: 43 60 30 OR    REG[96],48    (0445) 	or		reg[b8h],  2h
                                   (0446) ; writing Row_1_OutputDrive_0 register
0736: 70 EF    AND   F,239         (0447) 	and		reg[bdh], ~20h
0738: 41 60 C3 AND   REG[96],195   (0448) ; writing Port_2_DriveMode_2 register
073B: 43 60 34 OR    REG[96],52    (0449) 	and		reg[ bh], ~ 1h
                                   (0450) ; writing Port_2_DriveMode_1 register
073E: 41 B0 CF AND   REG[176],207  (0451) 	M8C_SetBank1
                                   (0452) 	and		reg[ 9h], ~ 1h
0741: 41 B5 EF AND   REG[181],239  (0453) ; writing Port_2_DriveMode_0 register
                                   (0454) 	and		reg[ 8h], ~ 1h
0744: 41 B8 CC AND   REG[184],204  (0455) 	or		reg[ 8h],  1h
0747: 43 B8 11 OR    REG[184],17   (0456) ; writing Port_0_GlobalSelect register
                                   (0457) 	M8C_SetBank0
074A: 10       PUSH  X             (0458) 	and		reg[ 2h], ~a0h
074B: 70 EF    AND   F,239         (0459) ; writing Port_0_DriveMode_2 register
074D: 50 00    MOV   A,0           (0460) 	and		reg[ 3h], ~a0h
074F: 67       ASR   A             (0461) 	or		reg[ 3h], a0h
                                   (0462) ; writing Port_0_DriveMode_1 register
0750: 50 01    MOV   A,1           (0463) 	M8C_SetBank1
0752: 57 E1    MOV   X,225         (0464) 	and		reg[ 1h], ~20h
0754: 7C 07 E9 LCALL 0x07E9        (0465) 	or		reg[ 1h], 20h
                                   (0466) ; writing Port_0_DriveMode_0 register
0757: 50 01    MOV   A,1           (0467) 	and		reg[ 0h], ~20h
0759: 67       ASR   A             (0468) 	M8C_SetBank0
                                   (0469) ; clear config active bit
075A: 50 01    MOV   A,1           (0470) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
075C: 57 F4    MOV   X,244         (0471) 	and		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], ~pc_listener_BIT
075E: 7C 07 E9 LCALL 0x07E9        (0472)     M8C_SetBank0                    ; Force return to bank 0
                                   (0473) 	pop		x
0761: 62 D0 00 MOV   REG[208],0    (0474) 
                                   (0475)     RAM_EPILOGUE RAM_USE_CLASS_4
0764: 2E 02 04 OR    [2],4         (0476)     ret
0767: 70 EF    AND   F,239         (0477) 
0769: 20       POP   X             (0478) ;---------------------------------------------------------------------------
                                   (0479) ; Load Configuration receiver_config
                                   (0480) ;
076A: 7F       RET                 (0481) ;    Load configuration registers for receiver_config.
                                   (0482) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0483) ;
                                   (0484) ;       INPUTS: None.
                                   (0485) ;      RETURNS: Nothing.
                                   (0486) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0487) ;               modified as may the Page Pointer registers!
                                   (0488) ;               In the large memory model currently only the page
                                   (0489) ;               pointer registers listed below are modified.  This does
                                   (0490) ;               not guarantee that in future implementations of this
                                   (0491) ;               function other page pointer registers will not be
                                   (0492) ;               modified.
                                   (0493) ;          
                                   (0494) ;               Page Pointer Registers Modified: 
                                   (0495) ;               CUR_PP
                                   (0496) ;
                                   (0497) _LoadConfig_receiver_config:
                                   (0498)  LoadConfig_receiver_config:
                                   (0499)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0500) 	M8C_SetBank1
                                   (0501) ; writing Port_0_DriveMode_0 register
                                   (0502) 	and		reg[ 0h], ~ 2h
                                   (0503) ; writing Port_0_DriveMode_1 register
                                   (0504) 	and		reg[ 1h], ~ 2h
                                   (0505) 	or		reg[ 1h],  2h
                                   (0506) ; writing Port_1_DriveMode_0 register
076B: 10       PUSH  X             (0507) 	and		reg[ 4h], ~ 1h
076C: 70 EF    AND   F,239         (0508) ; writing Port_1_DriveMode_1 register
076E: 50 00    MOV   A,0           (0509) 	and		reg[ 5h], ~ 1h
0770: 67       ASR   A             (0510) 	or		reg[ 5h],  1h
                                   (0511) ; writing Port_1_DriveMode_2 register
0771: 50 02    MOV   A,2           (0512) 	M8C_SetBank0
0773: 57 07    MOV   X,7           (0513) 	and		reg[ 7h], ~ 1h
0775: 7C 07 E9 LCALL 0x07E9        (0514) 	or		reg[ 7h],  1h
                                   (0515) ; writing AnalogColumnClockSelect register
0778: 50 01    MOV   A,1           (0516) 	M8C_SetBank1
077A: 67       ASR   A             (0517) 	and		reg[60h], ~30h
                                   (0518) 	or		reg[60h], 30h
077B: 50 02    MOV   A,2           (0519) ; writing AnalogColumnInputSelect register
077D: 57 0E    MOV   X,14          (0520) 	M8C_SetBank0
077F: 7C 07 E9 LCALL 0x07E9        (0521) 	and		reg[60h], ~3ch
                                   (0522) 	or		reg[60h], 34h
0782: 71 10    OR    F,16          (0523) ; writing Row_0_InputMux register
                                   (0524) 	and		reg[b0h], ~30h
0784: 41 60 CF AND   REG[96],207   (0525) ; writing Row_0_OutputDrive_0 register
                                   (0526) 	and		reg[b5h], ~10h
0787: 70 EF    AND   F,239         (0527) ; writing Row_1_InputMux register
0789: 41 60 C3 AND   REG[96],195   (0528) 	and		reg[b8h], ~33h
078C: 43 60 28 OR    REG[96],40    (0529) 	or		reg[b8h], 11h
                                   (0530) 
078F: 41 B0 CF AND   REG[176],207  (0531) 	push	x
0792: 43 B0 10 OR    REG[176],16   (0532)     M8C_SetBank0                    ; Force bank 0
                                   (0533)     mov     a, 0                    ; Specify bank 0
0795: 41 B5 EF AND   REG[181],239  (0534)     asr     a                       ; Store in carry flag
0798: 43 B5 10 OR    REG[181],16   (0535)                                     ; Load bank 0 table:
                                   (0536)     mov     A, >LoadConfigTBL_receiver_config_Bank0
079B: 41 B8 CC AND   REG[184],204  (0537)     mov     X, <LoadConfigTBL_receiver_config_Bank0
079E: 43 B8 02 OR    REG[184],2    (0538)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0539) 
07A1: 41 07 FE AND   REG[7],254    (0540)     mov     a, 1                    ; Specify bank 1
                                   (0541)     asr     a                       ; Store in carry flag
07A4: 71 10    OR    F,16          (0542)                                     ; Load bank 1 table:
07A6: 41 05 FE AND   REG[5],254    (0543)     mov     A, >LoadConfigTBL_receiver_config_Bank1
                                   (0544)     mov     X, <LoadConfigTBL_receiver_config_Bank1
07A9: 41 04 FE AND   REG[4],254    (0545)     lcall   LoadConfig              ; Load the bank 1 values
07AC: 43 04 01 OR    REG[4],1      (0546) 
                                   (0547) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
07AF: 41 01 FD AND   REG[1],253    (0548) ; set config active bit
                                   (0549) 	or		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
07B2: 41 00 FD AND   REG[0],253    (0550)     M8C_SetBank0                    ; Force return to bank 0
07B5: 43 00 02 OR    REG[0],2      (0551) 	pop		x
07B8: 70 EF    AND   F,239         (0552) 
                                   (0553)     RAM_EPILOGUE RAM_USE_CLASS_4
07BA: 62 D0 00 MOV   REG[208],0    (0554)     ret
07BD: 26 02 FB AND   [2],251       (0555) 
07C0: 70 EF    AND   F,239         (0556) ;---------------------------------------------------------------------------
07C2: 20       POP   X             (0557) ; Unload Configuration receiver_config
                                   (0558) ;
                                   (0559) ;    Reset configuration registers for receiver_config
07C3: 7F       RET                 (0560) ;    to their values as initially configured.
                                   (0561) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0562) ;
                                   (0563) ;       INPUTS: None.
                                   (0564) ;      RETURNS: Nothing.
                                   (0565) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0566) ;               modified as may the Page Pointer registers!
                                   (0567) ;               In the large memory model currently only the page
                                   (0568) ;               pointer registers listed below are modified.  This does
                                   (0569) ;               not guarantee that in future implementations of this
                                   (0570) ;               function other page pointer registers will not be
                                   (0571) ;               modified.
                                   (0572) ;          
                                   (0573) ;               Page Pointer Registers Modified: 
                                   (0574) ;               CUR_PP
                                   (0575) ;
                                   (0576) _UnloadConfig_receiver_config:
                                   (0577)  UnloadConfig_receiver_config:
                                   (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0579) 
                                   (0580) 	push	x
                                   (0581)     M8C_SetBank0                    ; Force bank 0
                                   (0582)     mov     a, 0                    ; Specify bank 0
                                   (0583)     asr     a                       ; Store in carry flag
                                   (0584)                                     ; Bank 0 table address:
                                   (0585)     mov     A, >UnloadConfigTBL_receiver_config_Bank0
07C4: 10       PUSH  X             (0586)     mov     X, <UnloadConfigTBL_receiver_config_Bank0
07C5: 70 EF    AND   F,239         (0587)     lcall   LoadConfig              ; Unload the bank 0 values
07C7: 50 00    MOV   A,0           (0588) 
07C9: 67       ASR   A             (0589)     mov     a, 1                    ; Specify bank 1
                                   (0590)     asr     a                       ; Store in carry flag
07CA: 50 03    MOV   A,3           (0591)                                     ; Bank 1 table address:
07CC: 57 E4    MOV   X,228         (0592)     mov     A, >UnloadConfigTBL_receiver_config_Bank1
07CE: 7C 07 E9 LCALL 0x07E9        (0593)     mov     X, <UnloadConfigTBL_receiver_config_Bank1
                                   (0594)     lcall   LoadConfig              ; Unload the bank 1 values
07D1: 50 01    MOV   A,1           (0595) 
07D3: 67       ASR   A             (0596) 	M8C_SetBank1
                                   (0597) ; writing AnalogColumnClockSelect register
07D4: 50 04    MOV   A,4           (0598) 	and		reg[60h], ~30h
07D6: 57 65    MOV   X,101         (0599) ; writing AnalogColumnInputSelect register
07D8: 7C 07 E9 LCALL 0x07E9        (0600) 	M8C_SetBank0
                                   (0601) 	and		reg[60h], ~3ch
07DB: 71 10    OR    F,16          (0602) 	or		reg[60h], 28h
07DD: 70 EF    AND   F,239         (0603) ; writing Row_0_InputMux register
                                   (0604) 	and		reg[b0h], ~30h
07DF: 62 D0 00 MOV   REG[208],0    (0605) 	or		reg[b0h], 10h
07E2: 55 02 00 MOV   [2],0         (0606) ; writing Row_0_OutputDrive_0 register
07E5: 70 EF    AND   F,239         (0607) 	and		reg[b5h], ~10h
07E7: 20       POP   X             (0608) 	or		reg[b5h], 10h
                                   (0609) ; writing Row_1_InputMux register
                                   (0610) 	and		reg[b8h], ~33h
07E8: 7F       RET                 (0611) 	or		reg[b8h],  2h
                                   (0612) ; writing Port_1_DriveMode_2 register
                                   (0613) 	and		reg[ 7h], ~ 1h
                                   (0614) ; writing Port_1_DriveMode_1 register
                                   (0615) 	M8C_SetBank1
                                   (0616) 	and		reg[ 5h], ~ 1h
                                   (0617) ; writing Port_1_DriveMode_0 register
                                   (0618) 	and		reg[ 4h], ~ 1h
                                   (0619) 	or		reg[ 4h],  1h
                                   (0620) ; writing Port_0_DriveMode_1 register
                                   (0621) 	and		reg[ 1h], ~ 2h
                                   (0622) ; writing Port_0_DriveMode_0 register
                                   (0623) 	and		reg[ 0h], ~ 2h
                                   (0624) 	or		reg[ 0h],  2h
                                   (0625) 	M8C_SetBank0
                                   (0626) ; clear config active bit
                                   (0627) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0628) 	and		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], ~receiver_config_BIT
                                   (0629)     M8C_SetBank0                    ; Force return to bank 0
                                   (0630) 	pop		x
                                   (0631) 
                                   (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
07E9: 38 02    ADD   SP,2          (0633)     ret
07EB: 10       PUSH  X             (0634) 
07EC: 08       PUSH  A             (0635) ;---------------------------------------------------------------------------
07ED: 4F       MOV   X,SP          (0636) ; Unload Configuration Total
07EE: 56 FC 00 MOV   [X-4],0       (0637) ;
07F1: D0 04    JNC   0x07F6        (0638) ;    Reset configuration registers for Total
07F3: 56 FC 01 MOV   [X-4],1       (0639) ;    to their values as initially configured.
                                   (0640) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
07F6: 18       POP   A             (0641) ;
07F7: 20       POP   X             (0642) ;       INPUTS: None.
                                   (0643) ;      RETURNS: Nothing.
                                   (0644) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
07F8: 70 EF    AND   F,239         (0645) ;               modified as may the Page Pointer registers!
07FA: 62 E3 00 MOV   REG[227],0    (0646) ;               In the large memory model currently only the page
07FD: 10       PUSH  X             (0647) ;               pointer registers listed below are modified.  This does
07FE: 08       PUSH  A             (0648) ;               not guarantee that in future implementations of this
07FF: 28       ROMX                (0649) ;               function other page pointer registers will not be
0800: 39 FF    CMP   A,255         (0650) ;               modified.
0802: A0 1F    JZ    0x0822        (0651) ;          
0804: 4F       MOV   X,SP          (0652) ;               Page Pointer Registers Modified: 
0805: 48 FC 01 TST   [X-4],1       (0653) ;               CUR_PP
0808: A0 03    JZ    0x080C        (0654) ;
080A: 71 10    OR    F,16          (0655) _UnloadConfig_Total:
                                   (0656)  UnloadConfig_Total:
080C: 54 FD    MOV   [X-3],A       (0657)     RAM_PROLOGUE RAM_USE_CLASS_4
080E: 18       POP   A             (0658) 
080F: 20       POP   X             (0659) 	push	x
0810: 75       INC   X             (0660)     M8C_SetBank0                    ; Force bank 0
0811: 09 00    ADC   A,0           (0661)     mov     a, 0                    ; Specify bank 0
0813: 10       PUSH  X             (0662)     asr     a                       ; Store in carry flag
0814: 08       PUSH  A             (0663)                                     ; Bank 0 table address:
0815: 28       ROMX                (0664)     mov     A, >UnloadConfigTBL_Total_Bank0
0816: 4F       MOV   X,SP          (0665)     mov     X, <UnloadConfigTBL_Total_Bank0
0817: 59 FD    MOV   X,[X-3]       (0666)     lcall   LoadConfig              ; Unload the bank 0 values
0819: 61 00    MOV   REG[X+0],A    (0667) 
081B: 18       POP   A             (0668)     mov     a, 1                    ; Specify bank 1
081C: 20       POP   X             (0669)     asr     a                       ; Store in carry flag
081D: 75       INC   X             (0670)                                     ; Bank 1 table address:
081E: 09 00    ADC   A,0           (0671)     mov     A, >UnloadConfigTBL_Total_Bank1
0820: 8F D7    JMP   0x07F8        (0672)     mov     X, <UnloadConfigTBL_Total_Bank1
                                   (0673)     lcall   LoadConfig              ; Unload the bank 1 values
0822: 38 FC    ADD   SP,252        (0674) 
0824: 70 3F    AND   F,63
0826: 71 C0    OR    F,192         (0675) 	M8C_SetBank1
0829: 43 E1 02 OR    REG[225],2    (0676) 	M8C_SetBank0

FILE: lib\tx_timeout.asm
                                   (0102) ;;*****************************************************************************
082C: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: TX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "TX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
082D: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
0830: 7F       RET                 (0131) export  TX_TIMEOUT_EnableInt
                                   (0132) export _TX_TIMEOUT_EnableInt
                                   (0133) export  TX_TIMEOUT_DisableInt
                                   (0134) export _TX_TIMEOUT_DisableInt
                                   (0135) export  TX_TIMEOUT_Start
                                   (0136) export _TX_TIMEOUT_Start
                                   (0137) export  TX_TIMEOUT_Stop
                                   (0138) export _TX_TIMEOUT_Stop
                                   (0139) export  TX_TIMEOUT_WritePeriod
                                   (0140) export _TX_TIMEOUT_WritePeriod
                                   (0141) export  TX_TIMEOUT_WriteCompareValue
                                   (0142) export _TX_TIMEOUT_WriteCompareValue
                                   (0143) export  TX_TIMEOUT_wReadCompareValue
                                   (0144) export _TX_TIMEOUT_wReadCompareValue
                                   (0145) export  TX_TIMEOUT_wReadTimer
                                   (0146) export _TX_TIMEOUT_wReadTimer
                                   (0147) export  TX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _TX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
0831: 43 23 01 OR    REG[35],1     (0157) export _wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
0834: 7F       RET                 (0159) export  wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA transmitter_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: TX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
0835: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
0838: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  TX_TIMEOUT_EnableInt:
                                   (0200) _TX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    TX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: TX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
0839: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
083B: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
083C: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
083E: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  TX_TIMEOUT_DisableInt:
                                   (0228) _TX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    TX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: TX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
083F: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
0841: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
0842: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
0844: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  TX_TIMEOUT_Start:
                                   (0256) _TX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    TX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: TX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
0845: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0847: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
0848: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
084A: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  TX_TIMEOUT_Stop:
                                   (0284) _TX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    TX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  TX_TIMEOUT_WritePeriod:
                                   (0313) _TX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[TX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[TX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: TX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call TX_TIMEOUT_Stop to disable).
084B: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
084C: 38 03    ADD   SP,3          (0334) ;
084E: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
0850: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
0851: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
0853: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
0854: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
0856: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0857: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
0859: 5D 26    MOV   A,REG[38]     (0343) ;
085B: 54 01    MOV   [X+1],A       (0344)  TX_TIMEOUT_WriteCompareValue:
085D: 5D 22    MOV   A,REG[34]     (0345) _TX_TIMEOUT_WriteCompareValue:
085F: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
0861: 50 00    MOV   A,0           (0347)    mov   reg[TX_TIMEOUT_COMPARE_LSB_REG], A
0863: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
0866: A0 03    JZ    0x086A        (0349)    mov   reg[TX_TIMEOUT_COMPARE_MSB_REG], A
0868: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
086A: 54 00    MOV   [X+0],A       (0352) 
086C: 70 FE    AND   F,254         (0353) .ENDSECTION
086E: 41 23 FE AND   REG[35],254   (0354) 
0871: 18       POP   A             (0355) 
0872: 60 26    MOV   REG[38],A     (0356) .SECTION
0874: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
0875: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: TX_TIMEOUT_wReadCompareValue
0877: 18       POP   A             (0359) ;
0878: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
087A: 18       POP   A             (0361) ;     Reads the Compare registers.
087B: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
087C: 70 3F    AND   F,63
087E: 71 C0    OR    F,192         (0363) ;
0880: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  TX_TIMEOUT_wReadCompareValue:
                                   (0374) _TX_TIMEOUT_wReadCompareValue:
                                   (0375)  wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[TX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[TX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: TX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
0881: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
0883: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
0885: 5C       MOV   X,A           (0409) ;
0886: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
088A: 43 E1 04 OR    REG[225],4    (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\tx_repeater.asm
                                   (0109) ;;*****************************************************************************
088D: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TX_REPEATER.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TX_REPEATER.inc"
088E: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
0891: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TX_REPEATER_SetTxIntMode
                                   (0143) export  _TX_REPEATER_SetTxIntMode
                                   (0144) export   TX_REPEATER_EnableInt
                                   (0145) export  _TX_REPEATER_EnableInt
                                   (0146) export   TX_REPEATER_DisableInt
                                   (0147) export  _TX_REPEATER_DisableInt
                                   (0148) export   TX_REPEATER_Start
                                   (0149) export  _TX_REPEATER_Start
                                   (0150) export   TX_REPEATER_Stop
                                   (0151) export  _TX_REPEATER_Stop
                                   (0152) export   TX_REPEATER_SendData
                                   (0153) export  _TX_REPEATER_SendData
                                   (0154) export   TX_REPEATER_bReadTxStatus
                                   (0155) export  _TX_REPEATER_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTX_REPEATER_ReadTxStatus
                                   (0160) export  _bTX_REPEATER_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TX_REPEATER_PutSHexByte
                                   (0166) export _TX_REPEATER_PutSHexByte
                                   (0167) export  TX_REPEATER_PutSHexInt
                                   (0168) export _TX_REPEATER_PutSHexInt
                                   (0169) 
0892: 71 10    OR    F,16          (0170) export  TX_REPEATER_CPutString
0894: 21 01    AND   A,1           (0171) export _TX_REPEATER_CPutString
0896: A0 07    JZ    0x089E        (0172) export  TX_REPEATER_PutString
0898: 43 28 10 OR    REG[40],16    (0173) export _TX_REPEATER_PutString
089B: 70 EF    AND   F,239         (0174) export  TX_REPEATER_PutChar
                                   (0175) export _TX_REPEATER_PutChar
089D: 7F       RET                 (0176) export  TX_REPEATER_Write
                                   (0177) export _TX_REPEATER_Write
                                   (0178) export  TX_REPEATER_CWrite
089E: 41 28 EF AND   REG[40],239   (0179) export _TX_REPEATER_CWrite
08A1: 70 EF    AND   F,239         (0180) export  TX_REPEATER_PutCRLF
                                   (0181) export _TX_REPEATER_PutCRLF 
08A3: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TX_REPEATER_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
08A4: 29 01    OR    A,1           (0211) ;    functions.
08A6: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TX_REPEATER_EnableInt:
08A8: 7F       RET                 (0214) _TX_REPEATER_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TX_REPEATER_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
08A9: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
08AC: 7F       RET                 (0242)  TX_REPEATER_DisableInt:
                                   (0243) _TX_REPEATER_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TX_REPEATER_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
08AD: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
08AF: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TX_REPEATER_SetTxIntMode:
                                   (0276) _TX_REPEATER_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TX_REPEATER_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TX_REPEATER_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TX_REPEATER_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_REPEATER_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
08B0: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
08B2: 7F       RET                 (0303) ;
08B3: 30       HALT  
08B4: 31 32    XOR   A,50
08B6: 33 34    XOR   A,[X+52]
08B8: 35 36    XOR   [X+54],A
08BA: 37 38 39 XOR   [X+56],57
08BD: 41 42 43 AND   REG[66],67
08C0: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TX_REPEATER_Start:
                                   (0317) _TX_REPEATER_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TX_REPEATER_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TX_REPEATER_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
08C3: 08       PUSH  A             (0335) ;
08C4: 67       ASR   A             (0336) ;  RETURNS:  none
08C5: 67       ASR   A             (0337) ;
08C6: 67       ASR   A             (0338) ;  SIDE EFFECTS:
08C7: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
08C8: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
08CA: FF E7    INDEX 0x08B3        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
08CC: 90 0F    CALL  0x08DD        (0342) ;    responsibility to perserve their values across calls to fastcall16 
08CE: 18       POP   A             (0343) ;    functions.
08CF: 21 0F    AND   A,15          (0344) ;
08D1: FF E0    INDEX 0x08B3        (0345)  TX_REPEATER_Stop:
08D3: 90 08    CALL  0x08DD        (0346) _TX_REPEATER_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
08D5: 7F       RET                 (0348)    and   REG[TX_REPEATER_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TX_REPEATER_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TX_REPEATER_SendData:
                                   (0375) _TX_REPEATER_SendData:
08D6: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
08D7: 9F EA    CALL  0x08C3        (0377)    mov REG[TX_REPEATER_TX_BUFFER_REG], A
08D9: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
08DA: 9F E7    CALL  0x08C3        (0379)    ret
                                   (0380) .ENDSECTION
08DC: 7F       RET                 (0381) 
08DD: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TX_REPEATER_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TX_REPEATER_bReadTxStatus:
                                   (0405) _TX_REPEATER_bReadTxStatus:
                                   (0406)  bTX_REPEATER_ReadTxStatus:
                                   (0407) _bTX_REPEATER_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TX_REPEATER_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
08E0: AF FC    JZ    0x08DD        (0416) ;  FUNCTION NAME: TX_REPEATER_PutSHexByte
08E2: 60 29    MOV   REG[41],A
                                   (0417) ;
08E4: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TX_REPEATER_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TX_REPEATER_PutSHexByte:
                                   (0441) _TX_REPEATER_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0450)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0454)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
08E5: 70 BF    AND   F,191         (0456)     ret
08E7: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
08E9: 52 00    MOV   A,[X+0]       (0459) .SECTION
08EB: A0 06    JZ    0x08F2        (0460) ;-----------------------------------------------------------------------------
08ED: 9F EE    CALL  0x08DD        (0461) ;  FUNCTION NAME: TX_REPEATER_PutSHexInt
08EF: 75       INC   X             (0462) ;
08F0: 8F F8    JMP   0x08E9        (0463) ;  DESCRIPTION:
08F2: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
08F4: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
08F6: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TX_REPEATER_PutSHexInt:
                                   (0482) _TX_REPEATER_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TX_REPEATER_PutSHexByte      ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TX_REPEATER_PutSHexByte      ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TX_REPEATER_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
08F7: 70 BF    AND   F,191         (0503) ;  RETURNS:
08F9: 62 D3 07 MOV   REG[211],7    (0504) ;     none
08FC: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
08FD: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
08FF: A0 1A    JZ    0x091A        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
0901: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
0903: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TX_REPEATER_CONTROL_REG], TX_REPEATER_TX_BUFFER_EMPTY    ; Check Tx Status
0905: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
0907: 60 D3    MOV   REG[211],A    (0517)    mov REG[TX_REPEATER_TX_BUFFER_REG], @Source    ; Write data to Tx Port
0909: 52 00    MOV   A,[X+0]       (0518)    endm
090B: 49 2B 10 TST   REG[43],16
090E: AF FC    JZ    0x090B        (0519) 
0910: 60 29    MOV   REG[41],A
0912: 4F       MOV   X,SP          (0520) 
0913: 62 D3 07 MOV   REG[211],7    (0521)  TX_REPEATER_PutChar:
0916: 77 FD    INC   [X-3]         (0522) _TX_REPEATER_PutChar:
0918: 8F E4    JMP   0x08FD        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
091A: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
091C: 71 C0    OR    F,192         (0526)    ret
091E: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TX_REPEATER_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TX_REPEATER_PutString:
                                   (0563) _TX_REPEATER_PutString:
091F: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
0920: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
0923: B0 06    JNZ   0x092A        (0569)    call  TX_REPEATER_PutChar                ; Send character to Tx port
0925: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
0928: A0 1D    JZ    0x0946        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
092A: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
092B: 52 FC    MOV   A,[X-4]       (0575)    ret
092D: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
092F: 28       ROMX                (0577) 
0930: 49 2B 10 TST   REG[43],16
0933: AF FC    JZ    0x0930        (0578) .SECTION
0935: 60 29    MOV   REG[41],A
0937: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TX_REPEATER_Write
0938: 07 FD 01 ADD   [X-3],1       (0581) ;
093B: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
093E: 17 FB 01 SUB   [X-5],1       (0585) ;
0941: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
0944: 8F DB    JMP   0x0920        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
0946: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TX_REPEATER_Write:
                                   (0610) _TX_REPEATER_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
0947: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
0948: 10       PUSH  X             (0622)    ENDIF
0949: 28       ROMX                (0623) 
094A: A0 0B    JZ    0x0956        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
094C: 9F 8F    CALL  0x08DD        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
094E: 20       POP   X             (0626)    mov   A,[X]
094F: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
0950: 75       INC   X             (0628)    mov   X, SP
0951: DF F5    JNC   0x0947        (0629)    RAM_SETPAGE_IDX2STK
0953: 74       INC   A             (0630)    inc   [X+STR_LSB]
0954: 8F F2    JMP   0x0947        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
0956: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
0958: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TX_REPEATER_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
0959: 50 0D    MOV   A,13          (0663) ;
095B: 9F 80    CALL  0x08DD        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
095D: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
095F: 9F 7C    CALL  0x08DD        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
0963: 43 E1 04 OR    REG[225],4    (0668) 

FILE: lib\transmit.asm
                                   (0109) ;;*****************************************************************************
0966: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TRANSMIT.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TRANSMIT.inc"
0967: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
096A: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TRANSMIT_SetTxIntMode
                                   (0143) export  _TRANSMIT_SetTxIntMode
                                   (0144) export   TRANSMIT_EnableInt
                                   (0145) export  _TRANSMIT_EnableInt
                                   (0146) export   TRANSMIT_DisableInt
                                   (0147) export  _TRANSMIT_DisableInt
                                   (0148) export   TRANSMIT_Start
                                   (0149) export  _TRANSMIT_Start
                                   (0150) export   TRANSMIT_Stop
                                   (0151) export  _TRANSMIT_Stop
                                   (0152) export   TRANSMIT_SendData
                                   (0153) export  _TRANSMIT_SendData
                                   (0154) export   TRANSMIT_bReadTxStatus
                                   (0155) export  _TRANSMIT_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTRANSMIT_ReadTxStatus
                                   (0160) export  _bTRANSMIT_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TRANSMIT_PutSHexByte
                                   (0166) export _TRANSMIT_PutSHexByte
                                   (0167) export  TRANSMIT_PutSHexInt
                                   (0168) export _TRANSMIT_PutSHexInt
                                   (0169) 
096B: 71 10    OR    F,16          (0170) export  TRANSMIT_CPutString
096D: 21 01    AND   A,1           (0171) export _TRANSMIT_CPutString
096F: A0 07    JZ    0x0977        (0172) export  TRANSMIT_PutString
0971: 43 28 10 OR    REG[40],16    (0173) export _TRANSMIT_PutString
0974: 70 EF    AND   F,239         (0174) export  TRANSMIT_PutChar
                                   (0175) export _TRANSMIT_PutChar
0976: 7F       RET                 (0176) export  TRANSMIT_Write
                                   (0177) export _TRANSMIT_Write
                                   (0178) export  TRANSMIT_CWrite
0977: 41 28 EF AND   REG[40],239   (0179) export _TRANSMIT_CWrite
097A: 70 EF    AND   F,239         (0180) export  TRANSMIT_PutCRLF
                                   (0181) export _TRANSMIT_PutCRLF 
097C: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TRANSMIT_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
097D: 29 01    OR    A,1           (0211) ;    functions.
097F: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TRANSMIT_EnableInt:
0981: 7F       RET                 (0214) _TRANSMIT_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TRANSMIT_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
0982: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
0985: 7F       RET                 (0242)  TRANSMIT_DisableInt:
                                   (0243) _TRANSMIT_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TRANSMIT_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
0986: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
0988: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TRANSMIT_SetTxIntMode:
                                   (0276) _TRANSMIT_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TRANSMIT_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TRANSMIT_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TRANSMIT_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TRANSMIT_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
0989: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
098B: 7F       RET                 (0303) ;
098C: 30       HALT  
098D: 31 32    XOR   A,50
098F: 33 34    XOR   A,[X+52]
0991: 35 36    XOR   [X+54],A
0993: 37 38 39 XOR   [X+56],57
0996: 41 42 43 AND   REG[66],67
0999: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TRANSMIT_Start:
                                   (0317) _TRANSMIT_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TRANSMIT_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TRANSMIT_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
099C: 08       PUSH  A             (0335) ;
099D: 67       ASR   A             (0336) ;  RETURNS:  none
099E: 67       ASR   A             (0337) ;
099F: 67       ASR   A             (0338) ;  SIDE EFFECTS:
09A0: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
09A1: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
09A3: FF E7    INDEX 0x098C        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
09A5: 90 0F    CALL  0x09B6        (0342) ;    responsibility to perserve their values across calls to fastcall16 
09A7: 18       POP   A             (0343) ;    functions.
09A8: 21 0F    AND   A,15          (0344) ;
09AA: FF E0    INDEX 0x098C        (0345)  TRANSMIT_Stop:
09AC: 90 08    CALL  0x09B6        (0346) _TRANSMIT_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
09AE: 7F       RET                 (0348)    and   REG[TRANSMIT_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TRANSMIT_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TRANSMIT_SendData:
                                   (0375) _TRANSMIT_SendData:
09AF: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
09B0: 9F EA    CALL  0x099C        (0377)    mov REG[TRANSMIT_TX_BUFFER_REG], A
09B2: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
09B3: 9F E7    CALL  0x099C        (0379)    ret
                                   (0380) .ENDSECTION
09B5: 7F       RET                 (0381) 
09B6: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TRANSMIT_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TRANSMIT_bReadTxStatus:
                                   (0405) _TRANSMIT_bReadTxStatus:
                                   (0406)  bTRANSMIT_ReadTxStatus:
                                   (0407) _bTRANSMIT_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TRANSMIT_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
09B9: AF FC    JZ    0x09B6        (0416) ;  FUNCTION NAME: TRANSMIT_PutSHexByte
09BB: 60 29    MOV   REG[41],A
                                   (0417) ;
09BD: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TRANSMIT_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TRANSMIT_PutSHexByte:
                                   (0441) _TRANSMIT_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0450)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0454)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
09BE: 70 BF    AND   F,191         (0456)     ret
09C0: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
09C2: 52 00    MOV   A,[X+0]       (0459) .SECTION
09C4: A0 06    JZ    0x09CB        (0460) ;-----------------------------------------------------------------------------
09C6: 9F EE    CALL  0x09B6        (0461) ;  FUNCTION NAME: TRANSMIT_PutSHexInt
09C8: 75       INC   X             (0462) ;
09C9: 8F F8    JMP   0x09C2        (0463) ;  DESCRIPTION:
09CB: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
09CD: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
09CF: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TRANSMIT_PutSHexInt:
                                   (0482) _TRANSMIT_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TRANSMIT_PutSHexByte         ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TRANSMIT_PutSHexByte         ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TRANSMIT_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
09D0: 70 BF    AND   F,191         (0503) ;  RETURNS:
09D2: 62 D3 07 MOV   REG[211],7    (0504) ;     none
09D5: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
09D6: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
09D8: A0 1A    JZ    0x09F3        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
09DA: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
09DC: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TRANSMIT_CONTROL_REG], TRANSMIT_TX_BUFFER_EMPTY    ; Check Tx Status
09DE: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
09E0: 60 D3    MOV   REG[211],A    (0517)    mov REG[TRANSMIT_TX_BUFFER_REG], @Source    ; Write data to Tx Port
09E2: 52 00    MOV   A,[X+0]       (0518)    endm
09E4: 49 2B 10 TST   REG[43],16
09E7: AF FC    JZ    0x09E4        (0519) 
09E9: 60 29    MOV   REG[41],A
09EB: 4F       MOV   X,SP          (0520) 
09EC: 62 D3 07 MOV   REG[211],7    (0521)  TRANSMIT_PutChar:
09EF: 77 FD    INC   [X-3]         (0522) _TRANSMIT_PutChar:
09F1: 8F E4    JMP   0x09D6        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
09F3: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
09F5: 71 C0    OR    F,192         (0526)    ret
09F7: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TRANSMIT_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TRANSMIT_PutString:
                                   (0563) _TRANSMIT_PutString:
09F8: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
09F9: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
09FC: B0 06    JNZ   0x0A03        (0569)    call  TRANSMIT_PutChar                   ; Send character to Tx port
09FE: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
0A01: A0 1D    JZ    0x0A1F        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
0A03: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
0A04: 52 FC    MOV   A,[X-4]       (0575)    ret
0A06: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
0A08: 28       ROMX                (0577) 
0A09: 49 2B 10 TST   REG[43],16
0A0C: AF FC    JZ    0x0A09        (0578) .SECTION
0A0E: 60 29    MOV   REG[41],A
0A10: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TRANSMIT_Write
0A11: 07 FD 01 ADD   [X-3],1       (0581) ;
0A14: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
0A17: 17 FB 01 SUB   [X-5],1       (0585) ;
0A1A: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
0A1D: 8F DB    JMP   0x09F9        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
0A1F: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TRANSMIT_Write:
                                   (0610) _TRANSMIT_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
0A20: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
0A21: 10       PUSH  X             (0622)    ENDIF
0A22: 28       ROMX                (0623) 
0A23: A0 0B    JZ    0x0A2F        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
0A25: 9F 8F    CALL  0x09B6        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
0A27: 20       POP   X             (0626)    mov   A,[X]
0A28: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
0A29: 75       INC   X             (0628)    mov   X, SP
0A2A: DF F5    JNC   0x0A20        (0629)    RAM_SETPAGE_IDX2STK
0A2C: 74       INC   A             (0630)    inc   [X+STR_LSB]
0A2D: 8F F2    JMP   0x0A20        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
0A2F: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
0A31: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TRANSMIT_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
0A32: 50 0D    MOV   A,13          (0663) ;
0A34: 9F 80    CALL  0x09B6        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
0A36: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
0A38: 9F 7C    CALL  0x09B6        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
0A3B: 43 E1 02 OR    REG[225],2    (0668) 

FILE: lib\rx_timeout.asm
                                   (0102) ;;*****************************************************************************
0A3E: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: RX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "RX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
0A3F: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
0A42: 7F       RET                 (0131) export  RX_TIMEOUT_EnableInt
                                   (0132) export _RX_TIMEOUT_EnableInt
                                   (0133) export  RX_TIMEOUT_DisableInt
                                   (0134) export _RX_TIMEOUT_DisableInt
                                   (0135) export  RX_TIMEOUT_Start
                                   (0136) export _RX_TIMEOUT_Start
                                   (0137) export  RX_TIMEOUT_Stop
                                   (0138) export _RX_TIMEOUT_Stop
                                   (0139) export  RX_TIMEOUT_WritePeriod
                                   (0140) export _RX_TIMEOUT_WritePeriod
                                   (0141) export  RX_TIMEOUT_WriteCompareValue
                                   (0142) export _RX_TIMEOUT_WriteCompareValue
                                   (0143) export  RX_TIMEOUT_wReadCompareValue
                                   (0144) export _RX_TIMEOUT_wReadCompareValue
                                   (0145) export  RX_TIMEOUT_wReadTimer
                                   (0146) export _RX_TIMEOUT_wReadTimer
                                   (0147) export  RX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _RX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
0A43: 43 23 01 OR    REG[35],1     (0157) export _wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
0A46: 7F       RET                 (0159) export  wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA receiver_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: RX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
0A47: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
0A4A: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  RX_TIMEOUT_EnableInt:
                                   (0200) _RX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    RX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: RX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
0A4B: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
0A4D: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
0A4E: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
0A50: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  RX_TIMEOUT_DisableInt:
                                   (0228) _RX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    RX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: RX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
0A51: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
0A53: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
0A54: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
0A56: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  RX_TIMEOUT_Start:
                                   (0256) _RX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    RX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: RX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
0A57: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0A59: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
0A5A: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
0A5C: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  RX_TIMEOUT_Stop:
                                   (0284) _RX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    RX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: RX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  RX_TIMEOUT_WritePeriod:
                                   (0313) _RX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[RX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[RX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: RX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call RX_TIMEOUT_Stop to disable).
0A5D: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
0A5E: 38 03    ADD   SP,3          (0334) ;
0A60: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
0A62: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
0A63: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
0A65: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
0A66: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
0A68: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0A69: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
0A6B: 5D 26    MOV   A,REG[38]     (0343) ;
0A6D: 54 01    MOV   [X+1],A       (0344)  RX_TIMEOUT_WriteCompareValue:
0A6F: 5D 22    MOV   A,REG[34]     (0345) _RX_TIMEOUT_WriteCompareValue:
0A71: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
0A73: 50 00    MOV   A,0           (0347)    mov   reg[RX_TIMEOUT_COMPARE_LSB_REG], A
0A75: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
0A78: A0 03    JZ    0x0A7C        (0349)    mov   reg[RX_TIMEOUT_COMPARE_MSB_REG], A
0A7A: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
0A7C: 54 00    MOV   [X+0],A       (0352) 
0A7E: 70 FE    AND   F,254         (0353) .ENDSECTION
0A80: 41 23 FE AND   REG[35],254   (0354) 
0A83: 18       POP   A             (0355) 
0A84: 60 26    MOV   REG[38],A     (0356) .SECTION
0A86: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
0A87: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: RX_TIMEOUT_wReadCompareValue
0A89: 18       POP   A             (0359) ;
0A8A: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
0A8C: 18       POP   A             (0361) ;     Reads the Compare registers.
0A8D: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
0A8E: 70 3F    AND   F,63
0A90: 71 C0    OR    F,192         (0363) ;
0A92: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  RX_TIMEOUT_wReadCompareValue:
                                   (0374) _RX_TIMEOUT_wReadCompareValue:
                                   (0375)  wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[RX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[RX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: RX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
0A93: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
0A95: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
0A97: 5C       MOV   X,A           (0409) ;
0A98: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
0A9B: 08       PUSH  A             (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\receiveint.asm
0A9C: 10       PUSH  X             (0104) ;;*****************************************************************************
0A9D: 5D D3    MOV   A,REG[211]
                                   (0105) ;;*****************************************************************************
                                   (0106) ;;  FILENAME: RECEIVEINT.asm
0A9F: 08       PUSH  A             (0107) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0108) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0109) ;;
0AA0: 58 01    MOV   X,[1]         (0110) ;;  DESCRIPTION: RX8 Interrupt Service Routine.
0AA2: 5D 2B    MOV   A,REG[43]     (0111) ;;-----------------------------------------------------------------------------
0AA4: 08       PUSH  A             (0112) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0113) ;;*****************************************************************************
0AA5: 21 08    AND   A,8           (0114) ;;*****************************************************************************
0AA7: B0 04    JNZ   0x0AAC        (0115) 
0AA9: 18       POP   A             (0116) include "m8c.inc"
0AAA: 80 62    JMP   0x0B0D        (0117) include "memory.inc"
                                   (0118) include "RECEIVE.inc"
                                   (0119) 
                                   (0120) 
0AAC: 18       POP   A             (0121) ;-----------------------------------------------
                                   (0122) ;  Global Symbols
                                   (0123) ;-----------------------------------------------
0AAD: 21 E0    AND   A,224         (0124) export  _RECEIVE_ISR
0AAF: A0 12    JZ    0x0AC2        (0125) 
                                   (0126) 
0AB1: 2C 00    OR    [0],A         (0127) IF (RECEIVE_RXBUF_ENABLE)
                                   (0128) export  RECEIVE_aRxBuffer
0AB3: 49 2A 00 TST   REG[42],0     (0129) export _RECEIVE_aRxBuffer
                                   (0130) export  RECEIVE_bRxCnt
0AB6: 21 20    AND   A,32          (0131) export _RECEIVE_bRxCnt
0AB8: A0 54    JZ    0x0B0D        (0132) export  RECEIVE_fStatus
                                   (0133) export _RECEIVE_fStatus
                                   (0134) ENDIF
                                   (0135) 
0ABA: 41 2B FE AND   REG[43],254   (0136) 
0ABD: 43 2B 01 OR    REG[43],1     (0137) ;-----------------------------------------------
0AC0: 80 4C    JMP   0x0B0D        (0138) ; Variable Allocation
                                   (0139) ;-----------------------------------------------
                                   (0140) 
                                   (0141) IF (RECEIVE_RXBUF_ENABLE)
0AC2: 5D 2A    MOV   A,REG[42]     (0142) AREA InterruptRAM(RAM,REL,CON)
                                   (0143)  RECEIVE_fStatus:
                                   (0144) _RECEIVE_fStatus:      BLK  1
0AC4: 47 00 01 TST   [0],1         (0145)  RECEIVE_bRxCnt:
0AC7: B0 45    JNZ   0x0B0D        (0146) _RECEIVE_bRxCnt:       BLK  1
                                   (0147) AREA RECEIVE_RAM(RAM,REL,CON)
0AC9: 39 00    CMP   A,0           (0148)  RECEIVE_aRxBuffer:    
0ACB: B0 14    JNZ   0x0AE0        (0149) _RECEIVE_aRxBuffer:    BLK RECEIVE_RX_BUFFER_SIZE
0ACD: 2E 00 01 OR    [0],1         (0150) ENDIF
                                   (0151) 
0AD0: 62 D3 00 MOV   REG[211],0    (0152) 
0AD3: 70 3F    AND   F,63
0AD5: 71 80    OR    F,128         (0153) AREA InterruptRAM(RAM,REL,CON)
0AD7: 56 45 00 MOV   [X+69],0      (0154) 
0ADA: 70 3F    AND   F,63
0ADC: 71 00    OR    F,0           (0155) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0ADE: 80 2E    JMP   0x0B0D        (0156) ;---------------------------------------------------
                                   (0157) ; Insert your custom declarations below this banner
                                   (0158) ;---------------------------------------------------
                                   (0159) 
                                   (0160) ;------------------------
                                   (0161) ; Includes
0AE0: 39 01    CMP   A,1           (0162) ;------------------------
0AE2: C0 2A    JC    0x0B0D        (0163) 
                                   (0164) 	
                                   (0165) ;------------------------
                                   (0166) ;  Constant Definitions
0AE4: 3C 01 3F CMP   [1],63        (0167) ;------------------------
0AE7: C0 14    JC    0x0AFC        (0168) 
0AE9: 2E 00 10 OR    [0],16        (0169) 
                                   (0170) ;------------------------
0AEC: 62 D3 00 MOV   REG[211],0    (0171) ; Variable Allocation
0AEF: 70 3F    AND   F,63
0AF1: 71 80    OR    F,128         (0172) ;------------------------
0AF3: 56 45 00 MOV   [X+69],0      (0173) 
0AF6: 70 3F    AND   F,63
0AF8: 71 00    OR    F,0           (0174) 
0AFA: 80 12    JMP   0x0B0D        (0175) ;---------------------------------------------------
                                   (0176) ; Insert your custom declarations above this banner
                                   (0177) ;---------------------------------------------------
                                   (0178) ;@PSoC_UserCode_END@ (Do not change this line.)
0AFC: 75       INC   X             (0179) 
0AFD: 5A 01    MOV   [1],X         (0180) 
0AFF: 79       DEC   X             (0181) AREA UserModules (ROM, REL)
                                   (0182) 
0B00: 62 D3 00 MOV   REG[211],0    (0183) ;-----------------------------------------------------------------------------
0B03: 70 3F    AND   F,63
0B05: 71 80    OR    F,128         (0184) ;  FUNCTION NAME: _RECEIVE_ISR
0B07: 54 45    MOV   [X+69],A      (0185) ;
0B09: 70 3F    AND   F,63
0B0B: 71 00    OR    F,0           (0186) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
0B0D: 18       POP   A
                                   (0187) ;
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) 
0B0E: 60 D3    MOV   REG[211],A    (0191) _RECEIVE_ISR:
                                   (0192) 
                                   (0193)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                   (0194)    ;---------------------------------------------------
0B10: 20       POP   X             (0195)    ; Insert your custom code below this banner
0B11: 18       POP   A             (0196)    ;---------------------------------------------------
                                   (0197)    ;   NOTE: interrupt service routines must preserve
                                   (0198)    ;   the values of the A and X CPU registers.
                                   (0199) 
                                   (0200)    ;---------------------------------------------------
0B13: 43 E1 04 OR    REG[225],4    (0201)    ; Insert your custom code above this banner

FILE: lib\receive.asm
                                   (0121) ;;*****************************************************************************
0B16: 7F       RET                 (0122) ;;*****************************************************************************
                                   (0123) ;;  FILENAME: RECEIVE.asm
                                   (0124) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0125) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0126) ;;
                                   (0127) ;;  DESCRIPTION: RX8 User Module software implementation file
                                   (0128) ;;               for 22/24/25/26/27xxx PSoC family of devices.
                                   (0129) ;;
                                   (0130) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0131) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0132) ;;        This means it is the caller's responsibility to preserve any values
                                   (0133) ;;        in the X and A registers that are still needed after the API functions
                                   (0134) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0135) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0136) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0137) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0138) ;;-----------------------------------------------------------------------------
                                   (0139) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0140) ;;*****************************************************************************
                                   (0141) ;;*****************************************************************************
                                   (0142) 
                                   (0143) ;-----------------------------------------------
                                   (0144) ; include instance specific register definitions
                                   (0145) ;-----------------------------------------------
                                   (0146) include "m8c.inc"
                                   (0147) include "memory.inc"
                                   (0148) include "RECEIVE.inc"
0B17: 41 E1 FB AND   REG[225],251  (0149) 
                                   (0150) 
0B1A: 7F       RET                 (0151) ;-----------------------------------------------
                                   (0152) ;  Global Symbols
                                   (0153) ;-----------------------------------------------
                                   (0154) export   RECEIVE_EnableInt
                                   (0155) export  _RECEIVE_EnableInt
                                   (0156) export   RECEIVE_DisableInt
                                   (0157) export  _RECEIVE_DisableInt
                                   (0158) export   RECEIVE_Start
                                   (0159) export  _RECEIVE_Start
                                   (0160) export   RECEIVE_Stop
                                   (0161) export  _RECEIVE_Stop
                                   (0162) export   RECEIVE_bReadRxData
                                   (0163) export  _RECEIVE_bReadRxData
                                   (0164) export   RECEIVE_bReadRxStatus
                                   (0165) export  _RECEIVE_bReadRxStatus
                                   (0166) 
                                   (0167) ; Old function name convension, do not use.
                                   (0168) ; These will be removed in a future release.
                                   (0169) export  bRECEIVE_ReadRxData
                                   (0170) export _bRECEIVE_ReadRxData
                                   (0171) export  bRECEIVE_ReadRxStatus
                                   (0172) export _bRECEIVE_ReadRxStatus
                                   (0173) 
                                   (0174) ;-----------------------------------------------
                                   (0175) ; High Level RX functions
                                   (0176) ;-----------------------------------------------
                                   (0177) 
                                   (0178) export  RECEIVE_cGetChar
0B1B: 29 01    OR    A,1           (0179) export _RECEIVE_cGetChar
0B1D: 60 2B    MOV   REG[43],A     (0180) export  RECEIVE_cReadChar
                                   (0181) export _RECEIVE_cReadChar
0B1F: 7F       RET                 (0182) export  RECEIVE_iReadChar
                                   (0183) export _RECEIVE_iReadChar
                                   (0184) 
                                   (0185) IF (RECEIVE_RXBUF_ENABLE)
                                   (0186) export  RECEIVE_CmdReset
                                   (0187) export _RECEIVE_CmdReset
                                   (0188) export  RECEIVE_bCmdCheck
                                   (0189) export _RECEIVE_bCmdCheck
                                   (0190) export  RECEIVE_bCmdLength
                                   (0191) export _RECEIVE_bCmdLength
                                   (0192) export  RECEIVE_bErrCheck
                                   (0193) export _RECEIVE_bErrCheck
                                   (0194) 
                                   (0195) export  RECEIVE_szGetParam
                                   (0196) export _RECEIVE_szGetParam
                                   (0197) export  RECEIVE_szGetRestOfParams
                                   (0198) export _RECEIVE_szGetRestOfParams
                                   (0199) 
                                   (0200) ;-----------------------------------------------
                                   (0201) ;  Variables
                                   (0202) ;-----------------------------------------------
                                   (0203) 
                                   (0204) AREA RECEIVE_RAM(RAM,REL,CON)
                                   (0205)  ptrParam:   			BLK  1
                                   (0206) 
                                   (0207) ENDIF
0B20: 41 2B FE AND   REG[43],254   (0208) ;-----------------------------------------------
                                   (0209) ;  EQUATES
0B23: 7F       RET                 (0210) ;-----------------------------------------------
                                   (0211) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0212) 
                                   (0213) area UserModules (ROM, REL)
                                   (0214) 
                                   (0215) .SECTION
                                   (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;  FUNCTION NAME: RECEIVE_EnableInt
                                   (0218) ;
                                   (0219) ;  DESCRIPTION:
                                   (0220) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                   (0221) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0222) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0223) ;
                                   (0224) ;-----------------------------------------------------------------------------
                                   (0225) ;
                                   (0226) ;  ARGUMENTS: none
                                   (0227) ;
                                   (0228) ;  RETURNS: none
                                   (0229) ;
                                   (0230) ;  SIDE EFFECTS:
                                   (0231) ;    The A and X registers may be modified by this or future implementations
                                   (0232) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0235) ;    functions.
                                   (0236) ;
                                   (0237)  RECEIVE_EnableInt:
                                   (0238) _RECEIVE_EnableInt:
                                   (0239)    RAM_PROLOGUE RAM_USE_CLASS_1
0B24: 5D 2A    MOV   A,REG[42]     (0240)    M8C_EnableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0241)    RAM_EPILOGUE RAM_USE_CLASS_1
0B26: 7F       RET                 (0242)    ret
                                   (0243) .ENDSECTION
                                   (0244) 
                                   (0245) .SECTION
                                   (0246) ;-----------------------------------------------------------------------------
                                   (0247) ;  FUNCTION NAME: RECEIVE_DisableInt
                                   (0248) ;
                                   (0249) ;  DESCRIPTION:
                                   (0250) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                   (0251) ;     associated with this User Module.
                                   (0252) ;
                                   (0253) ;-----------------------------------------------------------------------------
                                   (0254) ;
                                   (0255) ;  ARGUMENTS:  none
                                   (0256) ;
                                   (0257) ;  RETURNS:  none
                                   (0258) ;
                                   (0259) ;  SIDE EFFECTS:
                                   (0260) ;    The A and X registers may be modified by this or future implementations
                                   (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0264) ;    functions.
                                   (0265) ;
                                   (0266)  RECEIVE_DisableInt:
                                   (0267) _RECEIVE_DisableInt:
                                   (0268)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0269)    M8C_DisableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0270)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0271)    ret
0B27: 5D 2B    MOV   A,REG[43]     (0272) .ENDSECTION
                                   (0273) 
0B29: 7F       RET                 (0274) .SECTION
                                   (0275) ;-----------------------------------------------------------------------------
                                   (0276) ;  FUNCTION NAME: RECEIVE_Start(BYTE bParity)
                                   (0277) ;
                                   (0278) ;  DESCRIPTION:
                                   (0279) ;    Sets the start bit and parity in the Control register of this user module.
                                   (0280) ;
                                   (0281) ;-----------------------------------------------------------------------------
                                   (0282) ;
                                   (0283) ;  ARGUMENTS:
                                   (0284) ;    BYTE bParity - parity of received data.  Use defined masks.
                                   (0285) ;    passed in A register.
                                   (0286) ;
                                   (0287) ;  RETURNS: none
                                   (0288) ;
                                   (0289) ;  SIDE EFFECTS:
                                   (0290) ;    The A and X registers may be modified by this or future implementations
                                   (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0294) ;    functions.
                                   (0295) ;
                                   (0296)  RECEIVE_Start:
                                   (0297) _RECEIVE_Start:
                                   (0298)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0299)    or    A, bfCONTROL_REG_START_BIT
                                   (0300)    mov   REG[RECEIVE_CONTROL_REG], A
                                   (0301)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0302)    ret
                                   (0303) .ENDSECTION
                                   (0304) 
                                   (0305) .SECTION
                                   (0306) ;-----------------------------------------------------------------------------
                                   (0307) ;  FUNCTION NAME: RECEIVE_Stop
                                   (0308) ;
                                   (0309) ;  DESCRIPTION:
                                   (0310) ;     Disables RX8 operation.
0B2A: 49 2B 08 TST   REG[43],8     (0311) ;
0B2D: AF FC    JZ    0x0B2A        (0312) ;-----------------------------------------------------------------------------
                                   (0313) ;
0B2F: 5D 2A    MOV   A,REG[42]     (0314) ;  ARGUMENTS: none
                                   (0315) ;
0B31: 7F       RET                 (0316) ;  RETURNS: none
                                   (0317) ;
                                   (0318) ;  SIDE EFFECTS:
                                   (0319) ;    The A and X registers may be modified by this or future implementations
                                   (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0323) ;    functions.
                                   (0324) ;
                                   (0325)  RECEIVE_Stop:
                                   (0326) _RECEIVE_Stop:
                                   (0327)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0328)    and   REG[RECEIVE_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0329)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0330)    ret
                                   (0331) .ENDSECTION
                                   (0332) 
                                   (0333) .SECTION
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  FUNCTION NAME: RECEIVE_bReadRxData
                                   (0336) ;
                                   (0337) ;  DESCRIPTION:
                                   (0338) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0339) ;     sure data is valid.
                                   (0340) ;
                                   (0341) ;-----------------------------------------------------------------------------
                                   (0342) ;
                                   (0343) ;  ARGUMENTS:  none
                                   (0344) ;
                                   (0345) ;  RETURNS:
0B32: 5D 2B    MOV   A,REG[43]     (0346) ;    bRxData - returned in A.
0B34: 08       PUSH  A             (0347) ;
0B35: 21 08    AND   A,8           (0348) ;  SIDE EFFECTS:
0B37: B0 04    JNZ   0x0B3C        (0349) ;    The A and X registers may be modified by this or future implementations
0B39: 18       POP   A             (0350) ;    of this function.  The same is true for all RAM page pointer registers in
0B3A: 80 0B    JMP   0x0B46        (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
0B3C: 5D 2A    MOV   A,REG[42]     (0354) ;
0B3E: 4B       SWAP  A,X           (0355)  RECEIVE_bReadRxData:
                                   (0356) _RECEIVE_bReadRxData:
0B3F: 18       POP   A             (0357)  bRECEIVE_ReadRxData:
0B40: 21 A0    AND   A,160         (0358) _bRECEIVE_ReadRxData:
0B42: B0 03    JNZ   0x0B46        (0359)    RAM_PROLOGUE RAM_USE_CLASS_1
0B44: 4B       SWAP  A,X           (0360)    mov A, REG[RECEIVE_RX_BUFFER_REG]
                                   (0361)    RAM_EPILOGUE RAM_USE_CLASS_1
0B45: 7F       RET                 (0362)    ret
                                   (0363) .ENDSECTION
                                   (0364) 
0B46: 50 00    MOV   A,0           (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: RECEIVE_bReadRxStatus
                                   (0368) ;
0B48: 7F       RET                 (0369) ;  DESCRIPTION:
                                   (0370) ;    Reads the RX Status bits in the Control/Status register.
                                   (0371) ;
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:  none
                                   (0375) ;
                                   (0376) ;  RETURNS:
                                   (0377) ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
                                   (0378) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  RECEIVE_bReadRxStatus:
                                   (0388) _RECEIVE_bReadRxStatus:
                                   (0389)  bRECEIVE_ReadRxStatus:
                                   (0390) _bRECEIVE_ReadRxStatus:
                                   (0391)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0392)    mov A,  REG[RECEIVE_CONTROL_REG]
                                   (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0394)    ret
                                   (0395) .ENDSECTION
                                   (0396) 
                                   (0397) ;-----------------------------------------------
                                   (0398) ; High Level RX functions
                                   (0399) ;-----------------------------------------------
                                   (0400) 
                                   (0401) .SECTION
                                   (0402) ;-----------------------------------------------------------------------------
                                   (0403) ;  FUNCTION NAME: RECEIVE_cGetChar
                                   (0404) ;
                                   (0405) ;  DESCRIPTION:
0B49: 5D 2B    MOV   A,REG[43]     (0406) ;     Read character from UART RX port.
                                   (0407) ;
0B4B: 21 E8    AND   A,232         (0408) ;
0B4D: 08       PUSH  A             (0409) ;  ARGUMENTS:
0B4E: 21 08    AND   A,8           (0410) ;      none
0B50: B0 07    JNZ   0x0B58        (0411) ;
0B52: 18       POP   A             (0412) ;  RETURNS:
0B53: 29 01    OR    A,1           (0413) ;     char that is returned from UART
0B55: 4B       SWAP  A,X           (0414) ;
0B56: 80 07    JMP   0x0B5E        (0415) ;  SIDE EFFECTS:
                                   (0416) ;    The A and X registers may be modified by this or future implementations
                                   (0417) ;    of this function.  The same is true for all RAM page pointer registers in
0B58: 18       POP   A             (0418) ;    the Large Memory Model.  When necessary, it is the calling function's
0B59: 21 E0    AND   A,224         (0419) ;    responsibility to perserve their values across calls to fastcall16 
0B5B: 4B       SWAP  A,X           (0420) ;    functions.
0B5C: 5D 2A    MOV   A,REG[42]     (0421) ;    
                                   (0422) ;    Program flow will stay in this function until a character is received.
                                   (0423) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0424) ;    the delay between characters is less than the watchdog timeout.
                                   (0425) ;
0B5E: 7F       RET                 (0426)  RECEIVE_cGetChar:
                                   (0427) _RECEIVE_cGetChar:
                                   (0428)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0429) 
                                   (0430) .getChar_Loop:
                                   (0431)    tst REG[RECEIVE_CONTROL_REG],RECEIVE_RX_REG_FULL   ; Check if a character is ready
                                   (0432)    jz  .getChar_Loop                                        ; If not loop
                                   (0433) 
                                   (0434)    mov A, REG[RECEIVE_RX_BUFFER_REG]             ; Get character
                                   (0435)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0436)    ret
                                   (0437) .ENDSECTION
                                   (0438) 
                                   (0439) .SECTION
                                   (0440) ;-----------------------------------------------------------------------------
                                   (0441) ;  FUNCTION NAME: RECEIVE_cReadChar
                                   (0442) ;
                                   (0443) ;  DESCRIPTION:
                                   (0444) ;     Read character from UART RX port.
                                   (0445) ;
                                   (0446) ;  ARGUMENTS:
                                   (0447) ;      none
                                   (0448) ;
                                   (0449) ;  RETURNS:
                                   (0450) ;     char that is returned from UART
                                   (0451) ;
                                   (0452) ;  SIDE EFFECTS:
                                   (0453) ;    The A and X registers may be modified by this or future implementations
                                   (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0457) ;    functions.
                                   (0458) ;
                                   (0459) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                   (0460) ;    implies a valid character or an error condition occured.
                                   (0461) ;
                                   (0462)  RECEIVE_cReadChar:
                                   (0463) _RECEIVE_cReadChar:
                                   (0464)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0465) 
                                   (0466)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0467)    push A
                                   (0468)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
0B5F: 62 D0 00 MOV   REG[208],0    (0469)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0B62: 55 45 00 MOV   [69],0        (0470)    pop  A
0B65: 62 D0 00 MOV   REG[208],0    (0471)    jmp  .RX_NO_VALID_CHAR
0B68: 55 9F 00 MOV   [TIMEOUT+3],0 (0472) 
0B6B: 62 D0 00 MOV   REG[208],0    (0473) .RX_DATA_RDY:
0B6E: 55 01 00 MOV   [1],0         (0474)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
0B71: 26 00 00 AND   [0],0         (0475)    swap A,X                                                ; determine if data is valid
                                   (0476) 
0B74: 7F       RET                 (0477)    pop  A                                                  ; Check for errors
                                   (0478)    and  A,(RECEIVE_RX_PARITY_ERROR | RECEIVE_RX_FRAMING_ERROR)
                                   (0479)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0480)    swap A,X                                                ; Put data in A and exit
                                   (0481)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0482)    ret
                                   (0483) 
                                   (0484) .RX_NO_VALID_CHAR:
                                   (0485)    mov A,0x00                                              ; Zero out character
                                   (0486) 
                                   (0487)  End_RECEIVE_cReadChar:
                                   (0488)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)    ret
                                   (0490) .ENDSECTION
                                   (0491) 																			
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: RECEIVE_iReadChar
                                   (0495) ;
                                   (0496) ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0497) ; to just set a value in the upper byte if error conditions exists.
                                   (0498) ;
                                   (0499) ;  DESCRIPTION:
                                   (0500) ;     Read character from UART RX port.
                                   (0501) ;
                                   (0502) ;  ARGUMENTS:
                                   (0503) ;      none
                                   (0504) ;
                                   (0505) ;  RETURNS:
                                   (0506) ;     An integer value is returned.  A negative value inplies and error
                                   (0507) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0508) ;
                                   (0509) ;     Error Codes:
0B75: 62 D0 00 MOV   REG[208],0    (0510) ;        0x80CC    Parity Error
0B78: 51 00    MOV   A,[0]         (0511) ;        0x40CC    Overrun Error
0B7A: 21 01    AND   A,1           (0512) ;        0x20CC    Framing Error
                                   (0513) ;        0x01CC    No Data available
0B7C: 7F       RET                 (0514) ;
                                   (0515) ;  SIDE EFFECTS:
                                   (0516) ;    The A and X registers may be modified by this or future implementations
                                   (0517) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0518) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0519) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0520) ;    functions.
                                   (0521) ;
                                   (0522)  RECEIVE_iReadChar:
                                   (0523) _RECEIVE_iReadChar:
                                   (0524)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0525) 
                                   (0526)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0527)                                                            ; Mask only errors and data ready
                                   (0528)    and  A,(RECEIVE_RX_ERROR|RECEIVE_RX_REG_FULL)
                                   (0529)    push A
                                   (0530)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
                                   (0531)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (0532)    pop  A
                                   (0533)    or   A,RECEIVE_RX_NO_DATA                               ; Add no data flag
                                   (0534)    swap A,X
                                   (0535)    jmp  End_RECEIVE_iReadChar
                                   (0536) 
                                   (0537) .RX_GET_DATA:
                                   (0538)    pop  A
                                   (0539)    and  A,RECEIVE_RX_ERROR
                                   (0540)    swap A,X
                                   (0541)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
                                   (0542)                                                            ; determine if data is valid
                                   (0543) 
                                   (0544)  End_RECEIVE_iReadChar:
                                   (0545)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0546)    ret
                                   (0547) .ENDSECTION
                                   (0548) 
                                   (0549) 
                                   (0550) 
                                   (0551) IF (RECEIVE_RXBUF_ENABLE)
                                   (0552) .SECTION
0B7D: 62 D0 00 MOV   REG[208],0    (0553) ;-----------------------------------------------------------------------------
0B80: 51 00    MOV   A,[0]         (0554) ;-----------------------------------------------------------------------------
0B82: 21 F0    AND   A,240         (0555) ;
0B84: 26 00 0F AND   [0],15        (0556) ;     Command Buffer commands
                                   (0557) ;
0B87: 7F       RET                 (0558) ;-----------------------------------------------------------------------------
                                   (0559) ;-----------------------------------------------------------------------------
                                   (0560) 
                                   (0561) ;-----------------------------------------------------------------------------
                                   (0562) ;  FUNCTION NAME: RECEIVE_CmdReset
                                   (0563) ;
                                   (0564) ;  DESCRIPTION:
                                   (0565) ;     Reset command string and status flags
                                   (0566) ;
                                   (0567) ;  ARGUMENTS:
                                   (0568) ;     none.
                                   (0569) ;
                                   (0570) ;  RETURNS:
                                   (0571) ;     none.
                                   (0572) ;
                                   (0573) ;  SIDE EFFECTS:
                                   (0574) ;    The A and X registers may be modified by this or future implementations
                                   (0575) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0576) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0577) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0578) ;    functions.
                                   (0579) ;          
                                   (0580) ;    Currently only the page pointer registers listed below are modified: 
                                   (0581) ;          CUR_PP
                                   (0582) ;
                                   (0583) ;  THEORY of OPERATION or PROCEDURE:
                                   (0584) ;     Clear the command buffer, command counter, and flag.
                                   (0585) ;
                                   (0586)  RECEIVE_CmdReset:
0B88: 62 D0 00 MOV   REG[208],0    (0587) _RECEIVE_CmdReset:
0B8B: 51 01    MOV   A,[1]         (0588)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0589)    RAM_SETPAGE_CUR >RECEIVE_aRxBuffer
0B8D: 7F       RET                 (0590)    mov [RECEIVE_aRxBuffer], 0x00
                                   (0591)    RAM_SETPAGE_CUR >ptrParam
                                   (0592)    mov [ptrParam],0x00
                                   (0593)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
                                   (0594)    mov [RECEIVE_bRxCnt], 0x00
                                   (0595)    and [RECEIVE_fStatus], 0x00
                                   (0596)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0597)    ret
                                   (0598) .ENDSECTION
                                   (0599) 
                                   (0600) .SECTION
                                   (0601) ;-----------------------------------------------------------------------------
                                   (0602) ;  FUNCTION NAME: RECEIVE_bCmdCheck
                                   (0603) ;
                                   (0604) ;  DESCRIPTION:
                                   (0605) ;     Check to see if valid command in buffer.
                                   (0606) ;
                                   (0607) ;  ARGUMENTS:
                                   (0608) ;     none.
                                   (0609) ;
                                   (0610) ;  RETURNS:
                                   (0611) ;     BYTE  fStatus - Status of command receive buffer.
                                   (0612) ;                     Returns non-zero value in A if command is valid.
                                   (0613) ;
                                   (0614) ;  SIDE EFFECTS:
                                   (0615) ;    The A and X registers may be modified by this or future implementations
                                   (0616) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0617) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0618) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0619) ;    functions.
                                   (0620) ;          
                                   (0621) ;    Currently only the page pointer registers listed below are modified: 
                                   (0622) ;          CUR_PP
                                   (0623) ;
                                   (0624) ;  THEORY of OPERATION or PROCEDURE:
                                   (0625) ;     Read the status and control register.
                                   (0626) ;
                                   (0627)  RECEIVE_bCmdCheck:
                                   (0628) _RECEIVE_bCmdCheck:
                                   (0629)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0630)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0631)    mov A,  [RECEIVE_fStatus]
                                   (0632)    and A, RECEIVE_RX_BUF_CMDTERM                 ; Mask off Command status
                                   (0633)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0634)    ret
                                   (0635) .ENDSECTION
                                   (0636) 
                                   (0637) .SECTION
                                   (0638) ;-----------------------------------------------------------------------------
                                   (0639) ;  FUNCTION NAME: RECEIVE_bErrCheck
                                   (0640) ;
                                   (0641) ;  DESCRIPTION:
                                   (0642) ;     Check to see if an error has occured since last CmdReset
                                   (0643) ;
0B8E: 70 BF    AND   F,191         (0644) ;  ARGUMENTS:
0B90: 62 D0 00 MOV   REG[208],0    (0645) ;     none.
0B93: 62 D3 00 MOV   REG[211],0    (0646) ;
                                   (0647) ;  RETURNS:
0B96: 50 45    MOV   A,69          (0648) ;     BYTE  fStatus - Status of command receive buffer.
0B98: 02 9F    ADD   A,[TIMEOUT+3] (0649) ;                     Returns non-zero value in A if command is valid.
0B9A: 5C       MOV   X,A           (0650) ;           0x80 => Parity Error
                                   (0651) ;           0x40 => OverRun Error
0B9B: 52 00    MOV   A,[X+0]       (0652) ;           0x20 => Framing Error
0B9D: B0 04    JNZ   0x0BA2        (0653) ;           0x10 => Software Buffer OverRun
0B9F: 10       PUSH  X             (0654) ;
0BA0: 80 33    JMP   0x0BD4        (0655) ;  SIDE EFFECTS:
                                   (0656) ;    The A and X registers may be modified by this or future implementations
                                   (0657) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0658) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0659) ;    responsibility to perserve their values across calls to fastcall16 
0BA2: 39 00    CMP   A,0           (0660) ;    functions.
0BA4: B0 11    JNZ   0x0BB6        (0661) ;          
0BA6: 75       INC   X             (0662) ;    Currently only the page pointer registers listed below are modified: 
0BA7: 76 9F    INC   [TIMEOUT+3]   (0663) ;          CUR_PP
0BA9: 52 00    MOV   A,[X+0]       (0664) ;
0BAB: 3C 9F 3F CMP   [TIMEOUT+3],63(0665) ;     Error Status is clear when read.
0BAE: BF F3    JNZ   0x0BA2        (0666) ;
                                   (0667) ;  THEORY of OPERATION or PROCEDURE:
                                   (0668) ;     Read RX buffer error status and clear status
0BB0: 10       PUSH  X             (0669) ;
                                   (0670)  RECEIVE_bErrCheck:
0BB1: 56 00 00 MOV   [X+0],0       (0671) _RECEIVE_bErrCheck:
0BB4: 80 1F    JMP   0x0BD4        (0672)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0673)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0674)    mov A,  [RECEIVE_fStatus]
0BB6: 10       PUSH  X             (0675)    and A, RECEIVE_RX_BUF_ERROR                   ; Mask off Error status
                                   (0676)    and [RECEIVE_fStatus], ~RECEIVE_RX_BUF_ERROR
                                   (0677)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0678)    ret
0BB7: 75       INC   X             (0679) .ENDSECTION
0BB8: 76 9F    INC   [TIMEOUT+3]   (0680) 
0BBA: 3C 9F 3F CMP   [TIMEOUT+3],63(0681) .SECTION
0BBD: AF F3    JZ    0x0BB1        (0682) ;-----------------------------------------------------------------------------
0BBF: 52 00    MOV   A,[X+0]       (0683) ;  FUNCTION NAME: RECEIVE_bCmdLength
0BC1: A0 12    JZ    0x0BD4        (0684) ;
0BC3: 39 00    CMP   A,0           (0685) ;  DESCRIPTION:
0BC5: BF F1    JNZ   0x0BB7        (0686) ;     Get length of command string
                                   (0687) ;
0BC7: 56 00 00 MOV   [X+0],0       (0688) ;  ARGUMENTS:
0BCA: 76 9F    INC   [TIMEOUT+3]   (0689) ;     none.
0BCC: 3C 9F 3F CMP   [TIMEOUT+3],63(0690) ;
0BCF: B0 04    JNZ   0x0BD4        (0691) ;  RETURNS:
0BD1: 55 9F 3F MOV   [TIMEOUT+3],63(0692) ;     BYTE  bRxCnt    Returns the command length in A.
                                   (0693) ;
                                   (0694) ;  SIDE EFFECTS:
                                   (0695) ;    The A and X registers may be modified by this or future implementations
0BD4: 20       POP   X             (0696) ;    of this function.  The same is true for all RAM page pointer registers in
0BD5: 10       PUSH  X             (0697) ;    the Large Memory Model.  When necessary, it is the calling function's
0BD6: 3D 00 00 CMP   [X+0],0       (0698) ;    responsibility to perserve their values across calls to fastcall16 
0BD9: B0 0B    JNZ   0x0BE5        (0699) ;    functions.
0BDB: 20       POP   X             (0700) ;          
0BDC: 57 00    MOV   X,0           (0701) ;    Currently only the page pointer registers listed below are modified: 
0BDE: 50 00    MOV   A,0           (0702) ;          CUR_PP
0BE0: 70 3F    AND   F,63
0BE2: 71 C0    OR    F,192         (0703) ;
                                   (0704)  RECEIVE_bCmdLength:
0BE4: 7F       RET                 (0705) _RECEIVE_bCmdLength:
                                   (0706)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0707)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
0BE5: 20       POP   X             (0708)    mov A,  [RECEIVE_bRxCnt]
0BE6: 50 00    MOV   A,0           (0709)    RAM_EPILOGUE RAM_USE_CLASS_4
0BE8: 70 3F    AND   F,63
0BEA: 71 C0    OR    F,192         (0710)    ret
                                   (0711) .ENDSECTION
0BEC: 7F       RET                 (0712) 
                                   (0713) .SECTION
                                   (0714) ;-----------------------------------------------------------------------------
                                   (0715) ;  FUNCTION NAME: RECEIVE_szGetParam
                                   (0716) ;
                                   (0717) ;  DESCRIPTION:
                                   (0718) ;      Return next parameter from UART Rx buffer
                                   (0719) ;
                                   (0720) ;
                                   (0721) ;  ARGUMENTS:  none
                                   (0722) ;
                                   (0723) ;  RETURNS:
                                   (0724) ;     A => MSB of parameter address
                                   (0725) ;     X => LSB of parameter address
                                   (0726) ;
                                   (0727) ;  SIDE EFFECTS:
                                   (0728) ;    The A and X registers may be modified by this or future implementations
                                   (0729) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0730) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0731) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0732) ;    functions.
                                   (0733) ;          
                                   (0734) ;    Currently only the page pointer registers listed below are modified:
                                   (0735) ;          CUR_PP
                                   (0736) ;          IDX_PP
                                   (0737) ;
                                   (0738) ;     The receive string is modified by placing Null characters at the end
                                   (0739) ;     of each parameter as they are recovered.
                                   (0740) ;
                                   (0741) ;  THEORY OF OPERATION:
0BED: 62 D0 00 MOV   REG[208],0    (0742) ;     This function is a stateful generator of addresses to the "parameters"
                                   (0743) ;     of an input "Command". It scans the (optional) input buffer and breaks
0BF0: 50 45    MOV   A,69          (0744) ;     each lexically distinct element into a null-terminated string by replacing
0BF2: 02 9F    ADD   A,[TIMEOUT+3] (0745) ;     delimiters with nulls, as appropriate. The state of the generator is 
0BF4: 5C       MOV   X,A           (0746) ;     maintained by the private variable ptrParam, which is a buffer-relative
0BF5: 50 00    MOV   A,0           (0747) ;     offset. The generator is initialized by a call to the function
                                   (0748) ;     RECEIVE_CmdReset which resets the entire buffer to the 'empty'
                                   (0749) ;     state. Typically this function, RECEIVE_szGetParam, is
0BF8: 7E       RETI                (0750) ;     not called until the buffer has been loaded with an entire command

FILE: lib\comp_serialint.asm
                                   (0102) ;;*****************************************************************************
                                   (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME:   COMP_SERIALINT.asm
                                   (0105) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                   (0109) ;;-----------------------------------------------------------------------------
                                   (0110) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0111) ;;*****************************************************************************
                                   (0112) ;;*****************************************************************************
                                   (0113) 
                                   (0114) 
                                   (0115) include "COMP_SERIAL.inc"
                                   (0116) include "memory.inc"
                                   (0117) include "m8c.inc"
                                   (0118) 
                                   (0119) ;-----------------------------------------------
                                   (0120) ;  Global Symbols
                                   (0121) ;-----------------------------------------------
                                   (0122) export  _COMP_SERIAL_TX_ISR
                                   (0123) export  _COMP_SERIAL_RX_ISR
                                   (0124) 
                                   (0125) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0126) export  COMP_SERIAL_aRxBuffer
                                   (0127) export _COMP_SERIAL_aRxBuffer
                                   (0128) export  COMP_SERIAL_bRxCnt
                                   (0129) export _COMP_SERIAL_bRxCnt
                                   (0130) export  COMP_SERIAL_fStatus
                                   (0131) export _COMP_SERIAL_fStatus
                                   (0132) ENDIF
                                   (0133) 
                                   (0134) 
                                   (0135) ;-----------------------------------------------
                                   (0136) ; Variable Allocation
                                   (0137) ;-----------------------------------------------
                                   (0138) AREA InterruptRAM (RAM, REL, CON)
                                   (0139) 
                                   (0140) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0141)  COMP_SERIAL_fStatus:
                                   (0142) _COMP_SERIAL_fStatus:      BLK  1
                                   (0143)  COMP_SERIAL_bRxCnt:
                                   (0144) _COMP_SERIAL_bRxCnt:       BLK  1
                                   (0145) AREA COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0146)  COMP_SERIAL_aRxBuffer:
                                   (0147) _COMP_SERIAL_aRxBuffer:    BLK COMP_SERIAL_RX_BUFFER_SIZE
                                   (0148) ENDIF
                                   (0149) 
                                   (0150) AREA InterruptRAM (RAM, REL, CON)
                                   (0151) 
0BF9: 08       PUSH  A             (0152) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0BFA: 10       PUSH  X             (0153) ;---------------------------------------------------
0BFB: 5D D3    MOV   A,REG[211]
                                   (0154) ; Insert your custom declarations below this banner
                                   (0155) ;---------------------------------------------------
0BFD: 08       PUSH  A             (0156) 
                                   (0157) ;------------------------
                                   (0158) ;  Includes
0BFE: 58 04    MOV   X,[4]         (0159) ;------------------------
0C00: 5D 3F    MOV   A,REG[63]     (0160) 
0C02: 08       PUSH  A             (0161) 
                                   (0162) ;------------------------
0C03: 21 08    AND   A,8           (0163) ;  Constant Definitions
0C05: B0 04    JNZ   0x0C0A        (0164) ;------------------------
0C07: 18       POP   A             (0165) 
0C08: 80 5E    JMP   0x0C67        (0166) 
                                   (0167) ;------------------------
                                   (0168) ; Variable Allocation
0C0A: 18       POP   A             (0169) ;------------------------
                                   (0170) 
                                   (0171) 
0C0B: 21 E0    AND   A,224         (0172) ;---------------------------------------------------
0C0D: A0 12    JZ    0x0C20        (0173) ; Insert your custom declarations above this banner
                                   (0174) ;---------------------------------------------------
0C0F: 2C 03    OR    [3],A         (0175) ;@PSoC_UserCode_END@ (Do not change this line.)
0C11: 49 3E 00 TST   REG[62],0     (0176) 
0C14: 21 20    AND   A,32          (0177) 
0C16: A0 50    JZ    0x0C67        (0178) AREA UserModules (ROM, REL, CON)
                                   (0179) 
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: _COMP_SERIAL_TX_ISR
0C18: 41 3F FE AND   REG[63],254   (0182) ;
0C1B: 43 3F 01 OR    REG[63],1     (0183) ;  DESCRIPTION:
0C1E: 80 48    JMP   0x0C67        (0184) ;     UART TX interrupt handler for instance COMP_SERIAL.
                                   (0185) ;
                                   (0186) ;     This is a place holder function.  If the user requires use of an interrupt
                                   (0187) ;     handler for this function, then place code where specified.
0C20: 5D 3E    MOV   A,REG[62]     (0188) ;-----------------------------------------------------------------------------
                                   (0189) 
                                   (0190) _COMP_SERIAL_TX_ISR:
0C22: 47 03 01 TST   [3],1         (0191)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
0C25: B0 41    JNZ   0x0C67        (0192)    ;---------------------------------------------------
                                   (0193)    ; Insert your custom code below this banner
0C27: 39 3B    CMP   A,59          (0194)    ;---------------------------------------------------
0C29: B0 14    JNZ   0x0C3E        (0195)    ;   NOTE: interrupt service routines must preserve
0C2B: 2E 03 01 OR    [3],1         (0196)    ;   the values of the A and X CPU registers.
                                   (0197)    
                                   (0198)    ;---------------------------------------------------
                                   (0199)    ; Insert your custom code above this banner
0C2E: 62 D3 00 MOV   REG[211],0    (0200)    ;---------------------------------------------------
0C31: 70 3F    AND   F,63
0C33: 71 80    OR    F,128         (0201)    ;@PSoC_UserCode_END@ (Do not change this line.)
0C35: 56 05 00 MOV   [X+5],0       (0202)    reti
0C38: 70 3F    AND   F,63
0C3A: 71 00    OR    F,0           (0203) 
0C3C: 80 2A    JMP   0x0C67        (0204) 
                                   (0205) ;-----------------------------------------------------------------------------
                                   (0206) ;  FUNCTION NAME: _COMP_SERIAL_RX_ISR
                                   (0207) ;
                                   (0208) ;  DESCRIPTION:
                                   (0209) ;     UART RX interrupt handler for instance COMP_SERIAL.
                                   (0210) ;     This ISR handles the background processing of received characters if
                                   (0211) ;     the buffer is enabled.
                                   (0212) ;
                                   (0213) ;
                                   (0214) ;  The following assumes that the RX buffer feature has been enabled.
                                   (0215) ;
                                   (0216) ;  SIDE EFFECTS:
                                   (0217) ;     There are 3 posible errors that may occur with the serial port.
0C3E: 39 20    CMP   A,32          (0218) ;      1) Parity Error
0C40: C0 26    JC    0x0C67        (0219) ;      2) Framing Error
                                   (0220) ;      3) OverRun Error
                                   (0221) ;
                                   (0222) ;  This user module check for parity and framing error.  If either of these
                                   (0223) ;  two errors are detected, the data is read and ignored.  When an overRun
0C42: 62 D3 00 MOV   REG[211],0    (0224) ;  error occurs, the last byte was lost, but the current byte is valid.  For
0C45: 3C 04 3F CMP   [4],63        (0225) ;  this reason this error is ignored at this time.  Code could be added to
0C48: C0 11    JC    0x0C5A        (0226) ;  this ISR to set a flag if an error condition occurs.
0C4A: 70 3F    AND   F,63
0C4C: 71 80    OR    F,128         (0227) ;
0C4E: 56 05 00 MOV   [X+5],0       (0228) ;  THEORY of OPERATION:
0C51: 70 3F    AND   F,63
0C53: 71 00    OR    F,0           (0229) ;     When using the RX buffer feature, the ISR collects received characters
0C55: 2E 03 10 OR    [3],16        (0230) ;     in a buffer until the user defined command terminator is detected.  After
0C58: 80 0E    JMP   0x0C67        (0231) ;     the command terminator is detected, the command bit is set and all other
0C5A: 70 3F    AND   F,63
                                   (0232) ;     characters will be ignored until the command bit is reset.  Up to
                                   (0233) ;     buffer_size - 1 characters will be collected waiting for a command
                                   (0234) ;     terminator.  After that, the characters will be discarded, although
0C5C: 71 80    OR    F,128         (0235) ;     a command determinator will still cause the command bit to be set.
0C5E: 54 05    MOV   [X+5],A       (0236) ;
0C60: 70 3F    AND   F,63
0C62: 71 00    OR    F,0           (0237) ;-----------------------------------------------------------------------------
0C64: 75       INC   X             (0238) _COMP_SERIAL_RX_ISR:
0C65: 5A 04    MOV   [4],X         (0239) 
0C67: 18       POP   A
                                   (0240)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0241)    ;---------------------------------------------------
                                   (0242)    ; Insert your custom code below this banner
0C68: 60 D3    MOV   REG[211],A    (0243)    ;---------------------------------------------------
                                   (0244)    ;   NOTE: interrupt service routines must preserve
                                   (0245)    ;   the values of the A and X CPU registers.
                                   (0246) 
0C6A: 20       POP   X             (0247)    ;---------------------------------------------------
0C6B: 18       POP   A             (0248)    ; Insert your custom code above this banner
                                   (0249)    ;---------------------------------------------------
                                   (0250)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0251) 
                                   (0252) IF (COMP_SERIAL_RXBUF_ENABLE)
0C6D: 43 E1 40 OR    REG[225],64   (0253)    push A

FILE: lib\comp_serial.asm
0C70: 43 E1 80 OR    REG[225],128  (0180) ;;*****************************************************************************
                                   (0181) ;;*****************************************************************************
0C73: 7F       RET                 (0182) ;;  Filename:   COMP_SERIAL.asm
                                   (0183) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0184) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0185) ;;
                                   (0186) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                   (0187) ;;                22/24/25/26/27xxx families.
                                   (0188) ;;
                                   (0189) ;;
                                   (0190) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0191) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0192) ;;        This means it is the caller's responsibility to preserve any values
                                   (0193) ;;        in the X and A registers that are still needed after the API functions
                                   (0194) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0195) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0196) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0197) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0198) ;;-----------------------------------------------------------------------------
                                   (0199) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0200) ;;*****************************************************************************
                                   (0201) ;;*****************************************************************************
                                   (0202) 
                                   (0203) 
                                   (0204) include "m8c.inc"
                                   (0205) include "memory.inc"
                                   (0206) include "COMP_SERIAL.inc"
                                   (0207) 
                                   (0208) ;-----------------------------------------------
                                   (0209) ;  Global Symbols
                                   (0210) ;-----------------------------------------------
0C74: 41 E1 BF AND   REG[225],191  (0211) ;-------------------------------------------------------------------
0C77: 41 E1 7F AND   REG[225],127  (0212) ;  Declare the functions global for both assembler and C compiler.
                                   (0213) ;
0C7A: 7F       RET                 (0214) ;  Note that there are two names for each API. First name is
                                   (0215) ;  assembler reference. Name with underscore is name refence for
                                   (0216) ;  C compiler.  Calling function in C source code does not require
                                   (0217) ;  the underscore.
                                   (0218) ;-------------------------------------------------------------------
                                   (0219) export  COMP_SERIAL_SetTxIntMode
                                   (0220) export _COMP_SERIAL_SetTxIntMode
                                   (0221) export  COMP_SERIAL_EnableInt
                                   (0222) export _COMP_SERIAL_EnableInt
                                   (0223) export  COMP_SERIAL_DisableInt
                                   (0224) export _COMP_SERIAL_DisableInt
                                   (0225) 
                                   (0226) export  COMP_SERIAL_Start
                                   (0227) export _COMP_SERIAL_Start
                                   (0228) export  COMP_SERIAL_Stop
                                   (0229) export _COMP_SERIAL_Stop
                                   (0230) export  COMP_SERIAL_SendData
                                   (0231) export _COMP_SERIAL_SendData
                                   (0232) export  COMP_SERIAL_bReadTxStatus
                                   (0233) export _COMP_SERIAL_bReadTxStatus
                                   (0234) export  COMP_SERIAL_bReadRxData
                                   (0235) export _COMP_SERIAL_bReadRxData
                                   (0236) export  COMP_SERIAL_bReadRxStatus
                                   (0237) export _COMP_SERIAL_bReadRxStatus
                                   (0238) 
                                   (0239) export  COMP_SERIAL_IntCntl
                                   (0240) export _COMP_SERIAL_IntCntl
                                   (0241) 
                                   (0242) export  COMP_SERIAL_TxIntMode
                                   (0243) export _COMP_SERIAL_TxIntMode
                                   (0244) 
                                   (0245) export  COMP_SERIAL_PutSHexByte
                                   (0246) export _COMP_SERIAL_PutSHexByte
0C7B: 71 10    OR    F,16          (0247) export  COMP_SERIAL_PutSHexInt
0C7D: 21 01    AND   A,1           (0248) export _COMP_SERIAL_PutSHexInt
0C7F: A0 07    JZ    0x0C87        (0249) 
0C81: 43 38 10 OR    REG[56],16    (0250) export  COMP_SERIAL_CPutString
0C84: 70 EF    AND   F,239         (0251) export _COMP_SERIAL_CPutString
                                   (0252) export  COMP_SERIAL_PutString
0C86: 7F       RET                 (0253) export _COMP_SERIAL_PutString
                                   (0254) export  COMP_SERIAL_PutChar
                                   (0255) export _COMP_SERIAL_PutChar
0C87: 41 38 EF AND   REG[56],239   (0256) export  COMP_SERIAL_Write
0C8A: 70 EF    AND   F,239         (0257) export _COMP_SERIAL_Write
                                   (0258) export  COMP_SERIAL_CWrite
0C8C: 7F       RET                 (0259) export _COMP_SERIAL_CWrite
                                   (0260) 
                                   (0261) export  COMP_SERIAL_cGetChar
                                   (0262) export _COMP_SERIAL_cGetChar
                                   (0263) export  COMP_SERIAL_cReadChar
                                   (0264) export _COMP_SERIAL_cReadChar
                                   (0265) export  COMP_SERIAL_iReadChar
                                   (0266) export _COMP_SERIAL_iReadChar
                                   (0267) export  COMP_SERIAL_PutCRLF
                                   (0268) export _COMP_SERIAL_PutCRLF
                                   (0269) 
                                   (0270) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0271) export  COMP_SERIAL_CmdReset
                                   (0272) export _COMP_SERIAL_CmdReset
                                   (0273) export  COMP_SERIAL_bCmdCheck
                                   (0274) export _COMP_SERIAL_bCmdCheck
                                   (0275) export  COMP_SERIAL_bCmdLength
                                   (0276) export _COMP_SERIAL_bCmdLength
                                   (0277) export  COMP_SERIAL_bErrCheck
                                   (0278) export _COMP_SERIAL_bErrCheck
                                   (0279) 
                                   (0280) export  COMP_SERIAL_szGetParam
                                   (0281) export _COMP_SERIAL_szGetParam
                                   (0282) export  COMP_SERIAL_szGetRestOfParams
                                   (0283) export _COMP_SERIAL_szGetRestOfParams
                                   (0284) ENDIF
                                   (0285) 
                                   (0286) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0287) ; WARNING WARNING WARNING
                                   (0288) ; The following exports are for backwards compatibility only and should
                                   (0289) ; not be used for new designs. They may be eliminated in a future release.
0C8D: 29 01    OR    A,1           (0290) ; Their status is "NO FURTHER MAINTENANCE". 
0C8F: 60 3B    MOV   REG[59],A     (0291) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C91: 60 3F    MOV   REG[63],A     (0292) export  bCOMP_SERIAL_ReadTxStatus
                                   (0293) export _bCOMP_SERIAL_ReadTxStatus
0C93: 91 2A    CALL  0x0DBF        (0294) export  bCOMP_SERIAL_ReadRxData
                                   (0295) export _bCOMP_SERIAL_ReadRxData
                                   (0296) export  bCOMP_SERIAL_ReadRxStatus
0C95: 7F       RET                 (0297) export _bCOMP_SERIAL_ReadRxStatus
                                   (0298) 	
                                   (0299) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0300) ;             END WARNING
                                   (0301) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0302) 
                                   (0303) ;-----------------------------------------------
                                   (0304) ; Variable Allocation
                                   (0305) ;-----------------------------------------------
                                   (0306) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0307)     
                                   (0308) area COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0309)     
                                   (0310)  ptrParam:   BLK  1
                                   (0311) 
                                   (0312) ENDIF
                                   (0313) 
                                   (0314) area text (ROM,REL)
                                   (0315) 
                                   (0316) ;-----------------------------------------------
                                   (0317) ;  EQUATES
                                   (0318) ;-----------------------------------------------
                                   (0319) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                   (0320) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                   (0321) 
                                   (0322) area UserModules (ROM, REL, CON)
                                   (0323) 
                                   (0324) ;=============================================================================
0C96: 41 3B FE AND   REG[59],254   (0325) ;=============================================================================
0C99: 41 3F FE AND   REG[63],254   (0326) ;
                                   (0327) ;     Low-Level Commands
0C9C: 7F       RET                 (0328) ;
                                   (0329) ;=============================================================================
                                   (0330) ;=============================================================================
                                   (0331) 
                                   (0332) .SECTION
                                   (0333) ;-----------------------------------------------------------------------------
                                   (0334) ;  FUNCTION NAME: COMP_SERIAL_EnableInt
                                   (0335) ;
                                   (0336) ;  DESCRIPTION:
                                   (0337) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                   (0338) ;     bit associated with this User Module. Remember to call the global
                                   (0339) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0340) ;-----------------------------------------------------------------------------
                                   (0341) ;
                                   (0342) ;  ARGUMENTS:
                                   (0343) ;     none.
                                   (0344) ;
                                   (0345) ;  RETURNS:
                                   (0346) ;     none.
                                   (0347) ;
                                   (0348) ;  SIDE EFFECTS:
                                   (0349) ;    The A and X registers may be modified by this or future implementations
                                   (0350) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
                                   (0354) ;
                                   (0355)  COMP_SERIAL_EnableInt:
0C9D: 60 39    MOV   REG[57],A     (0356) _COMP_SERIAL_EnableInt:
                                   (0357)    RAM_PROLOGUE RAM_USE_CLASS_1
0C9F: 7F       RET                 (0358)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0359)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0360)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0361)    ret
                                   (0362) .ENDSECTION
                                   (0363) 
                                   (0364)     
                                   (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: COMP_SERIAL_DisableInt
                                   (0368) ;
                                   (0369) ;  DESCRIPTION:
                                   (0370) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                   (0371) ;     associated with this User Module.
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:
                                   (0375) ;     none.
                                   (0376) ;
                                   (0377) ;  RETURNS:
                                   (0378) ;     none.
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  COMP_SERIAL_DisableInt:
                                   (0388) _COMP_SERIAL_DisableInt:
0CA0: 5D 3B    MOV   A,REG[59]     (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0390)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
0CA2: 7F       RET                 (0391)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0392)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0393)    ret
                                   (0394) .ENDSECTION
                                   (0395) 
                                   (0396) 
                                   (0397) .SECTION
                                   (0398) ;-----------------------------------------------------------------------------
                                   (0399) ;  FUNCTION NAME: COMP_SERIAL_SetTxIntMode(BYTE bTxIntMode)
                                   (0400) ;
                                   (0401) ;  DESCRIPTION:
                                   (0402) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0403) ;-----------------------------------------------------------------------------
                                   (0404) ;
                                   (0405) ;  ARGUMENTS:
                                   (0406) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0407) ;        Passed in the A register
                                   (0408) ;
                                   (0409) ;  RETURNS:
                                   (0410) ;     none.
                                   (0411) ;
                                   (0412) ;  SIDE EFFECTS:
                                   (0413) ;    The A and X registers may be modified by this or future implementations
                                   (0414) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0415) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0416) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0417) ;    functions.
                                   (0418) ;
                                   (0419) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0420) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0421) ;     on TX register empty or TX transmit complete
0CA3: 5D 3E    MOV   A,REG[62]     (0422) ;
                                   (0423)  COMP_SERIAL_SetTxIntMode:
0CA5: 7F       RET                 (0424) _COMP_SERIAL_SetTxIntMode:
                                   (0425)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0426)    M8C_SetBank1
                                   (0427)    and   A, COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0428)    jz    .SetModeRegEmpty
                                   (0429)    or    REG[COMP_SERIAL_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0430)    M8C_SetBank0
                                   (0431)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0432)    ret
                                   (0433) 
                                   (0434) .SetModeRegEmpty:
                                   (0435)    and   REG[COMP_SERIAL_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0436)    M8C_SetBank0
                                   (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0438)    ret
                                   (0439) .ENDSECTION
                                   (0440) 
                                   (0441) 
                                   (0442) .SECTION
                                   (0443) ;-----------------------------------------------------------------------------
                                   (0444) ;  FUNCTION NAME: COMP_SERIAL_Start(BYTE bParity)
                                   (0445) ;
                                   (0446) ;  DESCRIPTION:
                                   (0447) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0448) ;-----------------------------------------------------------------------------
                                   (0449) ;
                                   (0450) ;  ARGUMENTS:
                                   (0451) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                   (0452) ;        Passed in the A register.
                                   (0453) ;
                                   (0454) ;  RETURNS:
                                   (0455) ;     none.
0CA6: 5D 3F    MOV   A,REG[63]     (0456) ;
                                   (0457) ;  SIDE EFFECTS:
0CA8: 7F       RET                 (0458) ;    The A and X registers may be modified by this or future implementations
                                   (0459) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0460) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0461) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0462) ;    functions.
                                   (0463) ;
                                   (0464)  COMP_SERIAL_Start:
                                   (0465) _COMP_SERIAL_Start:
                                   (0466)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0467)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                   (0468) 
                                   (0469)    or    A, bfCONTROL_REG_START_BIT
                                   (0470)    mov   REG[COMP_SERIAL_TX_CONTROL_REG], A
                                   (0471)    mov   REG[COMP_SERIAL_RX_CONTROL_REG], A
                                   (0472) IF ( COMP_SERIAL_RXBUF_ENABLE )
                                   (0473)    call  _COMP_SERIAL_CmdReset
                                   (0474) ENDIF
                                   (0475)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0476)    ret
                                   (0477) .ENDSECTION
                                   (0478) 
                                   (0479) 
                                   (0480) .SECTION
                                   (0481) ;-----------------------------------------------------------------------------
                                   (0482) ;  FUNCTION NAME: COMP_SERIAL_Stop
                                   (0483) ;
                                   (0484) ;  DESCRIPTION:
                                   (0485) ;     Disables UART operation.
                                   (0486) ;-----------------------------------------------------------------------------
                                   (0487) ;
                                   (0488) ;  ARGUMENTS:
0CA9: 21 01    AND   A,1           (0489) ;     none.
0CAB: 71 10    OR    F,16          (0490) ;
0CAD: 39 01    CMP   A,1           (0491) ;  RETURNS:
0CAF: A0 06    JZ    0x0CB6        (0492) ;     none.
                                   (0493) ;
0CB1: 41 38 EF AND   REG[56],239   (0494) ;  SIDE EFFECTS:
0CB4: 80 04    JMP   0x0CB9        (0495) ;    The A and X registers may be modified by this or future implementations
                                   (0496) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0497) ;    the Large Memory Model.  When necessary, it is the calling function's
0CB6: 43 38 10 OR    REG[56],16    (0498) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0499) ;    functions.
                                   (0500) ;
0CB9: 70 EF    AND   F,239         (0501)  COMP_SERIAL_Stop:
                                   (0502) _COMP_SERIAL_Stop:
0CBB: 7F       RET                 (0503)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0504)    and   REG[COMP_SERIAL_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0505)    and   REG[COMP_SERIAL_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0506)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0507)    ret
                                   (0508) .ENDSECTION
                                   (0509) 
                                   (0510) 
                                   (0511) .SECTION
                                   (0512) ;-----------------------------------------------------------------------------
                                   (0513) ;  FUNCTION NAME: COMP_SERIAL_SendData
                                   (0514) ;
                                   (0515) ;  DESCRIPTION:
                                   (0516) ;     Initiates a transmission of data.
                                   (0517) ;-----------------------------------------------------------------------------
                                   (0518) ;
                                   (0519) ;  ARGUMENTS:
                                   (0520) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                   (0521) ;
                                   (0522) ;  RETURNS:
                                   (0523) ;     none.
                                   (0524) ;
                                   (0525) ;  SIDE EFFECTS:
                                   (0526) ;    The A and X registers may be modified by this or future implementations
                                   (0527) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0528) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0529) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0530) ;    functions.
                                   (0531) ;
                                   (0532)  COMP_SERIAL_SendData:
                                   (0533) _COMP_SERIAL_SendData:
                                   (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0535)    mov REG[COMP_SERIAL_TX_BUFFER_REG], A
0CBC: 08       PUSH  A             (0536)    RAM_EPILOGUE RAM_USE_CLASS_1
0CBD: 21 01    AND   A,1           (0537)    ret
0CBF: A0 06    JZ    0x0CC6        (0538) .ENDSECTION
                                   (0539) 
0CC1: 43 E1 80 OR    REG[225],128  (0540) 
0CC4: 80 04    JMP   0x0CC9        (0541) .SECTION
                                   (0542) ;-----------------------------------------------------------------------------
                                   (0543) ;  FUNCTION NAME: COMP_SERIAL_bReadTxStatus
0CC6: 41 E1 7F AND   REG[225],127  (0544) ;
                                   (0545) ;  DESCRIPTION:
                                   (0546) ;     Reads the Tx Status bits in the Control/Status register.
0CC9: 18       POP   A             (0547) ;-----------------------------------------------------------------------------
0CCA: 21 02    AND   A,2           (0548) ;
0CCC: A0 06    JZ    0x0CD3        (0549) ;  ARGUMENTS:
                                   (0550) ;     none.
0CCE: 43 E1 40 OR    REG[225],64   (0551) ;
0CD1: 80 04    JMP   0x0CD6        (0552) ;  RETURNS:
                                   (0553) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                   (0554) ;           status bits (returned in A)
0CD3: 41 E1 BF AND   REG[225],191  (0555) ;
                                   (0556) ;  SIDE EFFECTS:
                                   (0557) ;    The A and X registers may be modified by this or future implementations
                                   (0558) ;    of this function.  The same is true for all RAM page pointer registers in
0CD6: 7F       RET                 (0559) ;    the Large Memory Model.  When necessary, it is the calling function's
0CD7: 30       HALT  
0CD8: 31 32    XOR   A,50
0CDA: 33 34    XOR   A,[X+52]
0CDC: 35 36    XOR   [X+54],A
0CDE: 37 38 39 XOR   [X+56],57
0CE1: 41 42 43 AND   REG[66],67
0CE4: 44 45 46 OR    REG[X+69],70
                                   (0560) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0561) ;    functions.
                                   (0562) ;
                                   (0563)  COMP_SERIAL_bReadTxStatus:
                                   (0564) _COMP_SERIAL_bReadTxStatus:
                                   (0565)  bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0566) _bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0567)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0568)    mov A,  REG[COMP_SERIAL_TX_CONTROL_REG]
                                   (0569)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0570)    ret
                                   (0571) .ENDSECTION
                                   (0572) 
                                   (0573) 
                                   (0574) .SECTION
                                   (0575) ;-----------------------------------------------------------------------------
                                   (0576) ;  FUNCTION NAME: COMP_SERIAL_bReadRxData
                                   (0577) ;
                                   (0578) ;  DESCRIPTION:
                                   (0579) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0580) ;     sure data is valid.
                                   (0581) ;-----------------------------------------------------------------------------
                                   (0582) ;
                                   (0583) ;  ARGUMENTS:
                                   (0584) ;     none.
                                   (0585) ;
                                   (0586) ;  RETURNS:
                                   (0587) ;     bRxData - returned in A.
                                   (0588) ;
                                   (0589) ;  SIDE EFFECTS:
                                   (0590) ;    The A and X registers may be modified by this or future implementations
                                   (0591) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0592) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0593) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0594) ;    functions.
                                   (0595) ;
                                   (0596)  COMP_SERIAL_bReadRxData:
                                   (0597) _COMP_SERIAL_bReadRxData:
                                   (0598)  bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0599) _bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0CE7: 08       PUSH  A             (0601)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]
0CE8: 67       ASR   A             (0602)    RAM_EPILOGUE RAM_USE_CLASS_1
0CE9: 67       ASR   A             (0603)    ret
0CEA: 67       ASR   A             (0604) .ENDSECTION
0CEB: 67       ASR   A             (0605) 
0CEC: 21 0F    AND   A,15          (0606) 
0CEE: FF E7    INDEX 0x0CD7        (0607) .SECTION
0CF0: 90 0F    CALL  0x0D01        (0608) ;-----------------------------------------------------------------------------
0CF2: 18       POP   A             (0609) ;  FUNCTION NAME: COMP_SERIAL_bReadRxStatus
0CF3: 21 0F    AND   A,15          (0610) ;
0CF5: FF E0    INDEX 0x0CD7        (0611) ;  DESCRIPTION:
0CF7: 90 08    CALL  0x0D01        (0612) ;     Reads the RX Status bits in the Control/Status register.
                                   (0613) ;-----------------------------------------------------------------------------
0CF9: 7F       RET                 (0614) ;
                                   (0615) ;  ARGUMENTS:
                                   (0616) ;     none.
                                   (0617) ;
                                   (0618) ;  RETURNS:
                                   (0619) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                   (0620) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0621) ;           returned in A.
                                   (0622) ;
                                   (0623) ;  SIDE EFFECTS:
                                   (0624) ;    The A and X registers may be modified by this or future implementations
                                   (0625) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0626) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0627) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0628) ;    functions.
                                   (0629) ;
                                   (0630)  COMP_SERIAL_bReadRxStatus:
                                   (0631) _COMP_SERIAL_bReadRxStatus:
                                   (0632)  bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0633) _bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0634)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0635)    mov A,  REG[COMP_SERIAL_RX_CONTROL_REG]
                                   (0636)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0637)    ret
                                   (0638) .ENDSECTION
                                   (0639) 
                                   (0640) 
                                   (0641) .SECTION
                                   (0642) ;-----------------------------------------------------------------------------
                                   (0643) ;  FUNCTION NAME: COMP_SERIAL_TxIntMode
                                   (0644) ;
0CFA: 4B       SWAP  A,X           (0645) ;  DESCRIPTION:
0CFB: 9F EA    CALL  0x0CE7        (0646) ;     This function is used to change the TX Interrupt mode.
0CFD: 5B       MOV   A,X           (0647) ;-----------------------------------------------------------------------------
0CFE: 9F E7    CALL  0x0CE7        (0648) ;
                                   (0649) ;  ARGUMENTS:
0D00: 7F       RET                 (0650) ;     A => Tx Interrupt mode
0D01: 49 3B 10 TST   REG[59],16
                                   (0651) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                   (0652) ;             1 => Interrupt on TX Complete
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none.
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
                                   (0663) ;
                                   (0664)  COMP_SERIAL_TxIntMode:
                                   (0665) _COMP_SERIAL_TxIntMode:
                                   (0666)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0667) 
                                   (0668)    and  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0669)    M8C_SetBank1
                                   (0670)    cmp  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0671)    jz   .SetTxCmpMode
                                   (0672) 
                                   (0673)    and  reg[COMP_SERIAL_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
                                   (0674)    jmp  .TxIntMode_End
                                   (0675) 
                                   (0676) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
                                   (0677)    or   reg[COMP_SERIAL_TX_FUNC_REG],0x10
                                   (0678) 
                                   (0679) .TxIntMode_End:
                                   (0680)    M8C_SetBank0
                                   (0681)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0682)    ret
                                   (0683) .ENDSECTION
                                   (0684) 
                                   (0685)     
0D04: AF FC    JZ    0x0D01        (0686) .SECTION
0D06: 60 39    MOV   REG[57],A
                                   (0687) ;-----------------------------------------------------------------------------
0D08: 7F       RET                 (0688) ;  FUNCTION NAME: COMP_SERIAL_IntCntl
                                   (0689) ;
                                   (0690) ;  DESCRIPTION:
                                   (0691) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                   (0692) ;-----------------------------------------------------------------------------
                                   (0693) ;
                                   (0694) ;  ARGUMENTS:
                                   (0695) ;     A => Interrupt mask
                                   (0696) ;
                                   (0697) ;  RETURNS:
                                   (0698) ;     none.
                                   (0699) ;
                                   (0700) ;  SIDE EFFECTS:
                                   (0701) ;    The A and X registers may be modified by this or future implementations
                                   (0702) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0703) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0704) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0705) ;    functions.
                                   (0706) ;
                                   (0707) ;  THEORY of OPERATION or PROCEDURE:
                                   (0708) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                   (0709) ;     and RX block.
                                   (0710) ;
                                   (0711)  COMP_SERIAL_IntCntl:
                                   (0712) _COMP_SERIAL_IntCntl:
                                   (0713)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0714) 
                                   (0715)    push A
                                   (0716)    and  A,COMP_SERIAL_ENABLE_RX_INT
                                   (0717)    jz   .DisRxInt
                                   (0718)      ; Enable Rx Interrupt
                                   (0719)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0D09: 49 3F 08 TST   REG[63],8     (0720)    jmp  .CheckTxInt
0D0C: AF FC    JZ    0x0D09        (0721) .DisRxInt:
0D0E: 5D 3E    MOV   A,REG[62]     (0722)      ; Disable Rx Interrupt
                                   (0723)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0D10: 7F       RET                 (0724) 
                                   (0725) .CheckTxInt:
                                   (0726)    pop  A
                                   (0727)    and  A,COMP_SERIAL_ENABLE_TX_INT
                                   (0728)    jz   .DisTxInt
                                   (0729)      ; Enable Tx Interrupt
                                   (0730)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0731)    jmp  .End_IntCntl
                                   (0732) .DisTxInt:
                                   (0733)      ; Disable Tx Interrupt
                                   (0734)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0735) 
                                   (0736) .End_IntCntl:
                                   (0737)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0738)    ret
                                   (0739) .ENDSECTION
                                   (0740) 
                                   (0741) 
                                   (0742) ;=============================================================================
                                   (0743) ;=============================================================================
                                   (0744) ;
                                   (0745) ;     High-Level Commands
                                   (0746) ;
                                   (0747) ;=============================================================================
                                   (0748) ;=============================================================================
                                   (0749) 
                                   (0750) 
                                   (0751) ;-----------------------------------------------------------------------------
                                   (0752) ;  FUNCTION NAME: COMP_SERIAL_PutSHexByte
                                   (0753) ;
                                   (0754) ;  DESCRIPTION:
0D11: 5D 3F    MOV   A,REG[63]     (0755) ;     Print a byte in Hex (two characters) to the UART Tx
0D13: 08       PUSH  A             (0756) ;-----------------------------------------------------------------------------
0D14: 21 08    AND   A,8           (0757) ;
0D16: B0 04    JNZ   0x0D1B        (0758) ;  ARGUMENTS:
0D18: 18       POP   A             (0759) ;     A  => (BYTE) Data/char to be printed
0D19: 80 0B    JMP   0x0D25        (0760) ;
                                   (0761) ;  RETURNS:
                                   (0762) ;     none.
0D1B: 5D 3E    MOV   A,REG[62]     (0763) ;
0D1D: 4B       SWAP  A,X           (0764) ;  SIDE EFFECTS:
                                   (0765) ;    The A and X registers may be modified by this or future implementations
0D1E: 18       POP   A             (0766) ;    of this function.  The same is true for all RAM page pointer registers in
0D1F: 21 A0    AND   A,160         (0767) ;    the Large Memory Model.  When necessary, it is the calling function's
0D21: B0 03    JNZ   0x0D25        (0768) ;    responsibility to perserve their values across calls to fastcall16 
0D23: 4B       SWAP  A,X           (0769) ;    functions.
                                   (0770) ;
0D24: 7F       RET                 (0771) .LITERAL
                                   (0772) COMP_SERIAL_HEX_STR:
                                   (0773)      DS    "0123456789ABCDEF"
0D25: 50 00    MOV   A,0           (0774) .ENDLITERAL
                                   (0775) 
                                   (0776) .SECTION
                                   (0777)  COMP_SERIAL_PutSHexByte:
0D27: 7F       RET                 (0778) _COMP_SERIAL_PutSHexByte:
                                   (0779)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0780)    push  A                             ; Save lower nibble
                                   (0781)    asr   A                             ; Shift high nibble to right
                                   (0782)    asr   A
                                   (0783)    asr   A
                                   (0784)    asr   A
                                   (0785)    and   A,0Fh                         ; Mask off nibble
                                   (0786)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0787)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0788)    pop   A                             ; Restore value
                                   (0789)    and   A,0Fh                         ; Mask off lower nibble
                                   (0790)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0791)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0792)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0793)    ret
                                   (0794) .ENDSECTION
                                   (0795) 
                                   (0796) 
                                   (0797) .SECTION
                                   (0798) ;-----------------------------------------------------------------------------
                                   (0799) ;  FUNCTION NAME: COMP_SERIAL_PutSHexInt
                                   (0800) ;
                                   (0801) ;  DESCRIPTION:
                                   (0802) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0803) ;-----------------------------------------------------------------------------
                                   (0804) ;
                                   (0805) ;  ARGUMENTS:
                                   (0806) ;     Pointer to string
                                   (0807) ;     A  => ASB of Int
                                   (0808) ;     X  => MSB of Int
                                   (0809) ;
                                   (0810) ;  RETURNS:
                                   (0811) ;     none.
                                   (0812) ;
                                   (0813) ;  SIDE EFFECTS:
                                   (0814) ;    The A and X registers may be modified by this or future implementations
                                   (0815) ;    of this function.  The same is true for all RAM page pointer registers in
0D28: 5D 3F    MOV   A,REG[63]     (0816) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0817) ;    responsibility to perserve their values across calls to fastcall16 
0D2A: 21 E8    AND   A,232         (0818) ;    functions.
0D2C: 08       PUSH  A             (0819) ;
0D2D: 21 08    AND   A,8           (0820) 
0D2F: B0 07    JNZ   0x0D37        (0821)  COMP_SERIAL_PutSHexInt:
0D31: 18       POP   A             (0822) _COMP_SERIAL_PutSHexInt:
0D32: 29 01    OR    A,1           (0823)    RAM_PROLOGUE RAM_USE_CLASS_1
0D34: 4B       SWAP  A,X           (0824)    swap  A,X
0D35: 80 07    JMP   0x0D3D        (0825)    call  COMP_SERIAL_PutSHexByte       ; Print MSB
                                   (0826)    mov   A,X                           ; Move LSB into position
                                   (0827)    call  COMP_SERIAL_PutSHexByte       ; Print LSB
0D37: 18       POP   A             (0828)    RAM_EPILOGUE RAM_USE_CLASS_1
0D38: 21 E0    AND   A,224         (0829)    ret
0D3A: 4B       SWAP  A,X           (0830) .ENDSECTION
0D3B: 5D 3E    MOV   A,REG[62]     (0831) 
                                   (0832) 
                                   (0833) .SECTION
                                   (0834) ;-----------------------------------------------------------------------------
                                   (0835) ;  FUNCTION NAME: COMP_SERIAL_PutChar
0D3D: 7F       RET                 (0836) ;
                                   (0837) ;  DESCRIPTION:
                                   (0838) ;     Send character out through UART TX port.
                                   (0839) ;-----------------------------------------------------------------------------
                                   (0840) ;
                                   (0841) ;  ARGUMENTS:
                                   (0842) ;     A has Character to send to UART Tx Port
                                   (0843) ;
                                   (0844) ;  RETURNS:
                                   (0845) ;     none
                                   (0846) ;
                                   (0847) ;  SIDE EFFECTS:
                                   (0848) ;    The A and X registers may be modified by this or future implementations
                                   (0849) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0850) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0851) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0852) ;    functions.
                                   (0853) ;
                                   (0854) 
                                   (0855)    macro InLinePutChar( Source )
                                   (0856) .BufEmptyWaitLoop:
                                   (0857)    tst REG[COMP_SERIAL_TX_CONTROL_REG], COMP_SERIAL_TX_BUFFER_EMPTY     ; Check Tx Status
                                   (0858)    jz  .BufEmptyWaitLoop
                                   (0859)    mov REG[COMP_SERIAL_TX_BUFFER_REG], @Source     ; Write data to Tx Port
                                   (0860)    endm
                                   (0861) 
                                   (0862)  COMP_SERIAL_PutChar:
                                   (0863) _COMP_SERIAL_PutChar:
                                   (0864)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0865)    InLinePutChar A
                                   (0866)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0867)    ret
0D3E: 70 BF    AND   F,191         (0868) .ENDSECTION
0D40: 60 D3    MOV   REG[211],A    (0869) 
                                   (0870) 
0D42: 52 00    MOV   A,[X+0]       (0871) .SECTION
0D44: A0 06    JZ    0x0D4B        (0872) ;-----------------------------------------------------------------------------
0D46: 9F B9    CALL  0x0D01        (0873) ;  FUNCTION NAME: COMP_SERIAL_cGetChar
0D48: 75       INC   X             (0874) ;
0D49: 8F F8    JMP   0x0D42        (0875) ;  DESCRIPTION:
0D4B: 70 3F    AND   F,63
                                   (0876) ;     Read character from UART RX port.
                                   (0877) ;-----------------------------------------------------------------------------
0D4D: 71 C0    OR    F,192         (0878) ;
0D4F: 7F       RET                 (0879) ;  ARGUMENTS:
                                   (0880) ;      none
                                   (0881) ;
                                   (0882) ;  RETURNS:
                                   (0883) ;     char that is returned from UART
                                   (0884) ;
                                   (0885) ;  SIDE EFFECTS:
                                   (0886) ;    The A and X registers may be modified by this or future implementations
                                   (0887) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0888) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0889) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0890) ;    functions.
                                   (0891) ;
                                   (0892) ;    Program flow will stay in this function until a character is received.
                                   (0893) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0894) ;    the delay between characters is less than the watchdog timeout.
                                   (0895) ;
                                   (0896)  COMP_SERIAL_cGetChar:
                                   (0897) _COMP_SERIAL_cGetChar:
                                   (0898)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0899)    tst REG[COMP_SERIAL_RX_CONTROL_REG],COMP_SERIAL_RX_REG_FULL    ; Check if a character is ready
                                   (0900)    jz  COMP_SERIAL_cGetChar                              ; If not loop
                                   (0901)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]                 ; Get character
                                   (0902)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0903)    ret
                                   (0904) .ENDSECTION
                                   (0905) 
                                   (0906) 
                                   (0907) .SECTION
                                   (0908) ;-----------------------------------------------------------------------------
                                   (0909) ;  FUNCTION NAME: COMP_SERIAL_cReadChar
                                   (0910) ;
                                   (0911) ;  DESCRIPTION:
                                   (0912) ;     Read character from UART RX port.
                                   (0913) ;-----------------------------------------------------------------------------
                                   (0914) ;
0D50: 70 BF    AND   F,191         (0915) ;  ARGUMENTS:
0D52: 62 D3 07 MOV   REG[211],7    (0916) ;      none
0D55: 4F       MOV   X,SP          (0917) ;
                                   (0918) ;  RETURNS:
                                   (0919) ;     char that is returned from UART
0D56: 52 FB    MOV   A,[X-5]       (0920) ;
0D58: A0 1A    JZ    0x0D73        (0921) ;  SIDE EFFECTS:
0D5A: 7B FB    DEC   [X-5]         (0922) ;    The A and X registers may be modified by this or future implementations
                                   (0923) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0924) ;    the Large Memory Model.  When necessary, it is the calling function's
0D5C: 52 FC    MOV   A,[X-4]       (0925) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0926) ;    functions.
                                   (0927) ;
0D5E: 59 FD    MOV   X,[X-3]       (0928) ;    A valid 0x00 character will be ignored, since a 0x00 return value
0D60: 60 D3    MOV   REG[211],A    (0929) ;    implies a valid character or an error condition occured.
0D62: 52 00    MOV   A,[X+0]       (0930) ;
0D64: 49 3B 10 TST   REG[59],16
0D67: AF FC    JZ    0x0D64        (0931)  COMP_SERIAL_cReadChar:
0D69: 60 39    MOV   REG[57],A
0D6B: 4F       MOV   X,SP          (0932) _COMP_SERIAL_cReadChar:
0D6C: 62 D3 07 MOV   REG[211],7    (0933)    RAM_PROLOGUE RAM_USE_CLASS_1
0D6F: 77 FD    INC   [X-3]         (0934)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
0D71: 8F E4    JMP   0x0D56        (0935)    push A
0D73: 70 3F    AND   F,63
                                   (0936)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (0937)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0D75: 71 C0    OR    F,192         (0938)    pop  A
0D77: 7F       RET                 (0939)    jmp  .RX_NO_VALID_CHAR
                                   (0940) 
                                   (0941) .RX_DATA_RDY:
                                   (0942)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]          
                                   (0943)    swap A,X                                                ; determine if data is valid
                                   (0944) 
                                   (0945)    pop  A                                                  ; Check for errors
                                   (0946)    and  A,(COMP_SERIAL_RX_PARITY_ERROR | COMP_SERIAL_RX_FRAMING_ERROR)
                                   (0947)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0948)    swap A,X                                                ; Put data in A and exit
                                   (0949)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0950)    ret
                                   (0951) 
                                   (0952) .RX_NO_VALID_CHAR:
                                   (0953)    mov A,0x00                                              ; Zero out character
                                   (0954) 
                                   (0955)  End_COMP_SERIAL_cReadChar:
                                   (0956)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0957)    ret
                                   (0958) .ENDSECTION
                                   (0959) 
                                   (0960) 
                                   (0961) .SECTION
                                   (0962) ;-----------------------------------------------------------------------------
                                   (0963) ;  FUNCTION NAME: COMP_SERIAL_iReadChar
                                   (0964) ;
                                   (0965) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0966) ;  to just set a value in the upper byte if error conditions exists.
                                   (0967) ;
                                   (0968) ;  DESCRIPTION:
                                   (0969) ;     Read character from UART RX port.
                                   (0970) ;-----------------------------------------------------------------------------
                                   (0971) ;
                                   (0972) ;  ARGUMENTS:
                                   (0973) ;      none
                                   (0974) ;
                                   (0975) ;  RETURNS:
                                   (0976) ;     An integer value is returned.  A negative value inplies and error
0D78: 4F       MOV   X,SP          (0977) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0978) ;
0D79: 3D FA 00 CMP   [X-6],0       (0979) ;     Error Codes:
0D7C: B0 06    JNZ   0x0D83        (0980) ;        0x80CC    Parity Error
0D7E: 3D FB 00 CMP   [X-5],0       (0981) ;        0x40CC    Overrun Error
0D81: A0 1D    JZ    0x0D9F        (0982) ;        0x20CC    Framing Error
                                   (0983) ;        0x01CC    No Data available
                                   (0984) ;
0D83: 10       PUSH  X             (0985) ;  SIDE EFFECTS:
0D84: 52 FC    MOV   A,[X-4]       (0986) ;    The A and X registers may be modified by this or future implementations
0D86: 59 FD    MOV   X,[X-3]       (0987) ;    of this function.  The same is true for all RAM page pointer registers in
0D88: 28       ROMX                (0988) ;    the Large Memory Model.  When necessary, it is the calling function's
0D89: 49 3B 10 TST   REG[59],16
0D8C: AF FC    JZ    0x0D89        (0989) ;    responsibility to perserve their values across calls to fastcall16 
0D8E: 60 39    MOV   REG[57],A
0D90: 20       POP   X             (0990) ;    functions.
0D91: 07 FD 01 ADD   [X-3],1       (0991) ;
0D94: 0F FC 00 ADC   [X-4],0       (0992)  COMP_SERIAL_iReadChar:
0D97: 17 FB 01 SUB   [X-5],1       (0993) _COMP_SERIAL_iReadChar:
0D9A: 1F FA 00 SBB   [X-6],0       (0994)    RAM_PROLOGUE RAM_USE_CLASS_1
0D9D: 8F DB    JMP   0x0D79        (0995)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
0D9F: 70 3F    AND   F,63
                                   (0996)                                                            ; Mask only errors and data ready
                                   (0997)    and  A,(COMP_SERIAL_RX_ERROR|COMP_SERIAL_RX_REG_FULL)
0DA1: 71 C0    OR    F,192         (0998)    push A
0DA3: 7F       RET                 (0999)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (1000)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (1001)    pop  A
                                   (1002)    or   A,COMP_SERIAL_RX_NO_DATA                           ; Add no data flag
                                   (1003)    swap A,X
                                   (1004)    jmp  End_COMP_SERIAL_iReadChar
                                   (1005) 
                                   (1006) .RX_GET_DATA:
                                   (1007)    pop  A
                                   (1008)    and  A,COMP_SERIAL_RX_ERROR
                                   (1009)    swap A,X
                                   (1010)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]                  ; Read data first, then
                                   (1011)                                                            ; determine if data is valid
                                   (1012) 
                                   (1013)  End_COMP_SERIAL_iReadChar:
                                   (1014)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1015)    ret
                                   (1016) .ENDSECTION
                                   (1017) 
                                   (1018) 
                                   (1019) .SECTION
                                   (1020) ;-----------------------------------------------------------------------------
                                   (1021) ;  FUNCTION NAME: COMP_SERIAL_PutString
                                   (1022) ;
                                   (1023) ;  DESCRIPTION:
                                   (1024) ;     Send String out through UART TX port.
                                   (1025) ;-----------------------------------------------------------------------------
                                   (1026) ;
                                   (1027) ;  ARGUMENTS:
                                   (1028) ;     Pointer to String
0DA4: 08       PUSH  A             (1029) ;     A has MSB of string address
0DA5: 10       PUSH  X             (1030) ;     X has LSB of string address
0DA6: 28       ROMX                (1031) ;
0DA7: A0 0B    JZ    0x0DB3        (1032) ;  RETURNS:
0DA9: 9F 56    CALL  0x0D01        (1033) ;     none
0DAB: 20       POP   X             (1034) ;
0DAC: 18       POP   A             (1035) ;  SIDE EFFECTS:
0DAD: 75       INC   X             (1036) ;    The A and X registers may be modified by this or future implementations
0DAE: DF F5    JNC   0x0DA4        (1037) ;    of this function.  The same is true for all RAM page pointer registers in
0DB0: 74       INC   A             (1038) ;    the Large Memory Model.  When necessary, it is the calling function's
0DB1: 8F F2    JMP   0x0DA4        (1039) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1040) ;    functions.
                                   (1041) ;          
                                   (1042) ;    Currently only the page pointer registers listed below are modified: 
0DB3: 38 FE    ADD   SP,254        (1043) ;          IDX_PP
                                   (1044) ;
0DB5: 7F       RET                 (1045)  COMP_SERIAL_PutString:
                                   (1046) _COMP_SERIAL_PutString:
                                   (1047)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1048)    RAM_SETPAGE_IDX A
                                   (1049) .PutStringLoop:
                                   (1050)    mov   A,[X]                                   ; Get value pointed to by X
                                   (1051)    jz    End_PutString                           ; Check for end of string
                                   (1052)    call  COMP_SERIAL_PutChar                     ; Send character to Tx port
                                   (1053)    inc   X                                       ; Advance pointer to next character
                                   (1054)    jmp   .PutStringLoop                          ; Get next character
                                   (1055) 
                                   (1056) End_PutString:
                                   (1057)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1058)    ret
                                   (1059) .ENDSECTION
                                   (1060)     
                                   (1061) .SECTION
                                   (1062) ;-----------------------------------------------------------------------------
                                   (1063) ;  FUNCTION NAME: COMP_SERIAL_Write
                                   (1064) ;
                                   (1065) ;  DESCRIPTION:
                                   (1066) ;     Send String of length X to serial port
                                   (1067) ;-----------------------------------------------------------------------------
                                   (1068) ;
                                   (1069) ;  ARGUMENTS:
                                   (1070) ;     Pointer to String
                                   (1071) ;     [SP-5] Count of characters to send
                                   (1072) ;     [SP-4] has MSB of string address
0DB6: 50 0D    MOV   A,13          (1073) ;     [SP-3] has LSB of string address
0DB8: 9F 47    CALL  0x0D01        (1074) ;
0DBA: 50 0A    MOV   A,10          (1075) ;  RETURNS:
0DBC: 9F 43    CALL  0x0D01        (1076) ;     none
                                   (1077) ;
0DBE: 7F       RET                 (1078) ;  SIDE EFFECTS:
                                   (1079) ;    The A and X registers may be modified by this or future implementations
                                   (1080) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1082) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1083) ;    functions.
                                   (1084) ;          
                                   (1085) ;    Currently only the page pointer registers listed below are modified: 
                                   (1086) ;          IDX_PP
                                   (1087) ;
                                   (1088) CNT_LEN:    equ -5                               ; Length of data to send
                                   (1089) STR_MSB:    equ -4                               ; MSB pointer of string 
                                   (1090) STR_LSB:    equ -3                               ; LSB pointer of string 
                                   (1091) 
                                   (1092)  COMP_SERIAL_Write:
                                   (1093) _COMP_SERIAL_Write:
                                   (1094)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1095)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
                                   (1096)    mov   X, SP                                   ; Establish the frame pointer 
                                   (1097) 
                                   (1098) .NextByteLoop:
                                   (1099)    mov   A, [X+CNT_LEN]                          ; End of the string?
                                   (1100)    jz    .End_Write                              ;   Yes, prepare to exit
                                   (1101)    dec   [X+CNT_LEN]                             ; Decrement counter
                                   (1102) 
                                   (1103)    IF SYSTEM_LARGE_MEMORY_MODEL
                                   (1104)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                   (1105)    ENDIF
                                   (1106) 
                                   (1107)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                   (1108)    RAM_SETPAGE_IDX A                             ; switch index pages
                                   (1109)    mov   A, [X]                                  ; Grab the data
                                   (1110)    InLinePutChar A                               ; Put data in empty TX buf reg
                                   (1111)    mov   X, SP                                   ; Recover frame pointer
                                   (1112)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
                                   (1113)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
                                   (1114)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                   (1115) 
                                   (1116) .End_Write:
                                   (1117)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1118)    ret
                                   (1119) .ENDSECTION
                                   (1120)     
0DBF: 62 D0 00 MOV   REG[208],0    (1121) 
0DC2: 55 05 00 MOV   [5],0         (1122) .SECTION
0DC5: 62 D0 00 MOV   REG[208],0    (1123) ;-----------------------------------------------------------------------------
0DC8: 55 04 00 MOV   [4],0         (1124) ;  FUNCTION NAME: COMP_SERIAL_CWrite
0DCB: 26 03 00 AND   [3],0         (1125) ;
0DCE: 62 D0 00 MOV   REG[208],0    (1126) ;             WARNING WARNING NOT COMPLETE
0DD1: 55 9E 00 MOV   [TIMEOUT+2],0 (1127) ;
                                   (1128) ;  DESCRIPTION:
0DD4: 7F       RET                 (1129) ;     Send String of length X to serial port
                                   (1130) ;-----------------------------------------------------------------------------
                                   (1131) ;
                                   (1132) ;  ARGUMENTS:
                                   (1133) ;     [SP-4] MSB of Count of character to send
                                   (1134) ;     [SP-3] LSB of Count of character to send
                                   (1135) ;     [SP-2] has MSB of string address
                                   (1136) ;     [SP-1] has LSB of string address
                                   (1137) ;
                                   (1138) ;  RETURNS:
                                   (1139) ;     none
                                   (1140) ;
                                   (1141) ;  SIDE EFFECTS:
                                   (1142) ;    The A and X registers may be modified by this or future implementations
                                   (1143) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1144) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1145) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1146) ;    functions.
                                   (1147) ;
                                   (1148) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                   (1149) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                   (1150) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (1151) CSTR_LSB:   equ -3           ; LSB pointer of string
                                   (1152) 
                                   (1153)  COMP_SERIAL_CWrite:
                                   (1154) _COMP_SERIAL_CWrite:
                                   (1155)    RAM_PROLOGUE RAM_USE_CLASS_2
                                   (1156)    mov   X,SP
                                   (1157) .CW_Loop:
                                   (1158)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
                                   (1159)    jnz   .CW_WRITEIT
                                   (1160)    cmp   [X+CLEN_LSB],0x00
                                   (1161)    jz    .End_CWrite                        ; Leave if done
                                   (1162) 
                                   (1163) .CW_WRITEIT:                                
0DD5: 62 D0 00 MOV   REG[208],0    (1164)    push  X                                  ; Save frame pointer
0DD8: 51 03    MOV   A,[3]         (1165)    mov   A,[X+CSTR_MSB]
0DDA: 21 01    AND   A,1           (1166)    mov   X,[X+CSTR_LSB]
                                   (1167)    romx                                     ; Get character from ROM
0DDC: 7F       RET                 (1168)    InLinePutChar A                          ; Put data in empty TX buf reg
                                   (1169)    pop   X                                  ; Restore frame pointer
                                   (1170)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
                                   (1171)    adc   [X+CSTR_MSB],0
                                   (1172)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
                                   (1173)    sbb   [X+CLEN_MSB],0x00
                                   (1174)    jmp   .CW_Loop
                                   (1175) 
                                   (1176) .End_CWrite:
                                   (1177)    RAM_EPILOGUE RAM_USE_CLASS_2
                                   (1178)    ret
                                   (1179) .ENDSECTION
                                   (1180) 
                                   (1181) 
                                   (1182) .SECTION
                                   (1183) ;-----------------------------------------------------------------------------
                                   (1184) ;  FUNCTION NAME: COMP_SERIAL_CPutString
                                   (1185) ;
                                   (1186) ;  DESCRIPTION:
                                   (1187) ;     Send String out through UART TX port.
                                   (1188) ;-----------------------------------------------------------------------------
                                   (1189) ;
                                   (1190) ;  ARGUMENTS:
                                   (1191) ;     Pointer to String
                                   (1192) ;     A has MSB of string address
                                   (1193) ;     X has LSB of string address
                                   (1194) ;
                                   (1195) ;  RETURNS:
                                   (1196) ;     none
                                   (1197) ;
                                   (1198) ;  SIDE EFFECTS:
                                   (1199) ;    The A and X registers may be modified by this or future implementations
                                   (1200) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1202) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1203) ;    functions.
                                   (1204) ;
                                   (1205)  COMP_SERIAL_CPutString:
                                   (1206) _COMP_SERIAL_CPutString:
                                   (1207)    RAM_PROLOGUE RAM_USE_CLASS_1
0DDD: 62 D0 00 MOV   REG[208],0    (1208)    push  A                                       ; Store ROM pointer
0DE0: 51 03    MOV   A,[3]         (1209)    push  X
0DE2: 21 F0    AND   A,240         (1210)    romx                                          ; Get character from ROM
0DE4: 26 03 0F AND   [3],15        (1211)    jz    .End_CPutString
                                   (1212)    call  COMP_SERIAL_PutChar                     ; Print character
0DE7: 7F       RET                 (1213)    pop   X
                                   (1214)    pop   A
                                   (1215)    inc   X                                       ; Inc LSB of pointer
                                   (1216)    jnc   COMP_SERIAL_CPutString                  ; Check for carry
                                   (1217)    inc   A                                       ; Inc MSB of pointer
                                   (1218)    jmp   COMP_SERIAL_CPutString
                                   (1219) 
                                   (1220) 
                                   (1221) .End_CPutString:
                                   (1222)    add   SP, -2
                                   (1223)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1224)    ret
                                   (1225) .ENDSECTION
                                   (1226) 
                                   (1227) 
                                   (1228) .SECTION
                                   (1229) ;-----------------------------------------------------------------------------
                                   (1230) ;  FUNCTION NAME: COMP_SERIAL_PutCRLF
                                   (1231) ;
                                   (1232) ;  DESCRIPTION:
                                   (1233) ;     Send a CR and LF
                                   (1234) ;-----------------------------------------------------------------------------
                                   (1235) ;
                                   (1236) ;  ARGUMENTS:
                                   (1237) ;     none.
                                   (1238) ;
                                   (1239) ;  RETURNS:
                                   (1240) ;     none.
                                   (1241) ;
                                   (1242) ;  SIDE EFFECTS:
0DE8: 62 D0 00 MOV   REG[208],0    (1243) ;    The A and X registers may be modified by this or future implementations
0DEB: 51 04    MOV   A,[4]         (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
0DED: 7F       RET                 (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1247) ;    functions.
                                   (1248) ;
                                   (1249)  COMP_SERIAL_PutCRLF:
                                   (1250) _COMP_SERIAL_PutCRLF:
                                   (1251)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (1252)    mov  A,0x0D                        ; Send CR
                                   (1253)    call COMP_SERIAL_PutChar
                                   (1254)    mov  A,0x0A                        ; Send LF
                                   (1255)    call COMP_SERIAL_PutChar
                                   (1256)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1257)    ret
                                   (1258) .ENDSECTION
                                   (1259) 
                                   (1260) 
                                   (1261) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (1262) ;=============================================================================
                                   (1263) ;=============================================================================
                                   (1264) ;
                                   (1265) ;     Command Buffer commands
                                   (1266) ;
                                   (1267) ;=============================================================================
                                   (1268) ;=============================================================================
                                   (1269) 
                                   (1270) .SECTION
                                   (1271) ;-----------------------------------------------------------------------------
                                   (1272) ;  FUNCTION NAME: COMP_SERIAL_CmdReset
                                   (1273) ;
                                   (1274) ;  DESCRIPTION:
                                   (1275) ;     Reset command string and status flags
                                   (1276) ;-----------------------------------------------------------------------------
                                   (1277) ;
                                   (1278) ;  ARGUMENTS:
                                   (1279) ;     none.
                                   (1280) ;
                                   (1281) ;  RETURNS:
                                   (1282) ;     none.
                                   (1283) ;
                                   (1284) ;  SIDE EFFECTS:
                                   (1285) ;    The A and X registers may be modified by this or future implementations
                                   (1286) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1287) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1288) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1289) ;    functions.
                                   (1290) ;          
                                   (1291) ;    Currently only the page pointer registers listed below are modified: 
                                   (1292) ;          CUR_PP
                                   (1293) ;
                                   (1294) ;  THEORY of OPERATION or PROCEDURE:
                                   (1295) ;     Clear the command buffer, command counter, and flag.
                                   (1296) ;
                                   (1297)  COMP_SERIAL_CmdReset:
                                   (1298) _COMP_SERIAL_CmdReset:
                                   (1299)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1300)    RAM_SETPAGE_CUR >COMP_SERIAL_aRxBuffer
0DEE: 70 BF    AND   F,191         (1301)    mov [COMP_SERIAL_aRxBuffer], 0x00
                                   (1302)    RAM_SETPAGE_CUR >COMP_SERIAL_bRxCnt
0DF0: 62 D0 00 MOV   REG[208],0    (1303)    mov [COMP_SERIAL_bRxCnt], 0x00
0DF3: 50 05    MOV   A,5           (1304)    and [COMP_SERIAL_fStatus], 0x00
0DF5: 02 9E    ADD   A,[TIMEOUT+2] (1305)    RAM_SETPAGE_CUR >ptrParam
0DF7: 5C       MOV   X,A           (1306)    mov [ptrParam],0x00
0DF8: 62 D3 00 MOV   REG[211],0    (1307)    RAM_EPILOGUE RAM_USE_CLASS_4
0DFB: 52 00    MOV   A,[X+0]       (1308)    ret
0DFD: B0 04    JNZ   0x0E02        (1309) .ENDSECTION
0DFF: 10       PUSH  X             (1310) 
0E00: 80 33    JMP   0x0E34        (1311) 
                                   (1312) .SECTION
                                   (1313) ;-----------------------------------------------------------------------------
                                   (1314) ;  FUNCTION NAME: COMP_SERIAL_bCmdCheck
0E02: 39 2C    CMP   A,44          (1315) ;
0E04: B0 11    JNZ   0x0E16        (1316) ;  DESCRIPTION:
0E06: 75       INC   X             (1317) ;     Check to see if valid command in buffer.
0E07: 76 9E    INC   [TIMEOUT+2]   (1318) ;-----------------------------------------------------------------------------
0E09: 52 00    MOV   A,[X+0]       (1319) ;
0E0B: 3C 9E 3F CMP   [TIMEOUT+2],63(1320) ;  ARGUMENTS:
0E0E: BF F3    JNZ   0x0E02        (1321) ;     none.
                                   (1322) ;
                                   (1323) ;  RETURNS:
0E10: 10       PUSH  X             (1324) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1325) ;                     Returns non-zero value in A if command is valid.
0E11: 56 00 00 MOV   [X+0],0       (1326) ;
0E14: 80 1F    JMP   0x0E34        (1327) ;  SIDE EFFECTS:
                                   (1328) ;    The A and X registers may be modified by this or future implementations
                                   (1329) ;    of this function.  The same is true for all RAM page pointer registers in
0E16: 10       PUSH  X             (1330) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1331) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1332) ;    functions.
0E17: 75       INC   X             (1333) ;          
0E18: 76 9E    INC   [TIMEOUT+2]   (1334) ;    Currently only the page pointer registers listed below are modified: 
0E1A: 3C 9E 3F CMP   [TIMEOUT+2],63(1335) ;          CUR_PP
0E1D: AF F3    JZ    0x0E11        (1336) ;
0E1F: 52 00    MOV   A,[X+0]       (1337) ;  THEORY of OPERATION or PROCEDURE:
0E21: A0 12    JZ    0x0E34        (1338) ;     Read the status and control register.
0E23: 39 2C    CMP   A,44          (1339) ;
0E25: BF F1    JNZ   0x0E17        (1340)  COMP_SERIAL_bCmdCheck:
0E27: 56 00 00 MOV   [X+0],0       (1341) _COMP_SERIAL_bCmdCheck:
0E2A: 76 9E    INC   [TIMEOUT+2]   (1342)    RAM_PROLOGUE RAM_USE_CLASS_4
0E2C: 3C 9E 3F CMP   [TIMEOUT+2],63(1343)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
0E2F: B0 04    JNZ   0x0E34        (1344)    mov A,  [COMP_SERIAL_fStatus]
0E31: 55 9E 3F MOV   [TIMEOUT+2],63(1345)    and A, COMP_SERIAL_RX_BUF_CMDTERM             ; Mask off Command status
                                   (1346)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1347)    ret
0E34: 20       POP   X             (1348) .ENDSECTION
0E35: 10       PUSH  X             (1349)     
0E36: 3D 00 00 CMP   [X+0],0       (1350) 
0E39: B0 0B    JNZ   0x0E45        (1351) .SECTION
0E3B: 20       POP   X             (1352) ;-----------------------------------------------------------------------------
0E3C: 57 00    MOV   X,0           (1353) ;  FUNCTION NAME: COMP_SERIAL_bErrCheck
0E3E: 50 00    MOV   A,0           (1354) ;
0E40: 70 3F    AND   F,63
0E42: 71 C0    OR    F,192         (1355) ;  DESCRIPTION:
                                   (1356) ;     Check to see if an error has occured since last CmdReset
0E44: 7F       RET                 (1357) ;-----------------------------------------------------------------------------
                                   (1358) ;
                                   (1359) ;  ARGUMENTS:
0E45: 20       POP   X             (1360) ;     none.
0E46: 50 00    MOV   A,0           (1361) ;
0E48: 70 3F    AND   F,63
0E4A: 71 C0    OR    F,192         (1362) ;  RETURNS:
                                   (1363) ;     BYTE  fStatus - Status of command receive buffer.
0E4C: 7F       RET                 (1364) ;                     Returns non-zero value in A if command is valid.
                                   (1365) ;           0x80 => Parity Error
                                   (1366) ;           0x40 => OverRun Error
                                   (1367) ;           0x20 => Framing Error
                                   (1368) ;           0x10 => Software Buffer OverRun
                                   (1369) ;
                                   (1370) ;  SIDE EFFECTS:
                                   (1371) ;    The A and X registers may be modified by this or future implementations
                                   (1372) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1373) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1374) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1375) ;    functions.
                                   (1376) ;          
                                   (1377) ;    Currently only the page pointer registers listed below are modified: 
                                   (1378) ;          CUR_PP
                                   (1379) ;     Error Status is clear when read.
                                   (1380) ;
                                   (1381) ;  THEORY of OPERATION or PROCEDURE:
                                   (1382) ;     Read RX buffer error status and clear status
                                   (1383) ;
                                   (1384)  COMP_SERIAL_bErrCheck:
                                   (1385) _COMP_SERIAL_bErrCheck:
                                   (1386)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1387)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
                                   (1388)    mov A,  [COMP_SERIAL_fStatus]
                                   (1389)    and A, COMP_SERIAL_RX_BUF_ERROR               ; Mask off Error status
                                   (1390)    and [COMP_SERIAL_fStatus], ~COMP_SERIAL_RX_BUF_ERROR
                                   (1391)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1392)    ret
                                   (1393) .ENDSECTION
                                   (1394) 
0E4D: 62 D0 00 MOV   REG[208],0    (1395) .SECTION
0E50: 50 05    MOV   A,5           (1396) ;-----------------------------------------------------------------------------
0E52: 02 9E    ADD   A,[TIMEOUT+2] (1397) ;  FUNCTION NAME: COMP_SERIAL_bCmdLength
0E54: 5C       MOV   X,A           (1398) ;
0E55: 50 00    MOV   A,0           (1399) ;  DESCRIPTION:
                                   (1400) ;     Get length of command string
__text_start:
_main:
0E58: 43 E0 20 OR    REG[224],32   (1401) ;-----------------------------------------------------------------------------

FILE: C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
(0106) //----------------------------------------------------------------------------
(0107) // C main line
(0108) //----------------------------------------------------------------------------
0E5B: 71 01    OR    F,1
(0109) 
(0110) #include <m8c.h>        	// part specific constants and macros
(0111) #include "PSoCAPI.h"    	// PSoC API definitions for all User Modules
0E5D: 7C 1A 8F LCALL _initializeSlaves
0E60: 80 0F    JMP   0x0E70
(0112) #include "psocdynamic.h"
(0113) #include <stdlib.h>
(0114) #include <string.h>
(0115) #pragma interrupt_handler TX_TIMEOUT_ISR
(0116) #pragma interrupt_handler RX_TIMEOUT_ISR
0E62: 10       PUSH  X
0E63: 7C 0D D5 LCALL 0x0DD5
0E66: 62 D0 00 MOV   REG[208],0
0E69: 20       POP   X
0E6A: 39 00    CMP   A,0
0E6C: A0 03    JZ    0x0E70
(0117) 
(0118) // These defines are used as parameters of the configToggle function.
0E6E: 94 2C    CALL  _decodeTransmission
0E70: 8F F1    JMP   0x0E62
0E72: 8F FF    JMP   0x0E72
(0119) // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
(0120) #define		PC_MODE						(2)
(0121) #define		RX_MODE						(1)
(0122) #define		TX_MODE						(0)
(0123) 
(0124) // These defines are used as comparisons to find what port the newest module is connected to.
_pingModule:
  response             --> X+0
  module_id            --> X-5
0E74: 10       PUSH  X
0E75: 4F       MOV   X,SP
0E76: 38 02    ADD   SP,2
(0125) #define		PORT_1						('1')
0E78: 56 01 00 MOV   [X+1],0
0E7B: 56 00 00 MOV   [X+0],0
(0126) #define		PORT_2						('2')
(0127) #define		PORT_3						('3')
0E7E: 50 00    MOV   A,0
0E80: 08       PUSH  A
0E81: 08       PUSH  A
0E82: 7C 19 22 LCALL _configToggle
0E85: 38 FE    ADD   SP,254
(0128) #define		PORT_4						('4')
(0129) 
(0130) // These defines are used as transmission indicators.
0E87: 10       PUSH  X
0E88: 50 FC    MOV   A,252
0E8A: 7C 09 B6 LCALL 0x09B6
0E8D: 20       POP   X
(0131) #define		START_TRANSMIT				(252)	// Indicates the beginning of a transmission.
0E8E: 10       PUSH  X
0E8F: 50 FC    MOV   A,252
0E91: 7C 09 B6 LCALL 0x09B6
0E94: 20       POP   X
(0132) #define		END_TRANSMIT				(253)	// Indicates the end of a transmission.
0E95: 10       PUSH  X
0E96: 50 00    MOV   A,0
0E98: 7C 09 B6 LCALL 0x09B6
0E9B: 20       POP   X
(0133) #define		HELLO_BYTE					(200)	// Indicates master is ready to talk.
0E9C: 62 D0 00 MOV   REG[208],0
0E9F: 52 FC    MOV   A,[X-4]
0EA1: 10       PUSH  X
0EA2: 7C 09 B6 LCALL 0x09B6
0EA5: 20       POP   X
(0134) #define		ID_ASSIGNMENT				(201)	// Indicates an ID assignment from the master.
0EA6: 10       PUSH  X
0EA7: 50 CB    MOV   A,203
0EA9: 7C 09 B6 LCALL 0x09B6
0EAC: 20       POP   X
(0135) #define		ID_ASSIGN_OK				(202)	// Indicates an ID assignment is acknowledged.
0EAD: 10       PUSH  X
0EAE: 50 FD    MOV   A,253
0EB0: 7C 09 B6 LCALL 0x09B6
0EB3: 20       POP   X
(0136) #define		PING						(203)	// Indicates that someone is pinging someone else.
0EB4: 10       PUSH  X
0EB5: 50 FD    MOV   A,253
0EB7: 7C 09 B6 LCALL 0x09B6
0EBA: 20       POP   X
(0137) #define		CLEAR_CONFIG				(204)	// Indicates that the master is asking for a config clear.
(0138) #define		CONFIG_CLEARED				(205)	// Indicates that a module has cleared its own config.
(0139) #define		MASTER_ID					(0)		// The master node's ID.
0EBB: 10       PUSH  X
0EBC: 7C 09 89 LCALL 0x0989
0EBF: 62 D0 00 MOV   REG[208],0
0EC2: 20       POP   X
0EC3: 53 97    MOV   [__r0],A
0EC5: 47 97 20 TST   [__r0],32
0EC8: AF F2    JZ    0x0EBB
(0140) #define		BROADCAST					(254)	// The broadcast ID for talking to all nodes.
(0141) #define		BLANK_MODULE_ID				(251)	// This is the ID of an unconfigured module.
0ECA: 7C 1B CD LCALL _xmitWait
(0142) 
(0143) // These defines are used to fill in the instruction we are using on the servo.
0ECD: 50 00    MOV   A,0
0ECF: 08       PUSH  A
0ED0: 50 01    MOV   A,1
0ED2: 08       PUSH  A
0ED3: 7C 19 22 LCALL _configToggle
0ED6: 38 FE    ADD   SP,254
(0144) #define		PING_SERVO					(1)		// This is the instruction number for ping.
(0145) #define		READ_SERVO					(2)		// This is the instruction number for a read.
0ED8: 10       PUSH  X
0ED9: 7C 0A 47 LCALL 0x0A47
0EDC: 20       POP   X
(0146) #define		WRITE_SERVO					(3)		// This is the instruction number for a write.
0EDD: 62 D0 00 MOV   REG[208],0
0EE0: 55 9D 00 MOV   [TIMEOUT+1],0
0EE3: 55 9C 00 MOV   [TIMEOUT],0
(0147) #define		RESET_SERVO					(6)		// This is the instruction to reset the servo EEPROM.
0EE6: 10       PUSH  X
0EE7: 7C 0A 43 LCALL 0x0A43
0EEA: 20       POP   X
0EEB: 80 3C    JMP   0x0F28
(0148) 
(0149) // These defines are used for transmission timing.
(0150) #define 	RX_TIMEOUT_DURATION			(5)		// This is receive wait time in 1 ms units.
(0151) 
0EED: 92 B9    CALL  _validTransmission
0EEF: 62 D0 00 MOV   REG[208],0
0EF2: 3C 97 00 CMP   [__r0],0
0EF5: B0 06    JNZ   0x0EFC
0EF7: 3C 96 00 CMP   [__r1],0
0EFA: A0 2D    JZ    0x0F28
(0152) // These defines are used for the initial probing stage. This module first waits until it hears
(0153) // a byte on the bus. Once this happens, this module waits until there is a BUS_CLEAR_TIME
0EFC: 62 D0 00 MOV   REG[208],0
0EFF: 3C A2 CB CMP   [COMMAND_TYPE],203
0F02: B0 25    JNZ   0x0F28
(0154) // period of no communication before attempting to probe for modules and assign ID numbers.
(0155) // MAX_TIMEOUTS is the number of failed attempts allowed to find an unconfigured module after
(0156) // the first module is found. After all of this, this module goes into a PC listening mode.
0F04: 62 D0 00 MOV   REG[208],0
0F07: 3C A0 00 CMP   [COMMAND_DESTINATION],0
0F0A: B0 1D    JNZ   0x0F28
(0157) #define		BUS_CLEAR_TIME				(100)	// Min time after a byte to assume bus is clear at boot.
(0158) #define		BOOT_TIMEOUT				(300)	// If nothing is heard by this time, we start the init anyway.
0F0C: 62 D0 00 MOV   REG[208],0
0F0F: 51 A1    MOV   A,[COMMAND_SOURCE]
0F11: 62 D0 00 MOV   REG[208],0
0F14: 53 96    MOV   [__r1],A
0F16: 50 00    MOV   A,0
0F18: 3B FB    CMP   A,[X-5]
0F1A: B0 0D    JNZ   0x0F28
0F1C: 51 96    MOV   A,[__r1]
0F1E: 3B FC    CMP   A,[X-4]
0F20: B0 07    JNZ   0x0F28
(0159) #define		MAX_TIMEOUTS				(50)	// Number of timeouts allowed before hello mode exit.
(0160) 
0F22: 56 01 01 MOV   [X+1],1
0F25: 56 00 00 MOV   [X+0],0
0F28: 62 D0 00 MOV   REG[208],0
0F2B: 51 9D    MOV   A,[TIMEOUT+1]
0F2D: 11 05    SUB   A,5
0F2F: 51 9C    MOV   A,[TIMEOUT]
0F31: 31 80    XOR   A,128
0F33: 19 80    SBB   A,128
0F35: D0 0B    JNC   0x0F41
0F37: 3D 00 00 CMP   [X+0],0
0F3A: B0 06    JNZ   0x0F41
0F3C: 3D 01 00 CMP   [X+1],0
0F3F: AF AD    JZ    0x0EED
(0161) // This is the maximum number of allowable modules per branch out from the master
(0162) #define		MAX_MODULES					(250)
(0163) 
(0164) #define		SERVO_START					(255)
(0165) 
(0166) // This function receives a mode identifier as a parameter and toggles the
(0167) // system configuration between receive and transmit modes for half duplex UART.
0F41: 10       PUSH  X
0F42: 7C 0A 47 LCALL 0x0A47
0F45: 20       POP   X
(0168) void configToggle(int mode);
0F46: 62 D0 00 MOV   REG[208],0
0F49: 55 9D 00 MOV   [TIMEOUT+1],0
0F4C: 55 9C 00 MOV   [TIMEOUT],0
(0169) 
0F4F: 10       PUSH  X
0F50: 7C 0A 43 LCALL 0x0A43
0F53: 20       POP   X
(0170) // This function pings the index passed to it. Returns 1 on success, 0 on fail.
(0171) int pingModule(int module_id);
0F54: 62 D0 00 MOV   REG[208],0
0F57: 52 01    MOV   A,[X+1]
0F59: 53 96    MOV   [__r1],A
0F5B: 52 00    MOV   A,[X+0]
0F5D: 53 97    MOV   [__r0],A
0F5F: 38 FE    ADD   SP,254
0F61: 20       POP   X
0F62: 7F       RET   
(0172) 
(0173) // This function assigns an ID to a module.
(0174) int assignID(int assigned_ID);
(0175) 
_assignID:
  success              --> X+0
  assigned_ID          --> X-5
0F63: 10       PUSH  X
0F64: 4F       MOV   X,SP
0F65: 38 02    ADD   SP,2
(0176) int validTransmission(void);
0F67: 56 01 00 MOV   [X+1],0
0F6A: 56 00 00 MOV   [X+0],0
(0177) 
(0178) void decodeTransmission(void);
0F6D: 50 00    MOV   A,0
0F6F: 08       PUSH  A
0F70: 08       PUSH  A
0F71: 7C 19 22 LCALL _configToggle
0F74: 38 FE    ADD   SP,254
(0179) 
(0180) void busListen(void);
(0181) 
0F76: 10       PUSH  X
0F77: 50 FC    MOV   A,252
0F79: 7C 09 B6 LCALL 0x09B6
0F7C: 20       POP   X
(0182) void sayHello(void);
0F7D: 10       PUSH  X
0F7E: 50 FC    MOV   A,252
0F80: 7C 09 B6 LCALL 0x09B6
0F83: 20       POP   X
(0183) 
0F84: 10       PUSH  X
0F85: 50 00    MOV   A,0
0F87: 7C 09 B6 LCALL 0x09B6
0F8A: 20       POP   X
(0184) void servoInstruction(char id, char length, char instruction, char address, char value);
0F8B: 10       PUSH  X
0F8C: 50 FB    MOV   A,251
0F8E: 7C 09 B6 LCALL 0x09B6
0F91: 20       POP   X
(0185) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
0F92: 10       PUSH  X
0F93: 50 C9    MOV   A,201
0F95: 7C 09 B6 LCALL 0x09B6
0F98: 20       POP   X
(0186) 
0F99: 62 D0 00 MOV   REG[208],0
0F9C: 52 FC    MOV   A,[X-4]
0F9E: 10       PUSH  X
0F9F: 7C 09 B6 LCALL 0x09B6
0FA2: 20       POP   X
(0187) int clearConfig(int module_id);
0FA3: 10       PUSH  X
0FA4: 50 FD    MOV   A,253
0FA6: 7C 09 B6 LCALL 0x09B6
0FA9: 20       POP   X
(0188) // This function checks the current mode and unloads the configuration for that mode.
0FAA: 10       PUSH  X
0FAB: 50 FD    MOV   A,253
0FAD: 7C 09 B6 LCALL 0x09B6
0FB0: 20       POP   X
(0189) void unloadAllConfigs(void);
(0190) // This function unloads the configuration corresponding to the number passed to it.
(0191) void unloadConfig(int config_num);
0FB1: 10       PUSH  X
0FB2: 7C 09 89 LCALL 0x0989
0FB5: 62 D0 00 MOV   REG[208],0
0FB8: 20       POP   X
0FB9: 53 97    MOV   [__r0],A
0FBB: 47 97 20 TST   [__r0],32
0FBE: AF F2    JZ    0x0FB1
(0192) // Initialization function for the slave module controllers.
(0193) void initializeSlaves(void);
0FC0: 7C 1B CD LCALL _xmitWait
(0194) // Static wait time of approximately 50 microseconds for use after starting a transmission.
(0195) void xmitWait(void);
0FC3: 50 00    MOV   A,0
0FC5: 08       PUSH  A
0FC6: 50 01    MOV   A,1
0FC8: 08       PUSH  A
0FC9: 7C 19 22 LCALL _configToggle
0FCC: 38 FE    ADD   SP,254
(0196) 
(0197) // This flag is set if there is a timeout.
0FCE: 10       PUSH  X
0FCF: 7C 0A 47 LCALL 0x0A47
0FD2: 20       POP   X
(0198) int TIMEOUT;
0FD3: 62 D0 00 MOV   REG[208],0
0FD6: 55 9D 00 MOV   [TIMEOUT+1],0
0FD9: 55 9C 00 MOV   [TIMEOUT],0
(0199) 
0FDC: 10       PUSH  X
0FDD: 7C 0A 43 LCALL 0x0A43
0FE0: 20       POP   X
0FE1: 80 3C    JMP   0x101E
(0200) int NUM_MODULES;			// Stores the number of modules that have been discovered.
(0201) char COMMAND_SOURCE;		// Stores who the current command is from.
(0202) char COMMAND_DESTINATION;	// Stores who the current command is for.
(0203) char COMMAND_TYPE;			// Stores the type of command that was just read.
0FE3: 91 C3    CALL  _validTransmission
0FE5: 62 D0 00 MOV   REG[208],0
0FE8: 3C 97 00 CMP   [__r0],0
0FEB: B0 06    JNZ   0x0FF2
0FED: 3C 96 00 CMP   [__r1],0
0FF0: A0 2D    JZ    0x101E
(0204) char PARAM[10];				// Stores a parameters that accompanies the command (if any).
(0205) int STATE;					// Stores the current configuration state of the system.
0FF2: 62 D0 00 MOV   REG[208],0
0FF5: 3C A2 CA CMP   [COMMAND_TYPE],202
0FF8: B0 25    JNZ   0x101E
(0206) 
(0207) void main()
(0208) {	
0FFA: 62 D0 00 MOV   REG[208],0
0FFD: 3C A0 00 CMP   [COMMAND_DESTINATION],0
1000: B0 1D    JNZ   0x101E
(0209) 	// Activate GPIO ISR.
(0210) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO);
1002: 62 D0 00 MOV   REG[208],0
1005: 51 A1    MOV   A,[COMMAND_SOURCE]
1007: 62 D0 00 MOV   REG[208],0
100A: 53 96    MOV   [__r1],A
100C: 50 00    MOV   A,0
100E: 3B FB    CMP   A,[X-5]
1010: B0 0D    JNZ   0x101E
1012: 51 96    MOV   A,[__r1]
1014: 3B FC    CMP   A,[X-4]
1016: B0 07    JNZ   0x101E
(0211) 	
(0212) 	// Turn on global interrupts for the transmission timeout timer.
1018: 56 01 01 MOV   [X+1],1
101B: 56 00 00 MOV   [X+0],0
101E: 62 D0 00 MOV   REG[208],0
1021: 51 9D    MOV   A,[TIMEOUT+1]
1023: 11 05    SUB   A,5
1025: 51 9C    MOV   A,[TIMEOUT]
1027: 31 80    XOR   A,128
1029: 19 80    SBB   A,128
102B: D0 0B    JNC   0x1037
102D: 3D 00 00 CMP   [X+0],0
1030: B0 06    JNZ   0x1037
1032: 3D 01 00 CMP   [X+1],0
1035: AF AD    JZ    0x0FE3
(0213) 	M8C_EnableGInt;
(0214) 	
(0215) 	// Initialize all of the slave modules.
(0216) 	initializeSlaves();
(0217) 	
(0218) 	while(1)
(0219) 	{	
1037: 10       PUSH  X
1038: 7C 0A 47 LCALL 0x0A47
103B: 20       POP   X
(0220) 		// If there's a command from the computer, read it.
103C: 62 D0 00 MOV   REG[208],0
103F: 55 9D 00 MOV   [TIMEOUT+1],0
1042: 55 9C 00 MOV   [TIMEOUT],0
(0221) 		if(COMP_SERIAL_bCmdCheck())
1045: 10       PUSH  X
1046: 7C 0A 43 LCALL 0x0A43
1049: 20       POP   X
(0222) 		{
(0223) 			decodeTransmission();
104A: 62 D0 00 MOV   REG[208],0
104D: 52 01    MOV   A,[X+1]
104F: 53 96    MOV   [__r1],A
1051: 52 00    MOV   A,[X+0]
1053: 53 97    MOV   [__r0],A
1055: 38 FE    ADD   SP,254
1057: 20       POP   X
1058: 7F       RET   
(0224) 		}
(0225) 	}
(0226) }
(0227) 
_clearConfig:
  response             --> X+0
  module_id            --> X-5
1059: 10       PUSH  X
105A: 4F       MOV   X,SP
105B: 38 02    ADD   SP,2
(0228) int pingModule(int module_id)
105D: 56 01 00 MOV   [X+1],0
1060: 56 00 00 MOV   [X+0],0
(0229) {
(0230) 	int response = 0;
1063: 50 00    MOV   A,0
1065: 08       PUSH  A
1066: 08       PUSH  A
1067: 7C 19 22 LCALL _configToggle
106A: 38 FE    ADD   SP,254
(0231) 	
(0232) 	configToggle(TX_MODE);	// Toggle into TX mode.
(0233) 			
106C: 10       PUSH  X
106D: 50 FC    MOV   A,252
106F: 7C 09 B6 LCALL 0x09B6
1072: 20       POP   X
(0234) 	// Transmit a hello.
1073: 10       PUSH  X
1074: 50 FC    MOV   A,252
1076: 7C 09 B6 LCALL 0x09B6
1079: 20       POP   X
(0235) 	TRANSMIT_PutChar(START_TRANSMIT);
107A: 10       PUSH  X
107B: 50 00    MOV   A,0
107D: 7C 09 B6 LCALL 0x09B6
1080: 20       POP   X
(0236) 	TRANSMIT_PutChar(START_TRANSMIT);
1081: 62 D0 00 MOV   REG[208],0
1084: 52 FC    MOV   A,[X-4]
1086: 10       PUSH  X
1087: 7C 09 B6 LCALL 0x09B6
108A: 20       POP   X
(0237) 	TRANSMIT_PutChar(MASTER_ID);
108B: 10       PUSH  X
108C: 50 CC    MOV   A,204
108E: 7C 09 B6 LCALL 0x09B6
1091: 20       POP   X
(0238) 	TRANSMIT_PutChar(module_id);
1092: 10       PUSH  X
1093: 50 FD    MOV   A,253
1095: 7C 09 B6 LCALL 0x09B6
1098: 20       POP   X
(0239) 	TRANSMIT_PutChar(PING);
1099: 10       PUSH  X
109A: 50 FD    MOV   A,253
109C: 7C 09 B6 LCALL 0x09B6
109F: 20       POP   X
(0240) 	TRANSMIT_PutChar(END_TRANSMIT);
(0241) 	TRANSMIT_PutChar(END_TRANSMIT);
(0242) 	
10A0: 10       PUSH  X
10A1: 7C 09 89 LCALL 0x0989
10A4: 62 D0 00 MOV   REG[208],0
10A7: 20       POP   X
10A8: 53 97    MOV   [__r0],A
10AA: 47 97 20 TST   [__r0],32
10AD: AF F2    JZ    0x10A0
(0243) 	// Wait for the transmission to finish.
(0244) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
10AF: 7C 1B CD LCALL _xmitWait
(0245) 	
(0246) 	xmitWait();
10B2: 50 00    MOV   A,0
10B4: 08       PUSH  A
10B5: 50 01    MOV   A,1
10B7: 08       PUSH  A
10B8: 7C 19 22 LCALL _configToggle
10BB: 38 FE    ADD   SP,254
(0247) 	
(0248) 	configToggle(RX_MODE);	// Listen for the response.
10BD: 3D FB 00 CMP   [X-5],0
10C0: B0 06    JNZ   0x10C7
10C2: 3D FC FE CMP   [X-4],254
10C5: A0 7D    JZ    0x1143
(0249) 	
(0250) 	RX_TIMEOUT_Stop();
10C7: 10       PUSH  X
10C8: 7C 0A 47 LCALL 0x0A47
10CB: 20       POP   X
(0251) 	TIMEOUT = 0;
10CC: 62 D0 00 MOV   REG[208],0
10CF: 55 9D 00 MOV   [TIMEOUT+1],0
10D2: 55 9C 00 MOV   [TIMEOUT],0
(0252) 	RX_TIMEOUT_Start();
10D5: 10       PUSH  X
10D6: 7C 0A 43 LCALL 0x0A43
10D9: 20       POP   X
10DA: 80 3C    JMP   0x1117
(0253) 	
(0254) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
(0255) 	{
(0256) 		if(validTransmission())
10DC: 90 CA    CALL  _validTransmission
10DE: 62 D0 00 MOV   REG[208],0
10E1: 3C 97 00 CMP   [__r0],0
10E4: B0 06    JNZ   0x10EB
10E6: 3C 96 00 CMP   [__r1],0
10E9: A0 2D    JZ    0x1117
(0257) 		{
(0258) 			if(COMMAND_TYPE == PING)	// This is the response we are looking for.
10EB: 62 D0 00 MOV   REG[208],0
10EE: 3C A2 CD CMP   [COMMAND_TYPE],205
10F1: B0 25    JNZ   0x1117
(0259) 			{
(0260) 				// If this is for me, check who it was from.
(0261) 				if(COMMAND_DESTINATION == MASTER_ID)
10F3: 62 D0 00 MOV   REG[208],0
10F6: 3C A0 00 CMP   [COMMAND_DESTINATION],0
10F9: B0 1D    JNZ   0x1117
(0262) 				{
(0263) 					if(COMMAND_SOURCE == module_id)
10FB: 62 D0 00 MOV   REG[208],0
10FE: 51 A1    MOV   A,[COMMAND_SOURCE]
1100: 62 D0 00 MOV   REG[208],0
1103: 53 96    MOV   [__r1],A
1105: 50 00    MOV   A,0
1107: 3B FB    CMP   A,[X-5]
1109: B0 0D    JNZ   0x1117
110B: 51 96    MOV   A,[__r1]
110D: 3B FC    CMP   A,[X-4]
110F: B0 07    JNZ   0x1117
(0264) 					{
(0265) 						response = 1;
1111: 56 01 01 MOV   [X+1],1
1114: 56 00 00 MOV   [X+0],0
1117: 62 D0 00 MOV   REG[208],0
111A: 51 9D    MOV   A,[TIMEOUT+1]
111C: 11 05    SUB   A,5
111E: 51 9C    MOV   A,[TIMEOUT]
1120: 31 80    XOR   A,128
1122: 19 80    SBB   A,128
1124: D0 0B    JNC   0x1130
1126: 3D 00 00 CMP   [X+0],0
1129: B0 06    JNZ   0x1130
112B: 3D 01 00 CMP   [X+1],0
112E: AF AD    JZ    0x10DC
(0266) 					}
(0267) 				}
(0268) 			}
(0269) 		}
(0270) 	}
(0271) 	
(0272) 	RX_TIMEOUT_Stop();
1130: 10       PUSH  X
1131: 7C 0A 47 LCALL 0x0A47
1134: 20       POP   X
(0273) 	TIMEOUT = 0;
1135: 62 D0 00 MOV   REG[208],0
1138: 55 9D 00 MOV   [TIMEOUT+1],0
113B: 55 9C 00 MOV   [TIMEOUT],0
(0274) 	RX_TIMEOUT_Start();
113E: 10       PUSH  X
113F: 7C 0A 43 LCALL 0x0A43
1142: 20       POP   X
(0275) 	
(0276) 	return response;
(0277) }
1143: 62 D0 00 MOV   REG[208],0
1146: 52 01    MOV   A,[X+1]
1148: 53 96    MOV   [__r1],A
114A: 52 00    MOV   A,[X+0]
114C: 53 97    MOV   [__r0],A
114E: 38 FE    ADD   SP,254
1150: 20       POP   X
1151: 7F       RET   
(0278) 
(0279) int assignID(int assigned_ID)
(0280) {
(0281) 	int success = 0;		// Stores 0 on fail, 1 on success.
(0282) 	
(0283) 	configToggle(TX_MODE);	// Switch to TX mode.
_sayHello:
1152: 50 00    MOV   A,0
1154: 08       PUSH  A
1155: 08       PUSH  A
1156: 97 CA    CALL  _configToggle
1158: 38 FE    ADD   SP,254
(0284) 
(0285) 	// Transmit the assignment.
(0286) 	TRANSMIT_PutChar(START_TRANSMIT);
115A: 10       PUSH  X
115B: 50 FC    MOV   A,252
115D: 7C 09 B6 LCALL 0x09B6
1160: 20       POP   X
(0287) 	TRANSMIT_PutChar(START_TRANSMIT);
1161: 10       PUSH  X
1162: 50 FC    MOV   A,252
1164: 7C 09 B6 LCALL 0x09B6
1167: 20       POP   X
(0288) 	TRANSMIT_PutChar(MASTER_ID);
1168: 10       PUSH  X
1169: 50 00    MOV   A,0
116B: 7C 09 B6 LCALL 0x09B6
116E: 20       POP   X
(0289) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
116F: 10       PUSH  X
1170: 50 FB    MOV   A,251
1172: 7C 09 B6 LCALL 0x09B6
1175: 20       POP   X
(0290) 	TRANSMIT_PutChar(ID_ASSIGNMENT);
1176: 10       PUSH  X
1177: 50 C8    MOV   A,200
1179: 7C 09 B6 LCALL 0x09B6
117C: 20       POP   X
(0291) 	TRANSMIT_PutChar(assigned_ID);
117D: 10       PUSH  X
117E: 50 FD    MOV   A,253
1180: 7C 09 B6 LCALL 0x09B6
1183: 20       POP   X
(0292) 	TRANSMIT_PutChar(END_TRANSMIT);
1184: 10       PUSH  X
1185: 50 FD    MOV   A,253
1187: 7C 09 B6 LCALL 0x09B6
118A: 20       POP   X
(0293) 	TRANSMIT_PutChar(END_TRANSMIT);
(0294) 	
(0295) 	// Wait for the transmission to finish.
118B: 10       PUSH  X
118C: 7C 09 89 LCALL 0x0989
118F: 62 D0 00 MOV   REG[208],0
1192: 20       POP   X
1193: 53 97    MOV   [__r0],A
1195: 47 97 20 TST   [__r0],32
1198: AF F2    JZ    0x118B
(0296) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
(0297) 	
119A: 7C 1B CD LCALL _xmitWait
(0298) 	xmitWait();
(0299) 	
119D: 50 00    MOV   A,0
119F: 08       PUSH  A
11A0: 50 01    MOV   A,1
11A2: 08       PUSH  A
11A3: 97 7D    CALL  _configToggle
11A5: 38 FE    ADD   SP,254
11A7: 7F       RET   
(0300) 	configToggle(RX_MODE);	// Switch back to receive mode.
(0301) 	
(0302) 	RX_TIMEOUT_Stop();
(0303) 	TIMEOUT = 0;
(0304) 	RX_TIMEOUT_Start();
_validTransmission:
  valid_transmit       --> X+3
  i                    --> X+1
  tempByte             --> X+0
11A8: 10       PUSH  X
11A9: 4F       MOV   X,SP
11AA: 38 05    ADD   SP,5
(0305) 	
11AC: 56 04 00 MOV   [X+4],0
11AF: 56 03 00 MOV   [X+3],0
(0306) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
11B2: 56 02 00 MOV   [X+2],0
11B5: 56 01 00 MOV   [X+1],0
(0307) 	{
11B8: 56 00 00 MOV   [X+0],0
11BB: 80 C2    JMP   0x127E
(0308) 		if(validTransmission())
(0309) 		{
(0310) 			if(COMMAND_TYPE == ID_ASSIGN_OK)	// This is the response we are looking for.
(0311) 			{
11BD: 10       PUSH  X
11BE: 7C 0B 32 LCALL 0x0B32
11C1: 62 D0 00 MOV   REG[208],0
11C4: 20       POP   X
11C5: 39 FC    CMP   A,252
11C7: B0 B6    JNZ   0x127E
(0312) 				// If this is for me, check who it was from.
11C9: 80 A5    JMP   0x126F
(0313) 				if(COMMAND_DESTINATION == MASTER_ID)
(0314) 				{
(0315) 					if(COMMAND_SOURCE == assigned_ID)
11CB: 10       PUSH  X
11CC: 7C 0B 32 LCALL 0x0B32
11CF: 62 D0 00 MOV   REG[208],0
11D2: 20       POP   X
11D3: 39 FC    CMP   A,252
11D5: B0 99    JNZ   0x126F
(0316) 					{
11D7: 80 88    JMP   0x1260
(0317) 						success = 1;
(0318) 					}
(0319) 				}
11D9: 10       PUSH  X
11DA: 7C 0B 32 LCALL 0x0B32
11DD: 20       POP   X
11DE: 54 00    MOV   [X+0],A
11E0: 39 00    CMP   A,0
11E2: A0 7D    JZ    0x1260
(0320) 			}
(0321) 		}
11E4: 52 00    MOV   A,[X+0]
11E6: 62 D0 00 MOV   REG[208],0
11E9: 53 A1    MOV   [COMMAND_SOURCE],A
11EB: 80 65    JMP   0x1251
(0322) 	}
(0323) 	
(0324) 	RX_TIMEOUT_Stop();
(0325) 	TIMEOUT = 0;
11ED: 10       PUSH  X
11EE: 7C 0B 32 LCALL 0x0B32
11F1: 62 D0 00 MOV   REG[208],0
11F4: 20       POP   X
11F5: 54 00    MOV   [X+0],A
11F7: 39 00    CMP   A,0
11F9: A0 57    JZ    0x1251
(0326) 	RX_TIMEOUT_Start();
(0327) 	
11FB: 3D 00 C8 CMP   [X+0],200
11FE: C0 52    JC    0x1251
(0328) 	return success;
(0329) }
1200: 52 00    MOV   A,[X+0]
1202: 62 D0 00 MOV   REG[208],0
1205: 53 A2    MOV   [COMMAND_TYPE],A
1207: 80 3A    JMP   0x1242
(0330) 
(0331) int clearConfig(int module_id)
(0332) {
(0333) 	int response = 0;
1209: 10       PUSH  X
120A: 7C 0B 32 LCALL 0x0B32
120D: 62 D0 00 MOV   REG[208],0
1210: 20       POP   X
1211: 54 00    MOV   [X+0],A
1213: 39 00    CMP   A,0
1215: A0 2C    JZ    0x1242
(0334) 	
(0335) 	configToggle(TX_MODE);	// Toggle into TX mode.
1217: 3D 00 FD CMP   [X+0],253
121A: A0 18    JZ    0x1233
(0336) 			
(0337) 	// Transmit a hello.
121C: 52 02    MOV   A,[X+2]
121E: 01 85    ADD   A,133
1220: 53 96    MOV   [__r1],A
1222: 52 01    MOV   A,[X+1]
1224: 09 00    ADC   A,0
1226: 60 D5    MOV   REG[213],A
1228: 52 00    MOV   A,[X+0]
122A: 3F 96    MVI   [__r1],A
(0338) 	TRANSMIT_PutChar(START_TRANSMIT);
122C: 77 02    INC   [X+2]
122E: 0F 01 00 ADC   [X+1],0
(0339) 	TRANSMIT_PutChar(START_TRANSMIT);
1231: 80 10    JMP   0x1242
(0340) 	TRANSMIT_PutChar(MASTER_ID);
(0341) 	TRANSMIT_PutChar(module_id);
(0342) 	TRANSMIT_PutChar(CLEAR_CONFIG);
1233: 56 04 01 MOV   [X+4],1
1236: 56 03 00 MOV   [X+3],0
(0343) 	TRANSMIT_PutChar(END_TRANSMIT);
1239: 62 D0 00 MOV   REG[208],0
123C: 55 9D 05 MOV   [TIMEOUT+1],5
123F: 55 9C 00 MOV   [TIMEOUT],0
1242: 62 D0 00 MOV   REG[208],0
1245: 51 9D    MOV   A,[TIMEOUT+1]
1247: 11 05    SUB   A,5
1249: 51 9C    MOV   A,[TIMEOUT]
124B: 31 80    XOR   A,128
124D: 19 80    SBB   A,128
124F: CF B9    JC    0x1209
1251: 62 D0 00 MOV   REG[208],0
1254: 51 9D    MOV   A,[TIMEOUT+1]
1256: 11 05    SUB   A,5
1258: 51 9C    MOV   A,[TIMEOUT]
125A: 31 80    XOR   A,128
125C: 19 80    SBB   A,128
125E: CF 8E    JC    0x11ED
1260: 62 D0 00 MOV   REG[208],0
1263: 51 9D    MOV   A,[TIMEOUT+1]
1265: 11 05    SUB   A,5
1267: 51 9C    MOV   A,[TIMEOUT]
1269: 31 80    XOR   A,128
126B: 19 80    SBB   A,128
126D: CF 6B    JC    0x11D9
126F: 62 D0 00 MOV   REG[208],0
1272: 51 9D    MOV   A,[TIMEOUT+1]
1274: 11 05    SUB   A,5
1276: 51 9C    MOV   A,[TIMEOUT]
1278: 31 80    XOR   A,128
127A: 19 80    SBB   A,128
127C: CF 4E    JC    0x11CB
127E: 62 D0 00 MOV   REG[208],0
1281: 51 9D    MOV   A,[TIMEOUT+1]
1283: 11 05    SUB   A,5
1285: 51 9C    MOV   A,[TIMEOUT]
1287: 31 80    XOR   A,128
1289: 19 80    SBB   A,128
128B: CF 31    JC    0x11BD
(0344) 	TRANSMIT_PutChar(END_TRANSMIT);
(0345) 	
(0346) 	// Wait for the transmission to finish.
(0347) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
(0348) 	
(0349) 	xmitWait();
(0350) 	
(0351) 	configToggle(RX_MODE);	// Listen for the response.
(0352) 	
(0353) 	if(module_id != BROADCAST)
(0354) 	{
(0355) 		RX_TIMEOUT_Stop();
(0356) 		TIMEOUT = 0;
(0357) 		RX_TIMEOUT_Start();
128D: 62 D0 00 MOV   REG[208],0
1290: 52 04    MOV   A,[X+4]
1292: 53 96    MOV   [__r1],A
1294: 52 03    MOV   A,[X+3]
1296: 53 97    MOV   [__r0],A
1298: 38 FB    ADD   SP,251
129A: 20       POP   X
129B: 7F       RET   
(0358) 		
(0359) 		while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
(0360) 		{
(0361) 			if(validTransmission())
(0362) 			{
_decodeTransmission:
  tempByte             --> X+7
  angle                --> X+5
  ID                   --> X+4
  total                --> X+2
  param                --> X+0
129C: 10       PUSH  X
129D: 4F       MOV   X,SP
129E: 38 08    ADD   SP,8
(0363) 				if(COMMAND_TYPE == CONFIG_CLEARED)	// This is the response we are looking for.
(0364) 				{
(0365) 					// If this is for me, check who it was from.
(0366) 					if(COMMAND_DESTINATION == MASTER_ID)
(0367) 					{
12A0: 56 03 00 MOV   [X+3],0
12A3: 56 02 00 MOV   [X+2],0
(0368) 						if(COMMAND_SOURCE == module_id)
(0369) 						{
12A6: 10       PUSH  X
12A7: 7C 0D EE LCALL 0x0DEE
12AA: 62 D0 00 MOV   REG[208],0
12AD: 53 97    MOV   [__r0],A
12AF: 5A 96    MOV   [__r1],X
12B1: 20       POP   X
12B2: 51 96    MOV   A,[__r1]
12B4: 54 01    MOV   [X+1],A
12B6: 51 97    MOV   A,[__r0]
12B8: 54 00    MOV   [X+0],A
12BA: 3C 97 00 CMP   [__r0],0
12BD: B0 06    JNZ   0x12C4
12BF: 3C 96 00 CMP   [__r1],0
12C2: A4 E5    JZ    0x17A8
(0370) 							response = 1;
(0371) 						}
12C4: 62 D0 00 MOV   REG[208],0
12C7: 52 01    MOV   A,[X+1]
12C9: 53 96    MOV   [__r1],A
12CB: 52 00    MOV   A,[X+0]
12CD: 60 D4    MOV   REG[212],A
12CF: 3E 96    MVI   A,[__r1]
12D1: 53 96    MOV   [__r1],A
12D3: 55 97 00 MOV   [__r0],0
12D6: 3C 97 00 CMP   [__r0],0
12D9: B0 05    JNZ   0x12DF
12DB: 39 6E    CMP   A,110
12DD: A0 0E    JZ    0x12EC
12DF: 62 D0 00 MOV   REG[208],0
12E2: 3C 97 00 CMP   [__r0],0
12E5: B0 3A    JNZ   0x1320
12E7: 3C 96 4E CMP   [__r1],78
12EA: B0 35    JNZ   0x1320
(0372) 					}
(0373) 				}
12EC: 10       PUSH  X
12ED: 7C 0D BF LCALL 0x0DBF
12F0: 20       POP   X
(0374) 			}
12F1: 50 00    MOV   A,0
12F3: 08       PUSH  A
12F4: 50 0A    MOV   A,10
12F6: 08       PUSH  A
12F7: 62 D0 00 MOV   REG[208],0
12FA: 51 98    MOV   A,[NUM_MODULES]
12FC: 08       PUSH  A
12FD: 51 99    MOV   A,[NUM_MODULES+1]
12FF: 08       PUSH  A
1300: 52 00    MOV   A,[X+0]
1302: 08       PUSH  A
1303: 52 01    MOV   A,[X+1]
1305: 08       PUSH  A
1306: 7C 1E 34 LCALL _itoa
1309: 38 FA    ADD   SP,250
(0375) 		}
130B: 10       PUSH  X
130C: 52 00    MOV   A,[X+0]
130E: 08       PUSH  A
130F: 52 01    MOV   A,[X+1]
1311: 5C       MOV   X,A
1312: 18       POP   A
1313: 7C 0D 3E LCALL 0x0D3E
1316: 20       POP   X
(0376) 		
1317: 10       PUSH  X
1318: 50 0A    MOV   A,10
131A: 7C 0D 01 LCALL 0x0D01
131D: 20       POP   X
(0377) 		RX_TIMEOUT_Stop();
131E: 84 89    JMP   0x17A8
(0378) 		TIMEOUT = 0;
1320: 62 D0 00 MOV   REG[208],0
1323: 52 01    MOV   A,[X+1]
1325: 53 96    MOV   [__r1],A
1327: 52 00    MOV   A,[X+0]
1329: 60 D4    MOV   REG[212],A
132B: 3E 96    MVI   A,[__r1]
132D: 53 96    MOV   [__r1],A
132F: 55 97 00 MOV   [__r0],0
1332: 3C 97 00 CMP   [__r0],0
1335: B0 05    JNZ   0x133B
1337: 39 77    CMP   A,119
1339: A0 0E    JZ    0x1348
133B: 62 D0 00 MOV   REG[208],0
133E: 3C 97 00 CMP   [__r0],0
1341: B1 6B    JNZ   0x14AD
1343: 3C 96 57 CMP   [__r1],87
1346: B1 66    JNZ   0x14AD
(0379) 		RX_TIMEOUT_Start();
(0380) 	}
1348: 10       PUSH  X
1349: 7C 0D EE LCALL 0x0DEE
134C: 62 D0 00 MOV   REG[208],0
134F: 53 97    MOV   [__r0],A
1351: 5A 96    MOV   [__r1],X
1353: 20       POP   X
1354: 51 96    MOV   A,[__r1]
1356: 54 01    MOV   [X+1],A
1358: 51 97    MOV   A,[__r0]
135A: 54 00    MOV   [X+0],A
135C: 3C 97 00 CMP   [__r0],0
135F: B0 06    JNZ   0x1366
1361: 3C 96 00 CMP   [__r1],0
1364: A4 43    JZ    0x17A8
(0381) 	
(0382) 	return response;
1366: 52 00    MOV   A,[X+0]
1368: 08       PUSH  A
1369: 52 01    MOV   A,[X+1]
136B: 08       PUSH  A
136C: 7C 1C F3 LCALL _atoi
136F: 38 FE    ADD   SP,254
1371: 62 D0 00 MOV   REG[208],0
1374: 51 96    MOV   A,[__r1]
1376: 54 04    MOV   [X+4],A
(0383) }
1378: 10       PUSH  X
1379: 7C 0D EE LCALL 0x0DEE
137C: 62 D0 00 MOV   REG[208],0
137F: 53 97    MOV   [__r0],A
1381: 5A 96    MOV   [__r1],X
1383: 20       POP   X
1384: 51 96    MOV   A,[__r1]
1386: 54 01    MOV   [X+1],A
1388: 51 97    MOV   A,[__r0]
138A: 54 00    MOV   [X+0],A
138C: 3C 97 00 CMP   [__r0],0
138F: B0 06    JNZ   0x1396
1391: 3C 96 00 CMP   [__r1],0
1394: A4 13    JZ    0x17A8
(0384) 
(0385) // This function transmits a hello message.
1396: 62 D0 00 MOV   REG[208],0
1399: 52 01    MOV   A,[X+1]
139B: 53 96    MOV   [__r1],A
139D: 52 00    MOV   A,[X+0]
139F: 60 D4    MOV   REG[212],A
13A1: 3E 96    MVI   A,[__r1]
13A3: 53 96    MOV   [__r1],A
13A5: 55 97 00 MOV   [__r0],0
13A8: 3C 97 00 CMP   [__r0],0
13AB: B0 05    JNZ   0x13B1
13AD: 39 61    CMP   A,97
13AF: A0 0E    JZ    0x13BE
13B1: 62 D0 00 MOV   REG[208],0
13B4: 3C 97 00 CMP   [__r0],0
13B7: B0 89    JNZ   0x1441
13B9: 3C 96 41 CMP   [__r1],65
13BC: B0 84    JNZ   0x1441
(0386) void sayHello(void)
(0387) {
13BE: 10       PUSH  X
13BF: 7C 0D EE LCALL 0x0DEE
13C2: 62 D0 00 MOV   REG[208],0
13C5: 53 97    MOV   [__r0],A
13C7: 5A 96    MOV   [__r1],X
13C9: 20       POP   X
13CA: 51 96    MOV   A,[__r1]
13CC: 54 01    MOV   [X+1],A
13CE: 51 97    MOV   A,[__r0]
13D0: 54 00    MOV   [X+0],A
13D2: 3C 97 00 CMP   [__r0],0
13D5: B0 06    JNZ   0x13DC
13D7: 3C 96 00 CMP   [__r1],0
13DA: A3 CD    JZ    0x17A8
(0388) 	configToggle(TX_MODE);				// Toggle into TX mode.
(0389) 			
13DC: 10       PUSH  X
13DD: 7C 0D BF LCALL 0x0DBF
13E0: 20       POP   X
(0390) 	// Transmit a hello.
13E1: 52 00    MOV   A,[X+0]
13E3: 08       PUSH  A
13E4: 52 01    MOV   A,[X+1]
13E6: 08       PUSH  A
13E7: 7C 1C F3 LCALL _atoi
13EA: 38 FE    ADD   SP,254
13EC: 62 D0 00 MOV   REG[208],0
13EF: 51 96    MOV   A,[__r1]
13F1: 54 03    MOV   [X+3],A
13F3: 51 97    MOV   A,[__r0]
13F5: 54 02    MOV   [X+2],A
(0391) 	TRANSMIT_PutChar(START_TRANSMIT);
13F7: 50 01    MOV   A,1
13F9: 08       PUSH  A
13FA: 50 00    MOV   A,0
13FC: 08       PUSH  A
13FD: 52 02    MOV   A,[X+2]
13FF: 08       PUSH  A
1400: 52 03    MOV   A,[X+3]
1402: 08       PUSH  A
1403: 7C 1C 61 LCALL __divmod_16X16_16
1406: 38 FE    ADD   SP,254
1408: 18       POP   A
1409: 53 96    MOV   [__r1],A
140B: 18       POP   A
140C: 51 96    MOV   A,[__r1]
140E: 54 05    MOV   [X+5],A
(0392) 	TRANSMIT_PutChar(START_TRANSMIT);
1410: 50 01    MOV   A,1
1412: 08       PUSH  A
1413: 50 00    MOV   A,0
1415: 08       PUSH  A
1416: 52 02    MOV   A,[X+2]
1418: 08       PUSH  A
1419: 52 03    MOV   A,[X+3]
141B: 08       PUSH  A
141C: 7C 1C 61 LCALL __divmod_16X16_16
141F: 18       POP   A
1420: 53 96    MOV   [__r1],A
1422: 18       POP   A
1423: 38 FE    ADD   SP,254
1425: 51 96    MOV   A,[__r1]
1427: 54 06    MOV   [X+6],A
(0393) 	TRANSMIT_PutChar(MASTER_ID);
1429: 52 06    MOV   A,[X+6]
142B: 08       PUSH  A
142C: 52 05    MOV   A,[X+5]
142E: 08       PUSH  A
142F: 50 1E    MOV   A,30
1431: 08       PUSH  A
1432: 50 03    MOV   A,3
1434: 08       PUSH  A
1435: 50 05    MOV   A,5
1437: 08       PUSH  A
1438: 52 04    MOV   A,[X+4]
143A: 08       PUSH  A
143B: 94 34    CALL  _longServoInstruction
143D: 38 FA    ADD   SP,250
(0394) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
(0395) 	TRANSMIT_PutChar(HELLO_BYTE);
143F: 83 68    JMP   0x17A8
(0396) 	TRANSMIT_PutChar(END_TRANSMIT);
1441: 62 D0 00 MOV   REG[208],0
1444: 52 01    MOV   A,[X+1]
1446: 53 96    MOV   [__r1],A
1448: 52 00    MOV   A,[X+0]
144A: 60 D4    MOV   REG[212],A
144C: 3E 96    MVI   A,[__r1]
144E: 53 96    MOV   [__r1],A
1450: 55 97 00 MOV   [__r0],0
1453: 3C 97 00 CMP   [__r0],0
1456: B0 05    JNZ   0x145C
1458: 39 70    CMP   A,112
145A: A0 0E    JZ    0x1469
145C: 62 D0 00 MOV   REG[208],0
145F: 3C 97 00 CMP   [__r0],0
1462: B3 45    JNZ   0x17A8
1464: 3C 96 50 CMP   [__r1],80
1467: B3 40    JNZ   0x17A8
(0397) 	TRANSMIT_PutChar(END_TRANSMIT);
(0398) 	
1469: 10       PUSH  X
146A: 7C 0D EE LCALL 0x0DEE
146D: 62 D0 00 MOV   REG[208],0
1470: 53 97    MOV   [__r0],A
1472: 5A 96    MOV   [__r1],X
1474: 20       POP   X
1475: 51 96    MOV   A,[__r1]
1477: 54 01    MOV   [X+1],A
1479: 51 97    MOV   A,[__r0]
147B: 54 00    MOV   [X+0],A
147D: 3C 97 00 CMP   [__r0],0
1480: B0 06    JNZ   0x1487
1482: 3C 96 00 CMP   [__r1],0
1485: A3 22    JZ    0x17A8
(0399) 	// Wait for the transmission to finish.
(0400) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
1487: 10       PUSH  X
1488: 7C 0D BF LCALL 0x0DBF
148B: 20       POP   X
(0401) 	
148C: 52 00    MOV   A,[X+0]
148E: 08       PUSH  A
148F: 52 01    MOV   A,[X+1]
1491: 08       PUSH  A
1492: 7C 1C F3 LCALL _atoi
1495: 62 D0 00 MOV   REG[208],0
1498: 51 96    MOV   A,[__r1]
149A: 08       PUSH  A
149B: 50 18    MOV   A,24
149D: 08       PUSH  A
149E: 50 03    MOV   A,3
14A0: 08       PUSH  A
14A1: 50 04    MOV   A,4
14A3: 08       PUSH  A
14A4: 52 04    MOV   A,[X+4]
14A6: 08       PUSH  A
14A7: 93 25    CALL  _servoInstruction
14A9: 38 F9    ADD   SP,249
(0402) 	xmitWait();
(0403) 	
(0404) 	configToggle(RX_MODE);				// Listen for the response.
(0405) }
(0406) 
14AB: 82 FC    JMP   0x17A8
(0407) // This function returns whether or not a valid transmission has been received.
14AD: 62 D0 00 MOV   REG[208],0
14B0: 52 01    MOV   A,[X+1]
14B2: 53 96    MOV   [__r1],A
14B4: 52 00    MOV   A,[X+0]
14B6: 60 D4    MOV   REG[212],A
14B8: 3E 96    MVI   A,[__r1]
14BA: 53 96    MOV   [__r1],A
14BC: 55 97 00 MOV   [__r0],0
14BF: 3C 97 00 CMP   [__r0],0
14C2: B0 05    JNZ   0x14C8
14C4: 39 72    CMP   A,114
14C6: A0 0E    JZ    0x14D5
14C8: 62 D0 00 MOV   REG[208],0
14CB: 3C 97 00 CMP   [__r0],0
14CE: B2 D9    JNZ   0x17A8
14D0: 3C 96 52 CMP   [__r1],82
14D3: B2 D4    JNZ   0x17A8
(0408) int validTransmission(void)
(0409) {
14D5: 10       PUSH  X
14D6: 7C 0D EE LCALL 0x0DEE
14D9: 62 D0 00 MOV   REG[208],0
14DC: 53 97    MOV   [__r0],A
14DE: 5A 96    MOV   [__r1],X
14E0: 20       POP   X
14E1: 51 96    MOV   A,[__r1]
14E3: 54 01    MOV   [X+1],A
14E5: 51 97    MOV   A,[__r0]
14E7: 54 00    MOV   [X+0],A
14E9: 3C 97 00 CMP   [__r0],0
14EC: B0 06    JNZ   0x14F3
14EE: 3C 96 00 CMP   [__r1],0
14F1: A2 B6    JZ    0x17A8
(0410) 	int valid_transmit = 0;
(0411) 	int i = 0;
14F3: 52 00    MOV   A,[X+0]
14F5: 08       PUSH  A
14F6: 52 01    MOV   A,[X+1]
14F8: 08       PUSH  A
14F9: 7C 1C F3 LCALL _atoi
14FC: 38 FE    ADD   SP,254
14FE: 62 D0 00 MOV   REG[208],0
1501: 51 96    MOV   A,[__r1]
1503: 54 04    MOV   [X+4],A
(0412) 	char tempByte = 0;
1505: 10       PUSH  X
1506: 7C 0D EE LCALL 0x0DEE
1509: 62 D0 00 MOV   REG[208],0
150C: 53 97    MOV   [__r0],A
150E: 5A 96    MOV   [__r1],X
1510: 20       POP   X
1511: 51 96    MOV   A,[__r1]
1513: 54 01    MOV   [X+1],A
1515: 51 97    MOV   A,[__r0]
1517: 54 00    MOV   [X+0],A
1519: 3C 97 00 CMP   [__r0],0
151C: B0 06    JNZ   0x1523
151E: 3C 96 00 CMP   [__r1],0
1521: A2 86    JZ    0x17A8
(0413) 	
(0414) 	while(TIMEOUT < RX_TIMEOUT_DURATION)
1523: 62 D0 00 MOV   REG[208],0
1526: 52 01    MOV   A,[X+1]
1528: 53 96    MOV   [__r1],A
152A: 52 00    MOV   A,[X+0]
152C: 60 D4    MOV   REG[212],A
152E: 3E 96    MVI   A,[__r1]
1530: 53 96    MOV   [__r1],A
1532: 55 97 00 MOV   [__r0],0
1535: 3C 97 00 CMP   [__r0],0
1538: B0 05    JNZ   0x153E
153A: 39 61    CMP   A,97
153C: A0 0E    JZ    0x154B
153E: 62 D0 00 MOV   REG[208],0
1541: 3C 97 00 CMP   [__r0],0
1544: B0 CC    JNZ   0x1611
1546: 3C 96 41 CMP   [__r1],65
1549: B0 C7    JNZ   0x1611
(0415) 	{
(0416) 		if(RECEIVE_cReadChar() == START_TRANSMIT)
154B: 10       PUSH  X
154C: 7C 0D BF LCALL 0x0DBF
154F: 20       POP   X
(0417) 		{
1550: 50 02    MOV   A,2
1552: 08       PUSH  A
1553: 50 24    MOV   A,36
1555: 08       PUSH  A
1556: 50 02    MOV   A,2
1558: 08       PUSH  A
1559: 50 04    MOV   A,4
155B: 08       PUSH  A
155C: 52 04    MOV   A,[X+4]
155E: 08       PUSH  A
155F: 92 6D    CALL  _servoInstruction
(0418) 			while(TIMEOUT < RX_TIMEOUT_DURATION)
1561: 50 00    MOV   A,0
1563: 08       PUSH  A
1564: 50 01    MOV   A,1
1566: 08       PUSH  A
1567: 93 B9    CALL  _configToggle
1569: 38 F9    ADD   SP,249
156B: 80 94    JMP   0x1600
(0419) 			{
(0420) 				if(RECEIVE_cReadChar() == START_TRANSMIT)
(0421) 				{
(0422) 					while(TIMEOUT < RX_TIMEOUT_DURATION)
(0423) 					{
156D: 10       PUSH  X
156E: 7C 0B 32 LCALL 0x0B32
1571: 62 D0 00 MOV   REG[208],0
1574: 20       POP   X
1575: 39 FF    CMP   A,255
1577: B0 88    JNZ   0x1600
(0424) 						if(tempByte = RECEIVE_cReadChar())
(0425) 						{
1579: 10       PUSH  X
157A: 7C 0B 2A LCALL 0x0B2A
157D: 62 D0 00 MOV   REG[208],0
1580: 20       POP   X
1581: 39 FF    CMP   A,255
1583: B0 7C    JNZ   0x1600
(0426) 							COMMAND_SOURCE = tempByte;
(0427) 							
1585: 10       PUSH  X
1586: 7C 0B 2A LCALL 0x0B2A
1589: 62 D0 00 MOV   REG[208],0
158C: 20       POP   X
158D: 3B 04    CMP   A,[X+4]
158F: B0 70    JNZ   0x1600
(0428) 							while(TIMEOUT < RX_TIMEOUT_DURATION)
(0429) 							{
1591: 10       PUSH  X
1592: 7C 0B 2A LCALL 0x0B2A
1595: 62 D0 00 MOV   REG[208],0
1598: 20       POP   X
1599: 39 04    CMP   A,4
159B: B0 64    JNZ   0x1600
(0430) 								if(tempByte = RECEIVE_cReadChar())
(0431) 								{
159D: 10       PUSH  X
159E: 7C 0B 2A LCALL 0x0B2A
15A1: 62 D0 00 MOV   REG[208],0
15A4: 20       POP   X
15A5: 39 00    CMP   A,0
15A7: B0 58    JNZ   0x1600
(0432) 									if(tempByte >= HELLO_BYTE)
(0433) 									{
15A9: 10       PUSH  X
15AA: 7C 0B 2A LCALL 0x0B2A
15AD: 62 D0 00 MOV   REG[208],0
15B0: 20       POP   X
15B1: 54 05    MOV   [X+5],A
(0434) 										COMMAND_TYPE = tempByte;
15B3: 10       PUSH  X
15B4: 7C 0B 2A LCALL 0x0B2A
15B7: 62 D0 00 MOV   REG[208],0
15BA: 20       POP   X
15BB: 54 06    MOV   [X+6],A
(0435) 										
(0436) 										while(TIMEOUT < RX_TIMEOUT_DURATION)
15BD: 50 00    MOV   A,0
15BF: 08       PUSH  A
15C0: 50 02    MOV   A,2
15C2: 08       PUSH  A
15C3: 93 5D    CALL  _configToggle
(0437) 										{
(0438) 											if(tempByte = RECEIVE_cReadChar())
15C5: 52 05    MOV   A,[X+5]
15C7: 54 03    MOV   [X+3],A
15C9: 52 06    MOV   A,[X+6]
15CB: 54 02    MOV   [X+2],A
(0439) 											{
15CD: 50 00    MOV   A,0
15CF: 08       PUSH  A
15D0: 50 0A    MOV   A,10
15D2: 08       PUSH  A
15D3: 52 02    MOV   A,[X+2]
15D5: 08       PUSH  A
15D6: 52 03    MOV   A,[X+3]
15D8: 08       PUSH  A
15D9: 52 00    MOV   A,[X+0]
15DB: 08       PUSH  A
15DC: 52 01    MOV   A,[X+1]
15DE: 08       PUSH  A
15DF: 7C 1E 34 LCALL _itoa
15E2: 38 F8    ADD   SP,248
(0440) 												if(tempByte != END_TRANSMIT)
15E4: 10       PUSH  X
15E5: 52 00    MOV   A,[X+0]
15E7: 08       PUSH  A
15E8: 52 01    MOV   A,[X+1]
15EA: 5C       MOV   X,A
15EB: 18       POP   A
15EC: 7C 0D 3E LCALL 0x0D3E
15EF: 20       POP   X
(0441) 												{
15F0: 10       PUSH  X
15F1: 50 0A    MOV   A,10
15F3: 7C 0D 01 LCALL 0x0D01
15F6: 20       POP   X
(0442) 													PARAM[i] = tempByte;
(0443) 													i++;
15F7: 62 D0 00 MOV   REG[208],0
15FA: 55 9D 05 MOV   [TIMEOUT+1],5
15FD: 55 9C 00 MOV   [TIMEOUT],0
1600: 62 D0 00 MOV   REG[208],0
1603: 51 9D    MOV   A,[TIMEOUT+1]
1605: 11 05    SUB   A,5
1607: 51 9C    MOV   A,[TIMEOUT]
1609: 31 80    XOR   A,128
160B: 19 80    SBB   A,128
160D: CF 5F    JC    0x156D
(0444) 												}
(0445) 												else
(0446) 												{
(0447) 													valid_transmit = 1;
(0448) 													TIMEOUT = RX_TIMEOUT_DURATION;
(0449) 												}
(0450) 											}
160F: 81 98    JMP   0x17A8
(0451) 										}
1611: 62 D0 00 MOV   REG[208],0
1614: 52 01    MOV   A,[X+1]
1616: 53 96    MOV   [__r1],A
1618: 52 00    MOV   A,[X+0]
161A: 60 D4    MOV   REG[212],A
161C: 3E 96    MVI   A,[__r1]
161E: 53 96    MOV   [__r1],A
1620: 55 97 00 MOV   [__r0],0
1623: 3C 97 00 CMP   [__r0],0
1626: B0 05    JNZ   0x162C
1628: 39 70    CMP   A,112
162A: A0 0E    JZ    0x1639
162C: 62 D0 00 MOV   REG[208],0
162F: 3C 97 00 CMP   [__r0],0
1632: B0 A5    JNZ   0x16D8
1634: 3C 96 50 CMP   [__r1],80
1637: B0 A0    JNZ   0x16D8
(0452) 									}
(0453) 								}
1639: 10       PUSH  X
163A: 7C 0D BF LCALL 0x0DBF
163D: 20       POP   X
(0454) 							}
163E: 50 01    MOV   A,1
1640: 08       PUSH  A
1641: 50 18    MOV   A,24
1643: 08       PUSH  A
1644: 50 02    MOV   A,2
1646: 08       PUSH  A
1647: 50 04    MOV   A,4
1649: 08       PUSH  A
164A: 52 04    MOV   A,[X+4]
164C: 08       PUSH  A
164D: 91 7F    CALL  _servoInstruction
(0455) 						}
164F: 50 00    MOV   A,0
1651: 08       PUSH  A
1652: 50 01    MOV   A,1
1654: 08       PUSH  A
1655: 92 CB    CALL  _configToggle
1657: 38 F9    ADD   SP,249
1659: 80 6D    JMP   0x16C7
(0456) 					}
(0457) 				}
(0458) 			}
(0459) 		}
(0460) 	}
165B: 10       PUSH  X
165C: 7C 0B 32 LCALL 0x0B32
165F: 62 D0 00 MOV   REG[208],0
1662: 20       POP   X
1663: 39 FF    CMP   A,255
1665: B0 61    JNZ   0x16C7
(0461) 	
(0462) 	return valid_transmit;
1667: 10       PUSH  X
1668: 7C 0B 2A LCALL 0x0B2A
166B: 62 D0 00 MOV   REG[208],0
166E: 20       POP   X
166F: 39 FF    CMP   A,255
1671: B0 55    JNZ   0x16C7
(0463) }
(0464) 
1673: 10       PUSH  X
1674: 7C 0B 2A LCALL 0x0B2A
1677: 62 D0 00 MOV   REG[208],0
167A: 20       POP   X
167B: 3B 04    CMP   A,[X+4]
167D: B0 49    JNZ   0x16C7
(0465) // This function decodes the transmission and takes the correct action.
(0466) void decodeTransmission(void)
(0467) {
167F: 10       PUSH  X
1680: 7C 0B 2A LCALL 0x0B2A
1683: 62 D0 00 MOV   REG[208],0
1686: 20       POP   X
1687: 39 03    CMP   A,3
1689: B0 3D    JNZ   0x16C7
(0468) 	char* param;
(0469) 	char ID;
(0470) 	char tempByte;
168B: 10       PUSH  X
168C: 7C 0B 2A LCALL 0x0B2A
168F: 62 D0 00 MOV   REG[208],0
1692: 20       POP   X
1693: 39 00    CMP   A,0
1695: B0 31    JNZ   0x16C7
(0471) 	char angle[2];
(0472) 	int total = 0;
1697: 10       PUSH  X
1698: 7C 0B 2A LCALL 0x0B2A
169B: 62 D0 00 MOV   REG[208],0
169E: 20       POP   X
169F: 54 07    MOV   [X+7],A
(0473) 	
(0474) 	if(param = COMP_SERIAL_szGetParam())
16A1: 50 00    MOV   A,0
16A3: 08       PUSH  A
16A4: 50 02    MOV   A,2
16A6: 08       PUSH  A
16A7: 92 79    CALL  _configToggle
16A9: 38 FE    ADD   SP,254
(0475) 	{
(0476) 		if((param[0] == 'n') || (param[0] == 'N'))
(0477) 		{
16AB: 62 D0 00 MOV   REG[208],0
16AE: 52 07    MOV   A,[X+7]
16B0: 01 30    ADD   A,48
16B2: 10       PUSH  X
16B3: 7C 0D 01 LCALL 0x0D01
16B6: 20       POP   X
(0478) 			COMP_SERIAL_CmdReset();
16B7: 10       PUSH  X
16B8: 50 0A    MOV   A,10
16BA: 7C 0D 01 LCALL 0x0D01
16BD: 20       POP   X
(0479) 			itoa(param,NUM_MODULES,10);
(0480) 			COMP_SERIAL_PutString(param);
16BE: 62 D0 00 MOV   REG[208],0
16C1: 55 9D 05 MOV   [TIMEOUT+1],5
16C4: 55 9C 00 MOV   [TIMEOUT],0
16C7: 62 D0 00 MOV   REG[208],0
16CA: 51 9D    MOV   A,[TIMEOUT+1]
16CC: 11 05    SUB   A,5
16CE: 51 9C    MOV   A,[TIMEOUT]
16D0: 31 80    XOR   A,128
16D2: 19 80    SBB   A,128
16D4: CF 86    JC    0x165B
(0481) 			COMP_SERIAL_PutChar('\n');
(0482) 		}
(0483) 		else if((param[0] == 'w') || (param[0] == 'W'))
(0484) 		{
(0485) 			if(param = COMP_SERIAL_szGetParam())
(0486) 			{
(0487) 				ID = atoi(param);
16D6: 80 D1    JMP   0x17A8
(0488) 				if(param = COMP_SERIAL_szGetParam())
16D8: 62 D0 00 MOV   REG[208],0
16DB: 52 01    MOV   A,[X+1]
16DD: 53 96    MOV   [__r1],A
16DF: 52 00    MOV   A,[X+0]
16E1: 60 D4    MOV   REG[212],A
16E3: 3E 96    MVI   A,[__r1]
16E5: 53 96    MOV   [__r1],A
16E7: 55 97 00 MOV   [__r0],0
16EA: 3C 97 00 CMP   [__r0],0
16ED: B0 05    JNZ   0x16F3
16EF: 39 74    CMP   A,116
16F1: A0 0E    JZ    0x1700
16F3: 62 D0 00 MOV   REG[208],0
16F6: 3C 97 00 CMP   [__r0],0
16F9: B0 47    JNZ   0x1741
16FB: 3C 96 54 CMP   [__r1],84
16FE: B0 42    JNZ   0x1741
(0489) 				{
(0490) 					if((param[0] == 'a') || (param[0] == 'A'))
1700: 10       PUSH  X
1701: 7C 0D BF LCALL 0x0DBF
1704: 20       POP   X
(0491) 					{
1705: 62 D0 00 MOV   REG[208],0
1708: 52 04    MOV   A,[X+4]
170A: 53 96    MOV   [__r1],A
170C: 50 00    MOV   A,0
170E: 08       PUSH  A
170F: 51 96    MOV   A,[__r1]
1711: 08       PUSH  A
1712: 7C 0E 74 LCALL _pingModule
1715: 38 FE    ADD   SP,254
1717: 62 D0 00 MOV   REG[208],0
171A: 3C 97 00 CMP   [__r0],0
171D: B0 06    JNZ   0x1724
171F: 3C 96 00 CMP   [__r1],0
1722: A0 85    JZ    0x17A8
(0492) 						if(param = COMP_SERIAL_szGetParam())
(0493) 						{
1724: 50 00    MOV   A,0
1726: 08       PUSH  A
1727: 50 02    MOV   A,2
1729: 08       PUSH  A
172A: 91 F6    CALL  _configToggle
172C: 38 FE    ADD   SP,254
(0494) 							COMP_SERIAL_CmdReset();
(0495) 							total = atoi(param);
172E: 10       PUSH  X
172F: 62 D0 00 MOV   REG[208],0
1732: 51 85    MOV   A,[PARAM]
1734: 7C 0D 01 LCALL 0x0D01
1737: 20       POP   X
(0496) 							angle[0] = total%256;
1738: 10       PUSH  X
1739: 50 0A    MOV   A,10
173B: 7C 0D 01 LCALL 0x0D01
173E: 20       POP   X
(0497) 							angle[1] = total/256;
(0498) 							longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
173F: 80 68    JMP   0x17A8
(0499) 						}
1741: 62 D0 00 MOV   REG[208],0
1744: 52 01    MOV   A,[X+1]
1746: 53 96    MOV   [__r1],A
1748: 52 00    MOV   A,[X+0]
174A: 60 D4    MOV   REG[212],A
174C: 3E 96    MVI   A,[__r1]
174E: 53 96    MOV   [__r1],A
1750: 55 97 00 MOV   [__r0],0
1753: 3C 97 00 CMP   [__r0],0
1756: B0 05    JNZ   0x175C
1758: 39 63    CMP   A,99
175A: A0 0E    JZ    0x1769
175C: 62 D0 00 MOV   REG[208],0
175F: 3C 97 00 CMP   [__r0],0
1762: B0 45    JNZ   0x17A8
1764: 3C 96 43 CMP   [__r1],67
1767: B0 40    JNZ   0x17A8
(0500) 					}
(0501) 					else if((param[0] == 'p') || (param[0] == 'P'))
1769: 10       PUSH  X
176A: 7C 0D BF LCALL 0x0DBF
176D: 20       POP   X
(0502) 					{
176E: 62 D0 00 MOV   REG[208],0
1771: 52 04    MOV   A,[X+4]
1773: 53 96    MOV   [__r1],A
1775: 50 00    MOV   A,0
1777: 08       PUSH  A
1778: 51 96    MOV   A,[__r1]
177A: 08       PUSH  A
177B: 7C 0E 74 LCALL _pingModule
177E: 38 FE    ADD   SP,254
1780: 62 D0 00 MOV   REG[208],0
1783: 3C 97 00 CMP   [__r0],0
1786: B0 06    JNZ   0x178D
1788: 3C 96 00 CMP   [__r1],0
178B: A0 1C    JZ    0x17A8
(0503) 						if(param = COMP_SERIAL_szGetParam())
(0504) 						{
178D: 50 00    MOV   A,0
178F: 08       PUSH  A
1790: 50 02    MOV   A,2
1792: 08       PUSH  A
1793: 91 8D    CALL  _configToggle
1795: 38 FE    ADD   SP,254
(0505) 							COMP_SERIAL_CmdReset();
(0506) 							servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
1797: 10       PUSH  X
1798: 62 D0 00 MOV   REG[208],0
179B: 51 86    MOV   A,[PARAM+1]
179D: 7C 0D 01 LCALL 0x0D01
17A0: 20       POP   X
(0507) 						}
17A1: 10       PUSH  X
17A2: 50 0A    MOV   A,10
17A4: 7C 0D 01 LCALL 0x0D01
17A7: 20       POP   X
(0508) 					}
(0509) 				}
(0510) 			}
(0511) 		}
(0512) 		else if((param[0] == 'r') || (param[0] == 'R'))
(0513) 		{			
(0514) 			if(param = COMP_SERIAL_szGetParam())
(0515) 			{
17A8: 62 D0 00 MOV   REG[208],0
17AB: 3C 9A 00 CMP   [STATE],0
17AE: B0 06    JNZ   0x17B5
17B0: 3C 9B 02 CMP   [STATE+1],2
17B3: A0 0D    JZ    0x17C1
(0516) 				ID = atoi(param);
(0517) 				if(param = COMP_SERIAL_szGetParam())
17B5: 50 00    MOV   A,0
17B7: 08       PUSH  A
17B8: 50 02    MOV   A,2
17BA: 08       PUSH  A
17BB: 91 65    CALL  _configToggle
17BD: 38 FE    ADD   SP,254
(0518) 				{
17BF: 80 0A    JMP   0x17CA
(0519) 					if((param[0] == 'a') || (param[0] == 'A'))
(0520) 					{
(0521) 						COMP_SERIAL_CmdReset();
17C1: 62 D0 00 MOV   REG[208],0
17C4: 55 9D 00 MOV   [TIMEOUT+1],0
17C7: 55 9C 00 MOV   [TIMEOUT],0
(0522) 						servoInstruction(ID,4,READ_SERVO,36,2);
17CA: 38 F8    ADD   SP,248
17CC: 20       POP   X
17CD: 7F       RET   
(0523) 						configToggle(RX_MODE);
(0524) 							
(0525) 						// Loop until we read a response or time out.
(0526) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
(0527) 						{
(0528) 							if(RECEIVE_cReadChar() == SERVO_START)
_servoInstruction:
  total                --> X+1
  checksum             --> X+0
  value                --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
17CE: 10       PUSH  X
17CF: 4F       MOV   X,SP
17D0: 38 03    ADD   SP,3
(0529) 							{
(0530) 								if(RECEIVE_cGetChar() == SERVO_START)
(0531) 								{
(0532) 									if(RECEIVE_cGetChar() == ID)
17D2: 62 D0 00 MOV   REG[208],0
17D5: 52 FB    MOV   A,[X-5]
17D7: 53 96    MOV   [__r1],A
17D9: 55 97 00 MOV   [__r0],0
17DC: 52 FC    MOV   A,[X-4]
17DE: 02 96    ADD   A,[__r1]
17E0: 53 96    MOV   [__r1],A
17E2: 50 00    MOV   A,0
17E4: 0A 97    ADC   A,[__r0]
17E6: 53 97    MOV   [__r0],A
17E8: 52 FA    MOV   A,[X-6]
17EA: 04 96    ADD   [__r1],A
17EC: 0E 97 00 ADC   [__r0],0
17EF: 52 F9    MOV   A,[X-7]
17F1: 04 96    ADD   [__r1],A
17F3: 0E 97 00 ADC   [__r0],0
17F6: 52 F8    MOV   A,[X-8]
17F8: 53 94    MOV   [__r3],A
17FA: 55 95 00 MOV   [__r2],0
17FD: 51 96    MOV   A,[__r1]
17FF: 02 94    ADD   A,[__r3]
1801: 54 02    MOV   [X+2],A
1803: 51 97    MOV   A,[__r0]
1805: 0A 95    ADC   A,[__r2]
1807: 54 01    MOV   [X+1],A
(0533) 									{
(0534) 										if(RECEIVE_cGetChar() == 4)
(0535) 										{
1809: 50 01    MOV   A,1
180B: 08       PUSH  A
180C: 50 00    MOV   A,0
180E: 08       PUSH  A
180F: 52 01    MOV   A,[X+1]
1811: 08       PUSH  A
1812: 52 02    MOV   A,[X+2]
1814: 08       PUSH  A
1815: 7C 1C 61 LCALL __divmod_16X16_16
1818: 38 FE    ADD   SP,254
181A: 18       POP   A
181B: 53 96    MOV   [__r1],A
181D: 18       POP   A
181E: 50 FF    MOV   A,255
1820: 12 96    SUB   A,[__r1]
1822: 54 00    MOV   [X+0],A
(0536) 											if(RECEIVE_cGetChar() == 0)
(0537) 											{
(0538) 												angle[0] = RECEIVE_cGetChar();
1824: 10       PUSH  X
1825: 50 FF    MOV   A,255
1827: 7C 08 DD LCALL 0x08DD
182A: 20       POP   X
(0539) 												angle[1] = RECEIVE_cGetChar();
182B: 10       PUSH  X
182C: 50 FF    MOV   A,255
182E: 7C 08 DD LCALL 0x08DD
1831: 20       POP   X
(0540) 												
1832: 10       PUSH  X
1833: 52 FC    MOV   A,[X-4]
1835: 7C 08 DD LCALL 0x08DD
1838: 20       POP   X
(0541) 												configToggle(PC_MODE);
1839: 10       PUSH  X
183A: 52 FB    MOV   A,[X-5]
183C: 7C 08 DD LCALL 0x08DD
183F: 20       POP   X
(0542) 												
1840: 10       PUSH  X
1841: 52 FA    MOV   A,[X-6]
1843: 7C 08 DD LCALL 0x08DD
1846: 20       POP   X
(0543) 												total = ((angle[1])*256) + angle[0];
1847: 10       PUSH  X
1848: 52 F9    MOV   A,[X-7]
184A: 7C 08 DD LCALL 0x08DD
184D: 20       POP   X
(0544) 												itoa(param,total,10);
184E: 10       PUSH  X
184F: 52 F8    MOV   A,[X-8]
1851: 7C 08 DD LCALL 0x08DD
1854: 20       POP   X
(0545) 												COMP_SERIAL_PutString(param);
1855: 10       PUSH  X
1856: 52 00    MOV   A,[X+0]
1858: 7C 08 DD LCALL 0x08DD
185B: 20       POP   X
(0546) 												COMP_SERIAL_PutChar('\n');
(0547) 
(0548) 												TIMEOUT = RX_TIMEOUT_DURATION;
185C: 10       PUSH  X
185D: 7C 08 B0 LCALL 0x08B0
1860: 62 D0 00 MOV   REG[208],0
1863: 20       POP   X
1864: 53 97    MOV   [__r0],A
1866: 47 97 20 TST   [__r0],32
1869: AF F2    JZ    0x185C
(0549) 											}
(0550) 										}
(0551) 									}
186B: 93 60    CALL  _xmitWait
186D: 38 FD    ADD   SP,253
186F: 20       POP   X
1870: 7F       RET   
(0552) 								}
(0553) 							}
(0554) 						}
(0555) 					}
(0556) 					else if ((param[0] == 'p') || (param[0] == 'P'))
_longServoInstruction:
  total                --> X+1
  checksum             --> X+0
  value2               --> X-9
  value1               --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
1871: 10       PUSH  X
1872: 4F       MOV   X,SP
1873: 38 03    ADD   SP,3
(0557) 					{
(0558) 						COMP_SERIAL_CmdReset();
(0559) 						servoInstruction(ID,4,READ_SERVO,24,1);
(0560) 						configToggle(RX_MODE);
1875: 62 D0 00 MOV   REG[208],0
1878: 52 FB    MOV   A,[X-5]
187A: 53 96    MOV   [__r1],A
187C: 55 97 00 MOV   [__r0],0
187F: 52 FC    MOV   A,[X-4]
1881: 02 96    ADD   A,[__r1]
1883: 53 96    MOV   [__r1],A
1885: 50 00    MOV   A,0
1887: 0A 97    ADC   A,[__r0]
1889: 53 97    MOV   [__r0],A
188B: 52 FA    MOV   A,[X-6]
188D: 04 96    ADD   [__r1],A
188F: 0E 97 00 ADC   [__r0],0
1892: 52 F9    MOV   A,[X-7]
1894: 04 96    ADD   [__r1],A
1896: 0E 97 00 ADC   [__r0],0
1899: 52 F8    MOV   A,[X-8]
189B: 04 96    ADD   [__r1],A
189D: 0E 97 00 ADC   [__r0],0
18A0: 52 F7    MOV   A,[X-9]
18A2: 53 94    MOV   [__r3],A
18A4: 55 95 00 MOV   [__r2],0
18A7: 51 96    MOV   A,[__r1]
18A9: 02 94    ADD   A,[__r3]
18AB: 54 02    MOV   [X+2],A
18AD: 51 97    MOV   A,[__r0]
18AF: 0A 95    ADC   A,[__r2]
18B1: 54 01    MOV   [X+1],A
(0561) 							
(0562) 						// Loop until we read a response or time out.
(0563) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
18B3: 50 01    MOV   A,1
18B5: 08       PUSH  A
18B6: 50 00    MOV   A,0
18B8: 08       PUSH  A
18B9: 52 01    MOV   A,[X+1]
18BB: 08       PUSH  A
18BC: 52 02    MOV   A,[X+2]
18BE: 08       PUSH  A
18BF: 7C 1C 61 LCALL __divmod_16X16_16
18C2: 38 FE    ADD   SP,254
18C4: 18       POP   A
18C5: 53 96    MOV   [__r1],A
18C7: 18       POP   A
18C8: 50 FF    MOV   A,255
18CA: 12 96    SUB   A,[__r1]
18CC: 54 00    MOV   [X+0],A
(0564) 						{
(0565) 							if(RECEIVE_cReadChar() == SERVO_START)
(0566) 							{
18CE: 10       PUSH  X
18CF: 50 FF    MOV   A,255
18D1: 7C 08 DD LCALL 0x08DD
18D4: 20       POP   X
(0567) 								if(RECEIVE_cGetChar() == SERVO_START)
18D5: 10       PUSH  X
18D6: 50 FF    MOV   A,255
18D8: 7C 08 DD LCALL 0x08DD
18DB: 20       POP   X
(0568) 								{
18DC: 10       PUSH  X
18DD: 52 FC    MOV   A,[X-4]
18DF: 7C 08 DD LCALL 0x08DD
18E2: 20       POP   X
(0569) 									if(RECEIVE_cGetChar() == ID)
18E3: 10       PUSH  X
18E4: 52 FB    MOV   A,[X-5]
18E6: 7C 08 DD LCALL 0x08DD
18E9: 20       POP   X
(0570) 									{
18EA: 10       PUSH  X
18EB: 52 FA    MOV   A,[X-6]
18ED: 7C 08 DD LCALL 0x08DD
18F0: 20       POP   X
(0571) 										// Check the length of the packet.
18F1: 10       PUSH  X
18F2: 52 F9    MOV   A,[X-7]
18F4: 7C 08 DD LCALL 0x08DD
18F7: 20       POP   X
(0572) 										if(RECEIVE_cGetChar() == 3)
18F8: 10       PUSH  X
18F9: 52 F8    MOV   A,[X-8]
18FB: 7C 08 DD LCALL 0x08DD
18FE: 20       POP   X
(0573) 										{
18FF: 10       PUSH  X
1900: 52 F7    MOV   A,[X-9]
1902: 7C 08 DD LCALL 0x08DD
1905: 20       POP   X
(0574) 											// Check to see that there were no errors.
1906: 10       PUSH  X
1907: 52 00    MOV   A,[X+0]
1909: 7C 08 DD LCALL 0x08DD
190C: 20       POP   X
(0575) 											if(RECEIVE_cGetChar() == 0)
(0576) 											{
(0577) 												tempByte = RECEIVE_cGetChar();
190D: 10       PUSH  X
190E: 7C 08 B0 LCALL 0x08B0
1911: 62 D0 00 MOV   REG[208],0
1914: 20       POP   X
1915: 53 97    MOV   [__r0],A
1917: 47 97 20 TST   [__r0],32
191A: AF F2    JZ    0x190D
(0578) 												
(0579) 												configToggle(PC_MODE);
(0580) 												
191C: 92 AF    CALL  _xmitWait
191E: 38 FD    ADD   SP,253
1920: 20       POP   X
1921: 7F       RET   
(0581) 												// Convert tempByte to an ascii value and send.
(0582) 												COMP_SERIAL_PutChar(tempByte + 48);
(0583) 												COMP_SERIAL_PutChar('\n');
(0584) 
(0585) 												TIMEOUT = RX_TIMEOUT_DURATION;
(0586) 											}
_configToggle:
  mode                 --> X-5
1922: 10       PUSH  X
1923: 4F       MOV   X,SP
(0587) 										}
(0588) 									}
1924: 43 00 FF OR    REG[0],255
(0589) 								}
1927: 62 02 00 MOV   REG[2],0
(0590) 							}
(0591) 						}
(0592) 					}
(0593) 					else if ((param[0] == 't') || (param[0] == 'T'))
192A: 62 D0 00 MOV   REG[208],0
192D: 3C 9A 00 CMP   [STATE],0
1930: B0 06    JNZ   0x1937
1932: 3C 9B 00 CMP   [STATE+1],0
1935: A0 10    JZ    0x1946
(0594) 					{
(0595) 						COMP_SERIAL_CmdReset();
1937: 62 D0 00 MOV   REG[208],0
193A: 51 9A    MOV   A,[STATE]
193C: 08       PUSH  A
193D: 51 9B    MOV   A,[STATE+1]
193F: 08       PUSH  A
1940: 90 C4    CALL  _unloadConfig
1942: 38 FE    ADD   SP,254
(0596) 						if(pingModule(ID))
1944: 80 03    JMP   0x1948
(0597) 						{
(0598) 							configToggle(PC_MODE);
(0599) 												
1946: 90 B4    CALL  _unloadAllConfigs
(0600) 							COMP_SERIAL_PutChar(PARAM[0]);
(0601) 							COMP_SERIAL_PutChar('\n');
(0602) 						}
1948: 3D FB 00 CMP   [X-5],0
194B: B0 32    JNZ   0x197E
194D: 3D FC 02 CMP   [X-4],2
1950: B0 2D    JNZ   0x197E
(0603) 					}
(0604) 					else if ((param[0] == 'c') || (param[0] == 'C'))
1952: 7C 06 3F LCALL 0x063F
(0605) 					{
(0606) 						COMP_SERIAL_CmdReset();
1955: 10       PUSH  X
1956: 50 01    MOV   A,1
1958: 7C 0C BC LCALL 0x0CBC
195B: 20       POP   X
(0607) 						if(pingModule(ID))
195C: 10       PUSH  X
195D: 50 00    MOV   A,0
195F: 7C 0C 8D LCALL 0x0C8D
1962: 20       POP   X
(0608) 						{	
(0609) 							configToggle(PC_MODE);
1963: 10       PUSH  X
1964: 50 00    MOV   A,0
1966: 7C 08 A4 LCALL 0x08A4
1969: 20       POP   X
(0610) 							
(0611) 							COMP_SERIAL_PutChar(PARAM[1]);
196A: 62 D0 00 MOV   REG[208],0
196D: 55 9D 00 MOV   [TIMEOUT+1],0
1970: 55 9C 00 MOV   [TIMEOUT],0
(0612) 							COMP_SERIAL_PutChar('\n');
1973: 62 D0 00 MOV   REG[208],0
1976: 55 9B 02 MOV   [STATE+1],2
1979: 55 9A 00 MOV   [STATE],0
(0613) 						}
197C: 80 7A    JMP   0x19F7
(0614) 					}
197E: 3D FB 00 CMP   [X-5],0
1981: B0 2C    JNZ   0x19AE
1983: 3D FC 01 CMP   [X-4],1
1986: B0 27    JNZ   0x19AE
(0615) 				}
(0616) 			}
1988: 7C 07 12 LCALL 0x0712
(0617) 		}
(0618) 	}
(0619) 	
198B: 10       PUSH  X
198C: 50 00    MOV   A,0
198E: 7C 0B 1B LCALL 0x0B1B
1991: 20       POP   X
(0620) 	if(STATE != PC_MODE)
(0621) 	{
(0622) 		configToggle(PC_MODE);
1992: 62 D0 00 MOV   REG[208],0
1995: 55 9D 00 MOV   [TIMEOUT+1],0
1998: 55 9C 00 MOV   [TIMEOUT],0
(0623) 	}
199B: 10       PUSH  X
199C: 7C 0A 3B LCALL 0x0A3B
(0624) 	else
199F: 7C 0A 43 LCALL 0x0A43
19A2: 20       POP   X
(0625) 	{
(0626) 		TIMEOUT = 0;
19A3: 62 D0 00 MOV   REG[208],0
19A6: 55 9B 01 MOV   [STATE+1],1
19A9: 55 9A 00 MOV   [STATE],0
(0627) 	}
19AC: 80 4A    JMP   0x19F7
(0628) }
19AE: 3D FB 00 CMP   [X-5],0
19B1: B0 45    JNZ   0x19F7
19B3: 3D FC 00 CMP   [X-4],0
19B6: B0 40    JNZ   0x19F7
(0629) 
(0630) // This function receives a destination, command length, instruction type, address, and value.
19B8: 7C 05 D6 LCALL 0x05D6
(0631) // With these parameters, the function sends a packet to the communication bus.
(0632) void servoInstruction(char id, char length, char instruction, char address, char value)
19BB: 10       PUSH  X
19BC: 50 00    MOV   A,0
19BE: 7C 09 7D LCALL 0x097D
19C1: 20       POP   X
(0633) {
(0634) 	char checksum;
19C2: 62 D0 00 MOV   REG[208],0
19C5: 55 9D 00 MOV   [TIMEOUT+1],0
19C8: 55 9C 00 MOV   [TIMEOUT],0
(0635) 	int total;
19CB: 10       PUSH  X
19CC: 7C 08 29 LCALL 0x0829
(0636) 	
19CF: 7C 08 31 LCALL 0x0831
19D2: 20       POP   X
(0637) 	total = id + length + instruction + address + value;
(0638) 	
19D3: 62 D0 00 MOV   REG[208],0
19D6: 3C 9C 00 CMP   [TIMEOUT],0
19D9: B0 06    JNZ   0x19E0
19DB: 3C 9D 00 CMP   [TIMEOUT+1],0
19DE: AF F4    JZ    0x19D3
(0639) 	// Calculate the checksum value for our servo communication.
(0640) 	checksum = 255-(total%256);
(0641) 	
(0642) 	// Talk to the servo.
(0643) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
(0644) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
19E0: 10       PUSH  X
19E1: 7C 08 35 LCALL 0x0835
19E4: 20       POP   X
(0645) 	TX_REPEATER_PutChar(id);			// Servo ID
19E5: 62 D0 00 MOV   REG[208],0
19E8: 55 9D 00 MOV   [TIMEOUT+1],0
19EB: 55 9C 00 MOV   [TIMEOUT],0
(0646) 	TX_REPEATER_PutChar(length);		// The instruction length.
(0647) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
19EE: 62 D0 00 MOV   REG[208],0
19F1: 55 9B 00 MOV   [STATE+1],0
19F4: 55 9A 00 MOV   [STATE],0
(0648) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
(0649) 	TX_REPEATER_PutChar(value);			// The value to write or number of bytes to read.
(0650) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
(0651) 	
19F7: 43 02 FF OR    REG[2],255
19FA: 20       POP   X
19FB: 7F       RET   
(0652) 	// Wait for the transmission to finish.
(0653) 	while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
(0654) 	
(0655) 	// Make completely sure we're done.
(0656) 	xmitWait();
(0657) }
(0658) 
_unloadAllConfigs:
19FC: 7C 06 A8 LCALL 0x06A8
(0659) // This function receives a destination, command length, instruction type, address, and two values.
19FF: 7C 07 6B LCALL 0x076B
(0660) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
1A02: 7C 06 1A LCALL 0x061A
1A05: 7F       RET   
(0661) {
(0662) 	char checksum;
(0663) 	int total;
(0664) 	
(0665) 	total = id + length + instruction + address + value1 + value2;
(0666) 	
_unloadConfig:
  config_num           --> X-5
1A06: 10       PUSH  X
1A07: 4F       MOV   X,SP
(0667) 	// Calculate the checksum value for our servo communication.
1A08: 3D FB 00 CMP   [X-5],0
1A0B: B0 0B    JNZ   0x1A17
1A0D: 3D FC 02 CMP   [X-4],2
1A10: B0 06    JNZ   0x1A17
(0668) 	checksum = 255-(total%256);
(0669) 	
1A12: 7C 06 A8 LCALL 0x06A8
(0670) 	// Talk to the servo.
1A15: 80 1D    JMP   0x1A33
(0671) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
1A17: 3D FB 00 CMP   [X-5],0
1A1A: B0 0B    JNZ   0x1A26
1A1C: 3D FC 01 CMP   [X-4],1
1A1F: B0 06    JNZ   0x1A26
(0672) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
(0673) 	TX_REPEATER_PutChar(id);			// Servo ID
1A21: 7C 07 6B LCALL 0x076B
(0674) 	TX_REPEATER_PutChar(length);		// The instruction length.
1A24: 80 0E    JMP   0x1A33
(0675) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
1A26: 3D FB 00 CMP   [X-5],0
1A29: B0 09    JNZ   0x1A33
1A2B: 3D FC 00 CMP   [X-4],0
1A2E: B0 04    JNZ   0x1A33
(0676) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
(0677) 	TX_REPEATER_PutChar(value1);		// The first value to write.
1A30: 7C 06 1A LCALL 0x061A
(0678) 	TX_REPEATER_PutChar(value2);		// The first value to write.
1A33: 20       POP   X
1A34: 7F       RET   
(0679) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
(0680) 	
(0681) 	// Wait for the transmission to finish.
(0682) 	while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
(0683) 	
_busListen:
1A35: 50 00    MOV   A,0
1A37: 08       PUSH  A
1A38: 50 01    MOV   A,1
1A3A: 08       PUSH  A
1A3B: 9E E5    CALL  _configToggle
1A3D: 38 FE    ADD   SP,254
1A3F: 80 13    JMP   0x1A53
(0684) 	// Make completely sure we're done.
(0685) 	xmitWait();
(0686) }
(0687) 
(0688) // This function allows the program to pass an RX or TX mode flag for switching between modes on the
1A41: 10       PUSH  X
1A42: 7C 0B 2A LCALL 0x0B2A
1A45: 20       POP   X
1A46: 39 00    CMP   A,0
1A48: A0 0A    JZ    0x1A53
(0689) // half duplex UART serial communication line.
(0690) void configToggle(int mode)
1A4A: 62 D0 00 MOV   REG[208],0
1A4D: 55 9D 2C MOV   [TIMEOUT+1],44
1A50: 55 9C 01 MOV   [TIMEOUT],1
1A53: 62 D0 00 MOV   REG[208],0
1A56: 51 9D    MOV   A,[TIMEOUT+1]
1A58: 11 2C    SUB   A,44
1A5A: 51 9C    MOV   A,[TIMEOUT]
1A5C: 31 80    XOR   A,128
1A5E: 19 81    SBB   A,129
1A60: CF E0    JC    0x1A41
(0691) {
(0692) 	// Disconnect from the global bus and leave the pin high.
(0693) 	PRT0DR |= 0b11111111;
(0694) 	PRT0GS &= 0b00000000;
(0695) 
1A62: 62 D0 00 MOV   REG[208],0
1A65: 55 9D 00 MOV   [TIMEOUT+1],0
1A68: 55 9C 00 MOV   [TIMEOUT],0
1A6B: 80 13    JMP   0x1A7F
(0696) 	// Unload the configuration of the current state.
(0697) 	// If there is no state, blindly wipe all configurations.
(0698) 	if(STATE)
(0699) 	{
(0700) 		unloadConfig(STATE);
1A6D: 10       PUSH  X
1A6E: 7C 0B 32 LCALL 0x0B32
1A71: 20       POP   X
1A72: 39 00    CMP   A,0
1A74: A0 0A    JZ    0x1A7F
(0701) 	}
(0702) 	else
1A76: 62 D0 00 MOV   REG[208],0
1A79: 55 9D 00 MOV   [TIMEOUT+1],0
1A7C: 55 9C 00 MOV   [TIMEOUT],0
1A7F: 62 D0 00 MOV   REG[208],0
1A82: 51 9D    MOV   A,[TIMEOUT+1]
1A84: 11 64    SUB   A,100
1A86: 51 9C    MOV   A,[TIMEOUT]
1A88: 31 80    XOR   A,128
1A8A: 19 80    SBB   A,128
1A8C: CF E0    JC    0x1A6D
1A8E: 7F       RET   
(0703) 	{
(0704) 		unloadAllConfigs();
(0705) 	}
(0706) 	
(0707) 	if(mode == PC_MODE)
(0708) 	{
_initializeSlaves:
  num_timeouts         --> X+0
1A8F: 10       PUSH  X
1A90: 4F       MOV   X,SP
1A91: 38 02    ADD   SP,2
(0709) 		LoadConfig_pc_listener();
1A93: 56 01 00 MOV   [X+1],0
1A96: 56 00 00 MOV   [X+0],0
(0710) 
(0711) 		COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
(0712) 		COMP_SERIAL_Start(UART_PARITY_NONE);			// Starts the UART.
1A99: 62 D0 00 MOV   REG[208],0
1A9C: 55 99 00 MOV   [NUM_MODULES+1],0
1A9F: 55 98 00 MOV   [NUM_MODULES],0
(0713) 		
(0714) 		TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);		// Start the TX repeater.
(0715) 		
1AA2: 9F 91    CALL  _busListen
(0716) 		TIMEOUT = 0;
(0717) 		STATE = PC_MODE;
1AA4: 7C 11 52 LCALL _sayHello
1AA7: 81 0B    JMP   0x1BB3
(0718) 	}
(0719) 	else if(mode == RX_MODE)
(0720) 	{
(0721) 		LoadConfig_receiver_config();
(0722) 		
(0723) 		// Start the receiver.
1AA9: 7C 11 A8 LCALL _validTransmission
1AAC: 62 D0 00 MOV   REG[208],0
1AAF: 3C 97 00 CMP   [__r0],0
1AB2: B0 06    JNZ   0x1AB9
1AB4: 3C 96 00 CMP   [__r1],0
1AB7: A0 C8    JZ    0x1B80
(0724) 		RECEIVE_Start(RECEIVE_PARITY_NONE);
(0725) 		
1AB9: 62 D0 00 MOV   REG[208],0
1ABC: 3C A2 C8 CMP   [COMMAND_TYPE],200
1ABF: B0 F3    JNZ   0x1BB3
(0726) 		// Start response timeout timer and enable its interrupt routine.
(0727) 		TIMEOUT = 0;
(0728) 		RX_TIMEOUT_EnableInt();
1AC1: 62 D0 00 MOV   REG[208],0
1AC4: 3C A0 00 CMP   [COMMAND_DESTINATION],0
1AC7: B0 EB    JNZ   0x1BB3
(0729) 		RX_TIMEOUT_Start();
(0730) 		
1AC9: 62 D0 00 MOV   REG[208],0
1ACC: 76 99    INC   [NUM_MODULES+1]
1ACE: 0E 98 00 ADC   [NUM_MODULES],0
(0731) 		STATE = RX_MODE;
1AD1: 56 01 00 MOV   [X+1],0
1AD4: 56 00 00 MOV   [X+0],0
(0732) 	}
(0733) 	else if(mode == TX_MODE)
1AD7: 51 98    MOV   A,[NUM_MODULES]
1AD9: 08       PUSH  A
1ADA: 51 99    MOV   A,[NUM_MODULES+1]
1ADC: 08       PUSH  A
1ADD: 7C 0F 63 LCALL _assignID
1AE0: 38 FE    ADD   SP,254
1AE2: 62 D0 00 MOV   REG[208],0
1AE5: 3C 97 00 CMP   [__r0],0
1AE8: B0 CA    JNZ   0x1BB3
1AEA: 3C 96 00 CMP   [__r1],0
1AED: B0 C5    JNZ   0x1BB3
(0734) 	{
(0735) 		LoadConfig_transmitter_config();
(0736) 		// Start the transmitter.
(0737) 		TRANSMIT_Start(TRANSMIT_PARITY_NONE);
(0738) 		
1AEF: 62 D0 00 MOV   REG[208],0
1AF2: 51 98    MOV   A,[NUM_MODULES]
1AF4: 08       PUSH  A
1AF5: 51 99    MOV   A,[NUM_MODULES+1]
1AF7: 08       PUSH  A
1AF8: 7C 0E 74 LCALL _pingModule
1AFB: 38 FE    ADD   SP,254
1AFD: 62 D0 00 MOV   REG[208],0
1B00: 3C 97 00 CMP   [__r0],0
1B03: B0 AF    JNZ   0x1BB3
1B05: 3C 96 00 CMP   [__r1],0
1B08: B0 AA    JNZ   0x1BB3
(0739) 		TIMEOUT = 0;
(0740) 		TX_TIMEOUT_EnableInt();	// Make sure interrupts are enabled.
1B0A: 62 D0 00 MOV   REG[208],0
1B0D: 51 98    MOV   A,[NUM_MODULES]
1B0F: 08       PUSH  A
1B10: 51 99    MOV   A,[NUM_MODULES+1]
1B12: 08       PUSH  A
1B13: 7C 0E 74 LCALL _pingModule
1B16: 38 FE    ADD   SP,254
1B18: 62 D0 00 MOV   REG[208],0
1B1B: 3C 97 00 CMP   [__r0],0
1B1E: B0 94    JNZ   0x1BB3
1B20: 3C 96 00 CMP   [__r1],0
1B23: B0 8F    JNZ   0x1BB3
(0741) 		TX_TIMEOUT_Start();		// Start the timer.
(0742) 		
1B25: 62 D0 00 MOV   REG[208],0
1B28: 51 98    MOV   A,[NUM_MODULES]
1B2A: 08       PUSH  A
1B2B: 51 99    MOV   A,[NUM_MODULES+1]
1B2D: 08       PUSH  A
1B2E: 7C 0E 74 LCALL _pingModule
1B31: 38 FE    ADD   SP,254
1B33: 62 D0 00 MOV   REG[208],0
1B36: 3C 97 00 CMP   [__r0],0
1B39: B0 79    JNZ   0x1BB3
1B3B: 3C 96 00 CMP   [__r1],0
1B3E: B0 74    JNZ   0x1BB3
(0743) 		while(!TIMEOUT)
(0744) 		{
1B40: 62 D0 00 MOV   REG[208],0
1B43: 51 98    MOV   A,[NUM_MODULES]
1B45: 08       PUSH  A
1B46: 51 99    MOV   A,[NUM_MODULES+1]
1B48: 08       PUSH  A
1B49: 7C 0E 74 LCALL _pingModule
1B4C: 38 FE    ADD   SP,254
1B4E: 62 D0 00 MOV   REG[208],0
1B51: 3C 97 00 CMP   [__r0],0
1B54: B0 5E    JNZ   0x1BB3
1B56: 3C 96 00 CMP   [__r1],0
1B59: B0 59    JNZ   0x1BB3
(0745) 			// Do nothing while we wait for one timeout period.
(0746) 			// This is to allow everyone to get in the right configuration.
1B5B: 62 D0 00 MOV   REG[208],0
1B5E: 51 98    MOV   A,[NUM_MODULES]
1B60: 08       PUSH  A
1B61: 51 99    MOV   A,[NUM_MODULES+1]
1B63: 08       PUSH  A
1B64: 7C 0E 74 LCALL _pingModule
1B67: 38 FE    ADD   SP,254
1B69: 62 D0 00 MOV   REG[208],0
1B6C: 3C 97 00 CMP   [__r0],0
1B6F: B0 43    JNZ   0x1BB3
1B71: 3C 96 00 CMP   [__r1],0
1B74: B0 3E    JNZ   0x1BB3
(0747) 		}
(0748) 		
1B76: 62 D0 00 MOV   REG[208],0
1B79: 7A 99    DEC   [NUM_MODULES+1]
1B7B: 1E 98 00 SBB   [NUM_MODULES],0
(0749) 		TX_TIMEOUT_Stop();		// Stop the timer.
(0750) 		TIMEOUT = 0;			// Reset the timeout flag.
(0751) 		
(0752) 		STATE = TX_MODE;
(0753) 	}
(0754) 	
(0755) 	// Reconnect to the global bus.
(0756) 	PRT0GS |= 0b11111111;
(0757) }
1B7E: 80 34    JMP   0x1BB3
(0758) 
1B80: 62 D0 00 MOV   REG[208],0
1B83: 51 9D    MOV   A,[TIMEOUT+1]
1B85: 11 05    SUB   A,5
1B87: 51 9C    MOV   A,[TIMEOUT]
1B89: 31 80    XOR   A,128
1B8B: 19 80    SBB   A,128
1B8D: C0 25    JC    0x1BB3
(0759) // This function blindly unloads all user configurations. This will be called once,
(0760) // when the system initially has no known state.
(0761) void unloadAllConfigs(void)
1B8F: 62 D0 00 MOV   REG[208],0
1B92: 3C 98 00 CMP   [NUM_MODULES],0
1B95: B0 06    JNZ   0x1B9C
1B97: 3C 99 00 CMP   [NUM_MODULES+1],0
1B9A: A0 06    JZ    0x1BA1
(0762) {
(0763) 	UnloadConfig_pc_listener();
1B9C: 77 01    INC   [X+1]
1B9E: 0F 00 00 ADC   [X+0],0
(0764) 	UnloadConfig_receiver_config();
(0765) 	UnloadConfig_transmitter_config();
(0766) }
(0767) 
1BA1: 62 D0 00 MOV   REG[208],0
1BA4: 51 99    MOV   A,[NUM_MODULES+1]
1BA6: 11 FA    SUB   A,250
1BA8: 51 98    MOV   A,[NUM_MODULES]
1BAA: 31 80    XOR   A,128
1BAC: 19 80    SBB   A,128
1BAE: D0 04    JNC   0x1BB3
(0768) // This function unloads the configuration corresponding to the config number passed to it.
(0769) // We do this instead of unloadAllConfigs to cut down on set up time.
1BB0: 7C 11 52 LCALL _sayHello
1BB3: 52 01    MOV   A,[X+1]
1BB5: 11 32    SUB   A,50
1BB7: 52 00    MOV   A,[X+0]
1BB9: 31 80    XOR   A,128
1BBB: 19 80    SBB   A,128
1BBD: CE EB    JC    0x1AA9
(0770) void unloadConfig(int config_num)
(0771) {
(0772) 	if(config_num == PC_MODE)
(0773) 	{
(0774) 		UnloadConfig_pc_listener();
(0775) 	}
1BBF: 50 00    MOV   A,0
1BC1: 08       PUSH  A
1BC2: 50 02    MOV   A,2
1BC4: 08       PUSH  A
1BC5: 9D 5B    CALL  _configToggle
1BC7: 38 FE    ADD   SP,254
1BC9: 38 FE    ADD   SP,254
1BCB: 20       POP   X
1BCC: 7F       RET   
(0776) 	else if(config_num == RX_MODE)
(0777) 	{
(0778) 		UnloadConfig_receiver_config();
(0779) 	}
_xmitWait:
  i                    --> X+0
1BCD: 10       PUSH  X
1BCE: 4F       MOV   X,SP
1BCF: 38 02    ADD   SP,2
(0780) 	else if(config_num == TX_MODE)
(0781) 	{
(0782) 		UnloadConfig_transmitter_config();
1BD1: 56 01 00 MOV   [X+1],0
1BD4: 56 00 00 MOV   [X+0],0
1BD7: 77 01    INC   [X+1]
1BD9: 0F 00 00 ADC   [X+0],0
1BDC: 52 01    MOV   A,[X+1]
1BDE: 11 19    SUB   A,25
1BE0: 52 00    MOV   A,[X+0]
1BE2: 31 80    XOR   A,128
1BE4: 19 80    SBB   A,128
1BE6: CF F0    JC    0x1BD7
1BE8: 38 FE    ADD   SP,254
1BEA: 20       POP   X
1BEB: 7F       RET   
(0783) 	}
(0784) }
(0785) 
(0786) void busListen(void)
(0787) {
(0788) 	configToggle(RX_MODE);
(0789) 
_TX_TIMEOUT_ISR:
1BEC: 71 C0    OR    F,192
1BEE: 08       PUSH  A
1BEF: 5D D0    MOV   A,REG[208]
1BF1: 08       PUSH  A
(0790) 	// Wait for the first byte.
1BF2: 62 D0 00 MOV   REG[208],0
1BF5: 76 9D    INC   [TIMEOUT+1]
1BF7: 0E 9C 00 ADC   [TIMEOUT],0
(0791) 	while(TIMEOUT < BOOT_TIMEOUT)
(0792) 	{	
1BFA: 62 DA FD MOV   REG[218],253
1BFD: 18       POP   A
1BFE: 60 D0    MOV   REG[208],A
1C00: 18       POP   A
1C01: 7E       RETI  
(0793) 		if(RECEIVE_cGetChar())
(0794) 		{
(0795) 			TIMEOUT = BOOT_TIMEOUT;
(0796) 		}
_RX_TIMEOUT_ISR:
1C02: 71 C0    OR    F,192
1C04: 08       PUSH  A
1C05: 5D D0    MOV   A,REG[208]
1C07: 08       PUSH  A
(0797) 	}
1C08: 62 D0 00 MOV   REG[208],0
1C0B: 76 9D    INC   [TIMEOUT+1]
1C0D: 0E 9C 00 ADC   [TIMEOUT],0
(0798) 	
(0799) 	// Clear the timeout flag.
1C10: 62 DA FD MOV   REG[218],253
1C13: 18       POP   A
1C14: 60 D0    MOV   REG[208],A
1C16: 18       POP   A
1C17: 7E       RETI  

FILE: lib\psocdynamicint.asm
                                   (0001) ; Generated by PSoC Designer 5.0.985.0
                                   (0002) ;
                                   (0003) ;
                                   (0004) ;  fakemasterINT.asm
                                   (0005) ;
                                   (0006) ;  Data: 29 October, 2001
                                   (0007) ;  Copyright Cypress MicroSystems 2001
                                   (0008) ;
                                   (0009) ;  This file is generated by the Device Editor on Application Generation.
                                   (0010) ;  It contains dispatch code that ensures that interrupt vectors are 
                                   (0011) ;  serviced by the appropriate ISR depending on the currently active
                                   (0012) ;  configuration.
                                   (0013) ;  
                                   (0014) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0015) ;  Edits to this file will not be preserved.
                                   (0016) ;
                                   (0017) include "PSoCDynamic.inc"
                                   (0018) include "m8c.inc"
                                   (0019) export	Dispatch_INTERRUPT_10
                                   (0020) export	Dispatch_INTERRUPT_9
                                   (0021) 
                                   (0022) 
                                   (0023) Dispatch_INTERRUPT_10:
1C18: 08       PUSH  A             (0024) 	push	a
1C19: 50 00    MOV   A,0           (0025) 	mov		a,0
1C1B: 47 02 02 TST   [2],2         (0026) 	tst		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
1C1E: B0 13    JNZ   0x1C32        (0027) 	jnz		Dispatch_INTERRUPT_10_END
1C20: 50 04    MOV   A,4           (0028) 	mov		a,4
1C22: 47 02 04 TST   [2],4         (0029) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1C25: B0 0C    JNZ   0x1C32        (0030) 	jnz		Dispatch_INTERRUPT_10_END
1C27: 50 08    MOV   A,8           (0031) 	mov		a,8
1C29: 47 02 01 TST   [2],1         (0032) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1C2C: B0 05    JNZ   0x1C32        (0033) 	jnz		Dispatch_INTERRUPT_10_END
1C2E: 18       POP   A             (0034) 	pop		a
1C2F: 7E       RETI                (0035) 	reti
                                   (0036) ; Stop Code Compressor from breaking table alignment
                                   (0037) ; The next instruction does not get executed.
1C30: 71 00    OR    F,0           (0038) 	Suspend_CodeCompressor
                                   (0039) Dispatch_INTERRUPT_10_END:
1C32: E0 01    JACC  0x1C34        (0040) 	jacc	Dispatch_INTERRUPT_10_TBL
                                   (0041) Dispatch_INTERRUPT_10_TBL:
1C34: 18       POP   A             (0042) 	pop		a
1C35: 7D 08 89 LJMP  0x0889        (0043) 	ljmp	_TX_REPEATER_ISR
1C38: 18       POP   A             (0044) 	pop		a
1C39: 7D 0A 9B LJMP  0x0A9B        (0045) 	ljmp	_RECEIVE_ISR
1C3C: 18       POP   A             (0046) 	pop		a
1C3D: 7D 09 62 LJMP  0x0962        (0047) 	ljmp	_TRANSMIT_ISR
                                   (0048) ; Resume Code Compressor.
                                   (0049) ; The next instruction does not get executed.
1C40: 38 00    ADD   SP,0          (0050) 	Resume_CodeCompressor
                                   (0051) 
                                   (0052) Dispatch_INTERRUPT_9:
1C42: 08       PUSH  A             (0053) 	push	a
1C43: 50 00    MOV   A,0           (0054) 	mov		a,0
1C45: 47 02 04 TST   [2],4         (0055) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1C48: B0 0C    JNZ   0x1C55        (0056) 	jnz		Dispatch_INTERRUPT_9_END
1C4A: 50 04    MOV   A,4           (0057) 	mov		a,4
1C4C: 47 02 01 TST   [2],1         (0058) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1C4F: B0 05    JNZ   0x1C55        (0059) 	jnz		Dispatch_INTERRUPT_9_END
1C51: 18       POP   A             (0060) 	pop		a
1C52: 7E       RETI                (0061) 	reti
                                   (0062) ; Stop Code Compressor from breaking table alignment
                                   (0063) ; The next instruction does not get executed.
1C53: 71 00    OR    F,0           (0064) 	Suspend_CodeCompressor
                                   (0065) Dispatch_INTERRUPT_9_END:
1C55: E0 01    JACC  0x1C57        (0066) 	jacc	Dispatch_INTERRUPT_9_TBL
                                   (0067) Dispatch_INTERRUPT_9_TBL:
1C57: 18       POP   A             (0068) 	pop		a
1C58: 7D 1C 02 LJMP  _RX_TIMEOUT_ISR(0069) 	ljmp	_RX_TIMEOUT_ISR
1C5B: 18       POP   A             (0070) 	pop		a
1C5C: 7D 1B EC LJMP  _TX_TIMEOUT_ISR(0071) 	ljmp	_TX_TIMEOUT_ISR
                                   (0072) ; Resume Code Compressor.
                                   (0073) ; The next instruction does not get executed.
                                   (0074) 	Resume_CodeCompressor

FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.985.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.01
