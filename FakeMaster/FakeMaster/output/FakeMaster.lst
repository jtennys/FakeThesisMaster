0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0116) ; Generated by PSoC Designer 5.0.985.0
                                   (0117) ;
                                   (0118) ;@Id: boot.tpl#895 @
0004: 30       HALT                (0119) ;=============================================================================
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0120) ;  FILENAME:   boot.asm
                                   (0121) ;  VERSION:    4.18
                                   (0122) ;  DATE:       28 June 2007
0008: 7E       RETI                (0123) ;
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0124) ;  DESCRIPTION:
                                   (0125) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                   (0126) ;
000C: 7E       RETI                (0127) ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
                                   (0128) ;
                                   (0129) ; NOTES:
                                   (0130) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
0010: 7E       RETI                (0131) ; the project's root directory to create BOOT.ASM. Any changes made to
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
                                   (0132) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                   (0133) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0134) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
0014: 7E       RETI                (0135) ; are not accidentally modified.
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0136) ;
                                   (0137) ;=============================================================================
                                   (0138) 
0018: 7E       RETI                (0139) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
0019: 30       HALT  
001A: 30       HALT  
001B: 30       HALT  
                                   (0140) include "m8c.inc"			;Part specific file
                                   (0141) include "m8ssc.inc"			;Part specific file
                                   (0142) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
001C: 7E       RETI                (0143) 
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0144) ;--------------------------------------
                                   (0145) ; Export Declarations
                                   (0146) ;--------------------------------------
0020: 7E       RETI                (0147) 
0021: 30       HALT  
0022: 30       HALT  
0023: 30       HALT  
                                   (0148) export __Start
                                   (0149) IF	(TOOLCHAIN & HITECH)
0024: 7D 1C 6C LJMP  Dispatch_INTERRUPT_9(0150) ELSE
0027: 7E       RETI                (0151) export __bss_start
                                   (0152) export __data_start
                                   (0153) export __idata_start
0028: 7D 1C 42 LJMP  Dispatch_INTERRUPT_10(0154) export __func_lit_start
002B: 7E       RETI                (0155) export __text_start
                                   (0156) ENDIF
                                   (0157) export  _bGetPowerSetting
                                   (0158) export   bGetPowerSetting
002C: 7E       RETI                (0159) 
002D: 30       HALT  
002E: 30       HALT  
002F: 30       HALT  
                                   (0160) 
                                   (0161) ;--------------------------------------
                                   (0162) ; Optimization flags
0030: 7E       RETI                (0163) ;--------------------------------------
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
                                   (0164) ;
                                   (0165) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0166) ; boot.asm. See the notes in the banner comment at the beginning of
0034: 7E       RETI                (0167) ; this file.
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
                                   (0168) 
                                   (0169) ; Optimization for Assembly language (only) projects and C-language projects
0038: 7D 0C 01 LJMP  0x0C01        (0170) ; that do not depend on the C compiler to initialize the values of RAM variables.
003B: 7E       RETI                (0171) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0172) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0173) ;
003C: 7D 0C 02 LJMP  0x0C02        (0174) IF	(TOOLCHAIN & HITECH)
003F: 7E       RETI                (0175) ; The C compiler will customize the startup code - it's not required here
                                   (0176) 
                                   (0177) C_LANGUAGE_SUPPORT:              equ 0
                                   (0178) ELSE
0040: 7E       RETI                (0179) C_LANGUAGE_SUPPORT:              equ 1
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
                                   (0180) ENDIF
                                   (0181) 
                                   (0182) 
0044: 7E       RETI                (0183) ; The following equate is required for proper operation. Reseting its value
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
                                   (0184) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                   (0185) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                   (0186) ; and PLL_Lock must take place within user code. See the family data sheet for
0048: 7E       RETI                (0187) ; the requirements of starting the ECO and PLL lock mode.
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
                                   (0188) ;
                                   (0189) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                   (0190) ;                invoking main
004C: 7E       RETI                (0191) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
                                   (0192) ;               the time code in main starts executing.
                                   (0193) ;
                                   (0194) WAIT_FOR_32K:                    equ 1
0050: 7E       RETI                (0195) 
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
                                   (0196) 
                                   (0197) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0198) ; to invoke the user's _main code. If _main executes a return instruction,
0054: 7E       RETI                (0199) ; boot provides an infinite loop. By changing the following equate from zero
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
                                   (0200) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0201) ; bytes on the stack which are otherwise required for the return address. If
                                   (0202) ; this option is enabled, _main must not return. (Beginning with the 4.2
0058: 7E       RETI                (0203) ; release, the C compiler automatically places an infinite loop at the end
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
                                   (0204) ; of main, rather than a return instruction.)
                                   (0205) ;
                                   (0206) ENABLE_LJMP_TO_MAIN:             equ 0
005C: 7E       RETI                (0207) 
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0208) 
                                   (0209) ;-----------------------------------------------------------------------------
                                   (0210) ; Interrupt Vector Table
0060: 7E       RETI                (0211) ;-----------------------------------------------------------------------------
0061: 30       HALT  
0062: 30       HALT  
0063: 30       HALT  
                                   (0212) ;
                                   (0213) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0214) ; a jump instruction to an ISR (Interrupt Service Routine), although
0064: 7E       RETI                (0215) ; very short ISRs could be encoded within the table itself. Normally,
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0216) ; vector jump targets are modified automatically according to the user
                                   (0217) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0218) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0219) ; configuration files. If you need to hard code a vector, update the
                                   (0220) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0221) ; of this file.
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) 
                                   (0224)     AREA TOP (ROM, ABS, CON)
                                   (0225) 
                                   (0226)     org   0                        ;Reset Interrupt Vector
                                   (0227) IF	(TOOLCHAIN & HITECH)
                                   (0228) ;   jmp   __Start                  ;C compiler fills in this vector
                                   (0229) ELSE
                                   (0230)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0231) ENDIF
                                   (0232) 
                                   (0233)     org   04h                      ;Supply Monitor Interrupt Vector
                                   (0234)     halt                           ;Stop execution if power falls too low
0068: 71 10    OR    F,16          (0235) 
006A: 62 FA 00 MOV   REG[250],0    (0236)     org   08h                      ;Analog Column 0 Interrupt Vector
006D: 62 E3 87 MOV   REG[227],135  (0237)     // call	void_handler
0070: 70 EF    AND   F,239         (0238)     reti
                                   (0239) 
                                   (0240)     org   0Ch                      ;Analog Column 1 Interrupt Vector
0072: 50 20    MOV   A,32          (0241)     // call	void_handler
0074: 28       ROMX                (0242)     reti
0075: 50 40    MOV   A,64          (0243) 
0077: 28       ROMX                (0244)     org   10h                      ;Analog Column 2 Interrupt Vector
0078: 50 60    MOV   A,96          (0245)     // call	void_handler
007A: 28       ROMX                (0246)     reti
                                   (0247) 
                                   (0248)     org   14h                      ;Analog Column 3 Interrupt Vector
                                   (0249)     // call	void_handler
                                   (0250)     reti
                                   (0251) 
                                   (0252)     org   18h                      ;VC3 Interrupt Vector
                                   (0253)     // call	void_handler
                                   (0254)     reti
                                   (0255) 
007B: 41 FE FB AND   REG[254],251  (0256)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0257)     // call	void_handler
                                   (0258)     reti
                                   (0259) 
                                   (0260)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                   (0261)     // call	void_handler
                                   (0262)     reti
                                   (0263) 
                                   (0264)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                   (0265)     ljmp	Dispatch_INTERRUPT_9
007E: 50 80    MOV   A,128         (0266)     reti
0080: 4E       SWAP  SP,A          (0267) 
                                   (0268)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                   (0269)     ljmp	Dispatch_INTERRUPT_10
                                   (0270)     reti
                                   (0271) 
                                   (0272)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                   (0273)     // call	void_handler
                                   (0274)     reti
                                   (0275) 
                                   (0276)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                   (0277)     // call	void_handler
                                   (0278)     reti
                                   (0279) 
                                   (0280)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                   (0281)     // call	void_handler
                                   (0282)     reti
                                   (0283) 
                                   (0284)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                   (0285)     ljmp	_COMP_SERIAL_TX_ISR
                                   (0286)     reti
                                   (0287) 
                                   (0288)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                   (0289)     ljmp	_COMP_SERIAL_RX_ISR
                                   (0290)     reti
                                   (0291) 
                                   (0292)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                   (0293)     // call	void_handler
                                   (0294)     reti
                                   (0295) 
                                   (0296)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                   (0297)     // call	void_handler
0081: 55 F8 00 MOV   [248],0       (0298)     reti
0084: 55 F9 00 MOV   [249],0       (0299) 
                                   (0300)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                   (0301)     // call	void_handler
                                   (0302)     reti
                                   (0303) 
                                   (0304)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                   (0305)     // call	void_handler
                                   (0306)     reti
                                   (0307) 
                                   (0308)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                   (0309)     // call	void_handler
                                   (0310)     reti
                                   (0311) 
                                   (0312)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                   (0313)     // call	void_handler
                                   (0314)     reti
                                   (0315) 
                                   (0316)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                   (0317)     // call	void_handler
                                   (0318)     reti
                                   (0319) 
                                   (0320)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                   (0321)     // call	void_handler
                                   (0322)     reti
0087: 71 10    OR    F,16          (0323) 
0089: 62 E0 1A MOV   REG[224],26   (0324)     org   60h                      ;PSoC I2C Interrupt Vector
008C: 70 EF    AND   F,239         (0325)     // call	void_handler
008E: 62 E3 38 MOV   REG[227],56   (0326)     reti
                                   (0327) 
                                   (0328)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0329)     // call	void_handler
                                   (0330)     reti
                                   (0331) 
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;  Start of Execution.
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0336) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0337) ;
                                   (0338) 
                                   (0339) IF	(TOOLCHAIN & HITECH)
                                   (0340)  	AREA PD_startup(CODE, REL, CON)
                                   (0341) ELSE
                                   (0342)     org 68h
                                   (0343) ENDIF
                                   (0344) __Start:
                                   (0345) 
                                   (0346)     ; initialize SMP values for voltage stabilization, if required,
                                   (0347)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0348)     ; least for now. 
                                   (0349)     ;
                                   (0350)     M8C_SetBank1
                                   (0351)     mov reg[0FAh], 0				;Reset flash location
                                   (0352)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
                                   (0353)     M8C_SetBank0
                                   (0354) 
                                   (0355)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
                                   (0356)     mov   A, 20h
0091: 62 71 05 MOV   REG[113],5    (0357)     romx
0094: 62 75 05 MOV   REG[117],5    (0358)     mov   A, 40h
0097: 62 79 05 MOV   REG[121],5    (0359)     romx
009A: 62 7D 05 MOV   REG[125],5    (0360)     mov   A, 60h
                                   (0361)     romx
                                   (0362)     ; %45%20%46%46% End workaround
                                   (0363) 
                                   (0364) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0365)     M8C_EnableWatchDog
                                   (0366) ENDIF
                                   (0367) 
                                   (0368) IF ( SELECT_32K )
                                   (0369)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                   (0370) ELSE
                                   (0371)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0372) ENDIF
                                   (0373) 
                                   (0374)     ;---------------------------
                                   (0375)     ; Set up the Temporary stack
                                   (0376)     ;---------------------------
                                   (0377)     ; A temporary stack is set up for the SSC instructions.
                                   (0378)     ; The real stack start will be assigned later.
                                   (0379)     ;
                                   (0380) _stack_start:          equ 80h
                                   (0381)     mov   A, _stack_start          ; Set top of stack to end of used RAM
                                   (0382)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0383) 
                                   (0384)     ;-----------------------------------------------
                                   (0385)     ; Set Power-related Trim & the AGND Bypass bit.
                                   (0386)     ;-----------------------------------------------
                                   (0387) 
009D: 62 D1 07 MOV   REG[209],7    (0388) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
00A0: 50 00    MOV   A,0           (0389)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
00A2: 4E       SWAP  SP,A          (0390)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
00A3: 62 D3 07 MOV   REG[211],7    (0391)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
00A6: 62 D0 00 MOV   REG[208],0    (0392)  ELSE                                          ; *** 12MHZ Main Oscillator ***
00A9: 62 D5 00 MOV   REG[213],0    (0393)   IF ( AGND_BYPASS )
00AC: 62 D4 00 MOV   REG[212],0    (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0395)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                   (0396)     ; bit in the write-only BDG_TR register. Recalculate the register
00AF: 71 C0    OR    F,192         (0397)     ; value using the proper trim values.
                                   (0398)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0399)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0400)   ENDIF
                                   (0401)  ENDIF
                                   (0402) ENDIF ; 5.0 V Operation
                                   (0403) 
                                   (0404) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                   (0405)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0406)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0407)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0408)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0409)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0410)  ENDIF
                                   (0411) ENDIF ; 3.3 Volt Operation
                                   (0412) 
                                   (0413)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
                                   (0414)     mov  [bSSC_KEYSP], 0
00B1: 7C 05 C9 LCALL 0x05C9        (0415) 
                                   (0416)     ;---------------------------------------
                                   (0417)     ; Initialize Crystal Oscillator and PLL
                                   (0418)     ;---------------------------------------
                                   (0419) 
                                   (0420) IF ( SELECT_32K & WAIT_FOR_32K )
                                   (0421)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                   (0422)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                   (0423)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                   (0424)     ; the ECO to stabilize.
                                   (0425)     ;
                                   (0426)     M8C_SetBank1
                                   (0427)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                   (0428)     M8C_SetBank0
                                   (0429)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                   (0430)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                   (0431)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                   (0432) .WaitFor1s:
                                   (0433)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                   (0434)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                   (0435)                                           ;   since interrupts are not globally enabled
                                   (0436) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                   (0437)     ; Either no ECO, or waiting for stable clock is to be done in main
                                   (0438)     M8C_SetBank1
                                   (0439)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                   (0440)     M8C_SetBank0
                                   (0441)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0442) 
                                   (0443) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                   (0444) 
                                   (0445) IF ( PLL_MODE )
                                   (0446)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
00B4: 62 D0 00 MOV   REG[208],0    (0447)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                   (0448)     ;
                                   (0449)     M8C_SetBank1
                                   (0450)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                   (0451)     M8C_SetBank0
                                   (0452)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                   (0453)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
00B7: 50 05    MOV   A,5           (0454) 
00B9: 57 C7    MOV   X,199         (0455) .WaitFor16ms:
00BB: 08       PUSH  A             (0456)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
00BC: 28       ROMX                (0457)     jz   .WaitFor16ms
00BD: 53 97    MOV   [__r0],A      (0458)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
00BF: 18       POP   A             (0459)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
00C0: 75       INC   X             (0460)     M8C_SetBank0
00C1: 09 00    ADC   A,0           (0461) 
00C3: 28       ROMX                (0462) IF      ( WAIT_FOR_32K )
00C4: 4B       SWAP  A,X           (0463) ELSE ; !( WAIT_FOR_32K )
00C5: 51 97    MOV   A,[151]       (0464)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                   (0465)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
00C7: 80 04    JMP   0x00CC        (0466) ENDIF ;(WAIT_FOR_32K)
                                   (0467) ENDIF ;(PLL_MODE)
                                   (0468) 
                                   (0469)     ;------------------------
                                   (0470)     ; Close CT leakage path.
                                   (0471)     ;------------------------
                                   (0472)     mov   reg[ACB00CR0], 05h
                                   (0473)     mov   reg[ACB01CR0], 05h
                                   (0474)     mov   reg[ACB02CR0], 05h
                                   (0475)     mov   reg[ACB03CR0], 05h
                                   (0476) 
                                   (0477) 
                                   (0478) IF	(TOOLCHAIN & HITECH)
                                   (0479)     ;---------------------------------------------
                                   (0480)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                   (0481)     ;---------------------------------------------
                                   (0482) 	global		__Lstackps
                                   (0483) 	mov     a,low __Lstackps
00C9: 75       INC   X             (0484) 	swap    a,sp
00CA: 09 00    ADC   A,0           (0485) 
                                   (0486) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0487)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                   (0488)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                   (0489)     RAM_SETPAGE_CUR 0
00CC: 62 E3 00 MOV   REG[227],0    (0490)     RAM_SETPAGE_MVW 0
00CF: 08       PUSH  A             (0491)     RAM_SETPAGE_MVR 0
00D0: 28       ROMX                (0492)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D1: 60 D5    MOV   REG[213],A    (0493)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
00D3: 74       INC   A             (0494)     ELSE
00D4: A0 4B    JZ    0x0120        (0495)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
00D6: 18       POP   A             (0496)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
00D7: 75       INC   X             (0497) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00D8: 09 00    ADC   A,0           (0498) ELSE
00DA: 08       PUSH  A             (0499)     ;---------------------------------------------
00DB: 28       ROMX                (0500)     ; ImageCraft Enter the Large Memory Model, if applicable
00DC: 53 97    MOV   [__r0],A      (0501)     ;---------------------------------------------
00DE: 18       POP   A             (0502) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DF: 75       INC   X             (0503)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00E0: 09 00    ADC   A,0           (0504)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00E2: 08       PUSH  A             (0505)     swap  A, SP
00E3: 28       ROMX                (0506)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00E4: A0 1C    JZ    0x0101        (0507)     RAM_SETPAGE_CUR 0
00E6: 53 96    MOV   [__r1],A      (0508)     RAM_SETPAGE_MVW 0
00E8: 18       POP   A             (0509)     RAM_SETPAGE_MVR 0
                                   (0510) 
                                   (0511)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                   (0512)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0513)   ELSE
                                   (0514)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0515)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0516) ELSE
00E9: 75       INC   X             (0517)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
00EA: 09 00    ADC   A,0           (0518)     swap  SP, A
00EC: 08       PUSH  A             (0519) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00ED: 28       ROMX                (0520) ENDIF ;	TOOLCHAIN
00EE: 3F 97    MVI   [__r0],A      (0521) 
00F0: 47 97 FF TST   [151],255     (0522)     ;-------------------------
00F3: B0 06    JNZ   0x00FA        (0523)     ; Load Base Configuration
00F5: 5D D5    MOV   A,REG[213]    (0524)     ;-------------------------
00F7: 74       INC   A             (0525)     ; Load global parameter settings and load the user modules in the
00F8: 60 D5    MOV   REG[213],A    (0526)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0527)     ; to minimize start up time; (2) We may still need to play with the
00FA: 18       POP   A             (0528)     ; Sleep Timer.
00FB: 7A 96    DEC   [__r1]        (0529)     ;
00FD: BF EB    JNZ   0x00E9        (0530)     lcall LoadConfigInit
00FF: 8F C9    JMP   0x00C9        (0531) 
                                   (0532)     ;-----------------------------------
                                   (0533)     ; Initialize C Run-Time Environment
0101: 18       POP   A             (0534)     ;-----------------------------------
0102: 75       INC   X             (0535) IF ( C_LANGUAGE_SUPPORT )
0103: 09 00    ADC   A,0           (0536) IF ( SYSTEM_SMALL_MEMORY_MODEL )
0105: 08       PUSH  A             (0537)     mov  A,0                           ; clear the 'bss' segment to zero
0106: 28       ROMX                (0538)     mov  [__r0],<__bss_start
0107: 53 96    MOV   [__r1],A      (0539) BssLoop:
0109: 50 00    MOV   A,0           (0540)     cmp  [__r0],<__bss_end
                                   (0541)     jz   BssDone
                                   (0542)     mvi  [__r0],A
                                   (0543)     jmp  BssLoop
                                   (0544) BssDone:
                                   (0545)     mov  A,>__idata_start              ; copy idata to data segment
010B: 3F 97    MVI   [__r0],A      (0546)     mov  X,<__idata_start
010D: 47 97 FF TST   [151],255     (0547)     mov  [__r0],<__data_start
0110: B0 08    JNZ   0x0119        (0548) IDataLoop:
0112: 5D D5    MOV   A,REG[213]    (0549)     cmp  [__r0],<__data_end
0114: 74       INC   A             (0550)     jz   C_RTE_Done
0115: 60 D5    MOV   REG[213],A    (0551)     push A
0117: 50 00    MOV   A,0           (0552)     romx
                                   (0553)     mvi  [__r0],A
0119: 7A 96    DEC   [__r1]        (0554)     pop  A
011B: BF EF    JNZ   0x010B        (0555)     inc  X
011D: 18       POP   A             (0556)     adc  A,0
011E: 8F AA    JMP   0x00C9        (0557)     jmp  IDataLoop
                                   (0558) 
                                   (0559) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
0120: 18       POP   A             (0560) 
                                   (0561) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0562)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                   (0563)                                        ; to use the Virtual Register page.
                                   (0564) 
                                   (0565)     ; Dereference the constant (flash) pointer pXIData to access the start
                                   (0566)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                   (0567)     ; text segment and may have been relocated by the Code Compressor.
                                   (0568)     ;
                                   (0569)     mov   A, >__pXIData                ; Get the address of the flash
                                   (0570)     mov   X, <__pXIData                ;   pointer to the xidata area.
                                   (0571)     push  A
                                   (0572)     romx                               ; get the MSB of xidata's address
                                   (0573)     mov   [__r0], A
                                   (0574)     pop   A
                                   (0575)     inc   X
                                   (0576)     adc   A, 0
                                   (0577)     romx                               ; get the LSB of xidata's address
                                   (0578)     swap  A, X
                                   (0579)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                   (0580)                                        ;   XIData structure list in flash
                                   (0581)     jmp   .AccessStruct
                                   (0582) 
                                   (0583)     ; Unpack one element in the xidata "structure list" that specifies the
                                   (0584)     ; values of C variables. Each structure contains 3 member elements.
                                   (0585)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                   (0586)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                   (0587)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                   (0588)     ; contains 0xFF. There are two formats for the struct depending on the
                                   (0589)     ; value in the second member element, an unsigned byte:
                                   (0590)     ; (1) If the value of the second element is non-zero, it represents
                                   (0591)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                   (0592)     ; third member of the struct is an array of bytes of length 'size' and
                                   (0593)     ; the bytes are copied to the block of RAM.
                                   (0594)     ; (2) If the value of the second element is zero, the block of RAM is
                                   (0595)     ; to be cleared to zero. In this case, the third member of the struct
                                   (0596)     ; is an unsigned byte containing the number of bytes to clear.
                                   (0597) 
                                   (0598) .AccessNextStructLoop:
                                   (0599)     inc   X                            ; pXIData++
                                   (0600)     adc   A, 0
0121: 71 10    OR    F,16          (0601) .AccessStruct:                         ; Entry point for first block
                                   (0602)     ;
                                   (0603)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                   (0604)     ;
                                   (0605)     M8C_ClearWDT                       ; Clear the watchdog for long inits
                                   (0606)     push  A
                                   (0607)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
                                   (0608)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
0123: 43 E3 20 OR    REG[227],32   (0609)     inc   A                            ; End of Struct List? (MSB==0xFF?)
                                   (0610)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
                                   (0611)     pop   A                            ; restore pXIData to [A,X]
                                   (0612)     inc   X                            ; pXIData++
                                   (0613)     adc   A, 0
0126: 70 EF    AND   F,239         (0614)     push  A
                                   (0615)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
                                   (0616)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
                                   (0617)     pop   A                            ; restore pXIData to [A,X]
                                   (0618)     inc   X                            ; pXIData++ (point to size)
                                   (0619)     adc   A, 0
                                   (0620)     push  A
                                   (0621)     romx                               ; Get the size (CPU.A <- *pXIData)
                                   (0622)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
0128: 62 E0 00 MOV   REG[224],0    (0623)     mov   [__r1], A                    ;             else downcount in __r1
                                   (0624)     pop   A                            ; restore pXIData to [A,X]
                                   (0625) 
                                   (0626) .CopyNextByteLoop:
                                   (0627)     ; For each byte in the structure's array member, copy from flash to RAM.
012B: 71 10    OR    F,16          (0628)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
012D: 62 E0 1B MOV   REG[224],27   (0629)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
0130: 43 E7 80 OR    REG[231],128  (0630)     ;         __r1 holds a non-zero count of the number of bytes remaining.
0133: 70 EF    AND   F,239         (0631)     ;
                                   (0632)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0633)     adc   A, 0
                                   (0634)     push  A
                                   (0635)     romx                               ; Get the data value (CPU.A <- *pXIData)
                                   (0636)     mvi   [__r0], A                    ; Transfer the data to RAM
0135: 62 E2 00 MOV   REG[226],0    (0637)     tst   [__r0], 0xff                 ; Check for page crossing
                                   (0638)     jnz   .CopyLoopTail                ;   No crossing, keep going
                                   (0639)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
                                   (0640)     inc   A
                                   (0641)     mov   reg[ MVW_PP], A
                                   (0642) .CopyLoopTail:
                                   (0643)     pop   A                            ; restore pXIData to [A,X]
                                   (0644)     dec   [__r1]                       ; End of this array in flash?
0138: 7C 0E 61 LCALL __text_start  (0645)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
                                   (0646)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
013B: 8F FF    JMP   0x013B        (0647) 
                                   (0648) .ClearRAMBlockToZero:
                                   (0649)     pop   A                            ; restore pXIData to [A,X]
                                   (0650)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0651)     adc   A, 0
                                   (0652)     push  A
                                   (0653)     romx                               ; Get the run length (CPU.A <- *pXIData)
                                   (0654)     mov   [__r1], A                    ; Initialize downcounter
                                   (0655)     mov   A, 0                         ; Initialize source data
                                   (0656) 
                                   (0657) .ClearRAMBlockLoop:
                                   (0658)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                   (0659)     ;         __r1 holds a non-zero count of the number of bytes remaining.
013D: 50 10    MOV   A,16          (0660)     ;
02BA: 71 10    OR    F,16          (0661)     mvi   [__r0], A                    ; Clear a byte

FILE: lib\psocconfigtbl.asm
02BC: 62 00 02 MOV   REG[0],2      (0247) ; Generated by PSoC Designer 5.0.985.0
02BF: 62 01 FD MOV   REG[1],253    (0248) ;
02C2: 70 EF    AND   F,239         (0249) include "m8c.inc"
02C4: 62 03 FD MOV   REG[3],253    (0250) ;  Personalization tables 
02C7: 62 02 02 MOV   REG[2],2      (0251) export LoadConfigTBL_transmitter_config_Bank1
02CA: 71 10    OR    F,16          (0252) export LoadConfigTBL_transmitter_config_Bank0
02CC: 62 02 00 MOV   REG[2],0      (0253) export LoadConfigTBL_transmitter_config_Ordered
02CF: 62 03 00 MOV   REG[3],0      (0254) export UnloadConfigTBL_transmitter_config_Bank1
02D2: 70 EF    AND   F,239         (0255) export UnloadConfigTBL_transmitter_config_Bank0
02D4: 62 01 00 MOV   REG[1],0      (0256) export ReloadConfigTBL_transmitter_config_Bank1
02D7: 71 10    OR    F,16          (0257) export ReloadConfigTBL_transmitter_config_Bank0
02D9: 62 04 01 MOV   REG[4],1      (0258) export LoadConfigTBL_pc_listener_Bank1
02DC: 62 05 FE MOV   REG[5],254    (0259) export LoadConfigTBL_pc_listener_Bank0
02DF: 70 EF    AND   F,239         (0260) export UnloadConfigTBL_pc_listener_Bank1
02E1: 62 07 FE MOV   REG[7],254    (0261) export UnloadConfigTBL_pc_listener_Bank0
02E4: 62 06 00 MOV   REG[6],0      (0262) export LoadConfigTBL_receiver_config_Bank1
02E7: 71 10    OR    F,16          (0263) export LoadConfigTBL_receiver_config_Bank0
02E9: 62 06 00 MOV   REG[6],0      (0264) export UnloadConfigTBL_receiver_config_Bank1
02EC: 62 07 00 MOV   REG[7],0      (0265) export UnloadConfigTBL_receiver_config_Bank0
02EF: 70 EF    AND   F,239         (0266) export UnloadConfigTBL_Total_Bank1
02F1: 62 05 00 MOV   REG[5],0      (0267) export UnloadConfigTBL_Total_Bank0
02F4: 71 10    OR    F,16          (0268) AREA lit(rom, rel)
02F6: 62 08 01 MOV   REG[8],1      (0269) LoadConfigTBL_pc_listener_Bank0:
02F9: 62 09 FE MOV   REG[9],254    (0270) ;  Instance name COMP_SERIAL, User Module UART
02FC: 70 EF    AND   F,239         (0271) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
02FE: 62 0B FE MOV   REG[11],254   (0272) 	db		3fh, 00h		;COMP_SERIAL_RX_CONTROL_REG(DCB13CR0)
0301: 62 0A 00 MOV   REG[10],0     (0273) 	db		3dh, 00h		;COMP_SERIAL_(DCB13DR1)
0304: 71 10    OR    F,16          (0274) 	db		3eh, 00h		;COMP_SERIAL_RX_BUFFER_REG (DCB13DR2)
0306: 62 0A 00 MOV   REG[10],0     (0275) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0309: 62 0B 00 MOV   REG[11],0     (0276) 	db		3bh, 00h		;COMP_SERIAL_TX_CONTROL_REG(DCB12CR0)
030C: 70 EF    AND   F,239         (0277) 	db		39h, 00h		;COMP_SERIAL_TX_BUFFER_REG (DCB12DR1)
030E: 62 09 00 MOV   REG[9],0      (0278) 	db		3ah, 00h		;COMP_SERIAL_(DCB12DR2)
0311: 71 10    OR    F,16          (0279) ;  Instance name TX_REPEATER, User Module TX8
0313: 62 0C 00 MOV   REG[12],0     (0280) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0316: 62 0D 00 MOV   REG[13],0     (0281) 	db		2bh, 00h		;TX_REPEATER_CONTROL_REG  (DCB02CR0)
0319: 70 EF    AND   F,239         (0282) 	db		29h, 00h		;TX_REPEATER_TX_BUFFER_REG(DCB02DR1)
031B: 62 0F 00 MOV   REG[15],0     (0283) 	db		2ah, 00h		;TX_REPEATER_(DCB02DR2)
031E: 62 0E 00 MOV   REG[14],0     (0284) 	db		ffh
0321: 71 10    OR    F,16          (0285) LoadConfigTBL_pc_listener_Bank1:
0323: 62 0E 00 MOV   REG[14],0     (0286) ;  Instance name COMP_SERIAL, User Module UART
0326: 62 0F 00 MOV   REG[15],0     (0287) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0329: 70 EF    AND   F,239         (0288) 	db		3ch, 05h		;COMP_SERIAL_RX_FUNC_REG   (DCB13FN)
032B: 62 0D 00 MOV   REG[13],0     (0289) 	db		3dh, f6h		;COMP_SERIAL_RX_INPUT_REG  (DCB13IN)
032E: 71 10    OR    F,16          (0290) 	db		3eh, 80h		;COMP_SERIAL_RX_OUTPUT_REG (DCB13OU)
0330: 62 10 00 MOV   REG[16],0     (0291) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0333: 62 11 00 MOV   REG[17],0     (0292) 	db		38h, 1dh		;COMP_SERIAL_TX_FUNC_REG   (DCB12FN)
0336: 70 EF    AND   F,239         (0293) 	db		39h, 06h		;COMP_SERIAL_TX_INPUT_REG  (DCB12IN)
0338: 62 13 00 MOV   REG[19],0     (0294) 	db		3ah, 85h		;COMP_SERIAL_TX_OUTPUT_REG (DCB12OU)
033B: 62 12 00 MOV   REG[18],0     (0295) ;  Instance name TX_REPEATER, User Module TX8
033E: 71 10    OR    F,16          (0296) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0340: 62 12 00 MOV   REG[18],0     (0297) 	db		28h, 1dh		;TX_REPEATER_FUNC_REG     (DCB02FN)
0343: 62 13 00 MOV   REG[19],0     (0298) 	db		29h, 01h		;TX_REPEATER_INPUT_REG    (DCB02IN)
0346: 70 EF    AND   F,239         (0299) 	db		2ah, 85h		;TX_REPEATER_OUTPUT_REG   (DCB02OU)
0348: 62 11 00 MOV   REG[17],0     (0300) 	db		ffh
034B: 71 10    OR    F,16          (0301) UnloadConfigTBL_pc_listener_Bank0:
034D: 62 14 00 MOV   REG[20],0     (0302) ;  Instance name COMP_SERIAL, User Module UART
0350: 62 15 00 MOV   REG[21],0     (0303) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0353: 70 EF    AND   F,239         (0304) 	db		3fh, 00h		;COMP_SERIAL_CONTROL_0 (DCB13CR0)
0355: 62 17 00 MOV   REG[23],0     (0305) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0358: 62 16 00 MOV   REG[22],0     (0306) 	db		3bh, 00h		;COMP_SERIAL_CONTROL_0 (DCB12CR0)
035B: 71 10    OR    F,16          (0307) ;  Instance name TX_REPEATER, User Module TX8
035D: 62 16 00 MOV   REG[22],0     (0308) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0360: 62 17 00 MOV   REG[23],0     (0309) 	db		2bh, 00h		;TX_REPEATER_CONTROL_0 (DCB02CR0)
0363: 70 EF    AND   F,239         (0310) 	db		ffh
0365: 62 15 00 MOV   REG[21],0     (0311) UnloadConfigTBL_pc_listener_Bank1:
0368: 71 10    OR    F,16          (0312) ;  Instance name COMP_SERIAL, User Module UART
036A: 62 18 00 MOV   REG[24],0     (0313) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
036D: 62 19 00 MOV   REG[25],0     (0314) 	db		3ch, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB13FN)
0370: 70 EF    AND   F,239         (0315) 	db		3dh, 00h		;COMP_SERIAL_DIG_Input (DCB13IN)
0372: 62 1B 00 MOV   REG[27],0     (0316) 	db		3eh, 00h		;COMP_SERIAL_DIG_Output (DCB13OU)
0375: 62 1A 00 MOV   REG[26],0     (0317) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0378: 71 10    OR    F,16          (0318) 	db		38h, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB12FN)
037A: 62 1A 00 MOV   REG[26],0     (0319) 	db		39h, 00h		;COMP_SERIAL_DIG_Input (DCB12IN)
037D: 62 1B 00 MOV   REG[27],0     (0320) 	db		3ah, 00h		;COMP_SERIAL_DIG_Output (DCB12OU)
0380: 70 EF    AND   F,239         (0321) ;  Instance name TX_REPEATER, User Module TX8
0382: 62 19 00 MOV   REG[25],0     (0322) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0385: 71 10    OR    F,16          (0323) 	db		28h, 00h		;TX_REPEATER_DIG_BasicFunction (DCB02FN)
0387: 62 1C 00 MOV   REG[28],0     (0324) 	db		29h, 00h		;TX_REPEATER_DIG_Input (DCB02IN)
038A: 62 1D 00 MOV   REG[29],0     (0325) 	db		2ah, 00h		;TX_REPEATER_DIG_Output (DCB02OU)
038D: 70 EF    AND   F,239         (0326) 	db		ffh
038F: 62 1F 00 MOV   REG[31],0     (0327) 
0392: 62 1E 00 MOV   REG[30],0     (0328) ;  Instance name COMP_SERIAL, User Module UART
0395: 71 10    OR    F,16          (0329) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0397: 62 1E 00 MOV   REG[30],0     (0330) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
039A: 62 1F 00 MOV   REG[31],0     (0331) ;  Instance name TX_REPEATER, User Module TX8
039D: 70 EF    AND   F,239         (0332) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
039F: 62 1D 00 MOV   REG[29],0     (0333) 	db		ffh
05C9: 62 D0 00 MOV   REG[208],0    (0334) LoadConfigTBL_receiver_config_Bank0:

FILE: lib\psocconfig.asm
05CC: 55 02 00 MOV   [2],0         (0074) ; Generated by PSoC Designer 5.0.985.0
                                   (0075) ;
05CF: 7C 05 D6 LCALL 0x05D6        (0076) INCLUDE "PSoCDynamic.inc"
05D2: 7C 02 BA LCALL 0x02BA        (0077) ;==========================================================================
                                   (0078) ;  PSoCConfig.asm
                                   (0079) ;  @PSOC_VERSION
                                   (0080) ;
05D5: 7F       RET                 (0081) ;  Version: 0.85
                                   (0082) ;  Revised: June 22, 2004
                                   (0083) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0084) ;
                                   (0085) ;  This file is generated by the Device Editor on Application Generation.
                                   (0086) ;  It contains code which loads the configuration data table generated in
                                   (0087) ;  the file PSoCConfigTBL.asm
                                   (0088) ;
                                   (0089) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0090) ;  Edits to this file will not be preserved.
                                   (0091) ;==========================================================================
                                   (0092) ;
                                   (0093) include "m8c.inc"
                                   (0094) include "memory.inc"
                                   (0095) include "GlobalParams.inc"
                                   (0096) 
                                   (0097) export LoadConfigInit
                                   (0098) export _LoadConfigInit
                                   (0099) export LoadConfig_transmitter_config
                                   (0100) export _LoadConfig_transmitter_config
                                   (0101) export UnloadConfig_transmitter_config
                                   (0102) export _UnloadConfig_transmitter_config
                                   (0103) export ReloadConfig_transmitter_config
                                   (0104) export _ReloadConfig_transmitter_config
05D6: 71 10    OR    F,16          (0105) export LoadConfig_pc_listener
                                   (0106) export _LoadConfig_pc_listener
05D8: 10       PUSH  X             (0107) export UnloadConfig_pc_listener
05D9: 70 EF    AND   F,239         (0108) export _UnloadConfig_pc_listener
05DB: 50 00    MOV   A,0           (0109) export LoadConfig_receiver_config
05DD: 67       ASR   A             (0110) export _LoadConfig_receiver_config
                                   (0111) export UnloadConfig_receiver_config
05DE: 50 02    MOV   A,2           (0112) export _UnloadConfig_receiver_config
05E0: 57 22    MOV   X,34          (0113) export UnloadConfig_Total
05E2: 7C 07 F2 LCALL 0x07F2        (0114) export _UnloadConfig_Total
                                   (0115) export ACTIVE_CONFIG_STATUS
05E5: 50 01    MOV   A,1           (0116) 
05E7: 67       ASR   A             (0117) export NO_SHADOW
                                   (0118) export _NO_SHADOW
05E8: 50 02    MOV   A,2           (0119) 
05EA: 57 83    MOV   X,131         (0120) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
05EC: 7C 07 F2 LCALL 0x07F2        (0121) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                   (0122) 
05EF: 62 D0 00 MOV   REG[208],0    (0123) AREA psoc_config(rom, rel)
                                   (0124) 
05F2: 2E 02 01 OR    [2],1         (0125) ;---------------------------------------------------------------------------
05F5: 70 EF    AND   F,239         (0126) ; LoadConfigInit - Establish the start-up configuration (except for a few
05F7: 20       POP   X             (0127) ;                  parameters handled by boot code, like CPU speed). This
                                   (0128) ;                  function can be called from user code, but typically it
                                   (0129) ;                  is only called from boot.
05F8: 7F       RET                 (0130) ;
                                   (0131) ;       INPUTS: None.
                                   (0132) ;      RETURNS: Nothing.
                                   (0133) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0134) ;               In the large memory model currently only the page
                                   (0135) ;               pointer registers listed below are modified.  This does
                                   (0136) ;               not guarantee that in future implementations of this
                                   (0137) ;               function other page pointer registers will not be
                                   (0138) ;               modified.
                                   (0139) ;          
                                   (0140) ;               Page Pointer Registers Modified: 
                                   (0141) ;               CUR_PP
                                   (0142) ;
                                   (0143) _LoadConfigInit:
                                   (0144)  LoadConfigInit:
                                   (0145)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0146)     RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0147) 	mov		[ACTIVE_CONFIG_STATUS], 0
                                   (0148) 
                                   (0149) 	lcall	LoadConfig_transmitter_config
                                   (0150) 	lcall	LoadConfigTBL_transmitter_config_Ordered
                                   (0151) 
                                   (0152) 
                                   (0153)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0154)     ret
05F9: 10       PUSH  X             (0155) 
05FA: 70 EF    AND   F,239         (0156) ;---------------------------------------------------------------------------
05FC: 50 00    MOV   A,0           (0157) ; Load Configuration transmitter_config
05FE: 67       ASR   A             (0158) ;
                                   (0159) ;    Load configuration registers for transmitter_config.
05FF: 50 03    MOV   A,3           (0160) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0601: 57 A3    MOV   X,163         (0161) ;
0603: 7C 07 F2 LCALL 0x07F2        (0162) ;       INPUTS: None.
                                   (0163) ;      RETURNS: Nothing.
0606: 50 01    MOV   A,1           (0164) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0608: 67       ASR   A             (0165) ;               modified as may the Page Pointer registers!
                                   (0166) ;               In the large memory model currently only the page
0609: 50 03    MOV   A,3           (0167) ;               pointer registers listed below are modified.  This does
060B: 57 B6    MOV   X,182         (0168) ;               not guarantee that in future implementations of this
060D: 7C 07 F2 LCALL 0x07F2        (0169) ;               function other page pointer registers will not be
                                   (0170) ;               modified.
                                   (0171) ;          
0610: 62 D0 00 MOV   REG[208],0    (0172) ;               Page Pointer Registers Modified: 
0613: 2E 02 01 OR    [2],1         (0173) ;               CUR_PP
0616: 70 EF    AND   F,239         (0174) ;
0618: 20       POP   X             (0175) _LoadConfig_transmitter_config:
                                   (0176)  LoadConfig_transmitter_config:
                                   (0177)     RAM_PROLOGUE RAM_USE_CLASS_4
0619: 7F       RET                 (0178) 	M8C_SetBank1
                                   (0179) 
                                   (0180) 	push	x
                                   (0181)     M8C_SetBank0                    ; Force bank 0
                                   (0182)     mov     a, 0                    ; Specify bank 0
                                   (0183)     asr     a                       ; Store in carry flag
                                   (0184)                                     ; Load bank 0 table:
                                   (0185)     mov     A, >LoadConfigTBL_transmitter_config_Bank0
                                   (0186)     mov     X, <LoadConfigTBL_transmitter_config_Bank0
                                   (0187)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0188) 
                                   (0189)     mov     a, 1                    ; Specify bank 1
                                   (0190)     asr     a                       ; Store in carry flag
                                   (0191)                                     ; Load bank 1 table:
                                   (0192)     mov     A, >LoadConfigTBL_transmitter_config_Bank1
                                   (0193)     mov     X, <LoadConfigTBL_transmitter_config_Bank1
                                   (0194)     lcall   LoadConfig              ; Load the bank 1 values
                                   (0195) 
                                   (0196) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0197) ; set config active bit
                                   (0198) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
                                   (0199)     M8C_SetBank0                    ; Force return to bank 0
                                   (0200) 	pop		x
                                   (0201) 
                                   (0202)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0203)     ret
061A: 10       PUSH  X             (0204) 
061B: 70 EF    AND   F,239         (0205) ;---------------------------------------------------------------------------
061D: 50 00    MOV   A,0           (0206) ; Reload Configuration transmitter_config
061F: 67       ASR   A             (0207) ;
                                   (0208) ;    Reload configuration registers for transmitter_config.
0620: 50 03    MOV   A,3           (0209) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0622: 57 C9    MOV   X,201         (0210) ;
0624: 7C 07 F2 LCALL 0x07F2        (0211) ;       INPUTS: None.
                                   (0212) ;      RETURNS: Nothing.
0627: 50 01    MOV   A,1           (0213) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0629: 67       ASR   A             (0214) ;               modified as may the Page Pointer registers!
                                   (0215) ;               In the large memory model currently only the page
062A: 50 03    MOV   A,3           (0216) ;               pointer registers listed below are modified.  This does
062C: 57 D0    MOV   X,208         (0217) ;               not guarantee that in future implementations of this
062E: 7C 07 F2 LCALL 0x07F2        (0218) ;               function other page pointer registers will not be
                                   (0219) ;               modified.
0631: 71 10    OR    F,16          (0220) ;          
0633: 70 EF    AND   F,239         (0221) ;               Page Pointer Registers Modified: 
                                   (0222) ;               CUR_PP
0635: 62 D0 00 MOV   REG[208],0    (0223) ;
0638: 26 02 FE AND   [2],254       (0224) _ReloadConfig_transmitter_config:
063B: 70 EF    AND   F,239         (0225)  ReloadConfig_transmitter_config:
063D: 20       POP   X             (0226)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0227) 
                                   (0228) 	push	x
063E: 7F       RET                 (0229)     M8C_SetBank0                    ; Force bank 0
                                   (0230)     mov     a, 0                    ; Specify bank 0
                                   (0231)     asr     a                       ; Store in carry flag
                                   (0232)                                     ; Bank 0 table address:
                                   (0233)     mov     A, >ReloadConfigTBL_transmitter_config_Bank0
                                   (0234)     mov     X, <ReloadConfigTBL_transmitter_config_Bank0
                                   (0235)     lcall   LoadConfig              ; Reload the bank 0 values
                                   (0236) 
                                   (0237)     mov     a, 1                    ; Specify bank 1
                                   (0238)     asr     a                       ; Store in carry flag
                                   (0239)                                     ; Bank 1 table address:
                                   (0240)     mov     A, >ReloadConfigTBL_transmitter_config_Bank1
                                   (0241)     mov     X, <ReloadConfigTBL_transmitter_config_Bank1
                                   (0242)     lcall   LoadConfig              ; Reload the bank 1 values
                                   (0243) 
                                   (0244) ; set config active bit
                                   (0245) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0246) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
                                   (0247)     M8C_SetBank0                    ; Force return to bank 0
                                   (0248) 	pop		x
                                   (0249) 
                                   (0250)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0251)     ret
                                   (0252) 
063F: 71 10    OR    F,16          (0253) ;---------------------------------------------------------------------------
                                   (0254) ; Unload Configuration transmitter_config
0641: 41 00 DF AND   REG[0],223    (0255) ;
0644: 43 00 20 OR    REG[0],32     (0256) ;    Reset configuration registers for transmitter_config
                                   (0257) ;    to their values as initially configured.
0647: 41 01 DF AND   REG[1],223    (0258) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0259) ;
064A: 70 EF    AND   F,239         (0260) ;       INPUTS: None.
064C: 41 03 5F AND   REG[3],95     (0261) ;      RETURNS: Nothing.
                                   (0262) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
064F: 41 02 5F AND   REG[2],95     (0263) ;               modified as may the Page Pointer registers!
0652: 43 02 A0 OR    REG[2],160    (0264) ;               In the large memory model currently only the page
                                   (0265) ;               pointer registers listed below are modified.  This does
0655: 71 10    OR    F,16          (0266) ;               not guarantee that in future implementations of this
0657: 41 08 FE AND   REG[8],254    (0267) ;               function other page pointer registers will not be
                                   (0268) ;               modified.
065A: 41 09 FE AND   REG[9],254    (0269) ;          
065D: 43 09 01 OR    REG[9],1      (0270) ;               Page Pointer Registers Modified: 
                                   (0271) ;               CUR_PP
0660: 70 EF    AND   F,239         (0272) ;
0662: 41 0B FE AND   REG[11],254   (0273) _UnloadConfig_transmitter_config:
0665: 43 0B 01 OR    REG[11],1     (0274)  UnloadConfig_transmitter_config:
                                   (0275)     RAM_PROLOGUE RAM_USE_CLASS_4
0668: 41 60 F3 AND   REG[96],243   (0276) 
066B: 43 60 0C OR    REG[96],12    (0277) 	push	x
                                   (0278)     M8C_SetBank0                    ; Force bank 0
066E: 41 E7 BF AND   REG[231],191  (0279)     mov     a, 0                    ; Specify bank 0
0671: 43 E7 40 OR    REG[231],64   (0280)     asr     a                       ; Store in carry flag
                                   (0281)                                     ; Bank 0 table address:
0674: 71 10    OR    F,16          (0282)     mov     A, >UnloadConfigTBL_transmitter_config_Bank0
0676: 41 E1 00 AND   REG[225],0    (0283)     mov     X, <UnloadConfigTBL_transmitter_config_Bank0
0679: 43 E1 C1 OR    REG[225],193  (0284)     lcall   LoadConfig              ; Unload the bank 0 values
                                   (0285) 
067C: 70 EF    AND   F,239         (0286)     mov     a, 1                    ; Specify bank 1
067E: 41 B0 0F AND   REG[176],15   (0287)     asr     a                       ; Store in carry flag
                                   (0288)                                     ; Bank 1 table address:
0681: 41 B8 CC AND   REG[184],204  (0289)     mov     A, >UnloadConfigTBL_transmitter_config_Bank1
0684: 43 B8 11 OR    REG[184],17   (0290)     mov     X, <UnloadConfigTBL_transmitter_config_Bank1
                                   (0291)     lcall   LoadConfig              ; Unload the bank 1 values
0687: 41 BD DF AND   REG[189],223  (0292) 
068A: 43 BD 20 OR    REG[189],32   (0293) 	M8C_SetBank1
                                   (0294) 	M8C_SetBank0
068D: 10       PUSH  X             (0295) ; clear config active bit
068E: 70 EF    AND   F,239         (0296) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
0690: 50 00    MOV   A,0           (0297) 	and		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], ~transmitter_config_BIT
0692: 67       ASR   A             (0298)     M8C_SetBank0                    ; Force return to bank 0
                                   (0299) 	pop		x
0693: 50 01    MOV   A,1           (0300) 
0695: 57 A0    MOV   X,160         (0301)     RAM_EPILOGUE RAM_USE_CLASS_4
0697: 7C 07 F2 LCALL 0x07F2        (0302)     ret
                                   (0303) 
069A: 50 01    MOV   A,1           (0304) ;---------------------------------------------------------------------------
069C: 67       ASR   A             (0305) ; Load Configuration pc_listener
                                   (0306) ;
069D: 50 01    MOV   A,1           (0307) ;    Load configuration registers for pc_listener.
069F: 57 B3    MOV   X,179         (0308) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
06A1: 7C 07 F2 LCALL 0x07F2        (0309) ;
                                   (0310) ;       INPUTS: None.
06A4: 62 D0 00 MOV   REG[208],0    (0311) ;      RETURNS: Nothing.
                                   (0312) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
06A7: 2E 02 02 OR    [2],2         (0313) ;               modified as may the Page Pointer registers!
06AA: 70 EF    AND   F,239         (0314) ;               In the large memory model currently only the page
06AC: 20       POP   X             (0315) ;               pointer registers listed below are modified.  This does
                                   (0316) ;               not guarantee that in future implementations of this
                                   (0317) ;               function other page pointer registers will not be
06AD: 7F       RET                 (0318) ;               modified.
                                   (0319) ;          
                                   (0320) ;               Page Pointer Registers Modified: 
                                   (0321) ;               CUR_PP
                                   (0322) ;
                                   (0323) _LoadConfig_pc_listener:
                                   (0324)  LoadConfig_pc_listener:
                                   (0325)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0326) 	M8C_SetBank1
                                   (0327) ; writing Port_0_DriveMode_0 register
                                   (0328) 	and		reg[ 0h], ~20h
                                   (0329) 	or		reg[ 0h], 20h
                                   (0330) ; writing Port_0_DriveMode_1 register
                                   (0331) 	and		reg[ 1h], ~20h
                                   (0332) ; writing Port_0_DriveMode_2 register
                                   (0333) 	M8C_SetBank0
                                   (0334) 	and		reg[ 3h], ~a0h
                                   (0335) ; writing Port_0_GlobalSelect register
                                   (0336) 	and		reg[ 2h], ~a0h
                                   (0337) 	or		reg[ 2h], a0h
                                   (0338) ; writing Port_2_DriveMode_0 register
                                   (0339) 	M8C_SetBank1
                                   (0340) 	and		reg[ 8h], ~ 1h
                                   (0341) ; writing Port_2_DriveMode_1 register
                                   (0342) 	and		reg[ 9h], ~ 1h
                                   (0343) 	or		reg[ 9h],  1h
06AE: 10       PUSH  X             (0344) ; writing Port_2_DriveMode_2 register
06AF: 70 EF    AND   F,239         (0345) 	M8C_SetBank0
06B1: 50 00    MOV   A,0           (0346) 	and		reg[ bh], ~ 1h
06B3: 67       ASR   A             (0347) 	or		reg[ bh],  1h
                                   (0348) ; writing AnalogColumnInputSelect register
06B4: 50 01    MOV   A,1           (0349) 	and		reg[60h], ~ ch
06B6: 57 C6    MOV   X,198         (0350) 	or		reg[60h],  ch
06B8: 7C 07 F2 LCALL 0x07F2        (0351) ; writing DecimatorControl_1 register
                                   (0352) 	and		reg[e7h], ~40h
06BB: 50 01    MOV   A,1           (0353) 	or		reg[e7h], 40h
06BD: 67       ASR   A             (0354) ; writing OscillatorControl_1 register
                                   (0355) 	M8C_SetBank1
06BE: 50 01    MOV   A,1           (0356) 	and		reg[e1h], ~ffh
06C0: 57 CD    MOV   X,205         (0357) 	or		reg[e1h], c1h
06C2: 7C 07 F2 LCALL 0x07F2        (0358) ; writing Row_0_InputMux register
                                   (0359) 	M8C_SetBank0
06C5: 71 10    OR    F,16          (0360) 	and		reg[b0h], ~f0h
                                   (0361) ; writing Row_1_InputMux register
06C7: 70 EF    AND   F,239         (0362) 	and		reg[b8h], ~33h
06C9: 41 60 F3 AND   REG[96],243   (0363) 	or		reg[b8h], 11h
06CC: 43 60 08 OR    REG[96],8     (0364) ; writing Row_1_OutputDrive_0 register
                                   (0365) 	and		reg[bdh], ~20h
06CF: 41 E7 BF AND   REG[231],191  (0366) 	or		reg[bdh], 20h
                                   (0367) 
06D2: 71 10    OR    F,16          (0368) 	push	x
06D4: 41 E1 00 AND   REG[225],0    (0369)     M8C_SetBank0                    ; Force bank 0
06D7: 43 E1 99 OR    REG[225],153  (0370)     mov     a, 0                    ; Specify bank 0
                                   (0371)     asr     a                       ; Store in carry flag
06DA: 70 EF    AND   F,239         (0372)                                     ; Load bank 0 table:
06DC: 41 B0 0F AND   REG[176],15   (0373)     mov     A, >LoadConfigTBL_pc_listener_Bank0
06DF: 43 B0 50 OR    REG[176],80   (0374)     mov     X, <LoadConfigTBL_pc_listener_Bank0
                                   (0375)     lcall   LoadConfig              ; Load the bank 0 values
06E2: 41 B8 CC AND   REG[184],204  (0376) 
06E5: 43 B8 02 OR    REG[184],2    (0377)     mov     a, 1                    ; Specify bank 1
                                   (0378)     asr     a                       ; Store in carry flag
06E8: 41 BD DF AND   REG[189],223  (0379)                                     ; Load bank 1 table:
                                   (0380)     mov     A, >LoadConfigTBL_pc_listener_Bank1
06EB: 41 0B FE AND   REG[11],254   (0381)     mov     X, <LoadConfigTBL_pc_listener_Bank1
                                   (0382)     lcall   LoadConfig              ; Load the bank 1 values
06EE: 71 10    OR    F,16          (0383) 
06F0: 41 09 FE AND   REG[9],254    (0384) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0385) ; set config active bit
06F3: 41 08 FE AND   REG[8],254    (0386) 	or		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
06F6: 43 08 01 OR    REG[8],1      (0387)     M8C_SetBank0                    ; Force return to bank 0
                                   (0388) 	pop		x
06F9: 70 EF    AND   F,239         (0389) 
06FB: 41 02 5F AND   REG[2],95     (0390)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0391)     ret
06FE: 41 03 5F AND   REG[3],95     (0392) 
0701: 43 03 A0 OR    REG[3],160    (0393) ;---------------------------------------------------------------------------
                                   (0394) ; Unload Configuration pc_listener
0704: 71 10    OR    F,16          (0395) ;
0706: 41 01 DF AND   REG[1],223    (0396) ;    Reset configuration registers for pc_listener
0709: 43 01 20 OR    REG[1],32     (0397) ;    to their values as initially configured.
                                   (0398) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
070C: 41 00 DF AND   REG[0],223    (0399) ;
070F: 70 EF    AND   F,239         (0400) ;       INPUTS: None.
                                   (0401) ;      RETURNS: Nothing.
0711: 62 D0 00 MOV   REG[208],0    (0402) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0714: 26 02 FD AND   [2],253       (0403) ;               modified as may the Page Pointer registers!
0717: 70 EF    AND   F,239         (0404) ;               In the large memory model currently only the page
0719: 20       POP   X             (0405) ;               pointer registers listed below are modified.  This does
                                   (0406) ;               not guarantee that in future implementations of this
                                   (0407) ;               function other page pointer registers will not be
071A: 7F       RET                 (0408) ;               modified.
                                   (0409) ;          
                                   (0410) ;               Page Pointer Registers Modified: 
                                   (0411) ;               CUR_PP
                                   (0412) ;
                                   (0413) _UnloadConfig_pc_listener:
                                   (0414)  UnloadConfig_pc_listener:
                                   (0415)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0416) 
                                   (0417) 	push	x
                                   (0418)     M8C_SetBank0                    ; Force bank 0
                                   (0419)     mov     a, 0                    ; Specify bank 0
                                   (0420)     asr     a                       ; Store in carry flag
                                   (0421)                                     ; Bank 0 table address:
                                   (0422)     mov     A, >UnloadConfigTBL_pc_listener_Bank0
                                   (0423)     mov     X, <UnloadConfigTBL_pc_listener_Bank0
                                   (0424)     lcall   LoadConfig              ; Unload the bank 0 values
                                   (0425) 
                                   (0426)     mov     a, 1                    ; Specify bank 1
                                   (0427)     asr     a                       ; Store in carry flag
                                   (0428)                                     ; Bank 1 table address:
                                   (0429)     mov     A, >UnloadConfigTBL_pc_listener_Bank1
                                   (0430)     mov     X, <UnloadConfigTBL_pc_listener_Bank1
                                   (0431)     lcall   LoadConfig              ; Unload the bank 1 values
071B: 71 10    OR    F,16          (0432) 
                                   (0433) 	M8C_SetBank1
071D: 41 00 FD AND   REG[0],253    (0434) ; writing AnalogColumnInputSelect register
                                   (0435) 	M8C_SetBank0
0720: 41 01 FD AND   REG[1],253    (0436) 	and		reg[60h], ~ ch
0723: 43 01 02 OR    REG[1],2      (0437) 	or		reg[60h],  8h
                                   (0438) ; writing DecimatorControl_1 register
0726: 41 04 FE AND   REG[4],254    (0439) 	and		reg[e7h], ~40h
                                   (0440) ; writing OscillatorControl_1 register
0729: 41 05 FE AND   REG[5],254    (0441) 	M8C_SetBank1
072C: 43 05 01 OR    REG[5],1      (0442) 	and		reg[e1h], ~ffh
                                   (0443) 	or		reg[e1h], 99h
072F: 70 EF    AND   F,239         (0444) ; writing Row_0_InputMux register
0731: 41 07 FE AND   REG[7],254    (0445) 	M8C_SetBank0
0734: 43 07 01 OR    REG[7],1      (0446) 	and		reg[b0h], ~f0h
                                   (0447) 	or		reg[b0h], 50h
0737: 71 10    OR    F,16          (0448) ; writing Row_1_InputMux register
0739: 41 60 CF AND   REG[96],207   (0449) 	and		reg[b8h], ~33h
073C: 43 60 30 OR    REG[96],48    (0450) 	or		reg[b8h],  2h
                                   (0451) ; writing Row_1_OutputDrive_0 register
073F: 70 EF    AND   F,239         (0452) 	and		reg[bdh], ~20h
0741: 41 60 C3 AND   REG[96],195   (0453) ; writing Port_2_DriveMode_2 register
0744: 43 60 34 OR    REG[96],52    (0454) 	and		reg[ bh], ~ 1h
                                   (0455) ; writing Port_2_DriveMode_1 register
0747: 41 B0 CF AND   REG[176],207  (0456) 	M8C_SetBank1
                                   (0457) 	and		reg[ 9h], ~ 1h
074A: 41 B5 EF AND   REG[181],239  (0458) ; writing Port_2_DriveMode_0 register
                                   (0459) 	and		reg[ 8h], ~ 1h
074D: 41 B8 CC AND   REG[184],204  (0460) 	or		reg[ 8h],  1h
0750: 43 B8 11 OR    REG[184],17   (0461) ; writing Port_0_GlobalSelect register
                                   (0462) 	M8C_SetBank0
0753: 10       PUSH  X             (0463) 	and		reg[ 2h], ~a0h
0754: 70 EF    AND   F,239         (0464) ; writing Port_0_DriveMode_2 register
0756: 50 00    MOV   A,0           (0465) 	and		reg[ 3h], ~a0h
0758: 67       ASR   A             (0466) 	or		reg[ 3h], a0h
                                   (0467) ; writing Port_0_DriveMode_1 register
0759: 50 01    MOV   A,1           (0468) 	M8C_SetBank1
075B: 57 E1    MOV   X,225         (0469) 	and		reg[ 1h], ~20h
075D: 7C 07 F2 LCALL 0x07F2        (0470) 	or		reg[ 1h], 20h
                                   (0471) ; writing Port_0_DriveMode_0 register
0760: 50 01    MOV   A,1           (0472) 	and		reg[ 0h], ~20h
0762: 67       ASR   A             (0473) 	M8C_SetBank0
                                   (0474) ; clear config active bit
0763: 50 01    MOV   A,1           (0475) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
0765: 57 F4    MOV   X,244         (0476) 	and		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], ~pc_listener_BIT
0767: 7C 07 F2 LCALL 0x07F2        (0477)     M8C_SetBank0                    ; Force return to bank 0
                                   (0478) 	pop		x
076A: 62 D0 00 MOV   REG[208],0    (0479) 
                                   (0480)     RAM_EPILOGUE RAM_USE_CLASS_4
076D: 2E 02 04 OR    [2],4         (0481)     ret
0770: 70 EF    AND   F,239         (0482) 
0772: 20       POP   X             (0483) ;---------------------------------------------------------------------------
                                   (0484) ; Load Configuration receiver_config
                                   (0485) ;
0773: 7F       RET                 (0486) ;    Load configuration registers for receiver_config.
                                   (0487) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0488) ;
                                   (0489) ;       INPUTS: None.
                                   (0490) ;      RETURNS: Nothing.
                                   (0491) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0492) ;               modified as may the Page Pointer registers!
                                   (0493) ;               In the large memory model currently only the page
                                   (0494) ;               pointer registers listed below are modified.  This does
                                   (0495) ;               not guarantee that in future implementations of this
                                   (0496) ;               function other page pointer registers will not be
                                   (0497) ;               modified.
                                   (0498) ;          
                                   (0499) ;               Page Pointer Registers Modified: 
                                   (0500) ;               CUR_PP
                                   (0501) ;
                                   (0502) _LoadConfig_receiver_config:
                                   (0503)  LoadConfig_receiver_config:
                                   (0504)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0505) 	M8C_SetBank1
                                   (0506) ; writing Port_0_DriveMode_0 register
                                   (0507) 	and		reg[ 0h], ~ 2h
                                   (0508) ; writing Port_0_DriveMode_1 register
                                   (0509) 	and		reg[ 1h], ~ 2h
                                   (0510) 	or		reg[ 1h],  2h
                                   (0511) ; writing Port_1_DriveMode_0 register
0774: 10       PUSH  X             (0512) 	and		reg[ 4h], ~ 1h
0775: 70 EF    AND   F,239         (0513) ; writing Port_1_DriveMode_1 register
0777: 50 00    MOV   A,0           (0514) 	and		reg[ 5h], ~ 1h
0779: 67       ASR   A             (0515) 	or		reg[ 5h],  1h
                                   (0516) ; writing Port_1_DriveMode_2 register
077A: 50 02    MOV   A,2           (0517) 	M8C_SetBank0
077C: 57 07    MOV   X,7           (0518) 	and		reg[ 7h], ~ 1h
077E: 7C 07 F2 LCALL 0x07F2        (0519) 	or		reg[ 7h],  1h
                                   (0520) ; writing AnalogColumnClockSelect register
0781: 50 01    MOV   A,1           (0521) 	M8C_SetBank1
0783: 67       ASR   A             (0522) 	and		reg[60h], ~30h
                                   (0523) 	or		reg[60h], 30h
0784: 50 02    MOV   A,2           (0524) ; writing AnalogColumnInputSelect register
0786: 57 0E    MOV   X,14          (0525) 	M8C_SetBank0
0788: 7C 07 F2 LCALL 0x07F2        (0526) 	and		reg[60h], ~3ch
                                   (0527) 	or		reg[60h], 34h
078B: 71 10    OR    F,16          (0528) ; writing Row_0_InputMux register
                                   (0529) 	and		reg[b0h], ~30h
078D: 41 60 CF AND   REG[96],207   (0530) ; writing Row_0_OutputDrive_0 register
                                   (0531) 	and		reg[b5h], ~10h
0790: 70 EF    AND   F,239         (0532) ; writing Row_1_InputMux register
0792: 41 60 C3 AND   REG[96],195   (0533) 	and		reg[b8h], ~33h
0795: 43 60 28 OR    REG[96],40    (0534) 	or		reg[b8h], 11h
                                   (0535) 
0798: 41 B0 CF AND   REG[176],207  (0536) 	push	x
079B: 43 B0 10 OR    REG[176],16   (0537)     M8C_SetBank0                    ; Force bank 0
                                   (0538)     mov     a, 0                    ; Specify bank 0
079E: 41 B5 EF AND   REG[181],239  (0539)     asr     a                       ; Store in carry flag
07A1: 43 B5 10 OR    REG[181],16   (0540)                                     ; Load bank 0 table:
                                   (0541)     mov     A, >LoadConfigTBL_receiver_config_Bank0
07A4: 41 B8 CC AND   REG[184],204  (0542)     mov     X, <LoadConfigTBL_receiver_config_Bank0
07A7: 43 B8 02 OR    REG[184],2    (0543)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0544) 
07AA: 41 07 FE AND   REG[7],254    (0545)     mov     a, 1                    ; Specify bank 1
                                   (0546)     asr     a                       ; Store in carry flag
07AD: 71 10    OR    F,16          (0547)                                     ; Load bank 1 table:
07AF: 41 05 FE AND   REG[5],254    (0548)     mov     A, >LoadConfigTBL_receiver_config_Bank1
                                   (0549)     mov     X, <LoadConfigTBL_receiver_config_Bank1
07B2: 41 04 FE AND   REG[4],254    (0550)     lcall   LoadConfig              ; Load the bank 1 values
07B5: 43 04 01 OR    REG[4],1      (0551) 
                                   (0552) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
07B8: 41 01 FD AND   REG[1],253    (0553) ; set config active bit
                                   (0554) 	or		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
07BB: 41 00 FD AND   REG[0],253    (0555)     M8C_SetBank0                    ; Force return to bank 0
07BE: 43 00 02 OR    REG[0],2      (0556) 	pop		x
07C1: 70 EF    AND   F,239         (0557) 
                                   (0558)     RAM_EPILOGUE RAM_USE_CLASS_4
07C3: 62 D0 00 MOV   REG[208],0    (0559)     ret
07C6: 26 02 FB AND   [2],251       (0560) 
07C9: 70 EF    AND   F,239         (0561) ;---------------------------------------------------------------------------
07CB: 20       POP   X             (0562) ; Unload Configuration receiver_config
                                   (0563) ;
                                   (0564) ;    Reset configuration registers for receiver_config
07CC: 7F       RET                 (0565) ;    to their values as initially configured.
                                   (0566) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0567) ;
                                   (0568) ;       INPUTS: None.
                                   (0569) ;      RETURNS: Nothing.
                                   (0570) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0571) ;               modified as may the Page Pointer registers!
                                   (0572) ;               In the large memory model currently only the page
                                   (0573) ;               pointer registers listed below are modified.  This does
                                   (0574) ;               not guarantee that in future implementations of this
                                   (0575) ;               function other page pointer registers will not be
                                   (0576) ;               modified.
                                   (0577) ;          
                                   (0578) ;               Page Pointer Registers Modified: 
                                   (0579) ;               CUR_PP
                                   (0580) ;
                                   (0581) _UnloadConfig_receiver_config:
                                   (0582)  UnloadConfig_receiver_config:
                                   (0583)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0584) 
                                   (0585) 	push	x
                                   (0586)     M8C_SetBank0                    ; Force bank 0
                                   (0587)     mov     a, 0                    ; Specify bank 0
                                   (0588)     asr     a                       ; Store in carry flag
                                   (0589)                                     ; Bank 0 table address:
                                   (0590)     mov     A, >UnloadConfigTBL_receiver_config_Bank0
07CD: 10       PUSH  X             (0591)     mov     X, <UnloadConfigTBL_receiver_config_Bank0
07CE: 70 EF    AND   F,239         (0592)     lcall   LoadConfig              ; Unload the bank 0 values
07D0: 50 00    MOV   A,0           (0593) 
07D2: 67       ASR   A             (0594)     mov     a, 1                    ; Specify bank 1
                                   (0595)     asr     a                       ; Store in carry flag
07D3: 50 03    MOV   A,3           (0596)                                     ; Bank 1 table address:
07D5: 57 E4    MOV   X,228         (0597)     mov     A, >UnloadConfigTBL_receiver_config_Bank1
07D7: 7C 07 F2 LCALL 0x07F2        (0598)     mov     X, <UnloadConfigTBL_receiver_config_Bank1
                                   (0599)     lcall   LoadConfig              ; Unload the bank 1 values
07DA: 50 01    MOV   A,1           (0600) 
07DC: 67       ASR   A             (0601) 	M8C_SetBank1
                                   (0602) ; writing AnalogColumnClockSelect register
07DD: 50 04    MOV   A,4           (0603) 	and		reg[60h], ~30h
07DF: 57 65    MOV   X,101         (0604) ; writing AnalogColumnInputSelect register
07E1: 7C 07 F2 LCALL 0x07F2        (0605) 	M8C_SetBank0
                                   (0606) 	and		reg[60h], ~3ch
07E4: 71 10    OR    F,16          (0607) 	or		reg[60h], 28h
07E6: 70 EF    AND   F,239         (0608) ; writing Row_0_InputMux register
                                   (0609) 	and		reg[b0h], ~30h
07E8: 62 D0 00 MOV   REG[208],0    (0610) 	or		reg[b0h], 10h
07EB: 55 02 00 MOV   [2],0         (0611) ; writing Row_0_OutputDrive_0 register
07EE: 70 EF    AND   F,239         (0612) 	and		reg[b5h], ~10h
07F0: 20       POP   X             (0613) 	or		reg[b5h], 10h
                                   (0614) ; writing Row_1_InputMux register
                                   (0615) 	and		reg[b8h], ~33h
07F1: 7F       RET                 (0616) 	or		reg[b8h],  2h
                                   (0617) ; writing Port_1_DriveMode_2 register
                                   (0618) 	and		reg[ 7h], ~ 1h
                                   (0619) ; writing Port_1_DriveMode_1 register
                                   (0620) 	M8C_SetBank1
                                   (0621) 	and		reg[ 5h], ~ 1h
                                   (0622) ; writing Port_1_DriveMode_0 register
                                   (0623) 	and		reg[ 4h], ~ 1h
                                   (0624) 	or		reg[ 4h],  1h
                                   (0625) ; writing Port_0_DriveMode_1 register
                                   (0626) 	and		reg[ 1h], ~ 2h
                                   (0627) ; writing Port_0_DriveMode_0 register
                                   (0628) 	and		reg[ 0h], ~ 2h
                                   (0629) 	or		reg[ 0h],  2h
                                   (0630) 	M8C_SetBank0
                                   (0631) ; clear config active bit
                                   (0632) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0633) 	and		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], ~receiver_config_BIT
                                   (0634)     M8C_SetBank0                    ; Force return to bank 0
                                   (0635) 	pop		x
                                   (0636) 
                                   (0637)     RAM_EPILOGUE RAM_USE_CLASS_4
07F2: 38 02    ADD   SP,2          (0638)     ret
07F4: 10       PUSH  X             (0639) 
07F5: 08       PUSH  A             (0640) ;---------------------------------------------------------------------------
07F6: 4F       MOV   X,SP          (0641) ; Unload Configuration Total
07F7: 56 FC 00 MOV   [X-4],0       (0642) ;
07FA: D0 04    JNC   0x07FF        (0643) ;    Reset configuration registers for Total
07FC: 56 FC 01 MOV   [X-4],1       (0644) ;    to their values as initially configured.
                                   (0645) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
07FF: 18       POP   A             (0646) ;
0800: 20       POP   X             (0647) ;       INPUTS: None.
                                   (0648) ;      RETURNS: Nothing.
                                   (0649) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0801: 70 EF    AND   F,239         (0650) ;               modified as may the Page Pointer registers!
0803: 62 E3 00 MOV   REG[227],0    (0651) ;               In the large memory model currently only the page
0806: 10       PUSH  X             (0652) ;               pointer registers listed below are modified.  This does
0807: 08       PUSH  A             (0653) ;               not guarantee that in future implementations of this
0808: 28       ROMX                (0654) ;               function other page pointer registers will not be
0809: 39 FF    CMP   A,255         (0655) ;               modified.
080B: A0 1F    JZ    0x082B        (0656) ;          
080D: 4F       MOV   X,SP          (0657) ;               Page Pointer Registers Modified: 
080E: 48 FC 01 TST   [X-4],1       (0658) ;               CUR_PP
0811: A0 03    JZ    0x0815        (0659) ;
0813: 71 10    OR    F,16          (0660) _UnloadConfig_Total:
                                   (0661)  UnloadConfig_Total:
0815: 54 FD    MOV   [X-3],A       (0662)     RAM_PROLOGUE RAM_USE_CLASS_4
0817: 18       POP   A             (0663) 
0818: 20       POP   X             (0664) 	push	x
0819: 75       INC   X             (0665)     M8C_SetBank0                    ; Force bank 0
081A: 09 00    ADC   A,0           (0666)     mov     a, 0                    ; Specify bank 0
081C: 10       PUSH  X             (0667)     asr     a                       ; Store in carry flag
081D: 08       PUSH  A             (0668)                                     ; Bank 0 table address:
081E: 28       ROMX                (0669)     mov     A, >UnloadConfigTBL_Total_Bank0
081F: 4F       MOV   X,SP          (0670)     mov     X, <UnloadConfigTBL_Total_Bank0
0820: 59 FD    MOV   X,[X-3]       (0671)     lcall   LoadConfig              ; Unload the bank 0 values
0822: 61 00    MOV   REG[X+0],A    (0672) 
0824: 18       POP   A             (0673)     mov     a, 1                    ; Specify bank 1
0825: 20       POP   X             (0674)     asr     a                       ; Store in carry flag
0826: 75       INC   X             (0675)                                     ; Bank 1 table address:
0827: 09 00    ADC   A,0           (0676)     mov     A, >UnloadConfigTBL_Total_Bank1
0829: 8F D7    JMP   0x0801        (0677)     mov     X, <UnloadConfigTBL_Total_Bank1
                                   (0678)     lcall   LoadConfig              ; Unload the bank 1 values
082B: 38 FC    ADD   SP,252        (0679) 
082D: 70 3F    AND   F,63
082F: 71 C0    OR    F,192         (0680) 	M8C_SetBank1
0832: 43 E1 02 OR    REG[225],2    (0681) 	M8C_SetBank0

FILE: lib\tx_timeout.asm
                                   (0102) ;;*****************************************************************************
0835: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: TX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "TX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
0836: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
0839: 7F       RET                 (0131) export  TX_TIMEOUT_EnableInt
                                   (0132) export _TX_TIMEOUT_EnableInt
                                   (0133) export  TX_TIMEOUT_DisableInt
                                   (0134) export _TX_TIMEOUT_DisableInt
                                   (0135) export  TX_TIMEOUT_Start
                                   (0136) export _TX_TIMEOUT_Start
                                   (0137) export  TX_TIMEOUT_Stop
                                   (0138) export _TX_TIMEOUT_Stop
                                   (0139) export  TX_TIMEOUT_WritePeriod
                                   (0140) export _TX_TIMEOUT_WritePeriod
                                   (0141) export  TX_TIMEOUT_WriteCompareValue
                                   (0142) export _TX_TIMEOUT_WriteCompareValue
                                   (0143) export  TX_TIMEOUT_wReadCompareValue
                                   (0144) export _TX_TIMEOUT_wReadCompareValue
                                   (0145) export  TX_TIMEOUT_wReadTimer
                                   (0146) export _TX_TIMEOUT_wReadTimer
                                   (0147) export  TX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _TX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
083A: 43 23 01 OR    REG[35],1     (0157) export _wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
083D: 7F       RET                 (0159) export  wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA transmitter_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: TX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
083E: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
0841: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  TX_TIMEOUT_EnableInt:
                                   (0200) _TX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    TX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: TX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
0842: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
0844: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
0845: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
0847: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  TX_TIMEOUT_DisableInt:
                                   (0228) _TX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    TX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: TX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
0848: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
084A: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
084B: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
084D: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  TX_TIMEOUT_Start:
                                   (0256) _TX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    TX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: TX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
084E: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0850: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
0851: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
0853: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  TX_TIMEOUT_Stop:
                                   (0284) _TX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    TX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  TX_TIMEOUT_WritePeriod:
                                   (0313) _TX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[TX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[TX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: TX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call TX_TIMEOUT_Stop to disable).
0854: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
0855: 38 03    ADD   SP,3          (0334) ;
0857: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
0859: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
085A: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
085C: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
085D: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
085F: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0860: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
0862: 5D 26    MOV   A,REG[38]     (0343) ;
0864: 54 01    MOV   [X+1],A       (0344)  TX_TIMEOUT_WriteCompareValue:
0866: 5D 22    MOV   A,REG[34]     (0345) _TX_TIMEOUT_WriteCompareValue:
0868: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
086A: 50 00    MOV   A,0           (0347)    mov   reg[TX_TIMEOUT_COMPARE_LSB_REG], A
086C: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
086F: A0 03    JZ    0x0873        (0349)    mov   reg[TX_TIMEOUT_COMPARE_MSB_REG], A
0871: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
0873: 54 00    MOV   [X+0],A       (0352) 
0875: 70 FE    AND   F,254         (0353) .ENDSECTION
0877: 41 23 FE AND   REG[35],254   (0354) 
087A: 18       POP   A             (0355) 
087B: 60 26    MOV   REG[38],A     (0356) .SECTION
087D: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
087E: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: TX_TIMEOUT_wReadCompareValue
0880: 18       POP   A             (0359) ;
0881: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
0883: 18       POP   A             (0361) ;     Reads the Compare registers.
0884: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
0885: 70 3F    AND   F,63
0887: 71 C0    OR    F,192         (0363) ;
0889: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  TX_TIMEOUT_wReadCompareValue:
                                   (0374) _TX_TIMEOUT_wReadCompareValue:
                                   (0375)  wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[TX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[TX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: TX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
088A: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
088C: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
088E: 5C       MOV   X,A           (0409) ;
088F: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
0893: 43 E1 04 OR    REG[225],4    (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\tx_repeater.asm
                                   (0109) ;;*****************************************************************************
0896: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TX_REPEATER.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TX_REPEATER.inc"
0897: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
089A: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TX_REPEATER_SetTxIntMode
                                   (0143) export  _TX_REPEATER_SetTxIntMode
                                   (0144) export   TX_REPEATER_EnableInt
                                   (0145) export  _TX_REPEATER_EnableInt
                                   (0146) export   TX_REPEATER_DisableInt
                                   (0147) export  _TX_REPEATER_DisableInt
                                   (0148) export   TX_REPEATER_Start
                                   (0149) export  _TX_REPEATER_Start
                                   (0150) export   TX_REPEATER_Stop
                                   (0151) export  _TX_REPEATER_Stop
                                   (0152) export   TX_REPEATER_SendData
                                   (0153) export  _TX_REPEATER_SendData
                                   (0154) export   TX_REPEATER_bReadTxStatus
                                   (0155) export  _TX_REPEATER_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTX_REPEATER_ReadTxStatus
                                   (0160) export  _bTX_REPEATER_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TX_REPEATER_PutSHexByte
                                   (0166) export _TX_REPEATER_PutSHexByte
                                   (0167) export  TX_REPEATER_PutSHexInt
                                   (0168) export _TX_REPEATER_PutSHexInt
                                   (0169) 
089B: 71 10    OR    F,16          (0170) export  TX_REPEATER_CPutString
089D: 21 01    AND   A,1           (0171) export _TX_REPEATER_CPutString
089F: A0 07    JZ    0x08A7        (0172) export  TX_REPEATER_PutString
08A1: 43 28 10 OR    REG[40],16    (0173) export _TX_REPEATER_PutString
08A4: 70 EF    AND   F,239         (0174) export  TX_REPEATER_PutChar
                                   (0175) export _TX_REPEATER_PutChar
08A6: 7F       RET                 (0176) export  TX_REPEATER_Write
                                   (0177) export _TX_REPEATER_Write
                                   (0178) export  TX_REPEATER_CWrite
08A7: 41 28 EF AND   REG[40],239   (0179) export _TX_REPEATER_CWrite
08AA: 70 EF    AND   F,239         (0180) export  TX_REPEATER_PutCRLF
                                   (0181) export _TX_REPEATER_PutCRLF 
08AC: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TX_REPEATER_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
08AD: 29 01    OR    A,1           (0211) ;    functions.
08AF: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TX_REPEATER_EnableInt:
08B1: 7F       RET                 (0214) _TX_REPEATER_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TX_REPEATER_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
08B2: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
08B5: 7F       RET                 (0242)  TX_REPEATER_DisableInt:
                                   (0243) _TX_REPEATER_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TX_REPEATER_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
08B6: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
08B8: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TX_REPEATER_SetTxIntMode:
                                   (0276) _TX_REPEATER_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TX_REPEATER_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TX_REPEATER_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TX_REPEATER_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_REPEATER_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
08B9: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
08BB: 7F       RET                 (0303) ;
08BC: 30       HALT  
08BD: 31 32    XOR   A,50
08BF: 33 34    XOR   A,[X+52]
08C1: 35 36    XOR   [X+54],A
08C3: 37 38 39 XOR   [X+56],57
08C6: 41 42 43 AND   REG[66],67
08C9: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TX_REPEATER_Start:
                                   (0317) _TX_REPEATER_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TX_REPEATER_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TX_REPEATER_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
08CC: 08       PUSH  A             (0335) ;
08CD: 67       ASR   A             (0336) ;  RETURNS:  none
08CE: 67       ASR   A             (0337) ;
08CF: 67       ASR   A             (0338) ;  SIDE EFFECTS:
08D0: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
08D1: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
08D3: FF E7    INDEX 0x08BC        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
08D5: 90 0F    CALL  0x08E6        (0342) ;    responsibility to perserve their values across calls to fastcall16 
08D7: 18       POP   A             (0343) ;    functions.
08D8: 21 0F    AND   A,15          (0344) ;
08DA: FF E0    INDEX 0x08BC        (0345)  TX_REPEATER_Stop:
08DC: 90 08    CALL  0x08E6        (0346) _TX_REPEATER_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
08DE: 7F       RET                 (0348)    and   REG[TX_REPEATER_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TX_REPEATER_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TX_REPEATER_SendData:
                                   (0375) _TX_REPEATER_SendData:
08DF: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
08E0: 9F EA    CALL  0x08CC        (0377)    mov REG[TX_REPEATER_TX_BUFFER_REG], A
08E2: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
08E3: 9F E7    CALL  0x08CC        (0379)    ret
                                   (0380) .ENDSECTION
08E5: 7F       RET                 (0381) 
08E6: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TX_REPEATER_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TX_REPEATER_bReadTxStatus:
                                   (0405) _TX_REPEATER_bReadTxStatus:
                                   (0406)  bTX_REPEATER_ReadTxStatus:
                                   (0407) _bTX_REPEATER_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TX_REPEATER_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
08E9: AF FC    JZ    0x08E6        (0416) ;  FUNCTION NAME: TX_REPEATER_PutSHexByte
08EB: 60 29    MOV   REG[41],A
                                   (0417) ;
08ED: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TX_REPEATER_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TX_REPEATER_PutSHexByte:
                                   (0441) _TX_REPEATER_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0450)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0454)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
08EE: 70 BF    AND   F,191         (0456)     ret
08F0: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
08F2: 52 00    MOV   A,[X+0]       (0459) .SECTION
08F4: A0 06    JZ    0x08FB        (0460) ;-----------------------------------------------------------------------------
08F6: 9F EE    CALL  0x08E6        (0461) ;  FUNCTION NAME: TX_REPEATER_PutSHexInt
08F8: 75       INC   X             (0462) ;
08F9: 8F F8    JMP   0x08F2        (0463) ;  DESCRIPTION:
08FB: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
08FD: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
08FF: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TX_REPEATER_PutSHexInt:
                                   (0482) _TX_REPEATER_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TX_REPEATER_PutSHexByte      ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TX_REPEATER_PutSHexByte      ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TX_REPEATER_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
0900: 70 BF    AND   F,191         (0503) ;  RETURNS:
0902: 62 D3 07 MOV   REG[211],7    (0504) ;     none
0905: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
0906: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
0908: A0 1A    JZ    0x0923        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
090A: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
090C: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TX_REPEATER_CONTROL_REG], TX_REPEATER_TX_BUFFER_EMPTY    ; Check Tx Status
090E: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
0910: 60 D3    MOV   REG[211],A    (0517)    mov REG[TX_REPEATER_TX_BUFFER_REG], @Source    ; Write data to Tx Port
0912: 52 00    MOV   A,[X+0]       (0518)    endm
0914: 49 2B 10 TST   REG[43],16
0917: AF FC    JZ    0x0914        (0519) 
0919: 60 29    MOV   REG[41],A
091B: 4F       MOV   X,SP          (0520) 
091C: 62 D3 07 MOV   REG[211],7    (0521)  TX_REPEATER_PutChar:
091F: 77 FD    INC   [X-3]         (0522) _TX_REPEATER_PutChar:
0921: 8F E4    JMP   0x0906        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
0923: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
0925: 71 C0    OR    F,192         (0526)    ret
0927: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TX_REPEATER_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TX_REPEATER_PutString:
                                   (0563) _TX_REPEATER_PutString:
0928: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
0929: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
092C: B0 06    JNZ   0x0933        (0569)    call  TX_REPEATER_PutChar                ; Send character to Tx port
092E: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
0931: A0 1D    JZ    0x094F        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
0933: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
0934: 52 FC    MOV   A,[X-4]       (0575)    ret
0936: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
0938: 28       ROMX                (0577) 
0939: 49 2B 10 TST   REG[43],16
093C: AF FC    JZ    0x0939        (0578) .SECTION
093E: 60 29    MOV   REG[41],A
0940: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TX_REPEATER_Write
0941: 07 FD 01 ADD   [X-3],1       (0581) ;
0944: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
0947: 17 FB 01 SUB   [X-5],1       (0585) ;
094A: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
094D: 8F DB    JMP   0x0929        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
094F: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TX_REPEATER_Write:
                                   (0610) _TX_REPEATER_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
0950: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
0951: 10       PUSH  X             (0622)    ENDIF
0952: 28       ROMX                (0623) 
0953: A0 0B    JZ    0x095F        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
0955: 9F 8F    CALL  0x08E6        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
0957: 20       POP   X             (0626)    mov   A,[X]
0958: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
0959: 75       INC   X             (0628)    mov   X, SP
095A: DF F5    JNC   0x0950        (0629)    RAM_SETPAGE_IDX2STK
095C: 74       INC   A             (0630)    inc   [X+STR_LSB]
095D: 8F F2    JMP   0x0950        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
095F: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
0961: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TX_REPEATER_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
0962: 50 0D    MOV   A,13          (0663) ;
0964: 9F 80    CALL  0x08E6        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
0966: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
0968: 9F 7C    CALL  0x08E6        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
096C: 43 E1 04 OR    REG[225],4    (0668) 

FILE: lib\transmit.asm
                                   (0109) ;;*****************************************************************************
096F: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TRANSMIT.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TRANSMIT.inc"
0970: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
0973: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TRANSMIT_SetTxIntMode
                                   (0143) export  _TRANSMIT_SetTxIntMode
                                   (0144) export   TRANSMIT_EnableInt
                                   (0145) export  _TRANSMIT_EnableInt
                                   (0146) export   TRANSMIT_DisableInt
                                   (0147) export  _TRANSMIT_DisableInt
                                   (0148) export   TRANSMIT_Start
                                   (0149) export  _TRANSMIT_Start
                                   (0150) export   TRANSMIT_Stop
                                   (0151) export  _TRANSMIT_Stop
                                   (0152) export   TRANSMIT_SendData
                                   (0153) export  _TRANSMIT_SendData
                                   (0154) export   TRANSMIT_bReadTxStatus
                                   (0155) export  _TRANSMIT_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTRANSMIT_ReadTxStatus
                                   (0160) export  _bTRANSMIT_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TRANSMIT_PutSHexByte
                                   (0166) export _TRANSMIT_PutSHexByte
                                   (0167) export  TRANSMIT_PutSHexInt
                                   (0168) export _TRANSMIT_PutSHexInt
                                   (0169) 
0974: 71 10    OR    F,16          (0170) export  TRANSMIT_CPutString
0976: 21 01    AND   A,1           (0171) export _TRANSMIT_CPutString
0978: A0 07    JZ    0x0980        (0172) export  TRANSMIT_PutString
097A: 43 28 10 OR    REG[40],16    (0173) export _TRANSMIT_PutString
097D: 70 EF    AND   F,239         (0174) export  TRANSMIT_PutChar
                                   (0175) export _TRANSMIT_PutChar
097F: 7F       RET                 (0176) export  TRANSMIT_Write
                                   (0177) export _TRANSMIT_Write
                                   (0178) export  TRANSMIT_CWrite
0980: 41 28 EF AND   REG[40],239   (0179) export _TRANSMIT_CWrite
0983: 70 EF    AND   F,239         (0180) export  TRANSMIT_PutCRLF
                                   (0181) export _TRANSMIT_PutCRLF 
0985: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TRANSMIT_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
0986: 29 01    OR    A,1           (0211) ;    functions.
0988: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TRANSMIT_EnableInt:
098A: 7F       RET                 (0214) _TRANSMIT_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TRANSMIT_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
098B: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
098E: 7F       RET                 (0242)  TRANSMIT_DisableInt:
                                   (0243) _TRANSMIT_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TRANSMIT_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
098F: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
0991: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TRANSMIT_SetTxIntMode:
                                   (0276) _TRANSMIT_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TRANSMIT_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TRANSMIT_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TRANSMIT_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TRANSMIT_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
0992: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
0994: 7F       RET                 (0303) ;
0995: 30       HALT  
0996: 31 32    XOR   A,50
0998: 33 34    XOR   A,[X+52]
099A: 35 36    XOR   [X+54],A
099C: 37 38 39 XOR   [X+56],57
099F: 41 42 43 AND   REG[66],67
09A2: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TRANSMIT_Start:
                                   (0317) _TRANSMIT_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TRANSMIT_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TRANSMIT_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
09A5: 08       PUSH  A             (0335) ;
09A6: 67       ASR   A             (0336) ;  RETURNS:  none
09A7: 67       ASR   A             (0337) ;
09A8: 67       ASR   A             (0338) ;  SIDE EFFECTS:
09A9: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
09AA: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
09AC: FF E7    INDEX 0x0995        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
09AE: 90 0F    CALL  0x09BF        (0342) ;    responsibility to perserve their values across calls to fastcall16 
09B0: 18       POP   A             (0343) ;    functions.
09B1: 21 0F    AND   A,15          (0344) ;
09B3: FF E0    INDEX 0x0995        (0345)  TRANSMIT_Stop:
09B5: 90 08    CALL  0x09BF        (0346) _TRANSMIT_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
09B7: 7F       RET                 (0348)    and   REG[TRANSMIT_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TRANSMIT_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TRANSMIT_SendData:
                                   (0375) _TRANSMIT_SendData:
09B8: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
09B9: 9F EA    CALL  0x09A5        (0377)    mov REG[TRANSMIT_TX_BUFFER_REG], A
09BB: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
09BC: 9F E7    CALL  0x09A5        (0379)    ret
                                   (0380) .ENDSECTION
09BE: 7F       RET                 (0381) 
09BF: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TRANSMIT_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TRANSMIT_bReadTxStatus:
                                   (0405) _TRANSMIT_bReadTxStatus:
                                   (0406)  bTRANSMIT_ReadTxStatus:
                                   (0407) _bTRANSMIT_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TRANSMIT_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
09C2: AF FC    JZ    0x09BF        (0416) ;  FUNCTION NAME: TRANSMIT_PutSHexByte
09C4: 60 29    MOV   REG[41],A
                                   (0417) ;
09C6: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TRANSMIT_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TRANSMIT_PutSHexByte:
                                   (0441) _TRANSMIT_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0450)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0454)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
09C7: 70 BF    AND   F,191         (0456)     ret
09C9: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
09CB: 52 00    MOV   A,[X+0]       (0459) .SECTION
09CD: A0 06    JZ    0x09D4        (0460) ;-----------------------------------------------------------------------------
09CF: 9F EE    CALL  0x09BF        (0461) ;  FUNCTION NAME: TRANSMIT_PutSHexInt
09D1: 75       INC   X             (0462) ;
09D2: 8F F8    JMP   0x09CB        (0463) ;  DESCRIPTION:
09D4: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
09D6: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
09D8: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TRANSMIT_PutSHexInt:
                                   (0482) _TRANSMIT_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TRANSMIT_PutSHexByte         ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TRANSMIT_PutSHexByte         ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TRANSMIT_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
09D9: 70 BF    AND   F,191         (0503) ;  RETURNS:
09DB: 62 D3 07 MOV   REG[211],7    (0504) ;     none
09DE: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
09DF: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
09E1: A0 1A    JZ    0x09FC        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
09E3: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
09E5: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TRANSMIT_CONTROL_REG], TRANSMIT_TX_BUFFER_EMPTY    ; Check Tx Status
09E7: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
09E9: 60 D3    MOV   REG[211],A    (0517)    mov REG[TRANSMIT_TX_BUFFER_REG], @Source    ; Write data to Tx Port
09EB: 52 00    MOV   A,[X+0]       (0518)    endm
09ED: 49 2B 10 TST   REG[43],16
09F0: AF FC    JZ    0x09ED        (0519) 
09F2: 60 29    MOV   REG[41],A
09F4: 4F       MOV   X,SP          (0520) 
09F5: 62 D3 07 MOV   REG[211],7    (0521)  TRANSMIT_PutChar:
09F8: 77 FD    INC   [X-3]         (0522) _TRANSMIT_PutChar:
09FA: 8F E4    JMP   0x09DF        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
09FC: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
09FE: 71 C0    OR    F,192         (0526)    ret
0A00: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TRANSMIT_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TRANSMIT_PutString:
                                   (0563) _TRANSMIT_PutString:
0A01: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
0A02: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
0A05: B0 06    JNZ   0x0A0C        (0569)    call  TRANSMIT_PutChar                   ; Send character to Tx port
0A07: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
0A0A: A0 1D    JZ    0x0A28        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
0A0C: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
0A0D: 52 FC    MOV   A,[X-4]       (0575)    ret
0A0F: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
0A11: 28       ROMX                (0577) 
0A12: 49 2B 10 TST   REG[43],16
0A15: AF FC    JZ    0x0A12        (0578) .SECTION
0A17: 60 29    MOV   REG[41],A
0A19: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TRANSMIT_Write
0A1A: 07 FD 01 ADD   [X-3],1       (0581) ;
0A1D: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
0A20: 17 FB 01 SUB   [X-5],1       (0585) ;
0A23: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
0A26: 8F DB    JMP   0x0A02        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
0A28: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TRANSMIT_Write:
                                   (0610) _TRANSMIT_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
0A29: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
0A2A: 10       PUSH  X             (0622)    ENDIF
0A2B: 28       ROMX                (0623) 
0A2C: A0 0B    JZ    0x0A38        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
0A2E: 9F 8F    CALL  0x09BF        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
0A30: 20       POP   X             (0626)    mov   A,[X]
0A31: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
0A32: 75       INC   X             (0628)    mov   X, SP
0A33: DF F5    JNC   0x0A29        (0629)    RAM_SETPAGE_IDX2STK
0A35: 74       INC   A             (0630)    inc   [X+STR_LSB]
0A36: 8F F2    JMP   0x0A29        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
0A38: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
0A3A: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TRANSMIT_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
0A3B: 50 0D    MOV   A,13          (0663) ;
0A3D: 9F 80    CALL  0x09BF        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
0A3F: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
0A41: 9F 7C    CALL  0x09BF        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
0A44: 43 E1 02 OR    REG[225],2    (0668) 

FILE: lib\rx_timeout.asm
                                   (0102) ;;*****************************************************************************
0A47: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: RX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "RX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
0A48: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
0A4B: 7F       RET                 (0131) export  RX_TIMEOUT_EnableInt
                                   (0132) export _RX_TIMEOUT_EnableInt
                                   (0133) export  RX_TIMEOUT_DisableInt
                                   (0134) export _RX_TIMEOUT_DisableInt
                                   (0135) export  RX_TIMEOUT_Start
                                   (0136) export _RX_TIMEOUT_Start
                                   (0137) export  RX_TIMEOUT_Stop
                                   (0138) export _RX_TIMEOUT_Stop
                                   (0139) export  RX_TIMEOUT_WritePeriod
                                   (0140) export _RX_TIMEOUT_WritePeriod
                                   (0141) export  RX_TIMEOUT_WriteCompareValue
                                   (0142) export _RX_TIMEOUT_WriteCompareValue
                                   (0143) export  RX_TIMEOUT_wReadCompareValue
                                   (0144) export _RX_TIMEOUT_wReadCompareValue
                                   (0145) export  RX_TIMEOUT_wReadTimer
                                   (0146) export _RX_TIMEOUT_wReadTimer
                                   (0147) export  RX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _RX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
0A4C: 43 23 01 OR    REG[35],1     (0157) export _wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
0A4F: 7F       RET                 (0159) export  wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA receiver_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: RX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
0A50: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
0A53: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  RX_TIMEOUT_EnableInt:
                                   (0200) _RX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    RX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: RX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
0A54: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
0A56: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
0A57: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
0A59: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  RX_TIMEOUT_DisableInt:
                                   (0228) _RX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    RX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: RX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
0A5A: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
0A5C: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
0A5D: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
0A5F: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  RX_TIMEOUT_Start:
                                   (0256) _RX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    RX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: RX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
0A60: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0A62: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
0A63: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
0A65: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  RX_TIMEOUT_Stop:
                                   (0284) _RX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    RX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: RX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  RX_TIMEOUT_WritePeriod:
                                   (0313) _RX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[RX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[RX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: RX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call RX_TIMEOUT_Stop to disable).
0A66: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
0A67: 38 03    ADD   SP,3          (0334) ;
0A69: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
0A6B: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
0A6C: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
0A6E: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
0A6F: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
0A71: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0A72: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
0A74: 5D 26    MOV   A,REG[38]     (0343) ;
0A76: 54 01    MOV   [X+1],A       (0344)  RX_TIMEOUT_WriteCompareValue:
0A78: 5D 22    MOV   A,REG[34]     (0345) _RX_TIMEOUT_WriteCompareValue:
0A7A: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
0A7C: 50 00    MOV   A,0           (0347)    mov   reg[RX_TIMEOUT_COMPARE_LSB_REG], A
0A7E: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
0A81: A0 03    JZ    0x0A85        (0349)    mov   reg[RX_TIMEOUT_COMPARE_MSB_REG], A
0A83: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
0A85: 54 00    MOV   [X+0],A       (0352) 
0A87: 70 FE    AND   F,254         (0353) .ENDSECTION
0A89: 41 23 FE AND   REG[35],254   (0354) 
0A8C: 18       POP   A             (0355) 
0A8D: 60 26    MOV   REG[38],A     (0356) .SECTION
0A8F: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
0A90: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: RX_TIMEOUT_wReadCompareValue
0A92: 18       POP   A             (0359) ;
0A93: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
0A95: 18       POP   A             (0361) ;     Reads the Compare registers.
0A96: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
0A97: 70 3F    AND   F,63
0A99: 71 C0    OR    F,192         (0363) ;
0A9B: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  RX_TIMEOUT_wReadCompareValue:
                                   (0374) _RX_TIMEOUT_wReadCompareValue:
                                   (0375)  wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[RX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[RX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: RX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
0A9C: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
0A9E: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
0AA0: 5C       MOV   X,A           (0409) ;
0AA1: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
0AA4: 08       PUSH  A             (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\receiveint.asm
0AA5: 10       PUSH  X             (0104) ;;*****************************************************************************
0AA6: 5D D3    MOV   A,REG[211]
                                   (0105) ;;*****************************************************************************
                                   (0106) ;;  FILENAME: RECEIVEINT.asm
0AA8: 08       PUSH  A             (0107) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0108) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0109) ;;
0AA9: 58 01    MOV   X,[1]         (0110) ;;  DESCRIPTION: RX8 Interrupt Service Routine.
0AAB: 5D 2B    MOV   A,REG[43]     (0111) ;;-----------------------------------------------------------------------------
0AAD: 08       PUSH  A             (0112) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0113) ;;*****************************************************************************
0AAE: 21 08    AND   A,8           (0114) ;;*****************************************************************************
0AB0: B0 04    JNZ   0x0AB5        (0115) 
0AB2: 18       POP   A             (0116) include "m8c.inc"
0AB3: 80 62    JMP   0x0B16        (0117) include "memory.inc"
                                   (0118) include "RECEIVE.inc"
                                   (0119) 
                                   (0120) 
0AB5: 18       POP   A             (0121) ;-----------------------------------------------
                                   (0122) ;  Global Symbols
                                   (0123) ;-----------------------------------------------
0AB6: 21 E0    AND   A,224         (0124) export  _RECEIVE_ISR
0AB8: A0 12    JZ    0x0ACB        (0125) 
                                   (0126) 
0ABA: 2C 00    OR    [0],A         (0127) IF (RECEIVE_RXBUF_ENABLE)
                                   (0128) export  RECEIVE_aRxBuffer
0ABC: 49 2A 00 TST   REG[42],0     (0129) export _RECEIVE_aRxBuffer
                                   (0130) export  RECEIVE_bRxCnt
0ABF: 21 20    AND   A,32          (0131) export _RECEIVE_bRxCnt
0AC1: A0 54    JZ    0x0B16        (0132) export  RECEIVE_fStatus
                                   (0133) export _RECEIVE_fStatus
                                   (0134) ENDIF
                                   (0135) 
0AC3: 41 2B FE AND   REG[43],254   (0136) 
0AC6: 43 2B 01 OR    REG[43],1     (0137) ;-----------------------------------------------
0AC9: 80 4C    JMP   0x0B16        (0138) ; Variable Allocation
                                   (0139) ;-----------------------------------------------
                                   (0140) 
                                   (0141) IF (RECEIVE_RXBUF_ENABLE)
0ACB: 5D 2A    MOV   A,REG[42]     (0142) AREA InterruptRAM(RAM,REL,CON)
                                   (0143)  RECEIVE_fStatus:
                                   (0144) _RECEIVE_fStatus:      BLK  1
0ACD: 47 00 01 TST   [0],1         (0145)  RECEIVE_bRxCnt:
0AD0: B0 45    JNZ   0x0B16        (0146) _RECEIVE_bRxCnt:       BLK  1
                                   (0147) AREA RECEIVE_RAM(RAM,REL,CON)
0AD2: 39 00    CMP   A,0           (0148)  RECEIVE_aRxBuffer:    
0AD4: B0 14    JNZ   0x0AE9        (0149) _RECEIVE_aRxBuffer:    BLK RECEIVE_RX_BUFFER_SIZE
0AD6: 2E 00 01 OR    [0],1         (0150) ENDIF
                                   (0151) 
0AD9: 62 D3 00 MOV   REG[211],0    (0152) 
0ADC: 70 3F    AND   F,63
0ADE: 71 80    OR    F,128         (0153) AREA InterruptRAM(RAM,REL,CON)
0AE0: 56 45 00 MOV   [X+69],0      (0154) 
0AE3: 70 3F    AND   F,63
0AE5: 71 00    OR    F,0           (0155) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0AE7: 80 2E    JMP   0x0B16        (0156) ;---------------------------------------------------
                                   (0157) ; Insert your custom declarations below this banner
                                   (0158) ;---------------------------------------------------
                                   (0159) 
                                   (0160) ;------------------------
                                   (0161) ; Includes
0AE9: 39 01    CMP   A,1           (0162) ;------------------------
0AEB: C0 2A    JC    0x0B16        (0163) 
                                   (0164) 	
                                   (0165) ;------------------------
                                   (0166) ;  Constant Definitions
0AED: 3C 01 3F CMP   [1],63        (0167) ;------------------------
0AF0: C0 14    JC    0x0B05        (0168) 
0AF2: 2E 00 10 OR    [0],16        (0169) 
                                   (0170) ;------------------------
0AF5: 62 D3 00 MOV   REG[211],0    (0171) ; Variable Allocation
0AF8: 70 3F    AND   F,63
0AFA: 71 80    OR    F,128         (0172) ;------------------------
0AFC: 56 45 00 MOV   [X+69],0      (0173) 
0AFF: 70 3F    AND   F,63
0B01: 71 00    OR    F,0           (0174) 
0B03: 80 12    JMP   0x0B16        (0175) ;---------------------------------------------------
                                   (0176) ; Insert your custom declarations above this banner
                                   (0177) ;---------------------------------------------------
                                   (0178) ;@PSoC_UserCode_END@ (Do not change this line.)
0B05: 75       INC   X             (0179) 
0B06: 5A 01    MOV   [1],X         (0180) 
0B08: 79       DEC   X             (0181) AREA UserModules (ROM, REL)
                                   (0182) 
0B09: 62 D3 00 MOV   REG[211],0    (0183) ;-----------------------------------------------------------------------------
0B0C: 70 3F    AND   F,63
0B0E: 71 80    OR    F,128         (0184) ;  FUNCTION NAME: _RECEIVE_ISR
0B10: 54 45    MOV   [X+69],A      (0185) ;
0B12: 70 3F    AND   F,63
0B14: 71 00    OR    F,0           (0186) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
0B16: 18       POP   A
                                   (0187) ;
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) 
0B17: 60 D3    MOV   REG[211],A    (0191) _RECEIVE_ISR:
                                   (0192) 
                                   (0193)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                   (0194)    ;---------------------------------------------------
0B19: 20       POP   X             (0195)    ; Insert your custom code below this banner
0B1A: 18       POP   A             (0196)    ;---------------------------------------------------
                                   (0197)    ;   NOTE: interrupt service routines must preserve
                                   (0198)    ;   the values of the A and X CPU registers.
                                   (0199) 
                                   (0200)    ;---------------------------------------------------
0B1C: 43 E1 04 OR    REG[225],4    (0201)    ; Insert your custom code above this banner

FILE: lib\receive.asm
                                   (0121) ;;*****************************************************************************
0B1F: 7F       RET                 (0122) ;;*****************************************************************************
                                   (0123) ;;  FILENAME: RECEIVE.asm
                                   (0124) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0125) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0126) ;;
                                   (0127) ;;  DESCRIPTION: RX8 User Module software implementation file
                                   (0128) ;;               for 22/24/25/26/27xxx PSoC family of devices.
                                   (0129) ;;
                                   (0130) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0131) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0132) ;;        This means it is the caller's responsibility to preserve any values
                                   (0133) ;;        in the X and A registers that are still needed after the API functions
                                   (0134) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0135) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0136) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0137) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0138) ;;-----------------------------------------------------------------------------
                                   (0139) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0140) ;;*****************************************************************************
                                   (0141) ;;*****************************************************************************
                                   (0142) 
                                   (0143) ;-----------------------------------------------
                                   (0144) ; include instance specific register definitions
                                   (0145) ;-----------------------------------------------
                                   (0146) include "m8c.inc"
                                   (0147) include "memory.inc"
                                   (0148) include "RECEIVE.inc"
0B20: 41 E1 FB AND   REG[225],251  (0149) 
                                   (0150) 
0B23: 7F       RET                 (0151) ;-----------------------------------------------
                                   (0152) ;  Global Symbols
                                   (0153) ;-----------------------------------------------
                                   (0154) export   RECEIVE_EnableInt
                                   (0155) export  _RECEIVE_EnableInt
                                   (0156) export   RECEIVE_DisableInt
                                   (0157) export  _RECEIVE_DisableInt
                                   (0158) export   RECEIVE_Start
                                   (0159) export  _RECEIVE_Start
                                   (0160) export   RECEIVE_Stop
                                   (0161) export  _RECEIVE_Stop
                                   (0162) export   RECEIVE_bReadRxData
                                   (0163) export  _RECEIVE_bReadRxData
                                   (0164) export   RECEIVE_bReadRxStatus
                                   (0165) export  _RECEIVE_bReadRxStatus
                                   (0166) 
                                   (0167) ; Old function name convension, do not use.
                                   (0168) ; These will be removed in a future release.
                                   (0169) export  bRECEIVE_ReadRxData
                                   (0170) export _bRECEIVE_ReadRxData
                                   (0171) export  bRECEIVE_ReadRxStatus
                                   (0172) export _bRECEIVE_ReadRxStatus
                                   (0173) 
                                   (0174) ;-----------------------------------------------
                                   (0175) ; High Level RX functions
                                   (0176) ;-----------------------------------------------
                                   (0177) 
                                   (0178) export  RECEIVE_cGetChar
0B24: 29 01    OR    A,1           (0179) export _RECEIVE_cGetChar
0B26: 60 2B    MOV   REG[43],A     (0180) export  RECEIVE_cReadChar
                                   (0181) export _RECEIVE_cReadChar
0B28: 7F       RET                 (0182) export  RECEIVE_iReadChar
                                   (0183) export _RECEIVE_iReadChar
                                   (0184) 
                                   (0185) IF (RECEIVE_RXBUF_ENABLE)
                                   (0186) export  RECEIVE_CmdReset
                                   (0187) export _RECEIVE_CmdReset
                                   (0188) export  RECEIVE_bCmdCheck
                                   (0189) export _RECEIVE_bCmdCheck
                                   (0190) export  RECEIVE_bCmdLength
                                   (0191) export _RECEIVE_bCmdLength
                                   (0192) export  RECEIVE_bErrCheck
                                   (0193) export _RECEIVE_bErrCheck
                                   (0194) 
                                   (0195) export  RECEIVE_szGetParam
                                   (0196) export _RECEIVE_szGetParam
                                   (0197) export  RECEIVE_szGetRestOfParams
                                   (0198) export _RECEIVE_szGetRestOfParams
                                   (0199) 
                                   (0200) ;-----------------------------------------------
                                   (0201) ;  Variables
                                   (0202) ;-----------------------------------------------
                                   (0203) 
                                   (0204) AREA RECEIVE_RAM(RAM,REL,CON)
                                   (0205)  ptrParam:   			BLK  1
                                   (0206) 
                                   (0207) ENDIF
0B29: 41 2B FE AND   REG[43],254   (0208) ;-----------------------------------------------
                                   (0209) ;  EQUATES
0B2C: 7F       RET                 (0210) ;-----------------------------------------------
                                   (0211) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0212) 
                                   (0213) area UserModules (ROM, REL)
                                   (0214) 
                                   (0215) .SECTION
                                   (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;  FUNCTION NAME: RECEIVE_EnableInt
                                   (0218) ;
                                   (0219) ;  DESCRIPTION:
                                   (0220) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                   (0221) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0222) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0223) ;
                                   (0224) ;-----------------------------------------------------------------------------
                                   (0225) ;
                                   (0226) ;  ARGUMENTS: none
                                   (0227) ;
                                   (0228) ;  RETURNS: none
                                   (0229) ;
                                   (0230) ;  SIDE EFFECTS:
                                   (0231) ;    The A and X registers may be modified by this or future implementations
                                   (0232) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0235) ;    functions.
                                   (0236) ;
                                   (0237)  RECEIVE_EnableInt:
                                   (0238) _RECEIVE_EnableInt:
                                   (0239)    RAM_PROLOGUE RAM_USE_CLASS_1
0B2D: 5D 2A    MOV   A,REG[42]     (0240)    M8C_EnableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0241)    RAM_EPILOGUE RAM_USE_CLASS_1
0B2F: 7F       RET                 (0242)    ret
                                   (0243) .ENDSECTION
                                   (0244) 
                                   (0245) .SECTION
                                   (0246) ;-----------------------------------------------------------------------------
                                   (0247) ;  FUNCTION NAME: RECEIVE_DisableInt
                                   (0248) ;
                                   (0249) ;  DESCRIPTION:
                                   (0250) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                   (0251) ;     associated with this User Module.
                                   (0252) ;
                                   (0253) ;-----------------------------------------------------------------------------
                                   (0254) ;
                                   (0255) ;  ARGUMENTS:  none
                                   (0256) ;
                                   (0257) ;  RETURNS:  none
                                   (0258) ;
                                   (0259) ;  SIDE EFFECTS:
                                   (0260) ;    The A and X registers may be modified by this or future implementations
                                   (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0264) ;    functions.
                                   (0265) ;
                                   (0266)  RECEIVE_DisableInt:
                                   (0267) _RECEIVE_DisableInt:
                                   (0268)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0269)    M8C_DisableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0270)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0271)    ret
0B30: 5D 2B    MOV   A,REG[43]     (0272) .ENDSECTION
                                   (0273) 
0B32: 7F       RET                 (0274) .SECTION
                                   (0275) ;-----------------------------------------------------------------------------
                                   (0276) ;  FUNCTION NAME: RECEIVE_Start(BYTE bParity)
                                   (0277) ;
                                   (0278) ;  DESCRIPTION:
                                   (0279) ;    Sets the start bit and parity in the Control register of this user module.
                                   (0280) ;
                                   (0281) ;-----------------------------------------------------------------------------
                                   (0282) ;
                                   (0283) ;  ARGUMENTS:
                                   (0284) ;    BYTE bParity - parity of received data.  Use defined masks.
                                   (0285) ;    passed in A register.
                                   (0286) ;
                                   (0287) ;  RETURNS: none
                                   (0288) ;
                                   (0289) ;  SIDE EFFECTS:
                                   (0290) ;    The A and X registers may be modified by this or future implementations
                                   (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0294) ;    functions.
                                   (0295) ;
                                   (0296)  RECEIVE_Start:
                                   (0297) _RECEIVE_Start:
                                   (0298)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0299)    or    A, bfCONTROL_REG_START_BIT
                                   (0300)    mov   REG[RECEIVE_CONTROL_REG], A
                                   (0301)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0302)    ret
                                   (0303) .ENDSECTION
                                   (0304) 
                                   (0305) .SECTION
                                   (0306) ;-----------------------------------------------------------------------------
                                   (0307) ;  FUNCTION NAME: RECEIVE_Stop
                                   (0308) ;
                                   (0309) ;  DESCRIPTION:
                                   (0310) ;     Disables RX8 operation.
0B33: 49 2B 08 TST   REG[43],8     (0311) ;
0B36: AF FC    JZ    0x0B33        (0312) ;-----------------------------------------------------------------------------
                                   (0313) ;
0B38: 5D 2A    MOV   A,REG[42]     (0314) ;  ARGUMENTS: none
                                   (0315) ;
0B3A: 7F       RET                 (0316) ;  RETURNS: none
                                   (0317) ;
                                   (0318) ;  SIDE EFFECTS:
                                   (0319) ;    The A and X registers may be modified by this or future implementations
                                   (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0323) ;    functions.
                                   (0324) ;
                                   (0325)  RECEIVE_Stop:
                                   (0326) _RECEIVE_Stop:
                                   (0327)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0328)    and   REG[RECEIVE_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0329)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0330)    ret
                                   (0331) .ENDSECTION
                                   (0332) 
                                   (0333) .SECTION
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  FUNCTION NAME: RECEIVE_bReadRxData
                                   (0336) ;
                                   (0337) ;  DESCRIPTION:
                                   (0338) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0339) ;     sure data is valid.
                                   (0340) ;
                                   (0341) ;-----------------------------------------------------------------------------
                                   (0342) ;
                                   (0343) ;  ARGUMENTS:  none
                                   (0344) ;
                                   (0345) ;  RETURNS:
0B3B: 5D 2B    MOV   A,REG[43]     (0346) ;    bRxData - returned in A.
0B3D: 08       PUSH  A             (0347) ;
0B3E: 21 08    AND   A,8           (0348) ;  SIDE EFFECTS:
0B40: B0 04    JNZ   0x0B45        (0349) ;    The A and X registers may be modified by this or future implementations
0B42: 18       POP   A             (0350) ;    of this function.  The same is true for all RAM page pointer registers in
0B43: 80 0B    JMP   0x0B4F        (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
0B45: 5D 2A    MOV   A,REG[42]     (0354) ;
0B47: 4B       SWAP  A,X           (0355)  RECEIVE_bReadRxData:
                                   (0356) _RECEIVE_bReadRxData:
0B48: 18       POP   A             (0357)  bRECEIVE_ReadRxData:
0B49: 21 A0    AND   A,160         (0358) _bRECEIVE_ReadRxData:
0B4B: B0 03    JNZ   0x0B4F        (0359)    RAM_PROLOGUE RAM_USE_CLASS_1
0B4D: 4B       SWAP  A,X           (0360)    mov A, REG[RECEIVE_RX_BUFFER_REG]
                                   (0361)    RAM_EPILOGUE RAM_USE_CLASS_1
0B4E: 7F       RET                 (0362)    ret
                                   (0363) .ENDSECTION
                                   (0364) 
0B4F: 50 00    MOV   A,0           (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: RECEIVE_bReadRxStatus
                                   (0368) ;
0B51: 7F       RET                 (0369) ;  DESCRIPTION:
                                   (0370) ;    Reads the RX Status bits in the Control/Status register.
                                   (0371) ;
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:  none
                                   (0375) ;
                                   (0376) ;  RETURNS:
                                   (0377) ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
                                   (0378) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  RECEIVE_bReadRxStatus:
                                   (0388) _RECEIVE_bReadRxStatus:
                                   (0389)  bRECEIVE_ReadRxStatus:
                                   (0390) _bRECEIVE_ReadRxStatus:
                                   (0391)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0392)    mov A,  REG[RECEIVE_CONTROL_REG]
                                   (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0394)    ret
                                   (0395) .ENDSECTION
                                   (0396) 
                                   (0397) ;-----------------------------------------------
                                   (0398) ; High Level RX functions
                                   (0399) ;-----------------------------------------------
                                   (0400) 
                                   (0401) .SECTION
                                   (0402) ;-----------------------------------------------------------------------------
                                   (0403) ;  FUNCTION NAME: RECEIVE_cGetChar
                                   (0404) ;
                                   (0405) ;  DESCRIPTION:
0B52: 5D 2B    MOV   A,REG[43]     (0406) ;     Read character from UART RX port.
                                   (0407) ;
0B54: 21 E8    AND   A,232         (0408) ;
0B56: 08       PUSH  A             (0409) ;  ARGUMENTS:
0B57: 21 08    AND   A,8           (0410) ;      none
0B59: B0 07    JNZ   0x0B61        (0411) ;
0B5B: 18       POP   A             (0412) ;  RETURNS:
0B5C: 29 01    OR    A,1           (0413) ;     char that is returned from UART
0B5E: 4B       SWAP  A,X           (0414) ;
0B5F: 80 07    JMP   0x0B67        (0415) ;  SIDE EFFECTS:
                                   (0416) ;    The A and X registers may be modified by this or future implementations
                                   (0417) ;    of this function.  The same is true for all RAM page pointer registers in
0B61: 18       POP   A             (0418) ;    the Large Memory Model.  When necessary, it is the calling function's
0B62: 21 E0    AND   A,224         (0419) ;    responsibility to perserve their values across calls to fastcall16 
0B64: 4B       SWAP  A,X           (0420) ;    functions.
0B65: 5D 2A    MOV   A,REG[42]     (0421) ;    
                                   (0422) ;    Program flow will stay in this function until a character is received.
                                   (0423) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0424) ;    the delay between characters is less than the watchdog timeout.
                                   (0425) ;
0B67: 7F       RET                 (0426)  RECEIVE_cGetChar:
                                   (0427) _RECEIVE_cGetChar:
                                   (0428)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0429) 
                                   (0430) .getChar_Loop:
                                   (0431)    tst REG[RECEIVE_CONTROL_REG],RECEIVE_RX_REG_FULL   ; Check if a character is ready
                                   (0432)    jz  .getChar_Loop                                        ; If not loop
                                   (0433) 
                                   (0434)    mov A, REG[RECEIVE_RX_BUFFER_REG]             ; Get character
                                   (0435)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0436)    ret
                                   (0437) .ENDSECTION
                                   (0438) 
                                   (0439) .SECTION
                                   (0440) ;-----------------------------------------------------------------------------
                                   (0441) ;  FUNCTION NAME: RECEIVE_cReadChar
                                   (0442) ;
                                   (0443) ;  DESCRIPTION:
                                   (0444) ;     Read character from UART RX port.
                                   (0445) ;
                                   (0446) ;  ARGUMENTS:
                                   (0447) ;      none
                                   (0448) ;
                                   (0449) ;  RETURNS:
                                   (0450) ;     char that is returned from UART
                                   (0451) ;
                                   (0452) ;  SIDE EFFECTS:
                                   (0453) ;    The A and X registers may be modified by this or future implementations
                                   (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0457) ;    functions.
                                   (0458) ;
                                   (0459) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                   (0460) ;    implies a valid character or an error condition occured.
                                   (0461) ;
                                   (0462)  RECEIVE_cReadChar:
                                   (0463) _RECEIVE_cReadChar:
                                   (0464)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0465) 
                                   (0466)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0467)    push A
                                   (0468)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
0B68: 62 D0 00 MOV   REG[208],0    (0469)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0B6B: 55 45 00 MOV   [69],0        (0470)    pop  A
0B6E: 62 D0 00 MOV   REG[208],0    (0471)    jmp  .RX_NO_VALID_CHAR
0B71: 55 9F 00 MOV   [TIMEOUT+3],0 (0472) 
0B74: 62 D0 00 MOV   REG[208],0    (0473) .RX_DATA_RDY:
0B77: 55 01 00 MOV   [1],0         (0474)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
0B7A: 26 00 00 AND   [0],0         (0475)    swap A,X                                                ; determine if data is valid
                                   (0476) 
0B7D: 7F       RET                 (0477)    pop  A                                                  ; Check for errors
                                   (0478)    and  A,(RECEIVE_RX_PARITY_ERROR | RECEIVE_RX_FRAMING_ERROR)
                                   (0479)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0480)    swap A,X                                                ; Put data in A and exit
                                   (0481)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0482)    ret
                                   (0483) 
                                   (0484) .RX_NO_VALID_CHAR:
                                   (0485)    mov A,0x00                                              ; Zero out character
                                   (0486) 
                                   (0487)  End_RECEIVE_cReadChar:
                                   (0488)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)    ret
                                   (0490) .ENDSECTION
                                   (0491) 																			
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: RECEIVE_iReadChar
                                   (0495) ;
                                   (0496) ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0497) ; to just set a value in the upper byte if error conditions exists.
                                   (0498) ;
                                   (0499) ;  DESCRIPTION:
                                   (0500) ;     Read character from UART RX port.
                                   (0501) ;
                                   (0502) ;  ARGUMENTS:
                                   (0503) ;      none
                                   (0504) ;
                                   (0505) ;  RETURNS:
                                   (0506) ;     An integer value is returned.  A negative value inplies and error
                                   (0507) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0508) ;
                                   (0509) ;     Error Codes:
0B7E: 62 D0 00 MOV   REG[208],0    (0510) ;        0x80CC    Parity Error
0B81: 51 00    MOV   A,[0]         (0511) ;        0x40CC    Overrun Error
0B83: 21 01    AND   A,1           (0512) ;        0x20CC    Framing Error
                                   (0513) ;        0x01CC    No Data available
0B85: 7F       RET                 (0514) ;
                                   (0515) ;  SIDE EFFECTS:
                                   (0516) ;    The A and X registers may be modified by this or future implementations
                                   (0517) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0518) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0519) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0520) ;    functions.
                                   (0521) ;
                                   (0522)  RECEIVE_iReadChar:
                                   (0523) _RECEIVE_iReadChar:
                                   (0524)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0525) 
                                   (0526)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0527)                                                            ; Mask only errors and data ready
                                   (0528)    and  A,(RECEIVE_RX_ERROR|RECEIVE_RX_REG_FULL)
                                   (0529)    push A
                                   (0530)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
                                   (0531)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (0532)    pop  A
                                   (0533)    or   A,RECEIVE_RX_NO_DATA                               ; Add no data flag
                                   (0534)    swap A,X
                                   (0535)    jmp  End_RECEIVE_iReadChar
                                   (0536) 
                                   (0537) .RX_GET_DATA:
                                   (0538)    pop  A
                                   (0539)    and  A,RECEIVE_RX_ERROR
                                   (0540)    swap A,X
                                   (0541)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
                                   (0542)                                                            ; determine if data is valid
                                   (0543) 
                                   (0544)  End_RECEIVE_iReadChar:
                                   (0545)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0546)    ret
                                   (0547) .ENDSECTION
                                   (0548) 
                                   (0549) 
                                   (0550) 
                                   (0551) IF (RECEIVE_RXBUF_ENABLE)
                                   (0552) .SECTION
0B86: 62 D0 00 MOV   REG[208],0    (0553) ;-----------------------------------------------------------------------------
0B89: 51 00    MOV   A,[0]         (0554) ;-----------------------------------------------------------------------------
0B8B: 21 F0    AND   A,240         (0555) ;
0B8D: 26 00 0F AND   [0],15        (0556) ;     Command Buffer commands
                                   (0557) ;
0B90: 7F       RET                 (0558) ;-----------------------------------------------------------------------------
                                   (0559) ;-----------------------------------------------------------------------------
                                   (0560) 
                                   (0561) ;-----------------------------------------------------------------------------
                                   (0562) ;  FUNCTION NAME: RECEIVE_CmdReset
                                   (0563) ;
                                   (0564) ;  DESCRIPTION:
                                   (0565) ;     Reset command string and status flags
                                   (0566) ;
                                   (0567) ;  ARGUMENTS:
                                   (0568) ;     none.
                                   (0569) ;
                                   (0570) ;  RETURNS:
                                   (0571) ;     none.
                                   (0572) ;
                                   (0573) ;  SIDE EFFECTS:
                                   (0574) ;    The A and X registers may be modified by this or future implementations
                                   (0575) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0576) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0577) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0578) ;    functions.
                                   (0579) ;          
                                   (0580) ;    Currently only the page pointer registers listed below are modified: 
                                   (0581) ;          CUR_PP
                                   (0582) ;
                                   (0583) ;  THEORY of OPERATION or PROCEDURE:
                                   (0584) ;     Clear the command buffer, command counter, and flag.
                                   (0585) ;
                                   (0586)  RECEIVE_CmdReset:
0B91: 62 D0 00 MOV   REG[208],0    (0587) _RECEIVE_CmdReset:
0B94: 51 01    MOV   A,[1]         (0588)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0589)    RAM_SETPAGE_CUR >RECEIVE_aRxBuffer
0B96: 7F       RET                 (0590)    mov [RECEIVE_aRxBuffer], 0x00
                                   (0591)    RAM_SETPAGE_CUR >ptrParam
                                   (0592)    mov [ptrParam],0x00
                                   (0593)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
                                   (0594)    mov [RECEIVE_bRxCnt], 0x00
                                   (0595)    and [RECEIVE_fStatus], 0x00
                                   (0596)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0597)    ret
                                   (0598) .ENDSECTION
                                   (0599) 
                                   (0600) .SECTION
                                   (0601) ;-----------------------------------------------------------------------------
                                   (0602) ;  FUNCTION NAME: RECEIVE_bCmdCheck
                                   (0603) ;
                                   (0604) ;  DESCRIPTION:
                                   (0605) ;     Check to see if valid command in buffer.
                                   (0606) ;
                                   (0607) ;  ARGUMENTS:
                                   (0608) ;     none.
                                   (0609) ;
                                   (0610) ;  RETURNS:
                                   (0611) ;     BYTE  fStatus - Status of command receive buffer.
                                   (0612) ;                     Returns non-zero value in A if command is valid.
                                   (0613) ;
                                   (0614) ;  SIDE EFFECTS:
                                   (0615) ;    The A and X registers may be modified by this or future implementations
                                   (0616) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0617) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0618) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0619) ;    functions.
                                   (0620) ;          
                                   (0621) ;    Currently only the page pointer registers listed below are modified: 
                                   (0622) ;          CUR_PP
                                   (0623) ;
                                   (0624) ;  THEORY of OPERATION or PROCEDURE:
                                   (0625) ;     Read the status and control register.
                                   (0626) ;
                                   (0627)  RECEIVE_bCmdCheck:
                                   (0628) _RECEIVE_bCmdCheck:
                                   (0629)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0630)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0631)    mov A,  [RECEIVE_fStatus]
                                   (0632)    and A, RECEIVE_RX_BUF_CMDTERM                 ; Mask off Command status
                                   (0633)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0634)    ret
                                   (0635) .ENDSECTION
                                   (0636) 
                                   (0637) .SECTION
                                   (0638) ;-----------------------------------------------------------------------------
                                   (0639) ;  FUNCTION NAME: RECEIVE_bErrCheck
                                   (0640) ;
                                   (0641) ;  DESCRIPTION:
                                   (0642) ;     Check to see if an error has occured since last CmdReset
                                   (0643) ;
0B97: 70 BF    AND   F,191         (0644) ;  ARGUMENTS:
0B99: 62 D0 00 MOV   REG[208],0    (0645) ;     none.
0B9C: 62 D3 00 MOV   REG[211],0    (0646) ;
                                   (0647) ;  RETURNS:
0B9F: 50 45    MOV   A,69          (0648) ;     BYTE  fStatus - Status of command receive buffer.
0BA1: 02 9F    ADD   A,[TIMEOUT+3] (0649) ;                     Returns non-zero value in A if command is valid.
0BA3: 5C       MOV   X,A           (0650) ;           0x80 => Parity Error
                                   (0651) ;           0x40 => OverRun Error
0BA4: 52 00    MOV   A,[X+0]       (0652) ;           0x20 => Framing Error
0BA6: B0 04    JNZ   0x0BAB        (0653) ;           0x10 => Software Buffer OverRun
0BA8: 10       PUSH  X             (0654) ;
0BA9: 80 33    JMP   0x0BDD        (0655) ;  SIDE EFFECTS:
                                   (0656) ;    The A and X registers may be modified by this or future implementations
                                   (0657) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0658) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0659) ;    responsibility to perserve their values across calls to fastcall16 
0BAB: 39 00    CMP   A,0           (0660) ;    functions.
0BAD: B0 11    JNZ   0x0BBF        (0661) ;          
0BAF: 75       INC   X             (0662) ;    Currently only the page pointer registers listed below are modified: 
0BB0: 76 9F    INC   [TIMEOUT+3]   (0663) ;          CUR_PP
0BB2: 52 00    MOV   A,[X+0]       (0664) ;
0BB4: 3C 9F 3F CMP   [TIMEOUT+3],63(0665) ;     Error Status is clear when read.
0BB7: BF F3    JNZ   0x0BAB        (0666) ;
                                   (0667) ;  THEORY of OPERATION or PROCEDURE:
                                   (0668) ;     Read RX buffer error status and clear status
0BB9: 10       PUSH  X             (0669) ;
                                   (0670)  RECEIVE_bErrCheck:
0BBA: 56 00 00 MOV   [X+0],0       (0671) _RECEIVE_bErrCheck:
0BBD: 80 1F    JMP   0x0BDD        (0672)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0673)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0674)    mov A,  [RECEIVE_fStatus]
0BBF: 10       PUSH  X             (0675)    and A, RECEIVE_RX_BUF_ERROR                   ; Mask off Error status
                                   (0676)    and [RECEIVE_fStatus], ~RECEIVE_RX_BUF_ERROR
                                   (0677)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0678)    ret
0BC0: 75       INC   X             (0679) .ENDSECTION
0BC1: 76 9F    INC   [TIMEOUT+3]   (0680) 
0BC3: 3C 9F 3F CMP   [TIMEOUT+3],63(0681) .SECTION
0BC6: AF F3    JZ    0x0BBA        (0682) ;-----------------------------------------------------------------------------
0BC8: 52 00    MOV   A,[X+0]       (0683) ;  FUNCTION NAME: RECEIVE_bCmdLength
0BCA: A0 12    JZ    0x0BDD        (0684) ;
0BCC: 39 00    CMP   A,0           (0685) ;  DESCRIPTION:
0BCE: BF F1    JNZ   0x0BC0        (0686) ;     Get length of command string
                                   (0687) ;
0BD0: 56 00 00 MOV   [X+0],0       (0688) ;  ARGUMENTS:
0BD3: 76 9F    INC   [TIMEOUT+3]   (0689) ;     none.
0BD5: 3C 9F 3F CMP   [TIMEOUT+3],63(0690) ;
0BD8: B0 04    JNZ   0x0BDD        (0691) ;  RETURNS:
0BDA: 55 9F 3F MOV   [TIMEOUT+3],63(0692) ;     BYTE  bRxCnt    Returns the command length in A.
                                   (0693) ;
                                   (0694) ;  SIDE EFFECTS:
                                   (0695) ;    The A and X registers may be modified by this or future implementations
0BDD: 20       POP   X             (0696) ;    of this function.  The same is true for all RAM page pointer registers in
0BDE: 10       PUSH  X             (0697) ;    the Large Memory Model.  When necessary, it is the calling function's
0BDF: 3D 00 00 CMP   [X+0],0       (0698) ;    responsibility to perserve their values across calls to fastcall16 
0BE2: B0 0B    JNZ   0x0BEE        (0699) ;    functions.
0BE4: 20       POP   X             (0700) ;          
0BE5: 57 00    MOV   X,0           (0701) ;    Currently only the page pointer registers listed below are modified: 
0BE7: 50 00    MOV   A,0           (0702) ;          CUR_PP
0BE9: 70 3F    AND   F,63
0BEB: 71 C0    OR    F,192         (0703) ;
                                   (0704)  RECEIVE_bCmdLength:
0BED: 7F       RET                 (0705) _RECEIVE_bCmdLength:
                                   (0706)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0707)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
0BEE: 20       POP   X             (0708)    mov A,  [RECEIVE_bRxCnt]
0BEF: 50 00    MOV   A,0           (0709)    RAM_EPILOGUE RAM_USE_CLASS_4
0BF1: 70 3F    AND   F,63
0BF3: 71 C0    OR    F,192         (0710)    ret
                                   (0711) .ENDSECTION
0BF5: 7F       RET                 (0712) 
                                   (0713) .SECTION
                                   (0714) ;-----------------------------------------------------------------------------
                                   (0715) ;  FUNCTION NAME: RECEIVE_szGetParam
                                   (0716) ;
                                   (0717) ;  DESCRIPTION:
                                   (0718) ;      Return next parameter from UART Rx buffer
                                   (0719) ;
                                   (0720) ;
                                   (0721) ;  ARGUMENTS:  none
                                   (0722) ;
                                   (0723) ;  RETURNS:
                                   (0724) ;     A => MSB of parameter address
                                   (0725) ;     X => LSB of parameter address
                                   (0726) ;
                                   (0727) ;  SIDE EFFECTS:
                                   (0728) ;    The A and X registers may be modified by this or future implementations
                                   (0729) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0730) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0731) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0732) ;    functions.
                                   (0733) ;          
                                   (0734) ;    Currently only the page pointer registers listed below are modified:
                                   (0735) ;          CUR_PP
                                   (0736) ;          IDX_PP
                                   (0737) ;
                                   (0738) ;     The receive string is modified by placing Null characters at the end
                                   (0739) ;     of each parameter as they are recovered.
                                   (0740) ;
                                   (0741) ;  THEORY OF OPERATION:
0BF6: 62 D0 00 MOV   REG[208],0    (0742) ;     This function is a stateful generator of addresses to the "parameters"
                                   (0743) ;     of an input "Command". It scans the (optional) input buffer and breaks
0BF9: 50 45    MOV   A,69          (0744) ;     each lexically distinct element into a null-terminated string by replacing
0BFB: 02 9F    ADD   A,[TIMEOUT+3] (0745) ;     delimiters with nulls, as appropriate. The state of the generator is 
0BFD: 5C       MOV   X,A           (0746) ;     maintained by the private variable ptrParam, which is a buffer-relative
0BFE: 50 00    MOV   A,0           (0747) ;     offset. The generator is initialized by a call to the function
                                   (0748) ;     RECEIVE_CmdReset which resets the entire buffer to the 'empty'
                                   (0749) ;     state. Typically this function, RECEIVE_szGetParam, is
0C01: 7E       RETI                (0750) ;     not called until the buffer has been loaded with an entire command

FILE: lib\comp_serialint.asm
                                   (0102) ;;*****************************************************************************
                                   (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME:   COMP_SERIALINT.asm
                                   (0105) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                   (0109) ;;-----------------------------------------------------------------------------
                                   (0110) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0111) ;;*****************************************************************************
                                   (0112) ;;*****************************************************************************
                                   (0113) 
                                   (0114) 
                                   (0115) include "COMP_SERIAL.inc"
                                   (0116) include "memory.inc"
                                   (0117) include "m8c.inc"
                                   (0118) 
                                   (0119) ;-----------------------------------------------
                                   (0120) ;  Global Symbols
                                   (0121) ;-----------------------------------------------
                                   (0122) export  _COMP_SERIAL_TX_ISR
                                   (0123) export  _COMP_SERIAL_RX_ISR
                                   (0124) 
                                   (0125) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0126) export  COMP_SERIAL_aRxBuffer
                                   (0127) export _COMP_SERIAL_aRxBuffer
                                   (0128) export  COMP_SERIAL_bRxCnt
                                   (0129) export _COMP_SERIAL_bRxCnt
                                   (0130) export  COMP_SERIAL_fStatus
                                   (0131) export _COMP_SERIAL_fStatus
                                   (0132) ENDIF
                                   (0133) 
                                   (0134) 
                                   (0135) ;-----------------------------------------------
                                   (0136) ; Variable Allocation
                                   (0137) ;-----------------------------------------------
                                   (0138) AREA InterruptRAM (RAM, REL, CON)
                                   (0139) 
                                   (0140) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0141)  COMP_SERIAL_fStatus:
                                   (0142) _COMP_SERIAL_fStatus:      BLK  1
                                   (0143)  COMP_SERIAL_bRxCnt:
                                   (0144) _COMP_SERIAL_bRxCnt:       BLK  1
                                   (0145) AREA COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0146)  COMP_SERIAL_aRxBuffer:
                                   (0147) _COMP_SERIAL_aRxBuffer:    BLK COMP_SERIAL_RX_BUFFER_SIZE
                                   (0148) ENDIF
                                   (0149) 
                                   (0150) AREA InterruptRAM (RAM, REL, CON)
                                   (0151) 
0C02: 08       PUSH  A             (0152) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0C03: 10       PUSH  X             (0153) ;---------------------------------------------------
0C04: 5D D3    MOV   A,REG[211]
                                   (0154) ; Insert your custom declarations below this banner
                                   (0155) ;---------------------------------------------------
0C06: 08       PUSH  A             (0156) 
                                   (0157) ;------------------------
                                   (0158) ;  Includes
0C07: 58 04    MOV   X,[4]         (0159) ;------------------------
0C09: 5D 3F    MOV   A,REG[63]     (0160) 
0C0B: 08       PUSH  A             (0161) 
                                   (0162) ;------------------------
0C0C: 21 08    AND   A,8           (0163) ;  Constant Definitions
0C0E: B0 04    JNZ   0x0C13        (0164) ;------------------------
0C10: 18       POP   A             (0165) 
0C11: 80 5E    JMP   0x0C70        (0166) 
                                   (0167) ;------------------------
                                   (0168) ; Variable Allocation
0C13: 18       POP   A             (0169) ;------------------------
                                   (0170) 
                                   (0171) 
0C14: 21 E0    AND   A,224         (0172) ;---------------------------------------------------
0C16: A0 12    JZ    0x0C29        (0173) ; Insert your custom declarations above this banner
                                   (0174) ;---------------------------------------------------
0C18: 2C 03    OR    [3],A         (0175) ;@PSoC_UserCode_END@ (Do not change this line.)
0C1A: 49 3E 00 TST   REG[62],0     (0176) 
0C1D: 21 20    AND   A,32          (0177) 
0C1F: A0 50    JZ    0x0C70        (0178) AREA UserModules (ROM, REL, CON)
                                   (0179) 
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: _COMP_SERIAL_TX_ISR
0C21: 41 3F FE AND   REG[63],254   (0182) ;
0C24: 43 3F 01 OR    REG[63],1     (0183) ;  DESCRIPTION:
0C27: 80 48    JMP   0x0C70        (0184) ;     UART TX interrupt handler for instance COMP_SERIAL.
                                   (0185) ;
                                   (0186) ;     This is a place holder function.  If the user requires use of an interrupt
                                   (0187) ;     handler for this function, then place code where specified.
0C29: 5D 3E    MOV   A,REG[62]     (0188) ;-----------------------------------------------------------------------------
                                   (0189) 
                                   (0190) _COMP_SERIAL_TX_ISR:
0C2B: 47 03 01 TST   [3],1         (0191)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
0C2E: B0 41    JNZ   0x0C70        (0192)    ;---------------------------------------------------
                                   (0193)    ; Insert your custom code below this banner
0C30: 39 3B    CMP   A,59          (0194)    ;---------------------------------------------------
0C32: B0 14    JNZ   0x0C47        (0195)    ;   NOTE: interrupt service routines must preserve
0C34: 2E 03 01 OR    [3],1         (0196)    ;   the values of the A and X CPU registers.
                                   (0197)    
                                   (0198)    ;---------------------------------------------------
                                   (0199)    ; Insert your custom code above this banner
0C37: 62 D3 00 MOV   REG[211],0    (0200)    ;---------------------------------------------------
0C3A: 70 3F    AND   F,63
0C3C: 71 80    OR    F,128         (0201)    ;@PSoC_UserCode_END@ (Do not change this line.)
0C3E: 56 05 00 MOV   [X+5],0       (0202)    reti
0C41: 70 3F    AND   F,63
0C43: 71 00    OR    F,0           (0203) 
0C45: 80 2A    JMP   0x0C70        (0204) 
                                   (0205) ;-----------------------------------------------------------------------------
                                   (0206) ;  FUNCTION NAME: _COMP_SERIAL_RX_ISR
                                   (0207) ;
                                   (0208) ;  DESCRIPTION:
                                   (0209) ;     UART RX interrupt handler for instance COMP_SERIAL.
                                   (0210) ;     This ISR handles the background processing of received characters if
                                   (0211) ;     the buffer is enabled.
                                   (0212) ;
                                   (0213) ;
                                   (0214) ;  The following assumes that the RX buffer feature has been enabled.
                                   (0215) ;
                                   (0216) ;  SIDE EFFECTS:
                                   (0217) ;     There are 3 posible errors that may occur with the serial port.
0C47: 39 20    CMP   A,32          (0218) ;      1) Parity Error
0C49: C0 26    JC    0x0C70        (0219) ;      2) Framing Error
                                   (0220) ;      3) OverRun Error
                                   (0221) ;
                                   (0222) ;  This user module check for parity and framing error.  If either of these
                                   (0223) ;  two errors are detected, the data is read and ignored.  When an overRun
0C4B: 62 D3 00 MOV   REG[211],0    (0224) ;  error occurs, the last byte was lost, but the current byte is valid.  For
0C4E: 3C 04 3F CMP   [4],63        (0225) ;  this reason this error is ignored at this time.  Code could be added to
0C51: C0 11    JC    0x0C63        (0226) ;  this ISR to set a flag if an error condition occurs.
0C53: 70 3F    AND   F,63
0C55: 71 80    OR    F,128         (0227) ;
0C57: 56 05 00 MOV   [X+5],0       (0228) ;  THEORY of OPERATION:
0C5A: 70 3F    AND   F,63
0C5C: 71 00    OR    F,0           (0229) ;     When using the RX buffer feature, the ISR collects received characters
0C5E: 2E 03 10 OR    [3],16        (0230) ;     in a buffer until the user defined command terminator is detected.  After
0C61: 80 0E    JMP   0x0C70        (0231) ;     the command terminator is detected, the command bit is set and all other
0C63: 70 3F    AND   F,63
                                   (0232) ;     characters will be ignored until the command bit is reset.  Up to
                                   (0233) ;     buffer_size - 1 characters will be collected waiting for a command
                                   (0234) ;     terminator.  After that, the characters will be discarded, although
0C65: 71 80    OR    F,128         (0235) ;     a command determinator will still cause the command bit to be set.
0C67: 54 05    MOV   [X+5],A       (0236) ;
0C69: 70 3F    AND   F,63
0C6B: 71 00    OR    F,0           (0237) ;-----------------------------------------------------------------------------
0C6D: 75       INC   X             (0238) _COMP_SERIAL_RX_ISR:
0C6E: 5A 04    MOV   [4],X         (0239) 
0C70: 18       POP   A
                                   (0240)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0241)    ;---------------------------------------------------
                                   (0242)    ; Insert your custom code below this banner
0C71: 60 D3    MOV   REG[211],A    (0243)    ;---------------------------------------------------
                                   (0244)    ;   NOTE: interrupt service routines must preserve
                                   (0245)    ;   the values of the A and X CPU registers.
                                   (0246) 
0C73: 20       POP   X             (0247)    ;---------------------------------------------------
0C74: 18       POP   A             (0248)    ; Insert your custom code above this banner
                                   (0249)    ;---------------------------------------------------
                                   (0250)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0251) 
                                   (0252) IF (COMP_SERIAL_RXBUF_ENABLE)
0C76: 43 E1 40 OR    REG[225],64   (0253)    push A

FILE: lib\comp_serial.asm
0C79: 43 E1 80 OR    REG[225],128  (0180) ;;*****************************************************************************
                                   (0181) ;;*****************************************************************************
0C7C: 7F       RET                 (0182) ;;  Filename:   COMP_SERIAL.asm
                                   (0183) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0184) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0185) ;;
                                   (0186) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                   (0187) ;;                22/24/25/26/27xxx families.
                                   (0188) ;;
                                   (0189) ;;
                                   (0190) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0191) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0192) ;;        This means it is the caller's responsibility to preserve any values
                                   (0193) ;;        in the X and A registers that are still needed after the API functions
                                   (0194) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0195) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0196) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0197) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0198) ;;-----------------------------------------------------------------------------
                                   (0199) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0200) ;;*****************************************************************************
                                   (0201) ;;*****************************************************************************
                                   (0202) 
                                   (0203) 
                                   (0204) include "m8c.inc"
                                   (0205) include "memory.inc"
                                   (0206) include "COMP_SERIAL.inc"
                                   (0207) 
                                   (0208) ;-----------------------------------------------
                                   (0209) ;  Global Symbols
                                   (0210) ;-----------------------------------------------
0C7D: 41 E1 BF AND   REG[225],191  (0211) ;-------------------------------------------------------------------
0C80: 41 E1 7F AND   REG[225],127  (0212) ;  Declare the functions global for both assembler and C compiler.
                                   (0213) ;
0C83: 7F       RET                 (0214) ;  Note that there are two names for each API. First name is
                                   (0215) ;  assembler reference. Name with underscore is name refence for
                                   (0216) ;  C compiler.  Calling function in C source code does not require
                                   (0217) ;  the underscore.
                                   (0218) ;-------------------------------------------------------------------
                                   (0219) export  COMP_SERIAL_SetTxIntMode
                                   (0220) export _COMP_SERIAL_SetTxIntMode
                                   (0221) export  COMP_SERIAL_EnableInt
                                   (0222) export _COMP_SERIAL_EnableInt
                                   (0223) export  COMP_SERIAL_DisableInt
                                   (0224) export _COMP_SERIAL_DisableInt
                                   (0225) 
                                   (0226) export  COMP_SERIAL_Start
                                   (0227) export _COMP_SERIAL_Start
                                   (0228) export  COMP_SERIAL_Stop
                                   (0229) export _COMP_SERIAL_Stop
                                   (0230) export  COMP_SERIAL_SendData
                                   (0231) export _COMP_SERIAL_SendData
                                   (0232) export  COMP_SERIAL_bReadTxStatus
                                   (0233) export _COMP_SERIAL_bReadTxStatus
                                   (0234) export  COMP_SERIAL_bReadRxData
                                   (0235) export _COMP_SERIAL_bReadRxData
                                   (0236) export  COMP_SERIAL_bReadRxStatus
                                   (0237) export _COMP_SERIAL_bReadRxStatus
                                   (0238) 
                                   (0239) export  COMP_SERIAL_IntCntl
                                   (0240) export _COMP_SERIAL_IntCntl
                                   (0241) 
                                   (0242) export  COMP_SERIAL_TxIntMode
                                   (0243) export _COMP_SERIAL_TxIntMode
                                   (0244) 
                                   (0245) export  COMP_SERIAL_PutSHexByte
                                   (0246) export _COMP_SERIAL_PutSHexByte
0C84: 71 10    OR    F,16          (0247) export  COMP_SERIAL_PutSHexInt
0C86: 21 01    AND   A,1           (0248) export _COMP_SERIAL_PutSHexInt
0C88: A0 07    JZ    0x0C90        (0249) 
0C8A: 43 38 10 OR    REG[56],16    (0250) export  COMP_SERIAL_CPutString
0C8D: 70 EF    AND   F,239         (0251) export _COMP_SERIAL_CPutString
                                   (0252) export  COMP_SERIAL_PutString
0C8F: 7F       RET                 (0253) export _COMP_SERIAL_PutString
                                   (0254) export  COMP_SERIAL_PutChar
                                   (0255) export _COMP_SERIAL_PutChar
0C90: 41 38 EF AND   REG[56],239   (0256) export  COMP_SERIAL_Write
0C93: 70 EF    AND   F,239         (0257) export _COMP_SERIAL_Write
                                   (0258) export  COMP_SERIAL_CWrite
0C95: 7F       RET                 (0259) export _COMP_SERIAL_CWrite
                                   (0260) 
                                   (0261) export  COMP_SERIAL_cGetChar
                                   (0262) export _COMP_SERIAL_cGetChar
                                   (0263) export  COMP_SERIAL_cReadChar
                                   (0264) export _COMP_SERIAL_cReadChar
                                   (0265) export  COMP_SERIAL_iReadChar
                                   (0266) export _COMP_SERIAL_iReadChar
                                   (0267) export  COMP_SERIAL_PutCRLF
                                   (0268) export _COMP_SERIAL_PutCRLF
                                   (0269) 
                                   (0270) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0271) export  COMP_SERIAL_CmdReset
                                   (0272) export _COMP_SERIAL_CmdReset
                                   (0273) export  COMP_SERIAL_bCmdCheck
                                   (0274) export _COMP_SERIAL_bCmdCheck
                                   (0275) export  COMP_SERIAL_bCmdLength
                                   (0276) export _COMP_SERIAL_bCmdLength
                                   (0277) export  COMP_SERIAL_bErrCheck
                                   (0278) export _COMP_SERIAL_bErrCheck
                                   (0279) 
                                   (0280) export  COMP_SERIAL_szGetParam
                                   (0281) export _COMP_SERIAL_szGetParam
                                   (0282) export  COMP_SERIAL_szGetRestOfParams
                                   (0283) export _COMP_SERIAL_szGetRestOfParams
                                   (0284) ENDIF
                                   (0285) 
                                   (0286) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0287) ; WARNING WARNING WARNING
                                   (0288) ; The following exports are for backwards compatibility only and should
                                   (0289) ; not be used for new designs. They may be eliminated in a future release.
0C96: 29 01    OR    A,1           (0290) ; Their status is "NO FURTHER MAINTENANCE". 
0C98: 60 3B    MOV   REG[59],A     (0291) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C9A: 60 3F    MOV   REG[63],A     (0292) export  bCOMP_SERIAL_ReadTxStatus
                                   (0293) export _bCOMP_SERIAL_ReadTxStatus
0C9C: 91 2A    CALL  0x0DC8        (0294) export  bCOMP_SERIAL_ReadRxData
                                   (0295) export _bCOMP_SERIAL_ReadRxData
                                   (0296) export  bCOMP_SERIAL_ReadRxStatus
0C9E: 7F       RET                 (0297) export _bCOMP_SERIAL_ReadRxStatus
                                   (0298) 	
                                   (0299) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0300) ;             END WARNING
                                   (0301) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0302) 
                                   (0303) ;-----------------------------------------------
                                   (0304) ; Variable Allocation
                                   (0305) ;-----------------------------------------------
                                   (0306) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0307)     
                                   (0308) area COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0309)     
                                   (0310)  ptrParam:   BLK  1
                                   (0311) 
                                   (0312) ENDIF
                                   (0313) 
                                   (0314) area text (ROM,REL)
                                   (0315) 
                                   (0316) ;-----------------------------------------------
                                   (0317) ;  EQUATES
                                   (0318) ;-----------------------------------------------
                                   (0319) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                   (0320) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                   (0321) 
                                   (0322) area UserModules (ROM, REL, CON)
                                   (0323) 
                                   (0324) ;=============================================================================
0C9F: 41 3B FE AND   REG[59],254   (0325) ;=============================================================================
0CA2: 41 3F FE AND   REG[63],254   (0326) ;
                                   (0327) ;     Low-Level Commands
0CA5: 7F       RET                 (0328) ;
                                   (0329) ;=============================================================================
                                   (0330) ;=============================================================================
                                   (0331) 
                                   (0332) .SECTION
                                   (0333) ;-----------------------------------------------------------------------------
                                   (0334) ;  FUNCTION NAME: COMP_SERIAL_EnableInt
                                   (0335) ;
                                   (0336) ;  DESCRIPTION:
                                   (0337) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                   (0338) ;     bit associated with this User Module. Remember to call the global
                                   (0339) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0340) ;-----------------------------------------------------------------------------
                                   (0341) ;
                                   (0342) ;  ARGUMENTS:
                                   (0343) ;     none.
                                   (0344) ;
                                   (0345) ;  RETURNS:
                                   (0346) ;     none.
                                   (0347) ;
                                   (0348) ;  SIDE EFFECTS:
                                   (0349) ;    The A and X registers may be modified by this or future implementations
                                   (0350) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
                                   (0354) ;
                                   (0355)  COMP_SERIAL_EnableInt:
0CA6: 60 39    MOV   REG[57],A     (0356) _COMP_SERIAL_EnableInt:
                                   (0357)    RAM_PROLOGUE RAM_USE_CLASS_1
0CA8: 7F       RET                 (0358)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0359)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0360)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0361)    ret
                                   (0362) .ENDSECTION
                                   (0363) 
                                   (0364)     
                                   (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: COMP_SERIAL_DisableInt
                                   (0368) ;
                                   (0369) ;  DESCRIPTION:
                                   (0370) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                   (0371) ;     associated with this User Module.
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:
                                   (0375) ;     none.
                                   (0376) ;
                                   (0377) ;  RETURNS:
                                   (0378) ;     none.
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  COMP_SERIAL_DisableInt:
                                   (0388) _COMP_SERIAL_DisableInt:
0CA9: 5D 3B    MOV   A,REG[59]     (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0390)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
0CAB: 7F       RET                 (0391)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0392)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0393)    ret
                                   (0394) .ENDSECTION
                                   (0395) 
                                   (0396) 
                                   (0397) .SECTION
                                   (0398) ;-----------------------------------------------------------------------------
                                   (0399) ;  FUNCTION NAME: COMP_SERIAL_SetTxIntMode(BYTE bTxIntMode)
                                   (0400) ;
                                   (0401) ;  DESCRIPTION:
                                   (0402) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0403) ;-----------------------------------------------------------------------------
                                   (0404) ;
                                   (0405) ;  ARGUMENTS:
                                   (0406) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0407) ;        Passed in the A register
                                   (0408) ;
                                   (0409) ;  RETURNS:
                                   (0410) ;     none.
                                   (0411) ;
                                   (0412) ;  SIDE EFFECTS:
                                   (0413) ;    The A and X registers may be modified by this or future implementations
                                   (0414) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0415) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0416) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0417) ;    functions.
                                   (0418) ;
                                   (0419) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0420) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0421) ;     on TX register empty or TX transmit complete
0CAC: 5D 3E    MOV   A,REG[62]     (0422) ;
                                   (0423)  COMP_SERIAL_SetTxIntMode:
0CAE: 7F       RET                 (0424) _COMP_SERIAL_SetTxIntMode:
                                   (0425)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0426)    M8C_SetBank1
                                   (0427)    and   A, COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0428)    jz    .SetModeRegEmpty
                                   (0429)    or    REG[COMP_SERIAL_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0430)    M8C_SetBank0
                                   (0431)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0432)    ret
                                   (0433) 
                                   (0434) .SetModeRegEmpty:
                                   (0435)    and   REG[COMP_SERIAL_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0436)    M8C_SetBank0
                                   (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0438)    ret
                                   (0439) .ENDSECTION
                                   (0440) 
                                   (0441) 
                                   (0442) .SECTION
                                   (0443) ;-----------------------------------------------------------------------------
                                   (0444) ;  FUNCTION NAME: COMP_SERIAL_Start(BYTE bParity)
                                   (0445) ;
                                   (0446) ;  DESCRIPTION:
                                   (0447) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0448) ;-----------------------------------------------------------------------------
                                   (0449) ;
                                   (0450) ;  ARGUMENTS:
                                   (0451) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                   (0452) ;        Passed in the A register.
                                   (0453) ;
                                   (0454) ;  RETURNS:
                                   (0455) ;     none.
0CAF: 5D 3F    MOV   A,REG[63]     (0456) ;
                                   (0457) ;  SIDE EFFECTS:
0CB1: 7F       RET                 (0458) ;    The A and X registers may be modified by this or future implementations
                                   (0459) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0460) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0461) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0462) ;    functions.
                                   (0463) ;
                                   (0464)  COMP_SERIAL_Start:
                                   (0465) _COMP_SERIAL_Start:
                                   (0466)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0467)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                   (0468) 
                                   (0469)    or    A, bfCONTROL_REG_START_BIT
                                   (0470)    mov   REG[COMP_SERIAL_TX_CONTROL_REG], A
                                   (0471)    mov   REG[COMP_SERIAL_RX_CONTROL_REG], A
                                   (0472) IF ( COMP_SERIAL_RXBUF_ENABLE )
                                   (0473)    call  _COMP_SERIAL_CmdReset
                                   (0474) ENDIF
                                   (0475)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0476)    ret
                                   (0477) .ENDSECTION
                                   (0478) 
                                   (0479) 
                                   (0480) .SECTION
                                   (0481) ;-----------------------------------------------------------------------------
                                   (0482) ;  FUNCTION NAME: COMP_SERIAL_Stop
                                   (0483) ;
                                   (0484) ;  DESCRIPTION:
                                   (0485) ;     Disables UART operation.
                                   (0486) ;-----------------------------------------------------------------------------
                                   (0487) ;
                                   (0488) ;  ARGUMENTS:
0CB2: 21 01    AND   A,1           (0489) ;     none.
0CB4: 71 10    OR    F,16          (0490) ;
0CB6: 39 01    CMP   A,1           (0491) ;  RETURNS:
0CB8: A0 06    JZ    0x0CBF        (0492) ;     none.
                                   (0493) ;
0CBA: 41 38 EF AND   REG[56],239   (0494) ;  SIDE EFFECTS:
0CBD: 80 04    JMP   0x0CC2        (0495) ;    The A and X registers may be modified by this or future implementations
                                   (0496) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0497) ;    the Large Memory Model.  When necessary, it is the calling function's
0CBF: 43 38 10 OR    REG[56],16    (0498) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0499) ;    functions.
                                   (0500) ;
0CC2: 70 EF    AND   F,239         (0501)  COMP_SERIAL_Stop:
                                   (0502) _COMP_SERIAL_Stop:
0CC4: 7F       RET                 (0503)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0504)    and   REG[COMP_SERIAL_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0505)    and   REG[COMP_SERIAL_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0506)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0507)    ret
                                   (0508) .ENDSECTION
                                   (0509) 
                                   (0510) 
                                   (0511) .SECTION
                                   (0512) ;-----------------------------------------------------------------------------
                                   (0513) ;  FUNCTION NAME: COMP_SERIAL_SendData
                                   (0514) ;
                                   (0515) ;  DESCRIPTION:
                                   (0516) ;     Initiates a transmission of data.
                                   (0517) ;-----------------------------------------------------------------------------
                                   (0518) ;
                                   (0519) ;  ARGUMENTS:
                                   (0520) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                   (0521) ;
                                   (0522) ;  RETURNS:
                                   (0523) ;     none.
                                   (0524) ;
                                   (0525) ;  SIDE EFFECTS:
                                   (0526) ;    The A and X registers may be modified by this or future implementations
                                   (0527) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0528) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0529) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0530) ;    functions.
                                   (0531) ;
                                   (0532)  COMP_SERIAL_SendData:
                                   (0533) _COMP_SERIAL_SendData:
                                   (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0535)    mov REG[COMP_SERIAL_TX_BUFFER_REG], A
0CC5: 08       PUSH  A             (0536)    RAM_EPILOGUE RAM_USE_CLASS_1
0CC6: 21 01    AND   A,1           (0537)    ret
0CC8: A0 06    JZ    0x0CCF        (0538) .ENDSECTION
                                   (0539) 
0CCA: 43 E1 80 OR    REG[225],128  (0540) 
0CCD: 80 04    JMP   0x0CD2        (0541) .SECTION
                                   (0542) ;-----------------------------------------------------------------------------
                                   (0543) ;  FUNCTION NAME: COMP_SERIAL_bReadTxStatus
0CCF: 41 E1 7F AND   REG[225],127  (0544) ;
                                   (0545) ;  DESCRIPTION:
                                   (0546) ;     Reads the Tx Status bits in the Control/Status register.
0CD2: 18       POP   A             (0547) ;-----------------------------------------------------------------------------
0CD3: 21 02    AND   A,2           (0548) ;
0CD5: A0 06    JZ    0x0CDC        (0549) ;  ARGUMENTS:
                                   (0550) ;     none.
0CD7: 43 E1 40 OR    REG[225],64   (0551) ;
0CDA: 80 04    JMP   0x0CDF        (0552) ;  RETURNS:
                                   (0553) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                   (0554) ;           status bits (returned in A)
0CDC: 41 E1 BF AND   REG[225],191  (0555) ;
                                   (0556) ;  SIDE EFFECTS:
                                   (0557) ;    The A and X registers may be modified by this or future implementations
                                   (0558) ;    of this function.  The same is true for all RAM page pointer registers in
0CDF: 7F       RET                 (0559) ;    the Large Memory Model.  When necessary, it is the calling function's
0CE0: 30       HALT  
0CE1: 31 32    XOR   A,50
0CE3: 33 34    XOR   A,[X+52]
0CE5: 35 36    XOR   [X+54],A
0CE7: 37 38 39 XOR   [X+56],57
0CEA: 41 42 43 AND   REG[66],67
0CED: 44 45 46 OR    REG[X+69],70
                                   (0560) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0561) ;    functions.
                                   (0562) ;
                                   (0563)  COMP_SERIAL_bReadTxStatus:
                                   (0564) _COMP_SERIAL_bReadTxStatus:
                                   (0565)  bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0566) _bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0567)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0568)    mov A,  REG[COMP_SERIAL_TX_CONTROL_REG]
                                   (0569)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0570)    ret
                                   (0571) .ENDSECTION
                                   (0572) 
                                   (0573) 
                                   (0574) .SECTION
                                   (0575) ;-----------------------------------------------------------------------------
                                   (0576) ;  FUNCTION NAME: COMP_SERIAL_bReadRxData
                                   (0577) ;
                                   (0578) ;  DESCRIPTION:
                                   (0579) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0580) ;     sure data is valid.
                                   (0581) ;-----------------------------------------------------------------------------
                                   (0582) ;
                                   (0583) ;  ARGUMENTS:
                                   (0584) ;     none.
                                   (0585) ;
                                   (0586) ;  RETURNS:
                                   (0587) ;     bRxData - returned in A.
                                   (0588) ;
                                   (0589) ;  SIDE EFFECTS:
                                   (0590) ;    The A and X registers may be modified by this or future implementations
                                   (0591) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0592) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0593) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0594) ;    functions.
                                   (0595) ;
                                   (0596)  COMP_SERIAL_bReadRxData:
                                   (0597) _COMP_SERIAL_bReadRxData:
                                   (0598)  bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0599) _bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0CF0: 08       PUSH  A             (0601)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]
0CF1: 67       ASR   A             (0602)    RAM_EPILOGUE RAM_USE_CLASS_1
0CF2: 67       ASR   A             (0603)    ret
0CF3: 67       ASR   A             (0604) .ENDSECTION
0CF4: 67       ASR   A             (0605) 
0CF5: 21 0F    AND   A,15          (0606) 
0CF7: FF E7    INDEX 0x0CE0        (0607) .SECTION
0CF9: 90 0F    CALL  0x0D0A        (0608) ;-----------------------------------------------------------------------------
0CFB: 18       POP   A             (0609) ;  FUNCTION NAME: COMP_SERIAL_bReadRxStatus
0CFC: 21 0F    AND   A,15          (0610) ;
0CFE: FF E0    INDEX 0x0CE0        (0611) ;  DESCRIPTION:
0D00: 90 08    CALL  0x0D0A        (0612) ;     Reads the RX Status bits in the Control/Status register.
                                   (0613) ;-----------------------------------------------------------------------------
0D02: 7F       RET                 (0614) ;
                                   (0615) ;  ARGUMENTS:
                                   (0616) ;     none.
                                   (0617) ;
                                   (0618) ;  RETURNS:
                                   (0619) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                   (0620) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0621) ;           returned in A.
                                   (0622) ;
                                   (0623) ;  SIDE EFFECTS:
                                   (0624) ;    The A and X registers may be modified by this or future implementations
                                   (0625) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0626) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0627) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0628) ;    functions.
                                   (0629) ;
                                   (0630)  COMP_SERIAL_bReadRxStatus:
                                   (0631) _COMP_SERIAL_bReadRxStatus:
                                   (0632)  bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0633) _bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0634)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0635)    mov A,  REG[COMP_SERIAL_RX_CONTROL_REG]
                                   (0636)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0637)    ret
                                   (0638) .ENDSECTION
                                   (0639) 
                                   (0640) 
                                   (0641) .SECTION
                                   (0642) ;-----------------------------------------------------------------------------
                                   (0643) ;  FUNCTION NAME: COMP_SERIAL_TxIntMode
                                   (0644) ;
0D03: 4B       SWAP  A,X           (0645) ;  DESCRIPTION:
0D04: 9F EA    CALL  0x0CF0        (0646) ;     This function is used to change the TX Interrupt mode.
0D06: 5B       MOV   A,X           (0647) ;-----------------------------------------------------------------------------
0D07: 9F E7    CALL  0x0CF0        (0648) ;
                                   (0649) ;  ARGUMENTS:
0D09: 7F       RET                 (0650) ;     A => Tx Interrupt mode
0D0A: 49 3B 10 TST   REG[59],16
                                   (0651) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                   (0652) ;             1 => Interrupt on TX Complete
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none.
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
                                   (0663) ;
                                   (0664)  COMP_SERIAL_TxIntMode:
                                   (0665) _COMP_SERIAL_TxIntMode:
                                   (0666)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0667) 
                                   (0668)    and  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0669)    M8C_SetBank1
                                   (0670)    cmp  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0671)    jz   .SetTxCmpMode
                                   (0672) 
                                   (0673)    and  reg[COMP_SERIAL_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
                                   (0674)    jmp  .TxIntMode_End
                                   (0675) 
                                   (0676) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
                                   (0677)    or   reg[COMP_SERIAL_TX_FUNC_REG],0x10
                                   (0678) 
                                   (0679) .TxIntMode_End:
                                   (0680)    M8C_SetBank0
                                   (0681)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0682)    ret
                                   (0683) .ENDSECTION
                                   (0684) 
                                   (0685)     
0D0D: AF FC    JZ    0x0D0A        (0686) .SECTION
0D0F: 60 39    MOV   REG[57],A
                                   (0687) ;-----------------------------------------------------------------------------
0D11: 7F       RET                 (0688) ;  FUNCTION NAME: COMP_SERIAL_IntCntl
                                   (0689) ;
                                   (0690) ;  DESCRIPTION:
                                   (0691) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                   (0692) ;-----------------------------------------------------------------------------
                                   (0693) ;
                                   (0694) ;  ARGUMENTS:
                                   (0695) ;     A => Interrupt mask
                                   (0696) ;
                                   (0697) ;  RETURNS:
                                   (0698) ;     none.
                                   (0699) ;
                                   (0700) ;  SIDE EFFECTS:
                                   (0701) ;    The A and X registers may be modified by this or future implementations
                                   (0702) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0703) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0704) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0705) ;    functions.
                                   (0706) ;
                                   (0707) ;  THEORY of OPERATION or PROCEDURE:
                                   (0708) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                   (0709) ;     and RX block.
                                   (0710) ;
                                   (0711)  COMP_SERIAL_IntCntl:
                                   (0712) _COMP_SERIAL_IntCntl:
                                   (0713)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0714) 
                                   (0715)    push A
                                   (0716)    and  A,COMP_SERIAL_ENABLE_RX_INT
                                   (0717)    jz   .DisRxInt
                                   (0718)      ; Enable Rx Interrupt
                                   (0719)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0D12: 49 3F 08 TST   REG[63],8     (0720)    jmp  .CheckTxInt
0D15: AF FC    JZ    0x0D12        (0721) .DisRxInt:
0D17: 5D 3E    MOV   A,REG[62]     (0722)      ; Disable Rx Interrupt
                                   (0723)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0D19: 7F       RET                 (0724) 
                                   (0725) .CheckTxInt:
                                   (0726)    pop  A
                                   (0727)    and  A,COMP_SERIAL_ENABLE_TX_INT
                                   (0728)    jz   .DisTxInt
                                   (0729)      ; Enable Tx Interrupt
                                   (0730)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0731)    jmp  .End_IntCntl
                                   (0732) .DisTxInt:
                                   (0733)      ; Disable Tx Interrupt
                                   (0734)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0735) 
                                   (0736) .End_IntCntl:
                                   (0737)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0738)    ret
                                   (0739) .ENDSECTION
                                   (0740) 
                                   (0741) 
                                   (0742) ;=============================================================================
                                   (0743) ;=============================================================================
                                   (0744) ;
                                   (0745) ;     High-Level Commands
                                   (0746) ;
                                   (0747) ;=============================================================================
                                   (0748) ;=============================================================================
                                   (0749) 
                                   (0750) 
                                   (0751) ;-----------------------------------------------------------------------------
                                   (0752) ;  FUNCTION NAME: COMP_SERIAL_PutSHexByte
                                   (0753) ;
                                   (0754) ;  DESCRIPTION:
0D1A: 5D 3F    MOV   A,REG[63]     (0755) ;     Print a byte in Hex (two characters) to the UART Tx
0D1C: 08       PUSH  A             (0756) ;-----------------------------------------------------------------------------
0D1D: 21 08    AND   A,8           (0757) ;
0D1F: B0 04    JNZ   0x0D24        (0758) ;  ARGUMENTS:
0D21: 18       POP   A             (0759) ;     A  => (BYTE) Data/char to be printed
0D22: 80 0B    JMP   0x0D2E        (0760) ;
                                   (0761) ;  RETURNS:
                                   (0762) ;     none.
0D24: 5D 3E    MOV   A,REG[62]     (0763) ;
0D26: 4B       SWAP  A,X           (0764) ;  SIDE EFFECTS:
                                   (0765) ;    The A and X registers may be modified by this or future implementations
0D27: 18       POP   A             (0766) ;    of this function.  The same is true for all RAM page pointer registers in
0D28: 21 A0    AND   A,160         (0767) ;    the Large Memory Model.  When necessary, it is the calling function's
0D2A: B0 03    JNZ   0x0D2E        (0768) ;    responsibility to perserve their values across calls to fastcall16 
0D2C: 4B       SWAP  A,X           (0769) ;    functions.
                                   (0770) ;
0D2D: 7F       RET                 (0771) .LITERAL
                                   (0772) COMP_SERIAL_HEX_STR:
                                   (0773)      DS    "0123456789ABCDEF"
0D2E: 50 00    MOV   A,0           (0774) .ENDLITERAL
                                   (0775) 
                                   (0776) .SECTION
                                   (0777)  COMP_SERIAL_PutSHexByte:
0D30: 7F       RET                 (0778) _COMP_SERIAL_PutSHexByte:
                                   (0779)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0780)    push  A                             ; Save lower nibble
                                   (0781)    asr   A                             ; Shift high nibble to right
                                   (0782)    asr   A
                                   (0783)    asr   A
                                   (0784)    asr   A
                                   (0785)    and   A,0Fh                         ; Mask off nibble
                                   (0786)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0787)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0788)    pop   A                             ; Restore value
                                   (0789)    and   A,0Fh                         ; Mask off lower nibble
                                   (0790)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0791)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0792)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0793)    ret
                                   (0794) .ENDSECTION
                                   (0795) 
                                   (0796) 
                                   (0797) .SECTION
                                   (0798) ;-----------------------------------------------------------------------------
                                   (0799) ;  FUNCTION NAME: COMP_SERIAL_PutSHexInt
                                   (0800) ;
                                   (0801) ;  DESCRIPTION:
                                   (0802) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0803) ;-----------------------------------------------------------------------------
                                   (0804) ;
                                   (0805) ;  ARGUMENTS:
                                   (0806) ;     Pointer to string
                                   (0807) ;     A  => ASB of Int
                                   (0808) ;     X  => MSB of Int
                                   (0809) ;
                                   (0810) ;  RETURNS:
                                   (0811) ;     none.
                                   (0812) ;
                                   (0813) ;  SIDE EFFECTS:
                                   (0814) ;    The A and X registers may be modified by this or future implementations
                                   (0815) ;    of this function.  The same is true for all RAM page pointer registers in
0D31: 5D 3F    MOV   A,REG[63]     (0816) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0817) ;    responsibility to perserve their values across calls to fastcall16 
0D33: 21 E8    AND   A,232         (0818) ;    functions.
0D35: 08       PUSH  A             (0819) ;
0D36: 21 08    AND   A,8           (0820) 
0D38: B0 07    JNZ   0x0D40        (0821)  COMP_SERIAL_PutSHexInt:
0D3A: 18       POP   A             (0822) _COMP_SERIAL_PutSHexInt:
0D3B: 29 01    OR    A,1           (0823)    RAM_PROLOGUE RAM_USE_CLASS_1
0D3D: 4B       SWAP  A,X           (0824)    swap  A,X
0D3E: 80 07    JMP   0x0D46        (0825)    call  COMP_SERIAL_PutSHexByte       ; Print MSB
                                   (0826)    mov   A,X                           ; Move LSB into position
                                   (0827)    call  COMP_SERIAL_PutSHexByte       ; Print LSB
0D40: 18       POP   A             (0828)    RAM_EPILOGUE RAM_USE_CLASS_1
0D41: 21 E0    AND   A,224         (0829)    ret
0D43: 4B       SWAP  A,X           (0830) .ENDSECTION
0D44: 5D 3E    MOV   A,REG[62]     (0831) 
                                   (0832) 
                                   (0833) .SECTION
                                   (0834) ;-----------------------------------------------------------------------------
                                   (0835) ;  FUNCTION NAME: COMP_SERIAL_PutChar
0D46: 7F       RET                 (0836) ;
                                   (0837) ;  DESCRIPTION:
                                   (0838) ;     Send character out through UART TX port.
                                   (0839) ;-----------------------------------------------------------------------------
                                   (0840) ;
                                   (0841) ;  ARGUMENTS:
                                   (0842) ;     A has Character to send to UART Tx Port
                                   (0843) ;
                                   (0844) ;  RETURNS:
                                   (0845) ;     none
                                   (0846) ;
                                   (0847) ;  SIDE EFFECTS:
                                   (0848) ;    The A and X registers may be modified by this or future implementations
                                   (0849) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0850) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0851) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0852) ;    functions.
                                   (0853) ;
                                   (0854) 
                                   (0855)    macro InLinePutChar( Source )
                                   (0856) .BufEmptyWaitLoop:
                                   (0857)    tst REG[COMP_SERIAL_TX_CONTROL_REG], COMP_SERIAL_TX_BUFFER_EMPTY     ; Check Tx Status
                                   (0858)    jz  .BufEmptyWaitLoop
                                   (0859)    mov REG[COMP_SERIAL_TX_BUFFER_REG], @Source     ; Write data to Tx Port
                                   (0860)    endm
                                   (0861) 
                                   (0862)  COMP_SERIAL_PutChar:
                                   (0863) _COMP_SERIAL_PutChar:
                                   (0864)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0865)    InLinePutChar A
                                   (0866)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0867)    ret
0D47: 70 BF    AND   F,191         (0868) .ENDSECTION
0D49: 60 D3    MOV   REG[211],A    (0869) 
                                   (0870) 
0D4B: 52 00    MOV   A,[X+0]       (0871) .SECTION
0D4D: A0 06    JZ    0x0D54        (0872) ;-----------------------------------------------------------------------------
0D4F: 9F B9    CALL  0x0D0A        (0873) ;  FUNCTION NAME: COMP_SERIAL_cGetChar
0D51: 75       INC   X             (0874) ;
0D52: 8F F8    JMP   0x0D4B        (0875) ;  DESCRIPTION:
0D54: 70 3F    AND   F,63
                                   (0876) ;     Read character from UART RX port.
                                   (0877) ;-----------------------------------------------------------------------------
0D56: 71 C0    OR    F,192         (0878) ;
0D58: 7F       RET                 (0879) ;  ARGUMENTS:
                                   (0880) ;      none
                                   (0881) ;
                                   (0882) ;  RETURNS:
                                   (0883) ;     char that is returned from UART
                                   (0884) ;
                                   (0885) ;  SIDE EFFECTS:
                                   (0886) ;    The A and X registers may be modified by this or future implementations
                                   (0887) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0888) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0889) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0890) ;    functions.
                                   (0891) ;
                                   (0892) ;    Program flow will stay in this function until a character is received.
                                   (0893) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0894) ;    the delay between characters is less than the watchdog timeout.
                                   (0895) ;
                                   (0896)  COMP_SERIAL_cGetChar:
                                   (0897) _COMP_SERIAL_cGetChar:
                                   (0898)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0899)    tst REG[COMP_SERIAL_RX_CONTROL_REG],COMP_SERIAL_RX_REG_FULL    ; Check if a character is ready
                                   (0900)    jz  COMP_SERIAL_cGetChar                              ; If not loop
                                   (0901)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]                 ; Get character
                                   (0902)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0903)    ret
                                   (0904) .ENDSECTION
                                   (0905) 
                                   (0906) 
                                   (0907) .SECTION
                                   (0908) ;-----------------------------------------------------------------------------
                                   (0909) ;  FUNCTION NAME: COMP_SERIAL_cReadChar
                                   (0910) ;
                                   (0911) ;  DESCRIPTION:
                                   (0912) ;     Read character from UART RX port.
                                   (0913) ;-----------------------------------------------------------------------------
                                   (0914) ;
0D59: 70 BF    AND   F,191         (0915) ;  ARGUMENTS:
0D5B: 62 D3 07 MOV   REG[211],7    (0916) ;      none
0D5E: 4F       MOV   X,SP          (0917) ;
                                   (0918) ;  RETURNS:
                                   (0919) ;     char that is returned from UART
0D5F: 52 FB    MOV   A,[X-5]       (0920) ;
0D61: A0 1A    JZ    0x0D7C        (0921) ;  SIDE EFFECTS:
0D63: 7B FB    DEC   [X-5]         (0922) ;    The A and X registers may be modified by this or future implementations
                                   (0923) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0924) ;    the Large Memory Model.  When necessary, it is the calling function's
0D65: 52 FC    MOV   A,[X-4]       (0925) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0926) ;    functions.
                                   (0927) ;
0D67: 59 FD    MOV   X,[X-3]       (0928) ;    A valid 0x00 character will be ignored, since a 0x00 return value
0D69: 60 D3    MOV   REG[211],A    (0929) ;    implies a valid character or an error condition occured.
0D6B: 52 00    MOV   A,[X+0]       (0930) ;
0D6D: 49 3B 10 TST   REG[59],16
0D70: AF FC    JZ    0x0D6D        (0931)  COMP_SERIAL_cReadChar:
0D72: 60 39    MOV   REG[57],A
0D74: 4F       MOV   X,SP          (0932) _COMP_SERIAL_cReadChar:
0D75: 62 D3 07 MOV   REG[211],7    (0933)    RAM_PROLOGUE RAM_USE_CLASS_1
0D78: 77 FD    INC   [X-3]         (0934)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
0D7A: 8F E4    JMP   0x0D5F        (0935)    push A
0D7C: 70 3F    AND   F,63
                                   (0936)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (0937)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0D7E: 71 C0    OR    F,192         (0938)    pop  A
0D80: 7F       RET                 (0939)    jmp  .RX_NO_VALID_CHAR
                                   (0940) 
                                   (0941) .RX_DATA_RDY:
                                   (0942)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]          
                                   (0943)    swap A,X                                                ; determine if data is valid
                                   (0944) 
                                   (0945)    pop  A                                                  ; Check for errors
                                   (0946)    and  A,(COMP_SERIAL_RX_PARITY_ERROR | COMP_SERIAL_RX_FRAMING_ERROR)
                                   (0947)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0948)    swap A,X                                                ; Put data in A and exit
                                   (0949)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0950)    ret
                                   (0951) 
                                   (0952) .RX_NO_VALID_CHAR:
                                   (0953)    mov A,0x00                                              ; Zero out character
                                   (0954) 
                                   (0955)  End_COMP_SERIAL_cReadChar:
                                   (0956)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0957)    ret
                                   (0958) .ENDSECTION
                                   (0959) 
                                   (0960) 
                                   (0961) .SECTION
                                   (0962) ;-----------------------------------------------------------------------------
                                   (0963) ;  FUNCTION NAME: COMP_SERIAL_iReadChar
                                   (0964) ;
                                   (0965) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0966) ;  to just set a value in the upper byte if error conditions exists.
                                   (0967) ;
                                   (0968) ;  DESCRIPTION:
                                   (0969) ;     Read character from UART RX port.
                                   (0970) ;-----------------------------------------------------------------------------
                                   (0971) ;
                                   (0972) ;  ARGUMENTS:
                                   (0973) ;      none
                                   (0974) ;
                                   (0975) ;  RETURNS:
                                   (0976) ;     An integer value is returned.  A negative value inplies and error
0D81: 4F       MOV   X,SP          (0977) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0978) ;
0D82: 3D FA 00 CMP   [X-6],0       (0979) ;     Error Codes:
0D85: B0 06    JNZ   0x0D8C        (0980) ;        0x80CC    Parity Error
0D87: 3D FB 00 CMP   [X-5],0       (0981) ;        0x40CC    Overrun Error
0D8A: A0 1D    JZ    0x0DA8        (0982) ;        0x20CC    Framing Error
                                   (0983) ;        0x01CC    No Data available
                                   (0984) ;
0D8C: 10       PUSH  X             (0985) ;  SIDE EFFECTS:
0D8D: 52 FC    MOV   A,[X-4]       (0986) ;    The A and X registers may be modified by this or future implementations
0D8F: 59 FD    MOV   X,[X-3]       (0987) ;    of this function.  The same is true for all RAM page pointer registers in
0D91: 28       ROMX                (0988) ;    the Large Memory Model.  When necessary, it is the calling function's
0D92: 49 3B 10 TST   REG[59],16
0D95: AF FC    JZ    0x0D92        (0989) ;    responsibility to perserve their values across calls to fastcall16 
0D97: 60 39    MOV   REG[57],A
0D99: 20       POP   X             (0990) ;    functions.
0D9A: 07 FD 01 ADD   [X-3],1       (0991) ;
0D9D: 0F FC 00 ADC   [X-4],0       (0992)  COMP_SERIAL_iReadChar:
0DA0: 17 FB 01 SUB   [X-5],1       (0993) _COMP_SERIAL_iReadChar:
0DA3: 1F FA 00 SBB   [X-6],0       (0994)    RAM_PROLOGUE RAM_USE_CLASS_1
0DA6: 8F DB    JMP   0x0D82        (0995)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
0DA8: 70 3F    AND   F,63
                                   (0996)                                                            ; Mask only errors and data ready
                                   (0997)    and  A,(COMP_SERIAL_RX_ERROR|COMP_SERIAL_RX_REG_FULL)
0DAA: 71 C0    OR    F,192         (0998)    push A
0DAC: 7F       RET                 (0999)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (1000)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (1001)    pop  A
                                   (1002)    or   A,COMP_SERIAL_RX_NO_DATA                           ; Add no data flag
                                   (1003)    swap A,X
                                   (1004)    jmp  End_COMP_SERIAL_iReadChar
                                   (1005) 
                                   (1006) .RX_GET_DATA:
                                   (1007)    pop  A
                                   (1008)    and  A,COMP_SERIAL_RX_ERROR
                                   (1009)    swap A,X
                                   (1010)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]                  ; Read data first, then
                                   (1011)                                                            ; determine if data is valid
                                   (1012) 
                                   (1013)  End_COMP_SERIAL_iReadChar:
                                   (1014)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1015)    ret
                                   (1016) .ENDSECTION
                                   (1017) 
                                   (1018) 
                                   (1019) .SECTION
                                   (1020) ;-----------------------------------------------------------------------------
                                   (1021) ;  FUNCTION NAME: COMP_SERIAL_PutString
                                   (1022) ;
                                   (1023) ;  DESCRIPTION:
                                   (1024) ;     Send String out through UART TX port.
                                   (1025) ;-----------------------------------------------------------------------------
                                   (1026) ;
                                   (1027) ;  ARGUMENTS:
                                   (1028) ;     Pointer to String
0DAD: 08       PUSH  A             (1029) ;     A has MSB of string address
0DAE: 10       PUSH  X             (1030) ;     X has LSB of string address
0DAF: 28       ROMX                (1031) ;
0DB0: A0 0B    JZ    0x0DBC        (1032) ;  RETURNS:
0DB2: 9F 56    CALL  0x0D0A        (1033) ;     none
0DB4: 20       POP   X             (1034) ;
0DB5: 18       POP   A             (1035) ;  SIDE EFFECTS:
0DB6: 75       INC   X             (1036) ;    The A and X registers may be modified by this or future implementations
0DB7: DF F5    JNC   0x0DAD        (1037) ;    of this function.  The same is true for all RAM page pointer registers in
0DB9: 74       INC   A             (1038) ;    the Large Memory Model.  When necessary, it is the calling function's
0DBA: 8F F2    JMP   0x0DAD        (1039) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1040) ;    functions.
                                   (1041) ;          
                                   (1042) ;    Currently only the page pointer registers listed below are modified: 
0DBC: 38 FE    ADD   SP,254        (1043) ;          IDX_PP
                                   (1044) ;
0DBE: 7F       RET                 (1045)  COMP_SERIAL_PutString:
                                   (1046) _COMP_SERIAL_PutString:
                                   (1047)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1048)    RAM_SETPAGE_IDX A
                                   (1049) .PutStringLoop:
                                   (1050)    mov   A,[X]                                   ; Get value pointed to by X
                                   (1051)    jz    End_PutString                           ; Check for end of string
                                   (1052)    call  COMP_SERIAL_PutChar                     ; Send character to Tx port
                                   (1053)    inc   X                                       ; Advance pointer to next character
                                   (1054)    jmp   .PutStringLoop                          ; Get next character
                                   (1055) 
                                   (1056) End_PutString:
                                   (1057)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1058)    ret
                                   (1059) .ENDSECTION
                                   (1060)     
                                   (1061) .SECTION
                                   (1062) ;-----------------------------------------------------------------------------
                                   (1063) ;  FUNCTION NAME: COMP_SERIAL_Write
                                   (1064) ;
                                   (1065) ;  DESCRIPTION:
                                   (1066) ;     Send String of length X to serial port
                                   (1067) ;-----------------------------------------------------------------------------
                                   (1068) ;
                                   (1069) ;  ARGUMENTS:
                                   (1070) ;     Pointer to String
                                   (1071) ;     [SP-5] Count of characters to send
                                   (1072) ;     [SP-4] has MSB of string address
0DBF: 50 0D    MOV   A,13          (1073) ;     [SP-3] has LSB of string address
0DC1: 9F 47    CALL  0x0D0A        (1074) ;
0DC3: 50 0A    MOV   A,10          (1075) ;  RETURNS:
0DC5: 9F 43    CALL  0x0D0A        (1076) ;     none
                                   (1077) ;
0DC7: 7F       RET                 (1078) ;  SIDE EFFECTS:
                                   (1079) ;    The A and X registers may be modified by this or future implementations
                                   (1080) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1082) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1083) ;    functions.
                                   (1084) ;          
                                   (1085) ;    Currently only the page pointer registers listed below are modified: 
                                   (1086) ;          IDX_PP
                                   (1087) ;
                                   (1088) CNT_LEN:    equ -5                               ; Length of data to send
                                   (1089) STR_MSB:    equ -4                               ; MSB pointer of string 
                                   (1090) STR_LSB:    equ -3                               ; LSB pointer of string 
                                   (1091) 
                                   (1092)  COMP_SERIAL_Write:
                                   (1093) _COMP_SERIAL_Write:
                                   (1094)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1095)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
                                   (1096)    mov   X, SP                                   ; Establish the frame pointer 
                                   (1097) 
                                   (1098) .NextByteLoop:
                                   (1099)    mov   A, [X+CNT_LEN]                          ; End of the string?
                                   (1100)    jz    .End_Write                              ;   Yes, prepare to exit
                                   (1101)    dec   [X+CNT_LEN]                             ; Decrement counter
                                   (1102) 
                                   (1103)    IF SYSTEM_LARGE_MEMORY_MODEL
                                   (1104)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                   (1105)    ENDIF
                                   (1106) 
                                   (1107)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                   (1108)    RAM_SETPAGE_IDX A                             ; switch index pages
                                   (1109)    mov   A, [X]                                  ; Grab the data
                                   (1110)    InLinePutChar A                               ; Put data in empty TX buf reg
                                   (1111)    mov   X, SP                                   ; Recover frame pointer
                                   (1112)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
                                   (1113)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
                                   (1114)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                   (1115) 
                                   (1116) .End_Write:
                                   (1117)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1118)    ret
                                   (1119) .ENDSECTION
                                   (1120)     
0DC8: 62 D0 00 MOV   REG[208],0    (1121) 
0DCB: 55 05 00 MOV   [5],0         (1122) .SECTION
0DCE: 62 D0 00 MOV   REG[208],0    (1123) ;-----------------------------------------------------------------------------
0DD1: 55 04 00 MOV   [4],0         (1124) ;  FUNCTION NAME: COMP_SERIAL_CWrite
0DD4: 26 03 00 AND   [3],0         (1125) ;
0DD7: 62 D0 00 MOV   REG[208],0    (1126) ;             WARNING WARNING NOT COMPLETE
0DDA: 55 9E 00 MOV   [TIMEOUT+2],0 (1127) ;
                                   (1128) ;  DESCRIPTION:
0DDD: 7F       RET                 (1129) ;     Send String of length X to serial port
                                   (1130) ;-----------------------------------------------------------------------------
                                   (1131) ;
                                   (1132) ;  ARGUMENTS:
                                   (1133) ;     [SP-4] MSB of Count of character to send
                                   (1134) ;     [SP-3] LSB of Count of character to send
                                   (1135) ;     [SP-2] has MSB of string address
                                   (1136) ;     [SP-1] has LSB of string address
                                   (1137) ;
                                   (1138) ;  RETURNS:
                                   (1139) ;     none
                                   (1140) ;
                                   (1141) ;  SIDE EFFECTS:
                                   (1142) ;    The A and X registers may be modified by this or future implementations
                                   (1143) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1144) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1145) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1146) ;    functions.
                                   (1147) ;
                                   (1148) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                   (1149) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                   (1150) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (1151) CSTR_LSB:   equ -3           ; LSB pointer of string
                                   (1152) 
                                   (1153)  COMP_SERIAL_CWrite:
                                   (1154) _COMP_SERIAL_CWrite:
                                   (1155)    RAM_PROLOGUE RAM_USE_CLASS_2
                                   (1156)    mov   X,SP
                                   (1157) .CW_Loop:
                                   (1158)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
                                   (1159)    jnz   .CW_WRITEIT
                                   (1160)    cmp   [X+CLEN_LSB],0x00
                                   (1161)    jz    .End_CWrite                        ; Leave if done
                                   (1162) 
                                   (1163) .CW_WRITEIT:                                
0DDE: 62 D0 00 MOV   REG[208],0    (1164)    push  X                                  ; Save frame pointer
0DE1: 51 03    MOV   A,[3]         (1165)    mov   A,[X+CSTR_MSB]
0DE3: 21 01    AND   A,1           (1166)    mov   X,[X+CSTR_LSB]
                                   (1167)    romx                                     ; Get character from ROM
0DE5: 7F       RET                 (1168)    InLinePutChar A                          ; Put data in empty TX buf reg
                                   (1169)    pop   X                                  ; Restore frame pointer
                                   (1170)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
                                   (1171)    adc   [X+CSTR_MSB],0
                                   (1172)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
                                   (1173)    sbb   [X+CLEN_MSB],0x00
                                   (1174)    jmp   .CW_Loop
                                   (1175) 
                                   (1176) .End_CWrite:
                                   (1177)    RAM_EPILOGUE RAM_USE_CLASS_2
                                   (1178)    ret
                                   (1179) .ENDSECTION
                                   (1180) 
                                   (1181) 
                                   (1182) .SECTION
                                   (1183) ;-----------------------------------------------------------------------------
                                   (1184) ;  FUNCTION NAME: COMP_SERIAL_CPutString
                                   (1185) ;
                                   (1186) ;  DESCRIPTION:
                                   (1187) ;     Send String out through UART TX port.
                                   (1188) ;-----------------------------------------------------------------------------
                                   (1189) ;
                                   (1190) ;  ARGUMENTS:
                                   (1191) ;     Pointer to String
                                   (1192) ;     A has MSB of string address
                                   (1193) ;     X has LSB of string address
                                   (1194) ;
                                   (1195) ;  RETURNS:
                                   (1196) ;     none
                                   (1197) ;
                                   (1198) ;  SIDE EFFECTS:
                                   (1199) ;    The A and X registers may be modified by this or future implementations
                                   (1200) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1202) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1203) ;    functions.
                                   (1204) ;
                                   (1205)  COMP_SERIAL_CPutString:
                                   (1206) _COMP_SERIAL_CPutString:
                                   (1207)    RAM_PROLOGUE RAM_USE_CLASS_1
0DE6: 62 D0 00 MOV   REG[208],0    (1208)    push  A                                       ; Store ROM pointer
0DE9: 51 03    MOV   A,[3]         (1209)    push  X
0DEB: 21 F0    AND   A,240         (1210)    romx                                          ; Get character from ROM
0DED: 26 03 0F AND   [3],15        (1211)    jz    .End_CPutString
                                   (1212)    call  COMP_SERIAL_PutChar                     ; Print character
0DF0: 7F       RET                 (1213)    pop   X
                                   (1214)    pop   A
                                   (1215)    inc   X                                       ; Inc LSB of pointer
                                   (1216)    jnc   COMP_SERIAL_CPutString                  ; Check for carry
                                   (1217)    inc   A                                       ; Inc MSB of pointer
                                   (1218)    jmp   COMP_SERIAL_CPutString
                                   (1219) 
                                   (1220) 
                                   (1221) .End_CPutString:
                                   (1222)    add   SP, -2
                                   (1223)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1224)    ret
                                   (1225) .ENDSECTION
                                   (1226) 
                                   (1227) 
                                   (1228) .SECTION
                                   (1229) ;-----------------------------------------------------------------------------
                                   (1230) ;  FUNCTION NAME: COMP_SERIAL_PutCRLF
                                   (1231) ;
                                   (1232) ;  DESCRIPTION:
                                   (1233) ;     Send a CR and LF
                                   (1234) ;-----------------------------------------------------------------------------
                                   (1235) ;
                                   (1236) ;  ARGUMENTS:
                                   (1237) ;     none.
                                   (1238) ;
                                   (1239) ;  RETURNS:
                                   (1240) ;     none.
                                   (1241) ;
                                   (1242) ;  SIDE EFFECTS:
0DF1: 62 D0 00 MOV   REG[208],0    (1243) ;    The A and X registers may be modified by this or future implementations
0DF4: 51 04    MOV   A,[4]         (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
0DF6: 7F       RET                 (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1247) ;    functions.
                                   (1248) ;
                                   (1249)  COMP_SERIAL_PutCRLF:
                                   (1250) _COMP_SERIAL_PutCRLF:
                                   (1251)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (1252)    mov  A,0x0D                        ; Send CR
                                   (1253)    call COMP_SERIAL_PutChar
                                   (1254)    mov  A,0x0A                        ; Send LF
                                   (1255)    call COMP_SERIAL_PutChar
                                   (1256)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1257)    ret
                                   (1258) .ENDSECTION
                                   (1259) 
                                   (1260) 
                                   (1261) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (1262) ;=============================================================================
                                   (1263) ;=============================================================================
                                   (1264) ;
                                   (1265) ;     Command Buffer commands
                                   (1266) ;
                                   (1267) ;=============================================================================
                                   (1268) ;=============================================================================
                                   (1269) 
                                   (1270) .SECTION
                                   (1271) ;-----------------------------------------------------------------------------
                                   (1272) ;  FUNCTION NAME: COMP_SERIAL_CmdReset
                                   (1273) ;
                                   (1274) ;  DESCRIPTION:
                                   (1275) ;     Reset command string and status flags
                                   (1276) ;-----------------------------------------------------------------------------
                                   (1277) ;
                                   (1278) ;  ARGUMENTS:
                                   (1279) ;     none.
                                   (1280) ;
                                   (1281) ;  RETURNS:
                                   (1282) ;     none.
                                   (1283) ;
                                   (1284) ;  SIDE EFFECTS:
                                   (1285) ;    The A and X registers may be modified by this or future implementations
                                   (1286) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1287) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1288) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1289) ;    functions.
                                   (1290) ;          
                                   (1291) ;    Currently only the page pointer registers listed below are modified: 
                                   (1292) ;          CUR_PP
                                   (1293) ;
                                   (1294) ;  THEORY of OPERATION or PROCEDURE:
                                   (1295) ;     Clear the command buffer, command counter, and flag.
                                   (1296) ;
                                   (1297)  COMP_SERIAL_CmdReset:
                                   (1298) _COMP_SERIAL_CmdReset:
                                   (1299)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1300)    RAM_SETPAGE_CUR >COMP_SERIAL_aRxBuffer
0DF7: 70 BF    AND   F,191         (1301)    mov [COMP_SERIAL_aRxBuffer], 0x00
                                   (1302)    RAM_SETPAGE_CUR >COMP_SERIAL_bRxCnt
0DF9: 62 D0 00 MOV   REG[208],0    (1303)    mov [COMP_SERIAL_bRxCnt], 0x00
0DFC: 50 05    MOV   A,5           (1304)    and [COMP_SERIAL_fStatus], 0x00
0DFE: 02 9E    ADD   A,[TIMEOUT+2] (1305)    RAM_SETPAGE_CUR >ptrParam
0E00: 5C       MOV   X,A           (1306)    mov [ptrParam],0x00
0E01: 62 D3 00 MOV   REG[211],0    (1307)    RAM_EPILOGUE RAM_USE_CLASS_4
0E04: 52 00    MOV   A,[X+0]       (1308)    ret
0E06: B0 04    JNZ   0x0E0B        (1309) .ENDSECTION
0E08: 10       PUSH  X             (1310) 
0E09: 80 33    JMP   0x0E3D        (1311) 
                                   (1312) .SECTION
                                   (1313) ;-----------------------------------------------------------------------------
                                   (1314) ;  FUNCTION NAME: COMP_SERIAL_bCmdCheck
0E0B: 39 2C    CMP   A,44          (1315) ;
0E0D: B0 11    JNZ   0x0E1F        (1316) ;  DESCRIPTION:
0E0F: 75       INC   X             (1317) ;     Check to see if valid command in buffer.
0E10: 76 9E    INC   [TIMEOUT+2]   (1318) ;-----------------------------------------------------------------------------
0E12: 52 00    MOV   A,[X+0]       (1319) ;
0E14: 3C 9E 3F CMP   [TIMEOUT+2],63(1320) ;  ARGUMENTS:
0E17: BF F3    JNZ   0x0E0B        (1321) ;     none.
                                   (1322) ;
                                   (1323) ;  RETURNS:
0E19: 10       PUSH  X             (1324) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1325) ;                     Returns non-zero value in A if command is valid.
0E1A: 56 00 00 MOV   [X+0],0       (1326) ;
0E1D: 80 1F    JMP   0x0E3D        (1327) ;  SIDE EFFECTS:
                                   (1328) ;    The A and X registers may be modified by this or future implementations
                                   (1329) ;    of this function.  The same is true for all RAM page pointer registers in
0E1F: 10       PUSH  X             (1330) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1331) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1332) ;    functions.
0E20: 75       INC   X             (1333) ;          
0E21: 76 9E    INC   [TIMEOUT+2]   (1334) ;    Currently only the page pointer registers listed below are modified: 
0E23: 3C 9E 3F CMP   [TIMEOUT+2],63(1335) ;          CUR_PP
0E26: AF F3    JZ    0x0E1A        (1336) ;
0E28: 52 00    MOV   A,[X+0]       (1337) ;  THEORY of OPERATION or PROCEDURE:
0E2A: A0 12    JZ    0x0E3D        (1338) ;     Read the status and control register.
0E2C: 39 2C    CMP   A,44          (1339) ;
0E2E: BF F1    JNZ   0x0E20        (1340)  COMP_SERIAL_bCmdCheck:
0E30: 56 00 00 MOV   [X+0],0       (1341) _COMP_SERIAL_bCmdCheck:
0E33: 76 9E    INC   [TIMEOUT+2]   (1342)    RAM_PROLOGUE RAM_USE_CLASS_4
0E35: 3C 9E 3F CMP   [TIMEOUT+2],63(1343)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
0E38: B0 04    JNZ   0x0E3D        (1344)    mov A,  [COMP_SERIAL_fStatus]
0E3A: 55 9E 3F MOV   [TIMEOUT+2],63(1345)    and A, COMP_SERIAL_RX_BUF_CMDTERM             ; Mask off Command status
                                   (1346)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1347)    ret
0E3D: 20       POP   X             (1348) .ENDSECTION
0E3E: 10       PUSH  X             (1349)     
0E3F: 3D 00 00 CMP   [X+0],0       (1350) 
0E42: B0 0B    JNZ   0x0E4E        (1351) .SECTION
0E44: 20       POP   X             (1352) ;-----------------------------------------------------------------------------
0E45: 57 00    MOV   X,0           (1353) ;  FUNCTION NAME: COMP_SERIAL_bErrCheck
0E47: 50 00    MOV   A,0           (1354) ;
0E49: 70 3F    AND   F,63
0E4B: 71 C0    OR    F,192         (1355) ;  DESCRIPTION:
                                   (1356) ;     Check to see if an error has occured since last CmdReset
0E4D: 7F       RET                 (1357) ;-----------------------------------------------------------------------------
                                   (1358) ;
                                   (1359) ;  ARGUMENTS:
0E4E: 20       POP   X             (1360) ;     none.
0E4F: 50 00    MOV   A,0           (1361) ;
0E51: 70 3F    AND   F,63
0E53: 71 C0    OR    F,192         (1362) ;  RETURNS:
                                   (1363) ;     BYTE  fStatus - Status of command receive buffer.
0E55: 7F       RET                 (1364) ;                     Returns non-zero value in A if command is valid.
                                   (1365) ;           0x80 => Parity Error
                                   (1366) ;           0x40 => OverRun Error
                                   (1367) ;           0x20 => Framing Error
                                   (1368) ;           0x10 => Software Buffer OverRun
                                   (1369) ;
                                   (1370) ;  SIDE EFFECTS:
                                   (1371) ;    The A and X registers may be modified by this or future implementations
                                   (1372) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1373) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1374) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1375) ;    functions.
                                   (1376) ;          
                                   (1377) ;    Currently only the page pointer registers listed below are modified: 
                                   (1378) ;          CUR_PP
                                   (1379) ;     Error Status is clear when read.
                                   (1380) ;
                                   (1381) ;  THEORY of OPERATION or PROCEDURE:
                                   (1382) ;     Read RX buffer error status and clear status
                                   (1383) ;
                                   (1384)  COMP_SERIAL_bErrCheck:
                                   (1385) _COMP_SERIAL_bErrCheck:
                                   (1386)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1387)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
                                   (1388)    mov A,  [COMP_SERIAL_fStatus]
                                   (1389)    and A, COMP_SERIAL_RX_BUF_ERROR               ; Mask off Error status
                                   (1390)    and [COMP_SERIAL_fStatus], ~COMP_SERIAL_RX_BUF_ERROR
                                   (1391)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1392)    ret
                                   (1393) .ENDSECTION
                                   (1394) 
0E56: 62 D0 00 MOV   REG[208],0    (1395) .SECTION
0E59: 50 05    MOV   A,5           (1396) ;-----------------------------------------------------------------------------
0E5B: 02 9E    ADD   A,[TIMEOUT+2] (1397) ;  FUNCTION NAME: COMP_SERIAL_bCmdLength
0E5D: 5C       MOV   X,A           (1398) ;
0E5E: 50 00    MOV   A,0           (1399) ;  DESCRIPTION:
                                   (1400) ;     Get length of command string
__text_start:
_main:
0E61: 43 E0 20 OR    REG[224],32   (1401) ;-----------------------------------------------------------------------------

FILE: C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
(0106) //----------------------------------------------------------------------------
(0107) // C main line
(0108) //----------------------------------------------------------------------------
0E64: 71 01    OR    F,1
(0109) 
(0110) #include <m8c.h>        	// part specific constants and macros
(0111) #include "PSoCAPI.h"    	// PSoC API definitions for all User Modules
0E66: 7C 1A B9 LCALL _initializeSlaves
0E69: 80 0F    JMP   0x0E79
(0112) #include "psocdynamic.h"
(0113) #include <stdlib.h>
(0114) #include <string.h>
(0115) #pragma interrupt_handler TX_TIMEOUT_ISR
(0116) #pragma interrupt_handler RX_TIMEOUT_ISR
0E6B: 10       PUSH  X
0E6C: 7C 0D DE LCALL 0x0DDE
0E6F: 62 D0 00 MOV   REG[208],0
0E72: 20       POP   X
0E73: 39 00    CMP   A,0
0E75: A0 03    JZ    0x0E79
(0117) 
(0118) // These defines are used as parameters of the configToggle function.
0E77: 94 2C    CALL  _decodeTransmission
0E79: 8F F1    JMP   0x0E6B
0E7B: 8F FF    JMP   0x0E7B
(0119) // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
(0120) #define		PC_MODE						(2)
(0121) #define		RX_MODE						(1)
(0122) #define		TX_MODE						(0)
(0123) 
(0124) // These defines are used as comparisons to find what port the newest module is connected to.
_pingModule:
  response             --> X+0
  module_id            --> X-5
0E7D: 10       PUSH  X
0E7E: 4F       MOV   X,SP
0E7F: 38 02    ADD   SP,2
(0125) #define		PORT_1						('1')
0E81: 56 01 00 MOV   [X+1],0
0E84: 56 00 00 MOV   [X+0],0
(0126) #define		PORT_2						('2')
(0127) #define		PORT_3						('3')
0E87: 50 00    MOV   A,0
0E89: 08       PUSH  A
0E8A: 08       PUSH  A
0E8B: 7C 19 4C LCALL _configToggle
0E8E: 38 FE    ADD   SP,254
(0128) #define		PORT_4						('4')
(0129) 
(0130) // These defines are used as transmission indicators.
0E90: 10       PUSH  X
0E91: 50 FC    MOV   A,252
0E93: 7C 09 BF LCALL 0x09BF
0E96: 20       POP   X
(0131) #define		START_TRANSMIT				(252)	// Indicates the beginning of a transmission.
0E97: 10       PUSH  X
0E98: 50 FC    MOV   A,252
0E9A: 7C 09 BF LCALL 0x09BF
0E9D: 20       POP   X
(0132) #define		END_TRANSMIT				(253)	// Indicates the end of a transmission.
0E9E: 10       PUSH  X
0E9F: 50 00    MOV   A,0
0EA1: 7C 09 BF LCALL 0x09BF
0EA4: 20       POP   X
(0133) #define		HELLO_BYTE					(200)	// Indicates master is ready to talk.
0EA5: 62 D0 00 MOV   REG[208],0
0EA8: 52 FC    MOV   A,[X-4]
0EAA: 10       PUSH  X
0EAB: 7C 09 BF LCALL 0x09BF
0EAE: 20       POP   X
(0134) #define		ID_ASSIGNMENT				(201)	// Indicates an ID assignment from the master.
0EAF: 10       PUSH  X
0EB0: 50 CB    MOV   A,203
0EB2: 7C 09 BF LCALL 0x09BF
0EB5: 20       POP   X
(0135) #define		ID_ASSIGN_OK				(202)	// Indicates an ID assignment is acknowledged.
0EB6: 10       PUSH  X
0EB7: 50 FD    MOV   A,253
0EB9: 7C 09 BF LCALL 0x09BF
0EBC: 20       POP   X
(0136) #define		PING						(203)	// Indicates that someone is pinging someone else.
0EBD: 10       PUSH  X
0EBE: 50 FD    MOV   A,253
0EC0: 7C 09 BF LCALL 0x09BF
0EC3: 20       POP   X
(0137) #define		CLEAR_CONFIG				(204)	// Indicates that the master is asking for a config clear.
(0138) #define		CONFIG_CLEARED				(205)	// Indicates that a module has cleared its own config.
(0139) #define		MASTER_ID					(0)		// The master node's ID.
0EC4: 10       PUSH  X
0EC5: 7C 09 92 LCALL 0x0992
0EC8: 62 D0 00 MOV   REG[208],0
0ECB: 20       POP   X
0ECC: 53 97    MOV   [__r0],A
0ECE: 47 97 20 TST   [__r0],32
0ED1: AF F2    JZ    0x0EC4
(0140) #define		BROADCAST					(254)	// The broadcast ID for talking to all nodes.
(0141) #define		BLANK_MODULE_ID				(251)	// This is the ID of an unconfigured module.
0ED3: 7C 1B F7 LCALL _xmitWait
(0142) 
(0143) // These defines are used to fill in the instruction we are using on the servo.
0ED6: 50 00    MOV   A,0
0ED8: 08       PUSH  A
0ED9: 50 01    MOV   A,1
0EDB: 08       PUSH  A
0EDC: 7C 19 4C LCALL _configToggle
0EDF: 38 FE    ADD   SP,254
(0144) #define		PING_SERVO					(1)		// This is the instruction number for ping.
(0145) #define		READ_SERVO					(2)		// This is the instruction number for a read.
0EE1: 10       PUSH  X
0EE2: 7C 0A 50 LCALL 0x0A50
0EE5: 20       POP   X
(0146) #define		WRITE_SERVO					(3)		// This is the instruction number for a write.
0EE6: 62 D0 00 MOV   REG[208],0
0EE9: 55 9D 00 MOV   [TIMEOUT+1],0
0EEC: 55 9C 00 MOV   [TIMEOUT],0
(0147) #define		RESET_SERVO					(6)		// This is the instruction to reset the servo EEPROM.
0EEF: 10       PUSH  X
0EF0: 7C 0A 4C LCALL 0x0A4C
0EF3: 20       POP   X
0EF4: 80 3C    JMP   0x0F31
(0148) 
(0149) // These defines are used for transmission timing.
(0150) #define 	RX_TIMEOUT_DURATION			(5)		// This is receive wait time in 1 ms units.
(0151) 
0EF6: 92 B9    CALL  _validTransmission
0EF8: 62 D0 00 MOV   REG[208],0
0EFB: 3C 97 00 CMP   [__r0],0
0EFE: B0 06    JNZ   0x0F05
0F00: 3C 96 00 CMP   [__r1],0
0F03: A0 2D    JZ    0x0F31
(0152) // These defines are used for the initial probing stage. This module first waits until it hears
(0153) // a byte on the bus. Once this happens, this module waits until there is a BUS_CLEAR_TIME
0F05: 62 D0 00 MOV   REG[208],0
0F08: 3C A2 CB CMP   [COMMAND_TYPE],203
0F0B: B0 25    JNZ   0x0F31
(0154) // period of no communication before attempting to probe for modules and assign ID numbers.
(0155) // MAX_TIMEOUTS is the number of failed attempts allowed to find an unconfigured module after
(0156) // the first module is found. After all of this, this module goes into a PC listening mode.
0F0D: 62 D0 00 MOV   REG[208],0
0F10: 3C A0 00 CMP   [COMMAND_DESTINATION],0
0F13: B0 1D    JNZ   0x0F31
(0157) #define		BUS_CLEAR_TIME				(100)	// Min time after a byte to assume bus is clear at boot.
(0158) #define		BOOT_TIMEOUT				(300)	// If nothing is heard by this time, we start the init anyway.
0F15: 62 D0 00 MOV   REG[208],0
0F18: 51 A1    MOV   A,[COMMAND_SOURCE]
0F1A: 62 D0 00 MOV   REG[208],0
0F1D: 53 96    MOV   [__r1],A
0F1F: 50 00    MOV   A,0
0F21: 3B FB    CMP   A,[X-5]
0F23: B0 0D    JNZ   0x0F31
0F25: 51 96    MOV   A,[__r1]
0F27: 3B FC    CMP   A,[X-4]
0F29: B0 07    JNZ   0x0F31
(0159) #define		MAX_TIMEOUTS				(10)	// Number of timeouts allowed before hello mode exit.
(0160) 
0F2B: 56 01 01 MOV   [X+1],1
0F2E: 56 00 00 MOV   [X+0],0
0F31: 62 D0 00 MOV   REG[208],0
0F34: 51 9D    MOV   A,[TIMEOUT+1]
0F36: 11 05    SUB   A,5
0F38: 51 9C    MOV   A,[TIMEOUT]
0F3A: 31 80    XOR   A,128
0F3C: 19 80    SBB   A,128
0F3E: D0 0B    JNC   0x0F4A
0F40: 3D 00 00 CMP   [X+0],0
0F43: B0 06    JNZ   0x0F4A
0F45: 3D 01 00 CMP   [X+1],0
0F48: AF AD    JZ    0x0EF6
(0161) // This is the maximum number of allowable modules per branch out from the master
(0162) #define		MAX_MODULES					(250)
(0163) 
(0164) #define		SERVO_START					(255)
(0165) 
(0166) // This function receives a mode identifier as a parameter and toggles the
(0167) // system configuration between receive and transmit modes for half duplex UART.
0F4A: 10       PUSH  X
0F4B: 7C 0A 50 LCALL 0x0A50
0F4E: 20       POP   X
(0168) void configToggle(int mode);
0F4F: 62 D0 00 MOV   REG[208],0
0F52: 55 9D 00 MOV   [TIMEOUT+1],0
0F55: 55 9C 00 MOV   [TIMEOUT],0
(0169) 
0F58: 10       PUSH  X
0F59: 7C 0A 4C LCALL 0x0A4C
0F5C: 20       POP   X
(0170) // This function pings the index passed to it. Returns 1 on success, 0 on fail.
(0171) int pingModule(int module_id);
0F5D: 62 D0 00 MOV   REG[208],0
0F60: 52 01    MOV   A,[X+1]
0F62: 53 96    MOV   [__r1],A
0F64: 52 00    MOV   A,[X+0]
0F66: 53 97    MOV   [__r0],A
0F68: 38 FE    ADD   SP,254
0F6A: 20       POP   X
0F6B: 7F       RET   
(0172) 
(0173) // This function assigns an ID to a module.
(0174) int assignID(int assigned_ID);
(0175) 
_assignID:
  success              --> X+0
  assigned_ID          --> X-5
0F6C: 10       PUSH  X
0F6D: 4F       MOV   X,SP
0F6E: 38 02    ADD   SP,2
(0176) int validTransmission(void);
0F70: 56 01 00 MOV   [X+1],0
0F73: 56 00 00 MOV   [X+0],0
(0177) 
(0178) void decodeTransmission(void);
0F76: 50 00    MOV   A,0
0F78: 08       PUSH  A
0F79: 08       PUSH  A
0F7A: 7C 19 4C LCALL _configToggle
0F7D: 38 FE    ADD   SP,254
(0179) 
(0180) void busListen(void);
(0181) 
0F7F: 10       PUSH  X
0F80: 50 FC    MOV   A,252
0F82: 7C 09 BF LCALL 0x09BF
0F85: 20       POP   X
(0182) void sayHello(void);
0F86: 10       PUSH  X
0F87: 50 FC    MOV   A,252
0F89: 7C 09 BF LCALL 0x09BF
0F8C: 20       POP   X
(0183) 
0F8D: 10       PUSH  X
0F8E: 50 00    MOV   A,0
0F90: 7C 09 BF LCALL 0x09BF
0F93: 20       POP   X
(0184) void servoInstruction(char id, char length, char instruction, char address, char value);
0F94: 10       PUSH  X
0F95: 50 FB    MOV   A,251
0F97: 7C 09 BF LCALL 0x09BF
0F9A: 20       POP   X
(0185) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
0F9B: 10       PUSH  X
0F9C: 50 C9    MOV   A,201
0F9E: 7C 09 BF LCALL 0x09BF
0FA1: 20       POP   X
(0186) 
0FA2: 62 D0 00 MOV   REG[208],0
0FA5: 52 FC    MOV   A,[X-4]
0FA7: 10       PUSH  X
0FA8: 7C 09 BF LCALL 0x09BF
0FAB: 20       POP   X
(0187) int clearConfig(int module_id);
0FAC: 10       PUSH  X
0FAD: 50 FD    MOV   A,253
0FAF: 7C 09 BF LCALL 0x09BF
0FB2: 20       POP   X
(0188) // This function checks the current mode and unloads the configuration for that mode.
0FB3: 10       PUSH  X
0FB4: 50 FD    MOV   A,253
0FB6: 7C 09 BF LCALL 0x09BF
0FB9: 20       POP   X
(0189) void unloadAllConfigs(void);
(0190) // This function unloads the configuration corresponding to the number passed to it.
(0191) void unloadConfig(int config_num);
0FBA: 10       PUSH  X
0FBB: 7C 09 92 LCALL 0x0992
0FBE: 62 D0 00 MOV   REG[208],0
0FC1: 20       POP   X
0FC2: 53 97    MOV   [__r0],A
0FC4: 47 97 20 TST   [__r0],32
0FC7: AF F2    JZ    0x0FBA
(0192) // Initialization function for the slave module controllers.
(0193) void initializeSlaves(void);
0FC9: 7C 1B F7 LCALL _xmitWait
(0194) // Static wait time of approximately 50 microseconds for use after starting a transmission.
(0195) void xmitWait(void);
0FCC: 50 00    MOV   A,0
0FCE: 08       PUSH  A
0FCF: 50 01    MOV   A,1
0FD1: 08       PUSH  A
0FD2: 7C 19 4C LCALL _configToggle
0FD5: 38 FE    ADD   SP,254
(0196) 
(0197) // This flag is set if there is a timeout.
0FD7: 10       PUSH  X
0FD8: 7C 0A 50 LCALL 0x0A50
0FDB: 20       POP   X
(0198) int TIMEOUT;
0FDC: 62 D0 00 MOV   REG[208],0
0FDF: 55 9D 00 MOV   [TIMEOUT+1],0
0FE2: 55 9C 00 MOV   [TIMEOUT],0
(0199) 
0FE5: 10       PUSH  X
0FE6: 7C 0A 4C LCALL 0x0A4C
0FE9: 20       POP   X
0FEA: 80 3C    JMP   0x1027
(0200) int NUM_MODULES;			// Stores the number of modules that have been discovered.
(0201) char COMMAND_SOURCE;		// Stores who the current command is from.
(0202) char COMMAND_DESTINATION;	// Stores who the current command is for.
(0203) char COMMAND_TYPE;			// Stores the type of command that was just read.
0FEC: 91 C3    CALL  _validTransmission
0FEE: 62 D0 00 MOV   REG[208],0
0FF1: 3C 97 00 CMP   [__r0],0
0FF4: B0 06    JNZ   0x0FFB
0FF6: 3C 96 00 CMP   [__r1],0
0FF9: A0 2D    JZ    0x1027
(0204) char PARAM[10];				// Stores a parameters that accompanies the command (if any).
(0205) int STATE;					// Stores the current configuration state of the system.
0FFB: 62 D0 00 MOV   REG[208],0
0FFE: 3C A2 CA CMP   [COMMAND_TYPE],202
1001: B0 25    JNZ   0x1027
(0206) 
(0207) void main()
(0208) {	
1003: 62 D0 00 MOV   REG[208],0
1006: 3C A0 00 CMP   [COMMAND_DESTINATION],0
1009: B0 1D    JNZ   0x1027
(0209) 	// Activate GPIO ISR.
(0210) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO);
100B: 62 D0 00 MOV   REG[208],0
100E: 51 A1    MOV   A,[COMMAND_SOURCE]
1010: 62 D0 00 MOV   REG[208],0
1013: 53 96    MOV   [__r1],A
1015: 50 00    MOV   A,0
1017: 3B FB    CMP   A,[X-5]
1019: B0 0D    JNZ   0x1027
101B: 51 96    MOV   A,[__r1]
101D: 3B FC    CMP   A,[X-4]
101F: B0 07    JNZ   0x1027
(0211) 	
(0212) 	// Turn on global interrupts for the transmission timeout timer.
1021: 56 01 01 MOV   [X+1],1
1024: 56 00 00 MOV   [X+0],0
1027: 62 D0 00 MOV   REG[208],0
102A: 51 9D    MOV   A,[TIMEOUT+1]
102C: 11 05    SUB   A,5
102E: 51 9C    MOV   A,[TIMEOUT]
1030: 31 80    XOR   A,128
1032: 19 80    SBB   A,128
1034: D0 0B    JNC   0x1040
1036: 3D 00 00 CMP   [X+0],0
1039: B0 06    JNZ   0x1040
103B: 3D 01 00 CMP   [X+1],0
103E: AF AD    JZ    0x0FEC
(0213) 	M8C_EnableGInt;
(0214) 	
(0215) 	// Initialize all of the slave modules.
(0216) 	initializeSlaves();
(0217) 	
(0218) 	while(1)
(0219) 	{	
1040: 10       PUSH  X
1041: 7C 0A 50 LCALL 0x0A50
1044: 20       POP   X
(0220) 		// If there's a command from the computer, read it.
1045: 62 D0 00 MOV   REG[208],0
1048: 55 9D 00 MOV   [TIMEOUT+1],0
104B: 55 9C 00 MOV   [TIMEOUT],0
(0221) 		if(COMP_SERIAL_bCmdCheck())
104E: 10       PUSH  X
104F: 7C 0A 4C LCALL 0x0A4C
1052: 20       POP   X
(0222) 		{
(0223) 			decodeTransmission();
1053: 62 D0 00 MOV   REG[208],0
1056: 52 01    MOV   A,[X+1]
1058: 53 96    MOV   [__r1],A
105A: 52 00    MOV   A,[X+0]
105C: 53 97    MOV   [__r0],A
105E: 38 FE    ADD   SP,254
1060: 20       POP   X
1061: 7F       RET   
(0224) 		}
(0225) 	}
(0226) }
(0227) 
_clearConfig:
  response             --> X+0
  module_id            --> X-5
1062: 10       PUSH  X
1063: 4F       MOV   X,SP
1064: 38 02    ADD   SP,2
(0228) int pingModule(int module_id)
1066: 56 01 00 MOV   [X+1],0
1069: 56 00 00 MOV   [X+0],0
(0229) {
(0230) 	int response = 0;
106C: 50 00    MOV   A,0
106E: 08       PUSH  A
106F: 08       PUSH  A
1070: 7C 19 4C LCALL _configToggle
1073: 38 FE    ADD   SP,254
(0231) 	
(0232) 	configToggle(TX_MODE);	// Toggle into TX mode.
(0233) 			
1075: 10       PUSH  X
1076: 50 FC    MOV   A,252
1078: 7C 09 BF LCALL 0x09BF
107B: 20       POP   X
(0234) 	// Transmit a hello.
107C: 10       PUSH  X
107D: 50 FC    MOV   A,252
107F: 7C 09 BF LCALL 0x09BF
1082: 20       POP   X
(0235) 	TRANSMIT_PutChar(START_TRANSMIT);
1083: 10       PUSH  X
1084: 50 00    MOV   A,0
1086: 7C 09 BF LCALL 0x09BF
1089: 20       POP   X
(0236) 	TRANSMIT_PutChar(START_TRANSMIT);
108A: 62 D0 00 MOV   REG[208],0
108D: 52 FC    MOV   A,[X-4]
108F: 10       PUSH  X
1090: 7C 09 BF LCALL 0x09BF
1093: 20       POP   X
(0237) 	TRANSMIT_PutChar(MASTER_ID);
1094: 10       PUSH  X
1095: 50 CC    MOV   A,204
1097: 7C 09 BF LCALL 0x09BF
109A: 20       POP   X
(0238) 	TRANSMIT_PutChar(module_id);
109B: 10       PUSH  X
109C: 50 FD    MOV   A,253
109E: 7C 09 BF LCALL 0x09BF
10A1: 20       POP   X
(0239) 	TRANSMIT_PutChar(PING);
10A2: 10       PUSH  X
10A3: 50 FD    MOV   A,253
10A5: 7C 09 BF LCALL 0x09BF
10A8: 20       POP   X
(0240) 	TRANSMIT_PutChar(END_TRANSMIT);
(0241) 	TRANSMIT_PutChar(END_TRANSMIT);
(0242) 	
10A9: 10       PUSH  X
10AA: 7C 09 92 LCALL 0x0992
10AD: 62 D0 00 MOV   REG[208],0
10B0: 20       POP   X
10B1: 53 97    MOV   [__r0],A
10B3: 47 97 20 TST   [__r0],32
10B6: AF F2    JZ    0x10A9
(0243) 	// Wait for the transmission to finish.
(0244) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
10B8: 7C 1B F7 LCALL _xmitWait
(0245) 	
(0246) 	xmitWait();
10BB: 50 00    MOV   A,0
10BD: 08       PUSH  A
10BE: 50 01    MOV   A,1
10C0: 08       PUSH  A
10C1: 7C 19 4C LCALL _configToggle
10C4: 38 FE    ADD   SP,254
(0247) 	
(0248) 	configToggle(RX_MODE);	// Listen for the response.
10C6: 3D FB 00 CMP   [X-5],0
10C9: B0 06    JNZ   0x10D0
10CB: 3D FC FE CMP   [X-4],254
10CE: A0 7D    JZ    0x114C
(0249) 	
(0250) 	RX_TIMEOUT_Stop();
10D0: 10       PUSH  X
10D1: 7C 0A 50 LCALL 0x0A50
10D4: 20       POP   X
(0251) 	TIMEOUT = 0;
10D5: 62 D0 00 MOV   REG[208],0
10D8: 55 9D 00 MOV   [TIMEOUT+1],0
10DB: 55 9C 00 MOV   [TIMEOUT],0
(0252) 	RX_TIMEOUT_Start();
10DE: 10       PUSH  X
10DF: 7C 0A 4C LCALL 0x0A4C
10E2: 20       POP   X
10E3: 80 3C    JMP   0x1120
(0253) 	
(0254) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
(0255) 	{
(0256) 		if(validTransmission())
10E5: 90 CA    CALL  _validTransmission
10E7: 62 D0 00 MOV   REG[208],0
10EA: 3C 97 00 CMP   [__r0],0
10ED: B0 06    JNZ   0x10F4
10EF: 3C 96 00 CMP   [__r1],0
10F2: A0 2D    JZ    0x1120
(0257) 		{
(0258) 			if(COMMAND_TYPE == PING)	// This is the response we are looking for.
10F4: 62 D0 00 MOV   REG[208],0
10F7: 3C A2 CD CMP   [COMMAND_TYPE],205
10FA: B0 25    JNZ   0x1120
(0259) 			{
(0260) 				// If this is for me, check who it was from.
(0261) 				if(COMMAND_DESTINATION == MASTER_ID)
10FC: 62 D0 00 MOV   REG[208],0
10FF: 3C A0 00 CMP   [COMMAND_DESTINATION],0
1102: B0 1D    JNZ   0x1120
(0262) 				{
(0263) 					if(COMMAND_SOURCE == module_id)
1104: 62 D0 00 MOV   REG[208],0
1107: 51 A1    MOV   A,[COMMAND_SOURCE]
1109: 62 D0 00 MOV   REG[208],0
110C: 53 96    MOV   [__r1],A
110E: 50 00    MOV   A,0
1110: 3B FB    CMP   A,[X-5]
1112: B0 0D    JNZ   0x1120
1114: 51 96    MOV   A,[__r1]
1116: 3B FC    CMP   A,[X-4]
1118: B0 07    JNZ   0x1120
(0264) 					{
(0265) 						response = 1;
111A: 56 01 01 MOV   [X+1],1
111D: 56 00 00 MOV   [X+0],0
1120: 62 D0 00 MOV   REG[208],0
1123: 51 9D    MOV   A,[TIMEOUT+1]
1125: 11 05    SUB   A,5
1127: 51 9C    MOV   A,[TIMEOUT]
1129: 31 80    XOR   A,128
112B: 19 80    SBB   A,128
112D: D0 0B    JNC   0x1139
112F: 3D 00 00 CMP   [X+0],0
1132: B0 06    JNZ   0x1139
1134: 3D 01 00 CMP   [X+1],0
1137: AF AD    JZ    0x10E5
(0266) 					}
(0267) 				}
(0268) 			}
(0269) 		}
(0270) 	}
(0271) 	
(0272) 	RX_TIMEOUT_Stop();
1139: 10       PUSH  X
113A: 7C 0A 50 LCALL 0x0A50
113D: 20       POP   X
(0273) 	TIMEOUT = 0;
113E: 62 D0 00 MOV   REG[208],0
1141: 55 9D 00 MOV   [TIMEOUT+1],0
1144: 55 9C 00 MOV   [TIMEOUT],0
(0274) 	RX_TIMEOUT_Start();
1147: 10       PUSH  X
1148: 7C 0A 4C LCALL 0x0A4C
114B: 20       POP   X
(0275) 	
(0276) 	return response;
(0277) }
114C: 62 D0 00 MOV   REG[208],0
114F: 52 01    MOV   A,[X+1]
1151: 53 96    MOV   [__r1],A
1153: 52 00    MOV   A,[X+0]
1155: 53 97    MOV   [__r0],A
1157: 38 FE    ADD   SP,254
1159: 20       POP   X
115A: 7F       RET   
(0278) 
(0279) int assignID(int assigned_ID)
(0280) {
(0281) 	int success = 0;		// Stores 0 on fail, 1 on success.
(0282) 	
(0283) 	configToggle(TX_MODE);	// Switch to TX mode.
_sayHello:
115B: 50 00    MOV   A,0
115D: 08       PUSH  A
115E: 08       PUSH  A
115F: 97 EB    CALL  _configToggle
1161: 38 FE    ADD   SP,254
(0284) 
(0285) 	// Transmit the assignment.
(0286) 	TRANSMIT_PutChar(START_TRANSMIT);
1163: 10       PUSH  X
1164: 50 FC    MOV   A,252
1166: 7C 09 BF LCALL 0x09BF
1169: 20       POP   X
(0287) 	TRANSMIT_PutChar(START_TRANSMIT);
116A: 10       PUSH  X
116B: 50 FC    MOV   A,252
116D: 7C 09 BF LCALL 0x09BF
1170: 20       POP   X
(0288) 	TRANSMIT_PutChar(MASTER_ID);
1171: 10       PUSH  X
1172: 50 00    MOV   A,0
1174: 7C 09 BF LCALL 0x09BF
1177: 20       POP   X
(0289) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
1178: 10       PUSH  X
1179: 50 FB    MOV   A,251
117B: 7C 09 BF LCALL 0x09BF
117E: 20       POP   X
(0290) 	TRANSMIT_PutChar(ID_ASSIGNMENT);
117F: 10       PUSH  X
1180: 50 C8    MOV   A,200
1182: 7C 09 BF LCALL 0x09BF
1185: 20       POP   X
(0291) 	TRANSMIT_PutChar(assigned_ID);
1186: 10       PUSH  X
1187: 50 FD    MOV   A,253
1189: 7C 09 BF LCALL 0x09BF
118C: 20       POP   X
(0292) 	TRANSMIT_PutChar(END_TRANSMIT);
118D: 10       PUSH  X
118E: 50 FD    MOV   A,253
1190: 7C 09 BF LCALL 0x09BF
1193: 20       POP   X
(0293) 	TRANSMIT_PutChar(END_TRANSMIT);
(0294) 	
(0295) 	// Wait for the transmission to finish.
1194: 10       PUSH  X
1195: 7C 09 92 LCALL 0x0992
1198: 62 D0 00 MOV   REG[208],0
119B: 20       POP   X
119C: 53 97    MOV   [__r0],A
119E: 47 97 20 TST   [__r0],32
11A1: AF F2    JZ    0x1194
(0296) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
(0297) 	
11A3: 7C 1B F7 LCALL _xmitWait
(0298) 	xmitWait();
(0299) 	
11A6: 50 00    MOV   A,0
11A8: 08       PUSH  A
11A9: 50 01    MOV   A,1
11AB: 08       PUSH  A
11AC: 97 9E    CALL  _configToggle
11AE: 38 FE    ADD   SP,254
11B0: 7F       RET   
(0300) 	configToggle(RX_MODE);	// Switch back to receive mode.
(0301) 	
(0302) 	RX_TIMEOUT_Stop();
(0303) 	TIMEOUT = 0;
(0304) 	RX_TIMEOUT_Start();
_validTransmission:
  valid_transmit       --> X+3
  i                    --> X+1
  tempByte             --> X+0
11B1: 10       PUSH  X
11B2: 4F       MOV   X,SP
11B3: 38 05    ADD   SP,5
(0305) 	
11B5: 56 04 00 MOV   [X+4],0
11B8: 56 03 00 MOV   [X+3],0
(0306) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
11BB: 56 02 00 MOV   [X+2],0
11BE: 56 01 00 MOV   [X+1],0
(0307) 	{
11C1: 56 00 00 MOV   [X+0],0
11C4: 80 C2    JMP   0x1287
(0308) 		if(validTransmission())
(0309) 		{
(0310) 			if(COMMAND_TYPE == ID_ASSIGN_OK)	// This is the response we are looking for.
(0311) 			{
11C6: 10       PUSH  X
11C7: 7C 0B 3B LCALL 0x0B3B
11CA: 62 D0 00 MOV   REG[208],0
11CD: 20       POP   X
11CE: 39 FC    CMP   A,252
11D0: B0 B6    JNZ   0x1287
(0312) 				// If this is for me, check who it was from.
11D2: 80 A5    JMP   0x1278
(0313) 				if(COMMAND_DESTINATION == MASTER_ID)
(0314) 				{
(0315) 					if(COMMAND_SOURCE == assigned_ID)
11D4: 10       PUSH  X
11D5: 7C 0B 3B LCALL 0x0B3B
11D8: 62 D0 00 MOV   REG[208],0
11DB: 20       POP   X
11DC: 39 FC    CMP   A,252
11DE: B0 99    JNZ   0x1278
(0316) 					{
11E0: 80 88    JMP   0x1269
(0317) 						success = 1;
(0318) 					}
(0319) 				}
11E2: 10       PUSH  X
11E3: 7C 0B 3B LCALL 0x0B3B
11E6: 20       POP   X
11E7: 54 00    MOV   [X+0],A
11E9: 39 00    CMP   A,0
11EB: A0 7D    JZ    0x1269
(0320) 			}
(0321) 		}
11ED: 52 00    MOV   A,[X+0]
11EF: 62 D0 00 MOV   REG[208],0
11F2: 53 A1    MOV   [COMMAND_SOURCE],A
11F4: 80 65    JMP   0x125A
(0322) 	}
(0323) 	
(0324) 	RX_TIMEOUT_Stop();
(0325) 	TIMEOUT = 0;
11F6: 10       PUSH  X
11F7: 7C 0B 3B LCALL 0x0B3B
11FA: 62 D0 00 MOV   REG[208],0
11FD: 20       POP   X
11FE: 54 00    MOV   [X+0],A
1200: 39 00    CMP   A,0
1202: A0 57    JZ    0x125A
(0326) 	RX_TIMEOUT_Start();
(0327) 	
1204: 3D 00 C8 CMP   [X+0],200
1207: C0 52    JC    0x125A
(0328) 	return success;
(0329) }
1209: 52 00    MOV   A,[X+0]
120B: 62 D0 00 MOV   REG[208],0
120E: 53 A2    MOV   [COMMAND_TYPE],A
1210: 80 3A    JMP   0x124B
(0330) 
(0331) int clearConfig(int module_id)
(0332) {
(0333) 	int response = 0;
1212: 10       PUSH  X
1213: 7C 0B 3B LCALL 0x0B3B
1216: 62 D0 00 MOV   REG[208],0
1219: 20       POP   X
121A: 54 00    MOV   [X+0],A
121C: 39 00    CMP   A,0
121E: A0 2C    JZ    0x124B
(0334) 	
(0335) 	configToggle(TX_MODE);	// Toggle into TX mode.
1220: 3D 00 FD CMP   [X+0],253
1223: A0 18    JZ    0x123C
(0336) 			
(0337) 	// Transmit a hello.
1225: 52 02    MOV   A,[X+2]
1227: 01 85    ADD   A,133
1229: 53 96    MOV   [__r1],A
122B: 52 01    MOV   A,[X+1]
122D: 09 00    ADC   A,0
122F: 60 D5    MOV   REG[213],A
1231: 52 00    MOV   A,[X+0]
1233: 3F 96    MVI   [__r1],A
(0338) 	TRANSMIT_PutChar(START_TRANSMIT);
1235: 77 02    INC   [X+2]
1237: 0F 01 00 ADC   [X+1],0
(0339) 	TRANSMIT_PutChar(START_TRANSMIT);
123A: 80 10    JMP   0x124B
(0340) 	TRANSMIT_PutChar(MASTER_ID);
(0341) 	TRANSMIT_PutChar(module_id);
(0342) 	TRANSMIT_PutChar(CLEAR_CONFIG);
123C: 56 04 01 MOV   [X+4],1
123F: 56 03 00 MOV   [X+3],0
(0343) 	TRANSMIT_PutChar(END_TRANSMIT);
1242: 62 D0 00 MOV   REG[208],0
1245: 55 9D 05 MOV   [TIMEOUT+1],5
1248: 55 9C 00 MOV   [TIMEOUT],0
124B: 62 D0 00 MOV   REG[208],0
124E: 51 9D    MOV   A,[TIMEOUT+1]
1250: 11 05    SUB   A,5
1252: 51 9C    MOV   A,[TIMEOUT]
1254: 31 80    XOR   A,128
1256: 19 80    SBB   A,128
1258: CF B9    JC    0x1212
125A: 62 D0 00 MOV   REG[208],0
125D: 51 9D    MOV   A,[TIMEOUT+1]
125F: 11 05    SUB   A,5
1261: 51 9C    MOV   A,[TIMEOUT]
1263: 31 80    XOR   A,128
1265: 19 80    SBB   A,128
1267: CF 8E    JC    0x11F6
1269: 62 D0 00 MOV   REG[208],0
126C: 51 9D    MOV   A,[TIMEOUT+1]
126E: 11 05    SUB   A,5
1270: 51 9C    MOV   A,[TIMEOUT]
1272: 31 80    XOR   A,128
1274: 19 80    SBB   A,128
1276: CF 6B    JC    0x11E2
1278: 62 D0 00 MOV   REG[208],0
127B: 51 9D    MOV   A,[TIMEOUT+1]
127D: 11 05    SUB   A,5
127F: 51 9C    MOV   A,[TIMEOUT]
1281: 31 80    XOR   A,128
1283: 19 80    SBB   A,128
1285: CF 4E    JC    0x11D4
1287: 62 D0 00 MOV   REG[208],0
128A: 51 9D    MOV   A,[TIMEOUT+1]
128C: 11 05    SUB   A,5
128E: 51 9C    MOV   A,[TIMEOUT]
1290: 31 80    XOR   A,128
1292: 19 80    SBB   A,128
1294: CF 31    JC    0x11C6
(0344) 	TRANSMIT_PutChar(END_TRANSMIT);
(0345) 	
(0346) 	// Wait for the transmission to finish.
(0347) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
(0348) 	
(0349) 	xmitWait();
(0350) 	
(0351) 	configToggle(RX_MODE);	// Listen for the response.
(0352) 	
(0353) 	if(module_id != BROADCAST)
(0354) 	{
(0355) 		RX_TIMEOUT_Stop();
(0356) 		TIMEOUT = 0;
(0357) 		RX_TIMEOUT_Start();
1296: 62 D0 00 MOV   REG[208],0
1299: 52 04    MOV   A,[X+4]
129B: 53 96    MOV   [__r1],A
129D: 52 03    MOV   A,[X+3]
129F: 53 97    MOV   [__r0],A
12A1: 38 FB    ADD   SP,251
12A3: 20       POP   X
12A4: 7F       RET   
(0358) 		
(0359) 		while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
(0360) 		{
(0361) 			if(validTransmission())
(0362) 			{
_decodeTransmission:
  tempByte             --> X+7
  angle                --> X+5
  ID                   --> X+4
  total                --> X+2
  param                --> X+0
12A5: 10       PUSH  X
12A6: 4F       MOV   X,SP
12A7: 38 08    ADD   SP,8
(0363) 				if(COMMAND_TYPE == CONFIG_CLEARED)	// This is the response we are looking for.
(0364) 				{
(0365) 					// If this is for me, check who it was from.
(0366) 					if(COMMAND_DESTINATION == MASTER_ID)
(0367) 					{
12A9: 56 03 00 MOV   [X+3],0
12AC: 56 02 00 MOV   [X+2],0
(0368) 						if(COMMAND_SOURCE == module_id)
(0369) 						{
12AF: 10       PUSH  X
12B0: 7C 0D F7 LCALL 0x0DF7
12B3: 62 D0 00 MOV   REG[208],0
12B6: 53 97    MOV   [__r0],A
12B8: 5A 96    MOV   [__r1],X
12BA: 20       POP   X
12BB: 51 96    MOV   A,[__r1]
12BD: 54 01    MOV   [X+1],A
12BF: 51 97    MOV   A,[__r0]
12C1: 54 00    MOV   [X+0],A
12C3: 3C 97 00 CMP   [__r0],0
12C6: B0 06    JNZ   0x12CD
12C8: 3C 96 00 CMP   [__r1],0
12CB: A5 06    JZ    0x17D2
(0370) 							response = 1;
(0371) 						}
12CD: 62 D0 00 MOV   REG[208],0
12D0: 52 01    MOV   A,[X+1]
12D2: 53 96    MOV   [__r1],A
12D4: 52 00    MOV   A,[X+0]
12D6: 60 D4    MOV   REG[212],A
12D8: 3E 96    MVI   A,[__r1]
12DA: 53 96    MOV   [__r1],A
12DC: 55 97 00 MOV   [__r0],0
12DF: 3C 97 00 CMP   [__r0],0
12E2: B0 05    JNZ   0x12E8
12E4: 39 6E    CMP   A,110
12E6: A0 0E    JZ    0x12F5
12E8: 62 D0 00 MOV   REG[208],0
12EB: 3C 97 00 CMP   [__r0],0
12EE: B0 3A    JNZ   0x1329
12F0: 3C 96 4E CMP   [__r1],78
12F3: B0 35    JNZ   0x1329
(0372) 					}
(0373) 				}
12F5: 10       PUSH  X
12F6: 7C 0D C8 LCALL 0x0DC8
12F9: 20       POP   X
(0374) 			}
12FA: 50 00    MOV   A,0
12FC: 08       PUSH  A
12FD: 50 0A    MOV   A,10
12FF: 08       PUSH  A
1300: 62 D0 00 MOV   REG[208],0
1303: 51 98    MOV   A,[NUM_MODULES]
1305: 08       PUSH  A
1306: 51 99    MOV   A,[NUM_MODULES+1]
1308: 08       PUSH  A
1309: 52 00    MOV   A,[X+0]
130B: 08       PUSH  A
130C: 52 01    MOV   A,[X+1]
130E: 08       PUSH  A
130F: 7C 1E 5E LCALL _itoa
1312: 38 FA    ADD   SP,250
(0375) 		}
1314: 10       PUSH  X
1315: 52 00    MOV   A,[X+0]
1317: 08       PUSH  A
1318: 52 01    MOV   A,[X+1]
131A: 5C       MOV   X,A
131B: 18       POP   A
131C: 7C 0D 47 LCALL 0x0D47
131F: 20       POP   X
(0376) 		
1320: 10       PUSH  X
1321: 50 0A    MOV   A,10
1323: 7C 0D 0A LCALL 0x0D0A
1326: 20       POP   X
(0377) 		RX_TIMEOUT_Stop();
1327: 84 AA    JMP   0x17D2
(0378) 		TIMEOUT = 0;
1329: 62 D0 00 MOV   REG[208],0
132C: 52 01    MOV   A,[X+1]
132E: 53 96    MOV   [__r1],A
1330: 52 00    MOV   A,[X+0]
1332: 60 D4    MOV   REG[212],A
1334: 3E 96    MVI   A,[__r1]
1336: 53 96    MOV   [__r1],A
1338: 55 97 00 MOV   [__r0],0
133B: 3C 97 00 CMP   [__r0],0
133E: B0 05    JNZ   0x1344
1340: 39 77    CMP   A,119
1342: A0 0E    JZ    0x1351
1344: 62 D0 00 MOV   REG[208],0
1347: 3C 97 00 CMP   [__r0],0
134A: B1 6B    JNZ   0x14B6
134C: 3C 96 57 CMP   [__r1],87
134F: B1 66    JNZ   0x14B6
(0379) 		RX_TIMEOUT_Start();
(0380) 	}
1351: 10       PUSH  X
1352: 7C 0D F7 LCALL 0x0DF7
1355: 62 D0 00 MOV   REG[208],0
1358: 53 97    MOV   [__r0],A
135A: 5A 96    MOV   [__r1],X
135C: 20       POP   X
135D: 51 96    MOV   A,[__r1]
135F: 54 01    MOV   [X+1],A
1361: 51 97    MOV   A,[__r0]
1363: 54 00    MOV   [X+0],A
1365: 3C 97 00 CMP   [__r0],0
1368: B0 06    JNZ   0x136F
136A: 3C 96 00 CMP   [__r1],0
136D: A4 64    JZ    0x17D2
(0381) 	
(0382) 	return response;
136F: 52 00    MOV   A,[X+0]
1371: 08       PUSH  A
1372: 52 01    MOV   A,[X+1]
1374: 08       PUSH  A
1375: 7C 1D 1D LCALL _atoi
1378: 38 FE    ADD   SP,254
137A: 62 D0 00 MOV   REG[208],0
137D: 51 96    MOV   A,[__r1]
137F: 54 04    MOV   [X+4],A
(0383) }
1381: 10       PUSH  X
1382: 7C 0D F7 LCALL 0x0DF7
1385: 62 D0 00 MOV   REG[208],0
1388: 53 97    MOV   [__r0],A
138A: 5A 96    MOV   [__r1],X
138C: 20       POP   X
138D: 51 96    MOV   A,[__r1]
138F: 54 01    MOV   [X+1],A
1391: 51 97    MOV   A,[__r0]
1393: 54 00    MOV   [X+0],A
1395: 3C 97 00 CMP   [__r0],0
1398: B0 06    JNZ   0x139F
139A: 3C 96 00 CMP   [__r1],0
139D: A4 34    JZ    0x17D2
(0384) 
(0385) // This function transmits a hello message.
139F: 62 D0 00 MOV   REG[208],0
13A2: 52 01    MOV   A,[X+1]
13A4: 53 96    MOV   [__r1],A
13A6: 52 00    MOV   A,[X+0]
13A8: 60 D4    MOV   REG[212],A
13AA: 3E 96    MVI   A,[__r1]
13AC: 53 96    MOV   [__r1],A
13AE: 55 97 00 MOV   [__r0],0
13B1: 3C 97 00 CMP   [__r0],0
13B4: B0 05    JNZ   0x13BA
13B6: 39 61    CMP   A,97
13B8: A0 0E    JZ    0x13C7
13BA: 62 D0 00 MOV   REG[208],0
13BD: 3C 97 00 CMP   [__r0],0
13C0: B0 89    JNZ   0x144A
13C2: 3C 96 41 CMP   [__r1],65
13C5: B0 84    JNZ   0x144A
(0386) void sayHello(void)
(0387) {
13C7: 10       PUSH  X
13C8: 7C 0D F7 LCALL 0x0DF7
13CB: 62 D0 00 MOV   REG[208],0
13CE: 53 97    MOV   [__r0],A
13D0: 5A 96    MOV   [__r1],X
13D2: 20       POP   X
13D3: 51 96    MOV   A,[__r1]
13D5: 54 01    MOV   [X+1],A
13D7: 51 97    MOV   A,[__r0]
13D9: 54 00    MOV   [X+0],A
13DB: 3C 97 00 CMP   [__r0],0
13DE: B0 06    JNZ   0x13E5
13E0: 3C 96 00 CMP   [__r1],0
13E3: A3 EE    JZ    0x17D2
(0388) 	configToggle(TX_MODE);				// Toggle into TX mode.
(0389) 			
13E5: 10       PUSH  X
13E6: 7C 0D C8 LCALL 0x0DC8
13E9: 20       POP   X
(0390) 	// Transmit a hello.
13EA: 52 00    MOV   A,[X+0]
13EC: 08       PUSH  A
13ED: 52 01    MOV   A,[X+1]
13EF: 08       PUSH  A
13F0: 7C 1D 1D LCALL _atoi
13F3: 38 FE    ADD   SP,254
13F5: 62 D0 00 MOV   REG[208],0
13F8: 51 96    MOV   A,[__r1]
13FA: 54 03    MOV   [X+3],A
13FC: 51 97    MOV   A,[__r0]
13FE: 54 02    MOV   [X+2],A
(0391) 	TRANSMIT_PutChar(START_TRANSMIT);
1400: 50 01    MOV   A,1
1402: 08       PUSH  A
1403: 50 00    MOV   A,0
1405: 08       PUSH  A
1406: 52 02    MOV   A,[X+2]
1408: 08       PUSH  A
1409: 52 03    MOV   A,[X+3]
140B: 08       PUSH  A
140C: 7C 1C 8B LCALL __divmod_16X16_16
140F: 38 FE    ADD   SP,254
1411: 18       POP   A
1412: 53 96    MOV   [__r1],A
1414: 18       POP   A
1415: 51 96    MOV   A,[__r1]
1417: 54 05    MOV   [X+5],A
(0392) 	TRANSMIT_PutChar(START_TRANSMIT);
1419: 50 01    MOV   A,1
141B: 08       PUSH  A
141C: 50 00    MOV   A,0
141E: 08       PUSH  A
141F: 52 02    MOV   A,[X+2]
1421: 08       PUSH  A
1422: 52 03    MOV   A,[X+3]
1424: 08       PUSH  A
1425: 7C 1C 8B LCALL __divmod_16X16_16
1428: 18       POP   A
1429: 53 96    MOV   [__r1],A
142B: 18       POP   A
142C: 38 FE    ADD   SP,254
142E: 51 96    MOV   A,[__r1]
1430: 54 06    MOV   [X+6],A
(0393) 	TRANSMIT_PutChar(MASTER_ID);
1432: 52 06    MOV   A,[X+6]
1434: 08       PUSH  A
1435: 52 05    MOV   A,[X+5]
1437: 08       PUSH  A
1438: 50 1E    MOV   A,30
143A: 08       PUSH  A
143B: 50 03    MOV   A,3
143D: 08       PUSH  A
143E: 50 05    MOV   A,5
1440: 08       PUSH  A
1441: 52 04    MOV   A,[X+4]
1443: 08       PUSH  A
1444: 94 55    CALL  _longServoInstruction
1446: 38 FA    ADD   SP,250
(0394) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
(0395) 	TRANSMIT_PutChar(HELLO_BYTE);
1448: 83 89    JMP   0x17D2
(0396) 	TRANSMIT_PutChar(END_TRANSMIT);
144A: 62 D0 00 MOV   REG[208],0
144D: 52 01    MOV   A,[X+1]
144F: 53 96    MOV   [__r1],A
1451: 52 00    MOV   A,[X+0]
1453: 60 D4    MOV   REG[212],A
1455: 3E 96    MVI   A,[__r1]
1457: 53 96    MOV   [__r1],A
1459: 55 97 00 MOV   [__r0],0
145C: 3C 97 00 CMP   [__r0],0
145F: B0 05    JNZ   0x1465
1461: 39 70    CMP   A,112
1463: A0 0E    JZ    0x1472
1465: 62 D0 00 MOV   REG[208],0
1468: 3C 97 00 CMP   [__r0],0
146B: B3 66    JNZ   0x17D2
146D: 3C 96 50 CMP   [__r1],80
1470: B3 61    JNZ   0x17D2
(0397) 	TRANSMIT_PutChar(END_TRANSMIT);
(0398) 	
1472: 10       PUSH  X
1473: 7C 0D F7 LCALL 0x0DF7
1476: 62 D0 00 MOV   REG[208],0
1479: 53 97    MOV   [__r0],A
147B: 5A 96    MOV   [__r1],X
147D: 20       POP   X
147E: 51 96    MOV   A,[__r1]
1480: 54 01    MOV   [X+1],A
1482: 51 97    MOV   A,[__r0]
1484: 54 00    MOV   [X+0],A
1486: 3C 97 00 CMP   [__r0],0
1489: B0 06    JNZ   0x1490
148B: 3C 96 00 CMP   [__r1],0
148E: A3 43    JZ    0x17D2
(0399) 	// Wait for the transmission to finish.
(0400) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
1490: 10       PUSH  X
1491: 7C 0D C8 LCALL 0x0DC8
1494: 20       POP   X
(0401) 	
1495: 52 00    MOV   A,[X+0]
1497: 08       PUSH  A
1498: 52 01    MOV   A,[X+1]
149A: 08       PUSH  A
149B: 7C 1D 1D LCALL _atoi
149E: 62 D0 00 MOV   REG[208],0
14A1: 51 96    MOV   A,[__r1]
14A3: 08       PUSH  A
14A4: 50 18    MOV   A,24
14A6: 08       PUSH  A
14A7: 50 03    MOV   A,3
14A9: 08       PUSH  A
14AA: 50 04    MOV   A,4
14AC: 08       PUSH  A
14AD: 52 04    MOV   A,[X+4]
14AF: 08       PUSH  A
14B0: 93 46    CALL  _servoInstruction
14B2: 38 F9    ADD   SP,249
(0402) 	xmitWait();
(0403) 	
(0404) 	configToggle(RX_MODE);				// Listen for the response.
(0405) }
(0406) 
14B4: 83 1D    JMP   0x17D2
(0407) // This function returns whether or not a valid transmission has been received.
14B6: 62 D0 00 MOV   REG[208],0
14B9: 52 01    MOV   A,[X+1]
14BB: 53 96    MOV   [__r1],A
14BD: 52 00    MOV   A,[X+0]
14BF: 60 D4    MOV   REG[212],A
14C1: 3E 96    MVI   A,[__r1]
14C3: 53 96    MOV   [__r1],A
14C5: 55 97 00 MOV   [__r0],0
14C8: 3C 97 00 CMP   [__r0],0
14CB: B0 05    JNZ   0x14D1
14CD: 39 72    CMP   A,114
14CF: A0 0E    JZ    0x14DE
14D1: 62 D0 00 MOV   REG[208],0
14D4: 3C 97 00 CMP   [__r0],0
14D7: B2 FA    JNZ   0x17D2
14D9: 3C 96 52 CMP   [__r1],82
14DC: B2 F5    JNZ   0x17D2
(0408) int validTransmission(void)
(0409) {
14DE: 10       PUSH  X
14DF: 7C 0D F7 LCALL 0x0DF7
14E2: 62 D0 00 MOV   REG[208],0
14E5: 53 97    MOV   [__r0],A
14E7: 5A 96    MOV   [__r1],X
14E9: 20       POP   X
14EA: 51 96    MOV   A,[__r1]
14EC: 54 01    MOV   [X+1],A
14EE: 51 97    MOV   A,[__r0]
14F0: 54 00    MOV   [X+0],A
14F2: 3C 97 00 CMP   [__r0],0
14F5: B0 06    JNZ   0x14FC
14F7: 3C 96 00 CMP   [__r1],0
14FA: A2 D7    JZ    0x17D2
(0410) 	int valid_transmit = 0;
(0411) 	int i = 0;
14FC: 52 00    MOV   A,[X+0]
14FE: 08       PUSH  A
14FF: 52 01    MOV   A,[X+1]
1501: 08       PUSH  A
1502: 7C 1D 1D LCALL _atoi
1505: 38 FE    ADD   SP,254
1507: 62 D0 00 MOV   REG[208],0
150A: 51 96    MOV   A,[__r1]
150C: 54 04    MOV   [X+4],A
(0412) 	char tempByte = 0;
150E: 10       PUSH  X
150F: 7C 0D F7 LCALL 0x0DF7
1512: 62 D0 00 MOV   REG[208],0
1515: 53 97    MOV   [__r0],A
1517: 5A 96    MOV   [__r1],X
1519: 20       POP   X
151A: 51 96    MOV   A,[__r1]
151C: 54 01    MOV   [X+1],A
151E: 51 97    MOV   A,[__r0]
1520: 54 00    MOV   [X+0],A
1522: 3C 97 00 CMP   [__r0],0
1525: B0 06    JNZ   0x152C
1527: 3C 96 00 CMP   [__r1],0
152A: A2 A7    JZ    0x17D2
(0413) 	
(0414) 	while(TIMEOUT < RX_TIMEOUT_DURATION)
152C: 62 D0 00 MOV   REG[208],0
152F: 52 01    MOV   A,[X+1]
1531: 53 96    MOV   [__r1],A
1533: 52 00    MOV   A,[X+0]
1535: 60 D4    MOV   REG[212],A
1537: 3E 96    MVI   A,[__r1]
1539: 53 96    MOV   [__r1],A
153B: 55 97 00 MOV   [__r0],0
153E: 3C 97 00 CMP   [__r0],0
1541: B0 05    JNZ   0x1547
1543: 39 61    CMP   A,97
1545: A0 0E    JZ    0x1554
1547: 62 D0 00 MOV   REG[208],0
154A: 3C 97 00 CMP   [__r0],0
154D: B0 CC    JNZ   0x161A
154F: 3C 96 41 CMP   [__r1],65
1552: B0 C7    JNZ   0x161A
(0415) 	{
(0416) 		if(RECEIVE_cReadChar() == START_TRANSMIT)
1554: 10       PUSH  X
1555: 7C 0D C8 LCALL 0x0DC8
1558: 20       POP   X
(0417) 		{
1559: 50 02    MOV   A,2
155B: 08       PUSH  A
155C: 50 24    MOV   A,36
155E: 08       PUSH  A
155F: 50 02    MOV   A,2
1561: 08       PUSH  A
1562: 50 04    MOV   A,4
1564: 08       PUSH  A
1565: 52 04    MOV   A,[X+4]
1567: 08       PUSH  A
1568: 92 8E    CALL  _servoInstruction
(0418) 			while(TIMEOUT < RX_TIMEOUT_DURATION)
156A: 50 00    MOV   A,0
156C: 08       PUSH  A
156D: 50 01    MOV   A,1
156F: 08       PUSH  A
1570: 93 DA    CALL  _configToggle
1572: 38 F9    ADD   SP,249
1574: 80 94    JMP   0x1609
(0419) 			{
(0420) 				if(RECEIVE_cReadChar() == START_TRANSMIT)
(0421) 				{
(0422) 					while(TIMEOUT < RX_TIMEOUT_DURATION)
(0423) 					{
1576: 10       PUSH  X
1577: 7C 0B 3B LCALL 0x0B3B
157A: 62 D0 00 MOV   REG[208],0
157D: 20       POP   X
157E: 39 FF    CMP   A,255
1580: B0 88    JNZ   0x1609
(0424) 						if(tempByte = RECEIVE_cReadChar())
(0425) 						{
1582: 10       PUSH  X
1583: 7C 0B 33 LCALL 0x0B33
1586: 62 D0 00 MOV   REG[208],0
1589: 20       POP   X
158A: 39 FF    CMP   A,255
158C: B0 7C    JNZ   0x1609
(0426) 							COMMAND_SOURCE = tempByte;
(0427) 							
158E: 10       PUSH  X
158F: 7C 0B 33 LCALL 0x0B33
1592: 62 D0 00 MOV   REG[208],0
1595: 20       POP   X
1596: 3B 04    CMP   A,[X+4]
1598: B0 70    JNZ   0x1609
(0428) 							while(TIMEOUT < RX_TIMEOUT_DURATION)
(0429) 							{
159A: 10       PUSH  X
159B: 7C 0B 33 LCALL 0x0B33
159E: 62 D0 00 MOV   REG[208],0
15A1: 20       POP   X
15A2: 39 04    CMP   A,4
15A4: B0 64    JNZ   0x1609
(0430) 								if(tempByte = RECEIVE_cReadChar())
(0431) 								{
15A6: 10       PUSH  X
15A7: 7C 0B 33 LCALL 0x0B33
15AA: 62 D0 00 MOV   REG[208],0
15AD: 20       POP   X
15AE: 39 00    CMP   A,0
15B0: B0 58    JNZ   0x1609
(0432) 									if(tempByte >= HELLO_BYTE)
(0433) 									{
15B2: 10       PUSH  X
15B3: 7C 0B 33 LCALL 0x0B33
15B6: 62 D0 00 MOV   REG[208],0
15B9: 20       POP   X
15BA: 54 05    MOV   [X+5],A
(0434) 										COMMAND_TYPE = tempByte;
15BC: 10       PUSH  X
15BD: 7C 0B 33 LCALL 0x0B33
15C0: 62 D0 00 MOV   REG[208],0
15C3: 20       POP   X
15C4: 54 06    MOV   [X+6],A
(0435) 										
(0436) 										while(TIMEOUT < RX_TIMEOUT_DURATION)
15C6: 50 00    MOV   A,0
15C8: 08       PUSH  A
15C9: 50 02    MOV   A,2
15CB: 08       PUSH  A
15CC: 93 7E    CALL  _configToggle
(0437) 										{
(0438) 											if(tempByte = RECEIVE_cReadChar())
15CE: 52 05    MOV   A,[X+5]
15D0: 54 03    MOV   [X+3],A
15D2: 52 06    MOV   A,[X+6]
15D4: 54 02    MOV   [X+2],A
(0439) 											{
15D6: 50 00    MOV   A,0
15D8: 08       PUSH  A
15D9: 50 0A    MOV   A,10
15DB: 08       PUSH  A
15DC: 52 02    MOV   A,[X+2]
15DE: 08       PUSH  A
15DF: 52 03    MOV   A,[X+3]
15E1: 08       PUSH  A
15E2: 52 00    MOV   A,[X+0]
15E4: 08       PUSH  A
15E5: 52 01    MOV   A,[X+1]
15E7: 08       PUSH  A
15E8: 7C 1E 5E LCALL _itoa
15EB: 38 F8    ADD   SP,248
(0440) 												if(tempByte != END_TRANSMIT)
15ED: 10       PUSH  X
15EE: 52 00    MOV   A,[X+0]
15F0: 08       PUSH  A
15F1: 52 01    MOV   A,[X+1]
15F3: 5C       MOV   X,A
15F4: 18       POP   A
15F5: 7C 0D 47 LCALL 0x0D47
15F8: 20       POP   X
(0441) 												{
15F9: 10       PUSH  X
15FA: 50 0A    MOV   A,10
15FC: 7C 0D 0A LCALL 0x0D0A
15FF: 20       POP   X
(0442) 													PARAM[i] = tempByte;
(0443) 													i++;
1600: 62 D0 00 MOV   REG[208],0
1603: 55 9D 05 MOV   [TIMEOUT+1],5
1606: 55 9C 00 MOV   [TIMEOUT],0
1609: 62 D0 00 MOV   REG[208],0
160C: 51 9D    MOV   A,[TIMEOUT+1]
160E: 11 05    SUB   A,5
1610: 51 9C    MOV   A,[TIMEOUT]
1612: 31 80    XOR   A,128
1614: 19 80    SBB   A,128
1616: CF 5F    JC    0x1576
(0444) 												}
(0445) 												else
(0446) 												{
(0447) 													valid_transmit = 1;
(0448) 													TIMEOUT = RX_TIMEOUT_DURATION;
(0449) 												}
(0450) 											}
1618: 81 B9    JMP   0x17D2
(0451) 										}
161A: 62 D0 00 MOV   REG[208],0
161D: 52 01    MOV   A,[X+1]
161F: 53 96    MOV   [__r1],A
1621: 52 00    MOV   A,[X+0]
1623: 60 D4    MOV   REG[212],A
1625: 3E 96    MVI   A,[__r1]
1627: 53 96    MOV   [__r1],A
1629: 55 97 00 MOV   [__r0],0
162C: 3C 97 00 CMP   [__r0],0
162F: B0 05    JNZ   0x1635
1631: 39 70    CMP   A,112
1633: A0 0E    JZ    0x1642
1635: 62 D0 00 MOV   REG[208],0
1638: 3C 97 00 CMP   [__r0],0
163B: B0 A5    JNZ   0x16E1
163D: 3C 96 50 CMP   [__r1],80
1640: B0 A0    JNZ   0x16E1
(0452) 									}
(0453) 								}
1642: 10       PUSH  X
1643: 7C 0D C8 LCALL 0x0DC8
1646: 20       POP   X
(0454) 							}
1647: 50 01    MOV   A,1
1649: 08       PUSH  A
164A: 50 18    MOV   A,24
164C: 08       PUSH  A
164D: 50 02    MOV   A,2
164F: 08       PUSH  A
1650: 50 04    MOV   A,4
1652: 08       PUSH  A
1653: 52 04    MOV   A,[X+4]
1655: 08       PUSH  A
1656: 91 A0    CALL  _servoInstruction
(0455) 						}
1658: 50 00    MOV   A,0
165A: 08       PUSH  A
165B: 50 01    MOV   A,1
165D: 08       PUSH  A
165E: 92 EC    CALL  _configToggle
1660: 38 F9    ADD   SP,249
1662: 80 6D    JMP   0x16D0
(0456) 					}
(0457) 				}
(0458) 			}
(0459) 		}
(0460) 	}
1664: 10       PUSH  X
1665: 7C 0B 3B LCALL 0x0B3B
1668: 62 D0 00 MOV   REG[208],0
166B: 20       POP   X
166C: 39 FF    CMP   A,255
166E: B0 61    JNZ   0x16D0
(0461) 	
(0462) 	return valid_transmit;
1670: 10       PUSH  X
1671: 7C 0B 33 LCALL 0x0B33
1674: 62 D0 00 MOV   REG[208],0
1677: 20       POP   X
1678: 39 FF    CMP   A,255
167A: B0 55    JNZ   0x16D0
(0463) }
(0464) 
167C: 10       PUSH  X
167D: 7C 0B 33 LCALL 0x0B33
1680: 62 D0 00 MOV   REG[208],0
1683: 20       POP   X
1684: 3B 04    CMP   A,[X+4]
1686: B0 49    JNZ   0x16D0
(0465) // This function decodes the transmission and takes the correct action.
(0466) void decodeTransmission(void)
1688: 10       PUSH  X
1689: 7C 0B 33 LCALL 0x0B33
168C: 62 D0 00 MOV   REG[208],0
168F: 20       POP   X
1690: 39 03    CMP   A,3
1692: B0 3D    JNZ   0x16D0
(0467) {
(0468) 	char* param;
1694: 10       PUSH  X
1695: 7C 0B 33 LCALL 0x0B33
1698: 62 D0 00 MOV   REG[208],0
169B: 20       POP   X
169C: 39 00    CMP   A,0
169E: B0 31    JNZ   0x16D0
(0469) 	char ID;
(0470) 	char tempByte;
16A0: 10       PUSH  X
16A1: 7C 0B 33 LCALL 0x0B33
16A4: 62 D0 00 MOV   REG[208],0
16A7: 20       POP   X
16A8: 54 07    MOV   [X+7],A
(0471) 	char angle[2];
(0472) 	int total = 0;
16AA: 50 00    MOV   A,0
16AC: 08       PUSH  A
16AD: 50 02    MOV   A,2
16AF: 08       PUSH  A
16B0: 92 9A    CALL  _configToggle
16B2: 38 FE    ADD   SP,254
(0473) 	
(0474) 	if(param = COMP_SERIAL_szGetParam())
(0475) 	{
16B4: 62 D0 00 MOV   REG[208],0
16B7: 52 07    MOV   A,[X+7]
16B9: 01 30    ADD   A,48
16BB: 10       PUSH  X
16BC: 7C 0D 0A LCALL 0x0D0A
16BF: 20       POP   X
(0476) 		if((param[0] == 'n') || (param[0] == 'N'))
16C0: 10       PUSH  X
16C1: 50 0A    MOV   A,10
16C3: 7C 0D 0A LCALL 0x0D0A
16C6: 20       POP   X
(0477) 		{
(0478) 			COMP_SERIAL_CmdReset();
16C7: 62 D0 00 MOV   REG[208],0
16CA: 55 9D 05 MOV   [TIMEOUT+1],5
16CD: 55 9C 00 MOV   [TIMEOUT],0
16D0: 62 D0 00 MOV   REG[208],0
16D3: 51 9D    MOV   A,[TIMEOUT+1]
16D5: 11 05    SUB   A,5
16D7: 51 9C    MOV   A,[TIMEOUT]
16D9: 31 80    XOR   A,128
16DB: 19 80    SBB   A,128
16DD: CF 86    JC    0x1664
(0479) 			itoa(param,NUM_MODULES,10);
(0480) 			COMP_SERIAL_PutString(param);
(0481) 			COMP_SERIAL_PutChar('\n');
(0482) 		}
(0483) 		else if((param[0] == 'w') || (param[0] == 'W'))
(0484) 		{
(0485) 			if(param = COMP_SERIAL_szGetParam())
16DF: 80 F2    JMP   0x17D2
(0486) 			{
16E1: 62 D0 00 MOV   REG[208],0
16E4: 52 01    MOV   A,[X+1]
16E6: 53 96    MOV   [__r1],A
16E8: 52 00    MOV   A,[X+0]
16EA: 60 D4    MOV   REG[212],A
16EC: 3E 96    MVI   A,[__r1]
16EE: 53 96    MOV   [__r1],A
16F0: 55 97 00 MOV   [__r0],0
16F3: 3C 97 00 CMP   [__r0],0
16F6: B0 05    JNZ   0x16FC
16F8: 39 74    CMP   A,116
16FA: A0 0E    JZ    0x1709
16FC: 62 D0 00 MOV   REG[208],0
16FF: 3C 97 00 CMP   [__r0],0
1702: B0 68    JNZ   0x176B
1704: 3C 96 54 CMP   [__r1],84
1707: B0 63    JNZ   0x176B
(0487) 				ID = atoi(param);
(0488) 				if(param = COMP_SERIAL_szGetParam())
1709: 10       PUSH  X
170A: 7C 0D C8 LCALL 0x0DC8
170D: 20       POP   X
(0489) 				{
170E: 62 D0 00 MOV   REG[208],0
1711: 52 04    MOV   A,[X+4]
1713: 53 96    MOV   [__r1],A
1715: 50 00    MOV   A,0
1717: 08       PUSH  A
1718: 51 96    MOV   A,[__r1]
171A: 08       PUSH  A
171B: 7C 0E 7D LCALL _pingModule
171E: 38 FE    ADD   SP,254
1720: 62 D0 00 MOV   REG[208],0
1723: 3C 97 00 CMP   [__r0],0
1726: B0 06    JNZ   0x172D
1728: 3C 96 00 CMP   [__r1],0
172B: A0 A6    JZ    0x17D2
(0490) 					if((param[0] == 'a') || (param[0] == 'A'))
(0491) 					{
172D: 50 00    MOV   A,0
172F: 08       PUSH  A
1730: 50 02    MOV   A,2
1732: 08       PUSH  A
1733: 92 17    CALL  _configToggle
(0492) 						if(param = COMP_SERIAL_szGetParam())
(0493) 						{
1735: 62 D0 00 MOV   REG[208],0
1738: 51 85    MOV   A,[PARAM]
173A: 54 03    MOV   [X+3],A
173C: 56 02 00 MOV   [X+2],0
(0494) 							COMP_SERIAL_CmdReset();
173F: 50 00    MOV   A,0
1741: 08       PUSH  A
1742: 50 0A    MOV   A,10
1744: 08       PUSH  A
1745: 52 02    MOV   A,[X+2]
1747: 08       PUSH  A
1748: 52 03    MOV   A,[X+3]
174A: 08       PUSH  A
174B: 52 00    MOV   A,[X+0]
174D: 08       PUSH  A
174E: 52 01    MOV   A,[X+1]
1750: 08       PUSH  A
1751: 7C 1E 5E LCALL _itoa
1754: 38 F8    ADD   SP,248
(0495) 							total = atoi(param);
1756: 10       PUSH  X
1757: 52 00    MOV   A,[X+0]
1759: 08       PUSH  A
175A: 52 01    MOV   A,[X+1]
175C: 5C       MOV   X,A
175D: 18       POP   A
175E: 7C 0D 47 LCALL 0x0D47
1761: 20       POP   X
(0496) 							angle[0] = total%256;
1762: 10       PUSH  X
1763: 50 0A    MOV   A,10
1765: 7C 0D 0A LCALL 0x0D0A
1768: 20       POP   X
(0497) 							angle[1] = total/256;
(0498) 							longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
1769: 80 68    JMP   0x17D2
(0499) 						}
176B: 62 D0 00 MOV   REG[208],0
176E: 52 01    MOV   A,[X+1]
1770: 53 96    MOV   [__r1],A
1772: 52 00    MOV   A,[X+0]
1774: 60 D4    MOV   REG[212],A
1776: 3E 96    MVI   A,[__r1]
1778: 53 96    MOV   [__r1],A
177A: 55 97 00 MOV   [__r0],0
177D: 3C 97 00 CMP   [__r0],0
1780: B0 05    JNZ   0x1786
1782: 39 63    CMP   A,99
1784: A0 0E    JZ    0x1793
1786: 62 D0 00 MOV   REG[208],0
1789: 3C 97 00 CMP   [__r0],0
178C: B0 45    JNZ   0x17D2
178E: 3C 96 43 CMP   [__r1],67
1791: B0 40    JNZ   0x17D2
(0500) 					}
(0501) 					else if((param[0] == 'p') || (param[0] == 'P'))
1793: 10       PUSH  X
1794: 7C 0D C8 LCALL 0x0DC8
1797: 20       POP   X
(0502) 					{
1798: 62 D0 00 MOV   REG[208],0
179B: 52 04    MOV   A,[X+4]
179D: 53 96    MOV   [__r1],A
179F: 50 00    MOV   A,0
17A1: 08       PUSH  A
17A2: 51 96    MOV   A,[__r1]
17A4: 08       PUSH  A
17A5: 7C 0E 7D LCALL _pingModule
17A8: 38 FE    ADD   SP,254
17AA: 62 D0 00 MOV   REG[208],0
17AD: 3C 97 00 CMP   [__r0],0
17B0: B0 06    JNZ   0x17B7
17B2: 3C 96 00 CMP   [__r1],0
17B5: A0 1C    JZ    0x17D2
(0503) 						if(param = COMP_SERIAL_szGetParam())
(0504) 						{
17B7: 50 00    MOV   A,0
17B9: 08       PUSH  A
17BA: 50 02    MOV   A,2
17BC: 08       PUSH  A
17BD: 91 8D    CALL  _configToggle
17BF: 38 FE    ADD   SP,254
(0505) 							COMP_SERIAL_CmdReset();
(0506) 							servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
17C1: 10       PUSH  X
17C2: 62 D0 00 MOV   REG[208],0
17C5: 51 86    MOV   A,[PARAM+1]
17C7: 7C 0D 0A LCALL 0x0D0A
17CA: 20       POP   X
(0507) 						}
17CB: 10       PUSH  X
17CC: 50 0A    MOV   A,10
17CE: 7C 0D 0A LCALL 0x0D0A
17D1: 20       POP   X
(0508) 					}
(0509) 				}
(0510) 			}
(0511) 		}
(0512) 		else if((param[0] == 'r') || (param[0] == 'R'))
(0513) 		{			
(0514) 			if(param = COMP_SERIAL_szGetParam())
(0515) 			{
17D2: 62 D0 00 MOV   REG[208],0
17D5: 3C 9A 00 CMP   [STATE],0
17D8: B0 06    JNZ   0x17DF
17DA: 3C 9B 02 CMP   [STATE+1],2
17DD: A0 0D    JZ    0x17EB
(0516) 				ID = atoi(param);
(0517) 				if(param = COMP_SERIAL_szGetParam())
17DF: 50 00    MOV   A,0
17E1: 08       PUSH  A
17E2: 50 02    MOV   A,2
17E4: 08       PUSH  A
17E5: 91 65    CALL  _configToggle
17E7: 38 FE    ADD   SP,254
(0518) 				{
17E9: 80 0A    JMP   0x17F4
(0519) 					if((param[0] == 'a') || (param[0] == 'A'))
(0520) 					{
(0521) 						COMP_SERIAL_CmdReset();
17EB: 62 D0 00 MOV   REG[208],0
17EE: 55 9D 00 MOV   [TIMEOUT+1],0
17F1: 55 9C 00 MOV   [TIMEOUT],0
(0522) 						servoInstruction(ID,4,READ_SERVO,36,2);
17F4: 38 F8    ADD   SP,248
17F6: 20       POP   X
17F7: 7F       RET   
(0523) 						configToggle(RX_MODE);
(0524) 							
(0525) 						// Loop until we read a response or time out.
(0526) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
(0527) 						{
(0528) 							if(RECEIVE_cReadChar() == SERVO_START)
_servoInstruction:
  total                --> X+1
  checksum             --> X+0
  value                --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
17F8: 10       PUSH  X
17F9: 4F       MOV   X,SP
17FA: 38 03    ADD   SP,3
(0529) 							{
(0530) 								if(RECEIVE_cGetChar() == SERVO_START)
(0531) 								{
(0532) 									if(RECEIVE_cGetChar() == ID)
17FC: 62 D0 00 MOV   REG[208],0
17FF: 52 FB    MOV   A,[X-5]
1801: 53 96    MOV   [__r1],A
1803: 55 97 00 MOV   [__r0],0
1806: 52 FC    MOV   A,[X-4]
1808: 02 96    ADD   A,[__r1]
180A: 53 96    MOV   [__r1],A
180C: 50 00    MOV   A,0
180E: 0A 97    ADC   A,[__r0]
1810: 53 97    MOV   [__r0],A
1812: 52 FA    MOV   A,[X-6]
1814: 04 96    ADD   [__r1],A
1816: 0E 97 00 ADC   [__r0],0
1819: 52 F9    MOV   A,[X-7]
181B: 04 96    ADD   [__r1],A
181D: 0E 97 00 ADC   [__r0],0
1820: 52 F8    MOV   A,[X-8]
1822: 53 94    MOV   [__r3],A
1824: 55 95 00 MOV   [__r2],0
1827: 51 96    MOV   A,[__r1]
1829: 02 94    ADD   A,[__r3]
182B: 54 02    MOV   [X+2],A
182D: 51 97    MOV   A,[__r0]
182F: 0A 95    ADC   A,[__r2]
1831: 54 01    MOV   [X+1],A
(0533) 									{
(0534) 										if(RECEIVE_cGetChar() == 4)
(0535) 										{
1833: 50 01    MOV   A,1
1835: 08       PUSH  A
1836: 50 00    MOV   A,0
1838: 08       PUSH  A
1839: 52 01    MOV   A,[X+1]
183B: 08       PUSH  A
183C: 52 02    MOV   A,[X+2]
183E: 08       PUSH  A
183F: 7C 1C 8B LCALL __divmod_16X16_16
1842: 38 FE    ADD   SP,254
1844: 18       POP   A
1845: 53 96    MOV   [__r1],A
1847: 18       POP   A
1848: 50 FF    MOV   A,255
184A: 12 96    SUB   A,[__r1]
184C: 54 00    MOV   [X+0],A
(0536) 											if(RECEIVE_cGetChar() == 0)
(0537) 											{
(0538) 												angle[0] = RECEIVE_cGetChar();
184E: 10       PUSH  X
184F: 50 FF    MOV   A,255
1851: 7C 08 E6 LCALL 0x08E6
1854: 20       POP   X
(0539) 												angle[1] = RECEIVE_cGetChar();
1855: 10       PUSH  X
1856: 50 FF    MOV   A,255
1858: 7C 08 E6 LCALL 0x08E6
185B: 20       POP   X
(0540) 												
185C: 10       PUSH  X
185D: 52 FC    MOV   A,[X-4]
185F: 7C 08 E6 LCALL 0x08E6
1862: 20       POP   X
(0541) 												configToggle(PC_MODE);
1863: 10       PUSH  X
1864: 52 FB    MOV   A,[X-5]
1866: 7C 08 E6 LCALL 0x08E6
1869: 20       POP   X
(0542) 												
186A: 10       PUSH  X
186B: 52 FA    MOV   A,[X-6]
186D: 7C 08 E6 LCALL 0x08E6
1870: 20       POP   X
(0543) 												total = ((angle[1])*256) + angle[0];
1871: 10       PUSH  X
1872: 52 F9    MOV   A,[X-7]
1874: 7C 08 E6 LCALL 0x08E6
1877: 20       POP   X
(0544) 												itoa(param,total,10);
1878: 10       PUSH  X
1879: 52 F8    MOV   A,[X-8]
187B: 7C 08 E6 LCALL 0x08E6
187E: 20       POP   X
(0545) 												COMP_SERIAL_PutString(param);
187F: 10       PUSH  X
1880: 52 00    MOV   A,[X+0]
1882: 7C 08 E6 LCALL 0x08E6
1885: 20       POP   X
(0546) 												COMP_SERIAL_PutChar('\n');
(0547) 
(0548) 												TIMEOUT = RX_TIMEOUT_DURATION;
1886: 10       PUSH  X
1887: 7C 08 B9 LCALL 0x08B9
188A: 62 D0 00 MOV   REG[208],0
188D: 20       POP   X
188E: 53 97    MOV   [__r0],A
1890: 47 97 20 TST   [__r0],32
1893: AF F2    JZ    0x1886
(0549) 											}
(0550) 										}
(0551) 									}
1895: 93 60    CALL  _xmitWait
1897: 38 FD    ADD   SP,253
1899: 20       POP   X
189A: 7F       RET   
(0552) 								}
(0553) 							}
(0554) 						}
(0555) 					}
(0556) 					else if ((param[0] == 'p') || (param[0] == 'P'))
_longServoInstruction:
  total                --> X+1
  checksum             --> X+0
  value2               --> X-9
  value1               --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
189B: 10       PUSH  X
189C: 4F       MOV   X,SP
189D: 38 03    ADD   SP,3
(0557) 					{
(0558) 						COMP_SERIAL_CmdReset();
(0559) 						servoInstruction(ID,4,READ_SERVO,24,1);
(0560) 						configToggle(RX_MODE);
189F: 62 D0 00 MOV   REG[208],0
18A2: 52 FB    MOV   A,[X-5]
18A4: 53 96    MOV   [__r1],A
18A6: 55 97 00 MOV   [__r0],0
18A9: 52 FC    MOV   A,[X-4]
18AB: 02 96    ADD   A,[__r1]
18AD: 53 96    MOV   [__r1],A
18AF: 50 00    MOV   A,0
18B1: 0A 97    ADC   A,[__r0]
18B3: 53 97    MOV   [__r0],A
18B5: 52 FA    MOV   A,[X-6]
18B7: 04 96    ADD   [__r1],A
18B9: 0E 97 00 ADC   [__r0],0
18BC: 52 F9    MOV   A,[X-7]
18BE: 04 96    ADD   [__r1],A
18C0: 0E 97 00 ADC   [__r0],0
18C3: 52 F8    MOV   A,[X-8]
18C5: 04 96    ADD   [__r1],A
18C7: 0E 97 00 ADC   [__r0],0
18CA: 52 F7    MOV   A,[X-9]
18CC: 53 94    MOV   [__r3],A
18CE: 55 95 00 MOV   [__r2],0
18D1: 51 96    MOV   A,[__r1]
18D3: 02 94    ADD   A,[__r3]
18D5: 54 02    MOV   [X+2],A
18D7: 51 97    MOV   A,[__r0]
18D9: 0A 95    ADC   A,[__r2]
18DB: 54 01    MOV   [X+1],A
(0561) 							
(0562) 						// Loop until we read a response or time out.
(0563) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
18DD: 50 01    MOV   A,1
18DF: 08       PUSH  A
18E0: 50 00    MOV   A,0
18E2: 08       PUSH  A
18E3: 52 01    MOV   A,[X+1]
18E5: 08       PUSH  A
18E6: 52 02    MOV   A,[X+2]
18E8: 08       PUSH  A
18E9: 7C 1C 8B LCALL __divmod_16X16_16
18EC: 38 FE    ADD   SP,254
18EE: 18       POP   A
18EF: 53 96    MOV   [__r1],A
18F1: 18       POP   A
18F2: 50 FF    MOV   A,255
18F4: 12 96    SUB   A,[__r1]
18F6: 54 00    MOV   [X+0],A
(0564) 						{
(0565) 							if(RECEIVE_cReadChar() == SERVO_START)
(0566) 							{
18F8: 10       PUSH  X
18F9: 50 FF    MOV   A,255
18FB: 7C 08 E6 LCALL 0x08E6
18FE: 20       POP   X
(0567) 								if(RECEIVE_cGetChar() == SERVO_START)
18FF: 10       PUSH  X
1900: 50 FF    MOV   A,255
1902: 7C 08 E6 LCALL 0x08E6
1905: 20       POP   X
(0568) 								{
1906: 10       PUSH  X
1907: 52 FC    MOV   A,[X-4]
1909: 7C 08 E6 LCALL 0x08E6
190C: 20       POP   X
(0569) 									if(RECEIVE_cGetChar() == ID)
190D: 10       PUSH  X
190E: 52 FB    MOV   A,[X-5]
1910: 7C 08 E6 LCALL 0x08E6
1913: 20       POP   X
(0570) 									{
1914: 10       PUSH  X
1915: 52 FA    MOV   A,[X-6]
1917: 7C 08 E6 LCALL 0x08E6
191A: 20       POP   X
(0571) 										if(RECEIVE_cGetChar() == 3)
191B: 10       PUSH  X
191C: 52 F9    MOV   A,[X-7]
191E: 7C 08 E6 LCALL 0x08E6
1921: 20       POP   X
(0572) 										{
1922: 10       PUSH  X
1923: 52 F8    MOV   A,[X-8]
1925: 7C 08 E6 LCALL 0x08E6
1928: 20       POP   X
(0573) 											if(RECEIVE_cGetChar() == 0)
1929: 10       PUSH  X
192A: 52 F7    MOV   A,[X-9]
192C: 7C 08 E6 LCALL 0x08E6
192F: 20       POP   X
(0574) 											{
1930: 10       PUSH  X
1931: 52 00    MOV   A,[X+0]
1933: 7C 08 E6 LCALL 0x08E6
1936: 20       POP   X
(0575) 												tempByte = RECEIVE_cGetChar();
(0576) 												
(0577) 												configToggle(PC_MODE);
1937: 10       PUSH  X
1938: 7C 08 B9 LCALL 0x08B9
193B: 62 D0 00 MOV   REG[208],0
193E: 20       POP   X
193F: 53 97    MOV   [__r0],A
1941: 47 97 20 TST   [__r0],32
1944: AF F2    JZ    0x1937
(0578) 												
(0579) 												// Convert tempByte to an ascii value and send.
(0580) 												COMP_SERIAL_PutChar(tempByte + 48);
1946: 92 AF    CALL  _xmitWait
1948: 38 FD    ADD   SP,253
194A: 20       POP   X
194B: 7F       RET   
(0581) 												COMP_SERIAL_PutChar('\n');
(0582) 
(0583) 												TIMEOUT = RX_TIMEOUT_DURATION;
(0584) 											}
(0585) 										}
(0586) 									}
_configToggle:
  mode                 --> X-5
194C: 10       PUSH  X
194D: 4F       MOV   X,SP
(0587) 								}
(0588) 							}
194E: 43 00 FF OR    REG[0],255
(0589) 						}
1951: 62 02 00 MOV   REG[2],0
(0590) 					}
(0591) 					else if ((param[0] == 't') || (param[0] == 'T'))
(0592) 					{
(0593) 						COMP_SERIAL_CmdReset();
1954: 62 D0 00 MOV   REG[208],0
1957: 3C 9A 00 CMP   [STATE],0
195A: B0 06    JNZ   0x1961
195C: 3C 9B 00 CMP   [STATE+1],0
195F: A0 10    JZ    0x1970
(0594) 						if(pingModule(ID))
(0595) 						{
1961: 62 D0 00 MOV   REG[208],0
1964: 51 9A    MOV   A,[STATE]
1966: 08       PUSH  A
1967: 51 9B    MOV   A,[STATE+1]
1969: 08       PUSH  A
196A: 90 C4    CALL  _unloadConfig
196C: 38 FE    ADD   SP,254
(0596) 							configToggle(PC_MODE);
196E: 80 03    JMP   0x1972
(0597) 												
(0598) 							total = PARAM[0];
(0599) 							itoa(param,total,10);
1970: 90 B4    CALL  _unloadAllConfigs
(0600) 							COMP_SERIAL_PutString(param);
(0601) 							COMP_SERIAL_PutChar('\n');
(0602) 						}
1972: 3D FB 00 CMP   [X-5],0
1975: B0 32    JNZ   0x19A8
1977: 3D FC 02 CMP   [X-4],2
197A: B0 2D    JNZ   0x19A8
(0603) 					}
(0604) 					else if ((param[0] == 'c') || (param[0] == 'C'))
197C: 7C 06 3F LCALL 0x063F
(0605) 					{
(0606) 						COMP_SERIAL_CmdReset();
197F: 10       PUSH  X
1980: 50 01    MOV   A,1
1982: 7C 0C C5 LCALL 0x0CC5
1985: 20       POP   X
(0607) 						if(pingModule(ID))
1986: 10       PUSH  X
1987: 50 00    MOV   A,0
1989: 7C 0C 96 LCALL 0x0C96
198C: 20       POP   X
(0608) 						{	
(0609) 							configToggle(PC_MODE);
198D: 10       PUSH  X
198E: 50 00    MOV   A,0
1990: 7C 08 AD LCALL 0x08AD
1993: 20       POP   X
(0610) 												
(0611) 							COMP_SERIAL_PutChar(PARAM[1]);
1994: 62 D0 00 MOV   REG[208],0
1997: 55 9D 00 MOV   [TIMEOUT+1],0
199A: 55 9C 00 MOV   [TIMEOUT],0
(0612) 							COMP_SERIAL_PutChar('\n');
199D: 62 D0 00 MOV   REG[208],0
19A0: 55 9B 02 MOV   [STATE+1],2
19A3: 55 9A 00 MOV   [STATE],0
(0613) 						}
19A6: 80 7A    JMP   0x1A21
(0614) 					}
19A8: 3D FB 00 CMP   [X-5],0
19AB: B0 2C    JNZ   0x19D8
19AD: 3D FC 01 CMP   [X-4],1
19B0: B0 27    JNZ   0x19D8
(0615) 				}
(0616) 			}
19B2: 7C 07 1B LCALL 0x071B
(0617) 		}
(0618) 	}
(0619) 	
19B5: 10       PUSH  X
19B6: 50 00    MOV   A,0
19B8: 7C 0B 24 LCALL 0x0B24
19BB: 20       POP   X
(0620) 	if(STATE != PC_MODE)
(0621) 	{
(0622) 		configToggle(PC_MODE);
19BC: 62 D0 00 MOV   REG[208],0
19BF: 55 9D 00 MOV   [TIMEOUT+1],0
19C2: 55 9C 00 MOV   [TIMEOUT],0
(0623) 	}
19C5: 10       PUSH  X
19C6: 7C 0A 44 LCALL 0x0A44
(0624) 	else
19C9: 7C 0A 4C LCALL 0x0A4C
19CC: 20       POP   X
(0625) 	{
(0626) 		TIMEOUT = 0;
19CD: 62 D0 00 MOV   REG[208],0
19D0: 55 9B 01 MOV   [STATE+1],1
19D3: 55 9A 00 MOV   [STATE],0
(0627) 	}
19D6: 80 4A    JMP   0x1A21
(0628) }
19D8: 3D FB 00 CMP   [X-5],0
19DB: B0 45    JNZ   0x1A21
19DD: 3D FC 00 CMP   [X-4],0
19E0: B0 40    JNZ   0x1A21
(0629) 
(0630) // This function receives a destination, command length, instruction type, address, and value.
19E2: 7C 05 D6 LCALL 0x05D6
(0631) // With these parameters, the function sends a packet to the communication bus.
(0632) void servoInstruction(char id, char length, char instruction, char address, char value)
19E5: 10       PUSH  X
19E6: 50 00    MOV   A,0
19E8: 7C 09 86 LCALL 0x0986
19EB: 20       POP   X
(0633) {
(0634) 	char checksum;
19EC: 62 D0 00 MOV   REG[208],0
19EF: 55 9D 00 MOV   [TIMEOUT+1],0
19F2: 55 9C 00 MOV   [TIMEOUT],0
(0635) 	int total;
19F5: 10       PUSH  X
19F6: 7C 08 32 LCALL 0x0832
(0636) 	
19F9: 7C 08 3A LCALL 0x083A
19FC: 20       POP   X
(0637) 	total = id + length + instruction + address + value;
(0638) 	
19FD: 62 D0 00 MOV   REG[208],0
1A00: 3C 9C 00 CMP   [TIMEOUT],0
1A03: B0 06    JNZ   0x1A0A
1A05: 3C 9D 00 CMP   [TIMEOUT+1],0
1A08: AF F4    JZ    0x19FD
(0639) 	// Calculate the checksum value for our servo communication.
(0640) 	checksum = 255-(total%256);
(0641) 	
(0642) 	// Talk to the servo.
(0643) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
(0644) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
1A0A: 10       PUSH  X
1A0B: 7C 08 3E LCALL 0x083E
1A0E: 20       POP   X
(0645) 	TX_REPEATER_PutChar(id);			// Servo ID
1A0F: 62 D0 00 MOV   REG[208],0
1A12: 55 9D 00 MOV   [TIMEOUT+1],0
1A15: 55 9C 00 MOV   [TIMEOUT],0
(0646) 	TX_REPEATER_PutChar(length);		// The instruction length.
(0647) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
1A18: 62 D0 00 MOV   REG[208],0
1A1B: 55 9B 00 MOV   [STATE+1],0
1A1E: 55 9A 00 MOV   [STATE],0
(0648) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
(0649) 	TX_REPEATER_PutChar(value);			// The value to write or number of bytes to read.
(0650) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
(0651) 	
1A21: 43 02 FF OR    REG[2],255
1A24: 20       POP   X
1A25: 7F       RET   
(0652) 	// Wait for the transmission to finish.
(0653) 	while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
(0654) 	
(0655) 	// Make completely sure we're done.
(0656) 	xmitWait();
(0657) }
(0658) 
_unloadAllConfigs:
1A26: 7C 06 AE LCALL 0x06AE
(0659) // This function receives a destination, command length, instruction type, address, and two values.
1A29: 7C 07 74 LCALL 0x0774
(0660) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
1A2C: 7C 06 1A LCALL 0x061A
1A2F: 7F       RET   
(0661) {
(0662) 	char checksum;
(0663) 	int total;
(0664) 	
(0665) 	total = id + length + instruction + address + value1 + value2;
(0666) 	
_unloadConfig:
  config_num           --> X-5
1A30: 10       PUSH  X
1A31: 4F       MOV   X,SP
(0667) 	// Calculate the checksum value for our servo communication.
1A32: 3D FB 00 CMP   [X-5],0
1A35: B0 0B    JNZ   0x1A41
1A37: 3D FC 02 CMP   [X-4],2
1A3A: B0 06    JNZ   0x1A41
(0668) 	checksum = 255-(total%256);
(0669) 	
1A3C: 7C 06 AE LCALL 0x06AE
(0670) 	// Talk to the servo.
1A3F: 80 1D    JMP   0x1A5D
(0671) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
1A41: 3D FB 00 CMP   [X-5],0
1A44: B0 0B    JNZ   0x1A50
1A46: 3D FC 01 CMP   [X-4],1
1A49: B0 06    JNZ   0x1A50
(0672) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
(0673) 	TX_REPEATER_PutChar(id);			// Servo ID
1A4B: 7C 07 74 LCALL 0x0774
(0674) 	TX_REPEATER_PutChar(length);		// The instruction length.
1A4E: 80 0E    JMP   0x1A5D
(0675) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
1A50: 3D FB 00 CMP   [X-5],0
1A53: B0 09    JNZ   0x1A5D
1A55: 3D FC 00 CMP   [X-4],0
1A58: B0 04    JNZ   0x1A5D
(0676) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
(0677) 	TX_REPEATER_PutChar(value1);		// The first value to write.
1A5A: 7C 06 1A LCALL 0x061A
(0678) 	TX_REPEATER_PutChar(value2);		// The first value to write.
1A5D: 20       POP   X
1A5E: 7F       RET   
(0679) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
(0680) 	
(0681) 	// Wait for the transmission to finish.
(0682) 	while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
(0683) 	
_busListen:
1A5F: 50 00    MOV   A,0
1A61: 08       PUSH  A
1A62: 50 01    MOV   A,1
1A64: 08       PUSH  A
1A65: 9E E5    CALL  _configToggle
1A67: 38 FE    ADD   SP,254
1A69: 80 13    JMP   0x1A7D
(0684) 	// Make completely sure we're done.
(0685) 	xmitWait();
(0686) }
(0687) 
(0688) // This function allows the program to pass an RX or TX mode flag for switching between modes on the
1A6B: 10       PUSH  X
1A6C: 7C 0B 33 LCALL 0x0B33
1A6F: 20       POP   X
1A70: 39 00    CMP   A,0
1A72: A0 0A    JZ    0x1A7D
(0689) // half duplex UART serial communication line.
(0690) void configToggle(int mode)
1A74: 62 D0 00 MOV   REG[208],0
1A77: 55 9D 2C MOV   [TIMEOUT+1],44
1A7A: 55 9C 01 MOV   [TIMEOUT],1
1A7D: 62 D0 00 MOV   REG[208],0
1A80: 51 9D    MOV   A,[TIMEOUT+1]
1A82: 11 2C    SUB   A,44
1A84: 51 9C    MOV   A,[TIMEOUT]
1A86: 31 80    XOR   A,128
1A88: 19 81    SBB   A,129
1A8A: CF E0    JC    0x1A6B
(0691) {
(0692) 	// Disconnect from the global bus and leave the pin high.
(0693) 	PRT0DR |= 0b11111111;
(0694) 	PRT0GS &= 0b00000000;
(0695) 
1A8C: 62 D0 00 MOV   REG[208],0
1A8F: 55 9D 00 MOV   [TIMEOUT+1],0
1A92: 55 9C 00 MOV   [TIMEOUT],0
1A95: 80 13    JMP   0x1AA9
(0696) 	// Unload the configuration of the current state.
(0697) 	// If there is no state, blindly wipe all configurations.
(0698) 	if(STATE)
(0699) 	{
(0700) 		unloadConfig(STATE);
1A97: 10       PUSH  X
1A98: 7C 0B 3B LCALL 0x0B3B
1A9B: 20       POP   X
1A9C: 39 00    CMP   A,0
1A9E: A0 0A    JZ    0x1AA9
(0701) 	}
(0702) 	else
1AA0: 62 D0 00 MOV   REG[208],0
1AA3: 55 9D 00 MOV   [TIMEOUT+1],0
1AA6: 55 9C 00 MOV   [TIMEOUT],0
1AA9: 62 D0 00 MOV   REG[208],0
1AAC: 51 9D    MOV   A,[TIMEOUT+1]
1AAE: 11 64    SUB   A,100
1AB0: 51 9C    MOV   A,[TIMEOUT]
1AB2: 31 80    XOR   A,128
1AB4: 19 80    SBB   A,128
1AB6: CF E0    JC    0x1A97
1AB8: 7F       RET   
(0703) 	{
(0704) 		unloadAllConfigs();
(0705) 	}
(0706) 	
(0707) 	if(mode == PC_MODE)
(0708) 	{
_initializeSlaves:
  num_timeouts         --> X+0
1AB9: 10       PUSH  X
1ABA: 4F       MOV   X,SP
1ABB: 38 02    ADD   SP,2
(0709) 		LoadConfig_pc_listener();
1ABD: 56 01 00 MOV   [X+1],0
1AC0: 56 00 00 MOV   [X+0],0
(0710) 
(0711) 		COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
(0712) 		COMP_SERIAL_Start(UART_PARITY_NONE);			// Starts the UART.
1AC3: 62 D0 00 MOV   REG[208],0
1AC6: 55 99 00 MOV   [NUM_MODULES+1],0
1AC9: 55 98 00 MOV   [NUM_MODULES],0
(0713) 		
(0714) 		TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);		// Start the TX repeater.
(0715) 		
1ACC: 9F 91    CALL  _busListen
(0716) 		TIMEOUT = 0;
(0717) 		STATE = PC_MODE;
1ACE: 7C 11 5B LCALL _sayHello
1AD1: 81 0B    JMP   0x1BDD
(0718) 	}
(0719) 	else if(mode == RX_MODE)
(0720) 	{
(0721) 		LoadConfig_receiver_config();
(0722) 		
(0723) 		// Start the receiver.
1AD3: 7C 11 B1 LCALL _validTransmission
1AD6: 62 D0 00 MOV   REG[208],0
1AD9: 3C 97 00 CMP   [__r0],0
1ADC: B0 06    JNZ   0x1AE3
1ADE: 3C 96 00 CMP   [__r1],0
1AE1: A0 C8    JZ    0x1BAA
(0724) 		RECEIVE_Start(RECEIVE_PARITY_NONE);
(0725) 		
1AE3: 62 D0 00 MOV   REG[208],0
1AE6: 3C A2 C8 CMP   [COMMAND_TYPE],200
1AE9: B0 F3    JNZ   0x1BDD
(0726) 		// Start response timeout timer and enable its interrupt routine.
(0727) 		TIMEOUT = 0;
(0728) 		RX_TIMEOUT_EnableInt();
1AEB: 62 D0 00 MOV   REG[208],0
1AEE: 3C A0 00 CMP   [COMMAND_DESTINATION],0
1AF1: B0 EB    JNZ   0x1BDD
(0729) 		RX_TIMEOUT_Start();
(0730) 		
1AF3: 62 D0 00 MOV   REG[208],0
1AF6: 76 99    INC   [NUM_MODULES+1]
1AF8: 0E 98 00 ADC   [NUM_MODULES],0
(0731) 		STATE = RX_MODE;
1AFB: 56 01 00 MOV   [X+1],0
1AFE: 56 00 00 MOV   [X+0],0
(0732) 	}
(0733) 	else if(mode == TX_MODE)
1B01: 51 98    MOV   A,[NUM_MODULES]
1B03: 08       PUSH  A
1B04: 51 99    MOV   A,[NUM_MODULES+1]
1B06: 08       PUSH  A
1B07: 7C 0F 6C LCALL _assignID
1B0A: 38 FE    ADD   SP,254
1B0C: 62 D0 00 MOV   REG[208],0
1B0F: 3C 97 00 CMP   [__r0],0
1B12: B0 CA    JNZ   0x1BDD
1B14: 3C 96 00 CMP   [__r1],0
1B17: B0 C5    JNZ   0x1BDD
(0734) 	{
(0735) 		LoadConfig_transmitter_config();
(0736) 		// Start the transmitter.
(0737) 		TRANSMIT_Start(TRANSMIT_PARITY_NONE);
(0738) 		
1B19: 62 D0 00 MOV   REG[208],0
1B1C: 51 98    MOV   A,[NUM_MODULES]
1B1E: 08       PUSH  A
1B1F: 51 99    MOV   A,[NUM_MODULES+1]
1B21: 08       PUSH  A
1B22: 7C 0E 7D LCALL _pingModule
1B25: 38 FE    ADD   SP,254
1B27: 62 D0 00 MOV   REG[208],0
1B2A: 3C 97 00 CMP   [__r0],0
1B2D: B0 AF    JNZ   0x1BDD
1B2F: 3C 96 00 CMP   [__r1],0
1B32: B0 AA    JNZ   0x1BDD
(0739) 		TIMEOUT = 0;
(0740) 		TX_TIMEOUT_EnableInt();	// Make sure interrupts are enabled.
1B34: 62 D0 00 MOV   REG[208],0
1B37: 51 98    MOV   A,[NUM_MODULES]
1B39: 08       PUSH  A
1B3A: 51 99    MOV   A,[NUM_MODULES+1]
1B3C: 08       PUSH  A
1B3D: 7C 0E 7D LCALL _pingModule
1B40: 38 FE    ADD   SP,254
1B42: 62 D0 00 MOV   REG[208],0
1B45: 3C 97 00 CMP   [__r0],0
1B48: B0 94    JNZ   0x1BDD
1B4A: 3C 96 00 CMP   [__r1],0
1B4D: B0 8F    JNZ   0x1BDD
(0741) 		TX_TIMEOUT_Start();		// Start the timer.
(0742) 		
1B4F: 62 D0 00 MOV   REG[208],0
1B52: 51 98    MOV   A,[NUM_MODULES]
1B54: 08       PUSH  A
1B55: 51 99    MOV   A,[NUM_MODULES+1]
1B57: 08       PUSH  A
1B58: 7C 0E 7D LCALL _pingModule
1B5B: 38 FE    ADD   SP,254
1B5D: 62 D0 00 MOV   REG[208],0
1B60: 3C 97 00 CMP   [__r0],0
1B63: B0 79    JNZ   0x1BDD
1B65: 3C 96 00 CMP   [__r1],0
1B68: B0 74    JNZ   0x1BDD
(0743) 		while(!TIMEOUT)
(0744) 		{
1B6A: 62 D0 00 MOV   REG[208],0
1B6D: 51 98    MOV   A,[NUM_MODULES]
1B6F: 08       PUSH  A
1B70: 51 99    MOV   A,[NUM_MODULES+1]
1B72: 08       PUSH  A
1B73: 7C 0E 7D LCALL _pingModule
1B76: 38 FE    ADD   SP,254
1B78: 62 D0 00 MOV   REG[208],0
1B7B: 3C 97 00 CMP   [__r0],0
1B7E: B0 5E    JNZ   0x1BDD
1B80: 3C 96 00 CMP   [__r1],0
1B83: B0 59    JNZ   0x1BDD
(0745) 			// Do nothing while we wait for one timeout period.
(0746) 			// This is to allow everyone to get in the right configuration.
1B85: 62 D0 00 MOV   REG[208],0
1B88: 51 98    MOV   A,[NUM_MODULES]
1B8A: 08       PUSH  A
1B8B: 51 99    MOV   A,[NUM_MODULES+1]
1B8D: 08       PUSH  A
1B8E: 7C 0E 7D LCALL _pingModule
1B91: 38 FE    ADD   SP,254
1B93: 62 D0 00 MOV   REG[208],0
1B96: 3C 97 00 CMP   [__r0],0
1B99: B0 43    JNZ   0x1BDD
1B9B: 3C 96 00 CMP   [__r1],0
1B9E: B0 3E    JNZ   0x1BDD
(0747) 		}
(0748) 		
1BA0: 62 D0 00 MOV   REG[208],0
1BA3: 7A 99    DEC   [NUM_MODULES+1]
1BA5: 1E 98 00 SBB   [NUM_MODULES],0
(0749) 		TX_TIMEOUT_Stop();		// Stop the timer.
(0750) 		TIMEOUT = 0;			// Reset the timeout flag.
(0751) 		
(0752) 		STATE = TX_MODE;
(0753) 	}
(0754) 	
(0755) 	// Reconnect to the global bus.
(0756) 	PRT0GS |= 0b11111111;
(0757) }
1BA8: 80 34    JMP   0x1BDD
(0758) 
1BAA: 62 D0 00 MOV   REG[208],0
1BAD: 51 9D    MOV   A,[TIMEOUT+1]
1BAF: 11 05    SUB   A,5
1BB1: 51 9C    MOV   A,[TIMEOUT]
1BB3: 31 80    XOR   A,128
1BB5: 19 80    SBB   A,128
1BB7: C0 25    JC    0x1BDD
(0759) // This function blindly unloads all user configurations. This will be called once,
(0760) // when the system initially has no known state.
(0761) void unloadAllConfigs(void)
1BB9: 62 D0 00 MOV   REG[208],0
1BBC: 3C 98 00 CMP   [NUM_MODULES],0
1BBF: B0 06    JNZ   0x1BC6
1BC1: 3C 99 00 CMP   [NUM_MODULES+1],0
1BC4: A0 06    JZ    0x1BCB
(0762) {
(0763) 	UnloadConfig_pc_listener();
1BC6: 77 01    INC   [X+1]
1BC8: 0F 00 00 ADC   [X+0],0
(0764) 	UnloadConfig_receiver_config();
(0765) 	UnloadConfig_transmitter_config();
(0766) }
(0767) 
1BCB: 62 D0 00 MOV   REG[208],0
1BCE: 51 99    MOV   A,[NUM_MODULES+1]
1BD0: 11 FA    SUB   A,250
1BD2: 51 98    MOV   A,[NUM_MODULES]
1BD4: 31 80    XOR   A,128
1BD6: 19 80    SBB   A,128
1BD8: D0 04    JNC   0x1BDD
(0768) // This function unloads the configuration corresponding to the config number passed to it.
(0769) // We do this instead of unloadAllConfigs to cut down on set up time.
1BDA: 7C 11 5B LCALL _sayHello
1BDD: 52 01    MOV   A,[X+1]
1BDF: 11 0A    SUB   A,10
1BE1: 52 00    MOV   A,[X+0]
1BE3: 31 80    XOR   A,128
1BE5: 19 80    SBB   A,128
1BE7: CE EB    JC    0x1AD3
(0770) void unloadConfig(int config_num)
(0771) {
(0772) 	if(config_num == PC_MODE)
(0773) 	{
(0774) 		UnloadConfig_pc_listener();
(0775) 	}
1BE9: 50 00    MOV   A,0
1BEB: 08       PUSH  A
1BEC: 50 02    MOV   A,2
1BEE: 08       PUSH  A
1BEF: 9D 5B    CALL  _configToggle
1BF1: 38 FE    ADD   SP,254
1BF3: 38 FE    ADD   SP,254
1BF5: 20       POP   X
1BF6: 7F       RET   
(0776) 	else if(config_num == RX_MODE)
(0777) 	{
(0778) 		UnloadConfig_receiver_config();
(0779) 	}
_xmitWait:
  i                    --> X+0
1BF7: 10       PUSH  X
1BF8: 4F       MOV   X,SP
1BF9: 38 02    ADD   SP,2
(0780) 	else if(config_num == TX_MODE)
(0781) 	{
(0782) 		UnloadConfig_transmitter_config();
1BFB: 56 01 00 MOV   [X+1],0
1BFE: 56 00 00 MOV   [X+0],0
1C01: 77 01    INC   [X+1]
1C03: 0F 00 00 ADC   [X+0],0
1C06: 52 01    MOV   A,[X+1]
1C08: 11 19    SUB   A,25
1C0A: 52 00    MOV   A,[X+0]
1C0C: 31 80    XOR   A,128
1C0E: 19 80    SBB   A,128
1C10: CF F0    JC    0x1C01
1C12: 38 FE    ADD   SP,254
1C14: 20       POP   X
1C15: 7F       RET   
(0783) 	}
(0784) }
(0785) 
(0786) void busListen(void)
(0787) {
(0788) 	configToggle(RX_MODE);
(0789) 
_TX_TIMEOUT_ISR:
1C16: 71 C0    OR    F,192
1C18: 08       PUSH  A
1C19: 5D D0    MOV   A,REG[208]
1C1B: 08       PUSH  A
(0790) 	// Wait for the first byte.
1C1C: 62 D0 00 MOV   REG[208],0
1C1F: 76 9D    INC   [TIMEOUT+1]
1C21: 0E 9C 00 ADC   [TIMEOUT],0
(0791) 	while(TIMEOUT < BOOT_TIMEOUT)
(0792) 	{	
1C24: 62 DA FD MOV   REG[218],253
1C27: 18       POP   A
1C28: 60 D0    MOV   REG[208],A
1C2A: 18       POP   A
1C2B: 7E       RETI  
(0793) 		if(RECEIVE_cGetChar())
(0794) 		{
(0795) 			TIMEOUT = BOOT_TIMEOUT;
(0796) 		}
_RX_TIMEOUT_ISR:
1C2C: 71 C0    OR    F,192
1C2E: 08       PUSH  A
1C2F: 5D D0    MOV   A,REG[208]
1C31: 08       PUSH  A
(0797) 	}
1C32: 62 D0 00 MOV   REG[208],0
1C35: 76 9D    INC   [TIMEOUT+1]
1C37: 0E 9C 00 ADC   [TIMEOUT],0
(0798) 	
(0799) 	// Clear the timeout flag.
1C3A: 62 DA FD MOV   REG[218],253
1C3D: 18       POP   A
1C3E: 60 D0    MOV   REG[208],A
1C40: 18       POP   A
1C41: 7E       RETI  

FILE: lib\psocdynamicint.asm
                                   (0001) ; Generated by PSoC Designer 5.0.985.0
                                   (0002) ;
                                   (0003) ;
                                   (0004) ;  fakemasterINT.asm
                                   (0005) ;
                                   (0006) ;  Data: 29 October, 2001
                                   (0007) ;  Copyright Cypress MicroSystems 2001
                                   (0008) ;
                                   (0009) ;  This file is generated by the Device Editor on Application Generation.
                                   (0010) ;  It contains dispatch code that ensures that interrupt vectors are 
                                   (0011) ;  serviced by the appropriate ISR depending on the currently active
                                   (0012) ;  configuration.
                                   (0013) ;  
                                   (0014) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0015) ;  Edits to this file will not be preserved.
                                   (0016) ;
                                   (0017) include "PSoCDynamic.inc"
                                   (0018) include "m8c.inc"
                                   (0019) export	Dispatch_INTERRUPT_10
                                   (0020) export	Dispatch_INTERRUPT_9
                                   (0021) 
                                   (0022) 
                                   (0023) Dispatch_INTERRUPT_10:
1C42: 08       PUSH  A             (0024) 	push	a
1C43: 50 00    MOV   A,0           (0025) 	mov		a,0
1C45: 47 02 02 TST   [2],2         (0026) 	tst		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
1C48: B0 13    JNZ   0x1C5C        (0027) 	jnz		Dispatch_INTERRUPT_10_END
1C4A: 50 04    MOV   A,4           (0028) 	mov		a,4
1C4C: 47 02 04 TST   [2],4         (0029) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1C4F: B0 0C    JNZ   0x1C5C        (0030) 	jnz		Dispatch_INTERRUPT_10_END
1C51: 50 08    MOV   A,8           (0031) 	mov		a,8
1C53: 47 02 01 TST   [2],1         (0032) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1C56: B0 05    JNZ   0x1C5C        (0033) 	jnz		Dispatch_INTERRUPT_10_END
1C58: 18       POP   A             (0034) 	pop		a
1C59: 7E       RETI                (0035) 	reti
                                   (0036) ; Stop Code Compressor from breaking table alignment
                                   (0037) ; The next instruction does not get executed.
1C5A: 71 00    OR    F,0           (0038) 	Suspend_CodeCompressor
                                   (0039) Dispatch_INTERRUPT_10_END:
1C5C: E0 01    JACC  0x1C5E        (0040) 	jacc	Dispatch_INTERRUPT_10_TBL
                                   (0041) Dispatch_INTERRUPT_10_TBL:
1C5E: 18       POP   A             (0042) 	pop		a
1C5F: 7D 08 92 LJMP  0x0892        (0043) 	ljmp	_TX_REPEATER_ISR
1C62: 18       POP   A             (0044) 	pop		a
1C63: 7D 0A A4 LJMP  0x0AA4        (0045) 	ljmp	_RECEIVE_ISR
1C66: 18       POP   A             (0046) 	pop		a
1C67: 7D 09 6B LJMP  0x096B        (0047) 	ljmp	_TRANSMIT_ISR
                                   (0048) ; Resume Code Compressor.
                                   (0049) ; The next instruction does not get executed.
1C6A: 38 00    ADD   SP,0          (0050) 	Resume_CodeCompressor
                                   (0051) 
                                   (0052) Dispatch_INTERRUPT_9:
1C6C: 08       PUSH  A             (0053) 	push	a
1C6D: 50 00    MOV   A,0           (0054) 	mov		a,0
1C6F: 47 02 04 TST   [2],4         (0055) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1C72: B0 0C    JNZ   0x1C7F        (0056) 	jnz		Dispatch_INTERRUPT_9_END
1C74: 50 04    MOV   A,4           (0057) 	mov		a,4
1C76: 47 02 01 TST   [2],1         (0058) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1C79: B0 05    JNZ   0x1C7F        (0059) 	jnz		Dispatch_INTERRUPT_9_END
1C7B: 18       POP   A             (0060) 	pop		a
1C7C: 7E       RETI                (0061) 	reti
                                   (0062) ; Stop Code Compressor from breaking table alignment
                                   (0063) ; The next instruction does not get executed.
1C7D: 71 00    OR    F,0           (0064) 	Suspend_CodeCompressor
                                   (0065) Dispatch_INTERRUPT_9_END:
1C7F: E0 01    JACC  0x1C81        (0066) 	jacc	Dispatch_INTERRUPT_9_TBL
                                   (0067) Dispatch_INTERRUPT_9_TBL:
1C81: 18       POP   A             (0068) 	pop		a
1C82: 7D 1C 2C LJMP  _RX_TIMEOUT_ISR(0069) 	ljmp	_RX_TIMEOUT_ISR
1C85: 18       POP   A             (0070) 	pop		a
1C86: 7D 1C 16 LJMP  _TX_TIMEOUT_ISR(0071) 	ljmp	_TX_TIMEOUT_ISR
                                   (0072) ; Resume Code Compressor.
                                   (0073) ; The next instruction does not get executed.
                                   (0074) 	Resume_CodeCompressor

FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.985.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.01
