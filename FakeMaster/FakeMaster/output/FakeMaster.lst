0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0116) ; Generated by PSoC Designer 5.0.985.0
                                   (0117) ;
                                   (0118) ;@Id: boot.tpl#895 @
0004: 30       HALT                (0119) ;=============================================================================
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0120) ;  FILENAME:   boot.asm
                                   (0121) ;  VERSION:    4.18
                                   (0122) ;  DATE:       28 June 2007
0008: 7E       RETI                (0123) ;
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0124) ;  DESCRIPTION:
                                   (0125) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                   (0126) ;
000C: 7E       RETI                (0127) ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
                                   (0128) ;
                                   (0129) ; NOTES:
                                   (0130) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
0010: 7E       RETI                (0131) ; the project's root directory to create BOOT.ASM. Any changes made to
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
                                   (0132) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                   (0133) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0134) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
0014: 7E       RETI                (0135) ; are not accidentally modified.
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0136) ;
                                   (0137) ;=============================================================================
                                   (0138) 
0018: 7E       RETI                (0139) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
0019: 30       HALT  
001A: 30       HALT  
001B: 30       HALT  
                                   (0140) include "m8c.inc"			;Part specific file
                                   (0141) include "m8ssc.inc"			;Part specific file
                                   (0142) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
001C: 7E       RETI                (0143) 
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0144) ;--------------------------------------
                                   (0145) ; Export Declarations
                                   (0146) ;--------------------------------------
0020: 7E       RETI                (0147) 
0021: 30       HALT  
0022: 30       HALT  
0023: 30       HALT  
                                   (0148) export __Start
                                   (0149) IF	(TOOLCHAIN & HITECH)
0024: 7D 1E B7 LJMP  Dispatch_INTERRUPT_9(0150) ELSE
0027: 7E       RETI                (0151) export __bss_start
                                   (0152) export __data_start
                                   (0153) export __idata_start
0028: 7D 1E 8D LJMP  Dispatch_INTERRUPT_10(0154) export __func_lit_start
002B: 7E       RETI                (0155) export __text_start
                                   (0156) ENDIF
                                   (0157) export  _bGetPowerSetting
                                   (0158) export   bGetPowerSetting
002C: 7E       RETI                (0159) 
002D: 30       HALT  
002E: 30       HALT  
002F: 30       HALT  
                                   (0160) 
                                   (0161) ;--------------------------------------
                                   (0162) ; Optimization flags
0030: 7E       RETI                (0163) ;--------------------------------------
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
                                   (0164) ;
                                   (0165) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0166) ; boot.asm. See the notes in the banner comment at the beginning of
0034: 7E       RETI                (0167) ; this file.
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
                                   (0168) 
                                   (0169) ; Optimization for Assembly language (only) projects and C-language projects
0038: 7D 0E 89 LJMP  0x0E89        (0170) ; that do not depend on the C compiler to initialize the values of RAM variables.
003B: 7E       RETI                (0171) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0172) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0173) ;
003C: 7D 0E 8A LJMP  0x0E8A        (0174) IF	(TOOLCHAIN & HITECH)
003F: 7E       RETI                (0175) ; The C compiler will customize the startup code - it's not required here
                                   (0176) 
                                   (0177) C_LANGUAGE_SUPPORT:              equ 0
                                   (0178) ELSE
0040: 7E       RETI                (0179) C_LANGUAGE_SUPPORT:              equ 1
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
                                   (0180) ENDIF
                                   (0181) 
                                   (0182) 
0044: 7E       RETI                (0183) ; The following equate is required for proper operation. Reseting its value
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
                                   (0184) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                   (0185) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                   (0186) ; and PLL_Lock must take place within user code. See the family data sheet for
0048: 7E       RETI                (0187) ; the requirements of starting the ECO and PLL lock mode.
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
                                   (0188) ;
                                   (0189) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                   (0190) ;                invoking main
004C: 7E       RETI                (0191) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
                                   (0192) ;               the time code in main starts executing.
                                   (0193) ;
                                   (0194) WAIT_FOR_32K:                    equ 1
0050: 7E       RETI                (0195) 
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
                                   (0196) 
                                   (0197) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0198) ; to invoke the user's _main code. If _main executes a return instruction,
0054: 7E       RETI                (0199) ; boot provides an infinite loop. By changing the following equate from zero
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
                                   (0200) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0201) ; bytes on the stack which are otherwise required for the return address. If
                                   (0202) ; this option is enabled, _main must not return. (Beginning with the 4.2
0058: 7E       RETI                (0203) ; release, the C compiler automatically places an infinite loop at the end
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
                                   (0204) ; of main, rather than a return instruction.)
                                   (0205) ;
                                   (0206) ENABLE_LJMP_TO_MAIN:             equ 0
005C: 7E       RETI                (0207) 
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0208) 
                                   (0209) ;-----------------------------------------------------------------------------
                                   (0210) ; Interrupt Vector Table
0060: 7E       RETI                (0211) ;-----------------------------------------------------------------------------
0061: 30       HALT  
0062: 30       HALT  
0063: 30       HALT  
                                   (0212) ;
                                   (0213) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0214) ; a jump instruction to an ISR (Interrupt Service Routine), although
0064: 7E       RETI                (0215) ; very short ISRs could be encoded within the table itself. Normally,
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0216) ; vector jump targets are modified automatically according to the user
                                   (0217) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0218) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0219) ; configuration files. If you need to hard code a vector, update the
                                   (0220) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0221) ; of this file.
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) 
                                   (0224)     AREA TOP (ROM, ABS, CON)
                                   (0225) 
                                   (0226)     org   0                        ;Reset Interrupt Vector
                                   (0227) IF	(TOOLCHAIN & HITECH)
                                   (0228) ;   jmp   __Start                  ;C compiler fills in this vector
                                   (0229) ELSE
                                   (0230)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0231) ENDIF
                                   (0232) 
                                   (0233)     org   04h                      ;Supply Monitor Interrupt Vector
                                   (0234)     halt                           ;Stop execution if power falls too low
0068: 71 10    OR    F,16          (0235) 
006A: 62 FA 00 MOV   REG[250],0    (0236)     org   08h                      ;Analog Column 0 Interrupt Vector
006D: 62 E3 87 MOV   REG[227],135  (0237)     // call	void_handler
0070: 70 EF    AND   F,239         (0238)     reti
                                   (0239) 
                                   (0240)     org   0Ch                      ;Analog Column 1 Interrupt Vector
0072: 50 20    MOV   A,32          (0241)     // call	void_handler
0074: 28       ROMX                (0242)     reti
0075: 50 40    MOV   A,64          (0243) 
0077: 28       ROMX                (0244)     org   10h                      ;Analog Column 2 Interrupt Vector
0078: 50 60    MOV   A,96          (0245)     // call	void_handler
007A: 28       ROMX                (0246)     reti
                                   (0247) 
                                   (0248)     org   14h                      ;Analog Column 3 Interrupt Vector
                                   (0249)     // call	void_handler
                                   (0250)     reti
                                   (0251) 
                                   (0252)     org   18h                      ;VC3 Interrupt Vector
                                   (0253)     // call	void_handler
                                   (0254)     reti
                                   (0255) 
007B: 41 FE FB AND   REG[254],251  (0256)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0257)     // call	void_handler
                                   (0258)     reti
                                   (0259) 
                                   (0260)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                   (0261)     // call	void_handler
                                   (0262)     reti
                                   (0263) 
                                   (0264)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                   (0265)     ljmp	Dispatch_INTERRUPT_9
007E: 50 80    MOV   A,128         (0266)     reti
0080: 4E       SWAP  SP,A          (0267) 
                                   (0268)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                   (0269)     ljmp	Dispatch_INTERRUPT_10
                                   (0270)     reti
                                   (0271) 
                                   (0272)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                   (0273)     // call	void_handler
                                   (0274)     reti
                                   (0275) 
                                   (0276)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                   (0277)     // call	void_handler
                                   (0278)     reti
                                   (0279) 
                                   (0280)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                   (0281)     // call	void_handler
                                   (0282)     reti
                                   (0283) 
                                   (0284)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                   (0285)     ljmp	_COMP_SERIAL_TX_ISR
                                   (0286)     reti
                                   (0287) 
                                   (0288)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                   (0289)     ljmp	_COMP_SERIAL_RX_ISR
                                   (0290)     reti
                                   (0291) 
                                   (0292)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                   (0293)     // call	void_handler
                                   (0294)     reti
                                   (0295) 
                                   (0296)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                   (0297)     // call	void_handler
0081: 55 F8 00 MOV   [248],0       (0298)     reti
0084: 55 F9 00 MOV   [249],0       (0299) 
                                   (0300)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                   (0301)     // call	void_handler
                                   (0302)     reti
                                   (0303) 
                                   (0304)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                   (0305)     // call	void_handler
                                   (0306)     reti
                                   (0307) 
                                   (0308)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                   (0309)     // call	void_handler
                                   (0310)     reti
                                   (0311) 
                                   (0312)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                   (0313)     // call	void_handler
                                   (0314)     reti
                                   (0315) 
                                   (0316)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                   (0317)     // call	void_handler
                                   (0318)     reti
                                   (0319) 
                                   (0320)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                   (0321)     // call	void_handler
                                   (0322)     reti
0087: 71 10    OR    F,16          (0323) 
0089: 62 E0 02 MOV   REG[224],2    (0324)     org   60h                      ;PSoC I2C Interrupt Vector
008C: 70 EF    AND   F,239         (0325)     // call	void_handler
008E: 62 E3 38 MOV   REG[227],56   (0326)     reti
                                   (0327) 
                                   (0328)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0329)     // call	void_handler
                                   (0330)     reti
                                   (0331) 
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;  Start of Execution.
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0336) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0337) ;
                                   (0338) 
                                   (0339) IF	(TOOLCHAIN & HITECH)
                                   (0340)  	AREA PD_startup(CODE, REL, CON)
                                   (0341) ELSE
                                   (0342)     org 68h
                                   (0343) ENDIF
                                   (0344) __Start:
                                   (0345) 
                                   (0346)     ; initialize SMP values for voltage stabilization, if required,
                                   (0347)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0348)     ; least for now. 
                                   (0349)     ;
                                   (0350)     M8C_SetBank1
                                   (0351)     mov reg[0FAh], 0				;Reset flash location
                                   (0352)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
                                   (0353)     M8C_SetBank0
                                   (0354) 
                                   (0355)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
                                   (0356)     mov   A, 20h
0091: 62 71 05 MOV   REG[113],5    (0357)     romx
0094: 62 75 05 MOV   REG[117],5    (0358)     mov   A, 40h
0097: 62 79 05 MOV   REG[121],5    (0359)     romx
009A: 62 7D 05 MOV   REG[125],5    (0360)     mov   A, 60h
                                   (0361)     romx
                                   (0362)     ; %45%20%46%46% End workaround
                                   (0363) 
                                   (0364) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0365)     M8C_EnableWatchDog
                                   (0366) ENDIF
                                   (0367) 
                                   (0368) IF ( SELECT_32K )
                                   (0369)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                   (0370) ELSE
                                   (0371)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0372) ENDIF
                                   (0373) 
                                   (0374)     ;---------------------------
                                   (0375)     ; Set up the Temporary stack
                                   (0376)     ;---------------------------
                                   (0377)     ; A temporary stack is set up for the SSC instructions.
                                   (0378)     ; The real stack start will be assigned later.
                                   (0379)     ;
                                   (0380) _stack_start:          equ 80h
                                   (0381)     mov   A, _stack_start          ; Set top of stack to end of used RAM
                                   (0382)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0383) 
                                   (0384)     ;-----------------------------------------------
                                   (0385)     ; Set Power-related Trim & the AGND Bypass bit.
                                   (0386)     ;-----------------------------------------------
                                   (0387) 
009D: 62 D1 07 MOV   REG[209],7    (0388) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
00A0: 50 00    MOV   A,0           (0389)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
00A2: 4E       SWAP  SP,A          (0390)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
00A3: 62 D3 07 MOV   REG[211],7    (0391)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
00A6: 62 D0 00 MOV   REG[208],0    (0392)  ELSE                                          ; *** 12MHZ Main Oscillator ***
00A9: 62 D5 00 MOV   REG[213],0    (0393)   IF ( AGND_BYPASS )
00AC: 62 D4 00 MOV   REG[212],0    (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0395)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                   (0396)     ; bit in the write-only BDG_TR register. Recalculate the register
00AF: 71 C0    OR    F,192         (0397)     ; value using the proper trim values.
                                   (0398)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0399)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0400)   ENDIF
                                   (0401)  ENDIF
                                   (0402) ENDIF ; 5.0 V Operation
                                   (0403) 
                                   (0404) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                   (0405)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0406)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0407)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0408)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0409)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0410)  ENDIF
                                   (0411) ENDIF ; 3.3 Volt Operation
                                   (0412) 
                                   (0413)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
                                   (0414)     mov  [bSSC_KEYSP], 0
00B1: 7C 05 D2 LCALL 0x05D2        (0415) 
                                   (0416)     ;---------------------------------------
                                   (0417)     ; Initialize Crystal Oscillator and PLL
                                   (0418)     ;---------------------------------------
                                   (0419) 
                                   (0420) IF ( SELECT_32K & WAIT_FOR_32K )
                                   (0421)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                   (0422)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                   (0423)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                   (0424)     ; the ECO to stabilize.
                                   (0425)     ;
                                   (0426)     M8C_SetBank1
                                   (0427)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                   (0428)     M8C_SetBank0
                                   (0429)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                   (0430)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                   (0431)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                   (0432) .WaitFor1s:
                                   (0433)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                   (0434)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                   (0435)                                           ;   since interrupts are not globally enabled
                                   (0436) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                   (0437)     ; Either no ECO, or waiting for stable clock is to be done in main
                                   (0438)     M8C_SetBank1
                                   (0439)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                   (0440)     M8C_SetBank0
                                   (0441)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0442) 
                                   (0443) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                   (0444) 
                                   (0445) IF ( PLL_MODE )
                                   (0446)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
00B4: 62 D0 00 MOV   REG[208],0    (0447)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                   (0448)     ;
                                   (0449)     M8C_SetBank1
                                   (0450)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                   (0451)     M8C_SetBank0
                                   (0452)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                   (0453)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
00B7: 50 05    MOV   A,5           (0454) 
00B9: 57 D0    MOV   X,208         (0455) .WaitFor16ms:
00BB: 08       PUSH  A             (0456)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
00BC: 28       ROMX                (0457)     jz   .WaitFor16ms
00BD: 53 9A    MOV   [__r0],A      (0458)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
00BF: 18       POP   A             (0459)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
00C0: 75       INC   X             (0460)     M8C_SetBank0
00C1: 09 00    ADC   A,0           (0461) 
00C3: 28       ROMX                (0462) IF      ( WAIT_FOR_32K )
00C4: 4B       SWAP  A,X           (0463) ELSE ; !( WAIT_FOR_32K )
00C5: 51 9A    MOV   A,[154]       (0464)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                   (0465)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
00C7: 80 04    JMP   0x00CC        (0466) ENDIF ;(WAIT_FOR_32K)
                                   (0467) ENDIF ;(PLL_MODE)
                                   (0468) 
                                   (0469)     ;------------------------
                                   (0470)     ; Close CT leakage path.
                                   (0471)     ;------------------------
                                   (0472)     mov   reg[ACB00CR0], 05h
                                   (0473)     mov   reg[ACB01CR0], 05h
                                   (0474)     mov   reg[ACB02CR0], 05h
                                   (0475)     mov   reg[ACB03CR0], 05h
                                   (0476) 
                                   (0477) 
                                   (0478) IF	(TOOLCHAIN & HITECH)
                                   (0479)     ;---------------------------------------------
                                   (0480)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                   (0481)     ;---------------------------------------------
                                   (0482) 	global		__Lstackps
                                   (0483) 	mov     a,low __Lstackps
00C9: 75       INC   X             (0484) 	swap    a,sp
00CA: 09 00    ADC   A,0           (0485) 
                                   (0486) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0487)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                   (0488)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                   (0489)     RAM_SETPAGE_CUR 0
00CC: 62 E3 00 MOV   REG[227],0    (0490)     RAM_SETPAGE_MVW 0
00CF: 08       PUSH  A             (0491)     RAM_SETPAGE_MVR 0
00D0: 28       ROMX                (0492)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D1: 60 D5    MOV   REG[213],A    (0493)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
00D3: 74       INC   A             (0494)     ELSE
00D4: A0 4B    JZ    0x0120        (0495)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
00D6: 18       POP   A             (0496)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
00D7: 75       INC   X             (0497) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00D8: 09 00    ADC   A,0           (0498) ELSE
00DA: 08       PUSH  A             (0499)     ;---------------------------------------------
00DB: 28       ROMX                (0500)     ; ImageCraft Enter the Large Memory Model, if applicable
00DC: 53 9A    MOV   [__r0],A      (0501)     ;---------------------------------------------
00DE: 18       POP   A             (0502) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DF: 75       INC   X             (0503)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00E0: 09 00    ADC   A,0           (0504)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00E2: 08       PUSH  A             (0505)     swap  A, SP
00E3: 28       ROMX                (0506)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00E4: A0 1C    JZ    0x0101        (0507)     RAM_SETPAGE_CUR 0
00E6: 53 99    MOV   [__r1],A      (0508)     RAM_SETPAGE_MVW 0
00E8: 18       POP   A             (0509)     RAM_SETPAGE_MVR 0
                                   (0510) 
                                   (0511)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                   (0512)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0513)   ELSE
                                   (0514)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0515)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0516) ELSE
00E9: 75       INC   X             (0517)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
00EA: 09 00    ADC   A,0           (0518)     swap  SP, A
00EC: 08       PUSH  A             (0519) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00ED: 28       ROMX                (0520) ENDIF ;	TOOLCHAIN
00EE: 3F 9A    MVI   [__r0],A      (0521) 
00F0: 47 9A FF TST   [154],255     (0522)     ;-------------------------
00F3: B0 06    JNZ   0x00FA        (0523)     ; Load Base Configuration
00F5: 5D D5    MOV   A,REG[213]    (0524)     ;-------------------------
00F7: 74       INC   A             (0525)     ; Load global parameter settings and load the user modules in the
00F8: 60 D5    MOV   REG[213],A    (0526)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0527)     ; to minimize start up time; (2) We may still need to play with the
00FA: 18       POP   A             (0528)     ; Sleep Timer.
00FB: 7A 99    DEC   [__r1]        (0529)     ;
00FD: BF EB    JNZ   0x00E9        (0530)     lcall LoadConfigInit
00FF: 8F C9    JMP   0x00C9        (0531) 
                                   (0532)     ;-----------------------------------
                                   (0533)     ; Initialize C Run-Time Environment
0101: 18       POP   A             (0534)     ;-----------------------------------
0102: 75       INC   X             (0535) IF ( C_LANGUAGE_SUPPORT )
0103: 09 00    ADC   A,0           (0536) IF ( SYSTEM_SMALL_MEMORY_MODEL )
0105: 08       PUSH  A             (0537)     mov  A,0                           ; clear the 'bss' segment to zero
0106: 28       ROMX                (0538)     mov  [__r0],<__bss_start
0107: 53 99    MOV   [__r1],A      (0539) BssLoop:
0109: 50 00    MOV   A,0           (0540)     cmp  [__r0],<__bss_end
                                   (0541)     jz   BssDone
                                   (0542)     mvi  [__r0],A
                                   (0543)     jmp  BssLoop
                                   (0544) BssDone:
                                   (0545)     mov  A,>__idata_start              ; copy idata to data segment
010B: 3F 9A    MVI   [__r0],A      (0546)     mov  X,<__idata_start
010D: 47 9A FF TST   [154],255     (0547)     mov  [__r0],<__data_start
0110: B0 08    JNZ   0x0119        (0548) IDataLoop:
0112: 5D D5    MOV   A,REG[213]    (0549)     cmp  [__r0],<__data_end
0114: 74       INC   A             (0550)     jz   C_RTE_Done
0115: 60 D5    MOV   REG[213],A    (0551)     push A
0117: 50 00    MOV   A,0           (0552)     romx
                                   (0553)     mvi  [__r0],A
0119: 7A 99    DEC   [__r1]        (0554)     pop  A
011B: BF EF    JNZ   0x010B        (0555)     inc  X
011D: 18       POP   A             (0556)     adc  A,0
011E: 8F AA    JMP   0x00C9        (0557)     jmp  IDataLoop
                                   (0558) 
                                   (0559) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
0120: 18       POP   A             (0560) 
                                   (0561) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0562)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                   (0563)                                        ; to use the Virtual Register page.
                                   (0564) 
                                   (0565)     ; Dereference the constant (flash) pointer pXIData to access the start
                                   (0566)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                   (0567)     ; text segment and may have been relocated by the Code Compressor.
                                   (0568)     ;
                                   (0569)     mov   A, >__pXIData                ; Get the address of the flash
                                   (0570)     mov   X, <__pXIData                ;   pointer to the xidata area.
                                   (0571)     push  A
                                   (0572)     romx                               ; get the MSB of xidata's address
                                   (0573)     mov   [__r0], A
                                   (0574)     pop   A
                                   (0575)     inc   X
                                   (0576)     adc   A, 0
                                   (0577)     romx                               ; get the LSB of xidata's address
                                   (0578)     swap  A, X
                                   (0579)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                   (0580)                                        ;   XIData structure list in flash
                                   (0581)     jmp   .AccessStruct
                                   (0582) 
                                   (0583)     ; Unpack one element in the xidata "structure list" that specifies the
                                   (0584)     ; values of C variables. Each structure contains 3 member elements.
                                   (0585)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                   (0586)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                   (0587)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                   (0588)     ; contains 0xFF. There are two formats for the struct depending on the
                                   (0589)     ; value in the second member element, an unsigned byte:
                                   (0590)     ; (1) If the value of the second element is non-zero, it represents
                                   (0591)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                   (0592)     ; third member of the struct is an array of bytes of length 'size' and
                                   (0593)     ; the bytes are copied to the block of RAM.
                                   (0594)     ; (2) If the value of the second element is zero, the block of RAM is
                                   (0595)     ; to be cleared to zero. In this case, the third member of the struct
                                   (0596)     ; is an unsigned byte containing the number of bytes to clear.
                                   (0597) 
                                   (0598) .AccessNextStructLoop:
                                   (0599)     inc   X                            ; pXIData++
                                   (0600)     adc   A, 0
0121: 71 10    OR    F,16          (0601) .AccessStruct:                         ; Entry point for first block
                                   (0602)     ;
                                   (0603)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                   (0604)     ;
                                   (0605)     M8C_ClearWDT                       ; Clear the watchdog for long inits
                                   (0606)     push  A
                                   (0607)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
                                   (0608)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
0123: 43 E3 20 OR    REG[227],32   (0609)     inc   A                            ; End of Struct List? (MSB==0xFF?)
                                   (0610)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
                                   (0611)     pop   A                            ; restore pXIData to [A,X]
                                   (0612)     inc   X                            ; pXIData++
                                   (0613)     adc   A, 0
0126: 70 EF    AND   F,239         (0614)     push  A
                                   (0615)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
                                   (0616)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
                                   (0617)     pop   A                            ; restore pXIData to [A,X]
                                   (0618)     inc   X                            ; pXIData++ (point to size)
                                   (0619)     adc   A, 0
                                   (0620)     push  A
                                   (0621)     romx                               ; Get the size (CPU.A <- *pXIData)
                                   (0622)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
0128: 62 E0 00 MOV   REG[224],0    (0623)     mov   [__r1], A                    ;             else downcount in __r1
                                   (0624)     pop   A                            ; restore pXIData to [A,X]
                                   (0625) 
                                   (0626) .CopyNextByteLoop:
                                   (0627)     ; For each byte in the structure's array member, copy from flash to RAM.
012B: 71 10    OR    F,16          (0628)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
012D: 62 E0 03 MOV   REG[224],3    (0629)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
0130: 43 E7 80 OR    REG[231],128  (0630)     ;         __r1 holds a non-zero count of the number of bytes remaining.
0133: 70 EF    AND   F,239         (0631)     ;
                                   (0632)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0633)     adc   A, 0
                                   (0634)     push  A
                                   (0635)     romx                               ; Get the data value (CPU.A <- *pXIData)
                                   (0636)     mvi   [__r0], A                    ; Transfer the data to RAM
0135: 62 E2 00 MOV   REG[226],0    (0637)     tst   [__r0], 0xff                 ; Check for page crossing
                                   (0638)     jnz   .CopyLoopTail                ;   No crossing, keep going
                                   (0639)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
                                   (0640)     inc   A
                                   (0641)     mov   reg[ MVW_PP], A
                                   (0642) .CopyLoopTail:
                                   (0643)     pop   A                            ; restore pXIData to [A,X]
                                   (0644)     dec   [__r1]                       ; End of this array in flash?
0138: 7C 10 E9 LCALL __text_start  (0645)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
                                   (0646)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
013B: 8F FF    JMP   0x013B        (0647) 
                                   (0648) .ClearRAMBlockToZero:
                                   (0649)     pop   A                            ; restore pXIData to [A,X]
                                   (0650)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0651)     adc   A, 0
                                   (0652)     push  A
                                   (0653)     romx                               ; Get the run length (CPU.A <- *pXIData)
                                   (0654)     mov   [__r1], A                    ; Initialize downcounter
                                   (0655)     mov   A, 0                         ; Initialize source data
                                   (0656) 
                                   (0657) .ClearRAMBlockLoop:
                                   (0658)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                   (0659)     ;         __r1 holds a non-zero count of the number of bytes remaining.
013D: 50 10    MOV   A,16          (0660)     ;
02C3: 71 10    OR    F,16          (0661)     mvi   [__r0], A                    ; Clear a byte

FILE: lib\psocconfigtbl.asm
02C5: 62 00 01 MOV   REG[0],1      (0252) ; Generated by PSoC Designer 5.0.985.0
02C8: 62 01 FE MOV   REG[1],254    (0253) ;
02CB: 70 EF    AND   F,239         (0254) include "m8c.inc"
02CD: 62 03 FE MOV   REG[3],254    (0255) ;  Personalization tables 
02D0: 62 02 01 MOV   REG[2],1      (0256) export LoadConfigTBL_transmitter_config_Bank1
02D3: 71 10    OR    F,16          (0257) export LoadConfigTBL_transmitter_config_Bank0
02D5: 62 02 00 MOV   REG[2],0      (0258) export LoadConfigTBL_transmitter_config_Ordered
02D8: 62 03 00 MOV   REG[3],0      (0259) export UnloadConfigTBL_transmitter_config_Bank1
02DB: 70 EF    AND   F,239         (0260) export UnloadConfigTBL_transmitter_config_Bank0
02DD: 62 01 00 MOV   REG[1],0      (0261) export ReloadConfigTBL_transmitter_config_Bank1
02E0: 71 10    OR    F,16          (0262) export ReloadConfigTBL_transmitter_config_Bank0
02E2: 62 04 03 MOV   REG[4],3      (0263) export LoadConfigTBL_pc_listener_Bank1
02E5: 62 05 FC MOV   REG[5],252    (0264) export LoadConfigTBL_pc_listener_Bank0
02E8: 70 EF    AND   F,239         (0265) export UnloadConfigTBL_pc_listener_Bank1
02EA: 62 07 FC MOV   REG[7],252    (0266) export UnloadConfigTBL_pc_listener_Bank0
02ED: 62 06 02 MOV   REG[6],2      (0267) export LoadConfigTBL_receiver_config_Bank1
02F0: 71 10    OR    F,16          (0268) export LoadConfigTBL_receiver_config_Bank0
02F2: 62 06 00 MOV   REG[6],0      (0269) export UnloadConfigTBL_receiver_config_Bank1
02F5: 62 07 00 MOV   REG[7],0      (0270) export UnloadConfigTBL_receiver_config_Bank0
02F8: 70 EF    AND   F,239         (0271) export UnloadConfigTBL_Total_Bank1
02FA: 62 05 00 MOV   REG[5],0      (0272) export UnloadConfigTBL_Total_Bank0
02FD: 71 10    OR    F,16          (0273) AREA lit(rom, rel)
02FF: 62 08 00 MOV   REG[8],0      (0274) LoadConfigTBL_pc_listener_Bank0:
0302: 62 09 FF MOV   REG[9],255    (0275) ;  Instance name COMP_SERIAL, User Module UART
0305: 70 EF    AND   F,239         (0276) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0307: 62 0B FF MOV   REG[11],255   (0277) 	db		3fh, 00h		;COMP_SERIAL_RX_CONTROL_REG(DCB13CR0)
030A: 62 0A 00 MOV   REG[10],0     (0278) 	db		3dh, 00h		;COMP_SERIAL_(DCB13DR1)
030D: 71 10    OR    F,16          (0279) 	db		3eh, 00h		;COMP_SERIAL_RX_BUFFER_REG (DCB13DR2)
030F: 62 0A 00 MOV   REG[10],0     (0280) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0312: 62 0B 00 MOV   REG[11],0     (0281) 	db		3bh, 00h		;COMP_SERIAL_TX_CONTROL_REG(DCB12CR0)
0315: 70 EF    AND   F,239         (0282) 	db		39h, 00h		;COMP_SERIAL_TX_BUFFER_REG (DCB12DR1)
0317: 62 09 00 MOV   REG[9],0      (0283) 	db		3ah, 00h		;COMP_SERIAL_(DCB12DR2)
031A: 71 10    OR    F,16          (0284) ;  Instance name TX_REPEATER, User Module TX8
031C: 62 0C 00 MOV   REG[12],0     (0285) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
031F: 62 0D 00 MOV   REG[13],0     (0286) 	db		2bh, 00h		;TX_REPEATER_CONTROL_REG  (DCB02CR0)
0322: 70 EF    AND   F,239         (0287) 	db		29h, 00h		;TX_REPEATER_TX_BUFFER_REG(DCB02DR1)
0324: 62 0F 00 MOV   REG[15],0     (0288) 	db		2ah, 00h		;TX_REPEATER_(DCB02DR2)
0327: 62 0E 00 MOV   REG[14],0     (0289) 	db		ffh
032A: 71 10    OR    F,16          (0290) LoadConfigTBL_pc_listener_Bank1:
032C: 62 0E 00 MOV   REG[14],0     (0291) ;  Instance name COMP_SERIAL, User Module UART
032F: 62 0F 00 MOV   REG[15],0     (0292) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0332: 70 EF    AND   F,239         (0293) 	db		3ch, 05h		;COMP_SERIAL_RX_FUNC_REG   (DCB13FN)
0334: 62 0D 00 MOV   REG[13],0     (0294) 	db		3dh, f6h		;COMP_SERIAL_RX_INPUT_REG  (DCB13IN)
0337: 71 10    OR    F,16          (0295) 	db		3eh, 80h		;COMP_SERIAL_RX_OUTPUT_REG (DCB13OU)
0339: 62 10 00 MOV   REG[16],0     (0296) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
033C: 62 11 00 MOV   REG[17],0     (0297) 	db		38h, 1dh		;COMP_SERIAL_TX_FUNC_REG   (DCB12FN)
033F: 70 EF    AND   F,239         (0298) 	db		39h, 06h		;COMP_SERIAL_TX_INPUT_REG  (DCB12IN)
0341: 62 13 00 MOV   REG[19],0     (0299) 	db		3ah, 85h		;COMP_SERIAL_TX_OUTPUT_REG (DCB12OU)
0344: 62 12 00 MOV   REG[18],0     (0300) ;  Instance name TX_REPEATER, User Module TX8
0347: 71 10    OR    F,16          (0301) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0349: 62 12 00 MOV   REG[18],0     (0302) 	db		28h, 1dh		;TX_REPEATER_FUNC_REG     (DCB02FN)
034C: 62 13 00 MOV   REG[19],0     (0303) 	db		29h, 01h		;TX_REPEATER_INPUT_REG    (DCB02IN)
034F: 70 EF    AND   F,239         (0304) 	db		2ah, 84h		;TX_REPEATER_OUTPUT_REG   (DCB02OU)
0351: 62 11 00 MOV   REG[17],0     (0305) 	db		ffh
0354: 71 10    OR    F,16          (0306) UnloadConfigTBL_pc_listener_Bank0:
0356: 62 14 00 MOV   REG[20],0     (0307) ;  Instance name COMP_SERIAL, User Module UART
0359: 62 15 00 MOV   REG[21],0     (0308) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
035C: 70 EF    AND   F,239         (0309) 	db		3fh, 00h		;COMP_SERIAL_CONTROL_0 (DCB13CR0)
035E: 62 17 00 MOV   REG[23],0     (0310) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0361: 62 16 00 MOV   REG[22],0     (0311) 	db		3bh, 00h		;COMP_SERIAL_CONTROL_0 (DCB12CR0)
0364: 71 10    OR    F,16          (0312) ;  Instance name TX_REPEATER, User Module TX8
0366: 62 16 00 MOV   REG[22],0     (0313) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0369: 62 17 00 MOV   REG[23],0     (0314) 	db		2bh, 00h		;TX_REPEATER_CONTROL_0 (DCB02CR0)
036C: 70 EF    AND   F,239         (0315) 	db		ffh
036E: 62 15 00 MOV   REG[21],0     (0316) UnloadConfigTBL_pc_listener_Bank1:
0371: 71 10    OR    F,16          (0317) ;  Instance name COMP_SERIAL, User Module UART
0373: 62 18 00 MOV   REG[24],0     (0318) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0376: 62 19 00 MOV   REG[25],0     (0319) 	db		3ch, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB13FN)
0379: 70 EF    AND   F,239         (0320) 	db		3dh, 00h		;COMP_SERIAL_DIG_Input (DCB13IN)
037B: 62 1B 00 MOV   REG[27],0     (0321) 	db		3eh, 00h		;COMP_SERIAL_DIG_Output (DCB13OU)
037E: 62 1A 00 MOV   REG[26],0     (0322) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0381: 71 10    OR    F,16          (0323) 	db		38h, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB12FN)
0383: 62 1A 00 MOV   REG[26],0     (0324) 	db		39h, 00h		;COMP_SERIAL_DIG_Input (DCB12IN)
0386: 62 1B 00 MOV   REG[27],0     (0325) 	db		3ah, 00h		;COMP_SERIAL_DIG_Output (DCB12OU)
0389: 70 EF    AND   F,239         (0326) ;  Instance name TX_REPEATER, User Module TX8
038B: 62 19 00 MOV   REG[25],0     (0327) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
038E: 71 10    OR    F,16          (0328) 	db		28h, 00h		;TX_REPEATER_DIG_BasicFunction (DCB02FN)
0390: 62 1C 00 MOV   REG[28],0     (0329) 	db		29h, 00h		;TX_REPEATER_DIG_Input (DCB02IN)
0393: 62 1D 00 MOV   REG[29],0     (0330) 	db		2ah, 00h		;TX_REPEATER_DIG_Output (DCB02OU)
0396: 70 EF    AND   F,239         (0331) 	db		ffh
0398: 62 1F 00 MOV   REG[31],0     (0332) 
039B: 62 1E 00 MOV   REG[30],0     (0333) ;  Instance name COMP_SERIAL, User Module UART
039E: 71 10    OR    F,16          (0334) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
03A0: 62 1E 00 MOV   REG[30],0     (0335) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
03A3: 62 1F 00 MOV   REG[31],0     (0336) ;  Instance name TX_REPEATER, User Module TX8
03A6: 70 EF    AND   F,239         (0337) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
03A8: 62 1D 00 MOV   REG[29],0     (0338) 	db		ffh
05D2: 62 D0 00 MOV   REG[208],0    (0339) LoadConfigTBL_receiver_config_Bank0:

FILE: lib\psocconfig.asm
05D5: 55 02 00 MOV   [2],0         (0081) ; Generated by PSoC Designer 5.0.985.0
                                   (0082) ;
05D8: 55 03 00 MOV   [3],0         (0083) INCLUDE "PSoCDynamic.inc"
05DB: 55 04 00 MOV   [4],0         (0084) ;==========================================================================
05DE: 55 05 FF MOV   [5],255       (0085) ;  PSoCConfig.asm
                                   (0086) ;  @PSOC_VERSION
05E1: 7C 05 E8 LCALL 0x05E8        (0087) ;
05E4: 7C 02 C3 LCALL 0x02C3        (0088) ;  Version: 0.85
                                   (0089) ;  Revised: June 22, 2004
                                   (0090) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0091) ;
05E7: 7F       RET                 (0092) ;  This file is generated by the Device Editor on Application Generation.
                                   (0093) ;  It contains code which loads the configuration data table generated in
                                   (0094) ;  the file PSoCConfigTBL.asm
                                   (0095) ;
                                   (0096) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0097) ;  Edits to this file will not be preserved.
                                   (0098) ;==========================================================================
                                   (0099) ;
                                   (0100) include "m8c.inc"
                                   (0101) include "memory.inc"
                                   (0102) include "GlobalParams.inc"
                                   (0103) 
                                   (0104) export LoadConfigInit
                                   (0105) export _LoadConfigInit
                                   (0106) export LoadConfig_transmitter_config
                                   (0107) export _LoadConfig_transmitter_config
                                   (0108) export UnloadConfig_transmitter_config
                                   (0109) export _UnloadConfig_transmitter_config
                                   (0110) export ReloadConfig_transmitter_config
                                   (0111) export _ReloadConfig_transmitter_config
                                   (0112) export LoadConfig_pc_listener
                                   (0113) export _LoadConfig_pc_listener
                                   (0114) export UnloadConfig_pc_listener
                                   (0115) export _UnloadConfig_pc_listener
05E8: 71 10    OR    F,16          (0116) export LoadConfig_receiver_config
                                   (0117) export _LoadConfig_receiver_config
05EA: 10       PUSH  X             (0118) export UnloadConfig_receiver_config
05EB: 70 EF    AND   F,239         (0119) export _UnloadConfig_receiver_config
05ED: 50 00    MOV   A,0           (0120) export UnloadConfig_Total
05EF: 67       ASR   A             (0121) export _UnloadConfig_Total
                                   (0122) export ACTIVE_CONFIG_STATUS
05F0: 50 02    MOV   A,2           (0123) export Port_2_Data_SHADE
05F2: 57 2B    MOV   X,43          (0124) export _Port_2_Data_SHADE
05F4: 7C 07 EB LCALL 0x07EB        (0125) export Port_2_DriveMode_0_SHADE
                                   (0126) export _Port_2_DriveMode_0_SHADE
05F7: 50 01    MOV   A,1           (0127) export Port_2_DriveMode_1_SHADE
05F9: 67       ASR   A             (0128) export _Port_2_DriveMode_1_SHADE
                                   (0129) 
05FA: 50 02    MOV   A,2           (0130) 
05FC: 57 8C    MOV   X,140         (0131) export NO_SHADOW
05FE: 7C 07 EB LCALL 0x07EB        (0132) export _NO_SHADOW
                                   (0133) 
0601: 62 D0 00 MOV   REG[208],0    (0134) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                   (0135) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
0604: 2E 02 01 OR    [2],1         (0136) 
0607: 70 EF    AND   F,239         (0137) AREA psoc_config(rom, rel)
0609: 20       POP   X             (0138) 
                                   (0139) ;---------------------------------------------------------------------------
                                   (0140) ; LoadConfigInit - Establish the start-up configuration (except for a few
060A: 7F       RET                 (0141) ;                  parameters handled by boot code, like CPU speed). This
                                   (0142) ;                  function can be called from user code, but typically it
                                   (0143) ;                  is only called from boot.
                                   (0144) ;
                                   (0145) ;       INPUTS: None.
                                   (0146) ;      RETURNS: Nothing.
                                   (0147) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0148) ;               In the large memory model currently only the page
                                   (0149) ;               pointer registers listed below are modified.  This does
                                   (0150) ;               not guarantee that in future implementations of this
                                   (0151) ;               function other page pointer registers will not be
                                   (0152) ;               modified.
                                   (0153) ;          
                                   (0154) ;               Page Pointer Registers Modified: 
                                   (0155) ;               CUR_PP
                                   (0156) ;
                                   (0157) _LoadConfigInit:
                                   (0158)  LoadConfigInit:
                                   (0159)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0160)     RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0161) 	mov		[ACTIVE_CONFIG_STATUS], 0
                                   (0162) 
                                   (0163) 	mov		[Port_2_Data_SHADE], 0h
                                   (0164) 	mov		[Port_2_DriveMode_0_SHADE], 0h
                                   (0165) 	mov		[Port_2_DriveMode_1_SHADE], ffh
060B: 10       PUSH  X             (0166) 
060C: 70 EF    AND   F,239         (0167) 	lcall	LoadConfig_transmitter_config
060E: 50 00    MOV   A,0           (0168) 	lcall	LoadConfigTBL_transmitter_config_Ordered
0610: 67       ASR   A             (0169) 
                                   (0170) 
0611: 50 03    MOV   A,3           (0171)     RAM_EPILOGUE RAM_USE_CLASS_4
0613: 57 AC    MOV   X,172         (0172)     ret
0615: 7C 07 EB LCALL 0x07EB        (0173) 
                                   (0174) ;---------------------------------------------------------------------------
0618: 50 01    MOV   A,1           (0175) ; Load Configuration transmitter_config
061A: 67       ASR   A             (0176) ;
                                   (0177) ;    Load configuration registers for transmitter_config.
061B: 50 03    MOV   A,3           (0178) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
061D: 57 BF    MOV   X,191         (0179) ;
061F: 7C 07 EB LCALL 0x07EB        (0180) ;       INPUTS: None.
                                   (0181) ;      RETURNS: Nothing.
                                   (0182) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0622: 62 D0 00 MOV   REG[208],0    (0183) ;               modified as may the Page Pointer registers!
0625: 2E 02 01 OR    [2],1         (0184) ;               In the large memory model currently only the page
0628: 70 EF    AND   F,239         (0185) ;               pointer registers listed below are modified.  This does
062A: 20       POP   X             (0186) ;               not guarantee that in future implementations of this
                                   (0187) ;               function other page pointer registers will not be
                                   (0188) ;               modified.
062B: 7F       RET                 (0189) ;          
                                   (0190) ;               Page Pointer Registers Modified: 
                                   (0191) ;               CUR_PP
                                   (0192) ;
                                   (0193) _LoadConfig_transmitter_config:
                                   (0194)  LoadConfig_transmitter_config:
                                   (0195)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0196) 	M8C_SetBank1
                                   (0197) 
                                   (0198) 	push	x
                                   (0199)     M8C_SetBank0                    ; Force bank 0
                                   (0200)     mov     a, 0                    ; Specify bank 0
                                   (0201)     asr     a                       ; Store in carry flag
                                   (0202)                                     ; Load bank 0 table:
                                   (0203)     mov     A, >LoadConfigTBL_transmitter_config_Bank0
                                   (0204)     mov     X, <LoadConfigTBL_transmitter_config_Bank0
                                   (0205)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0206) 
                                   (0207)     mov     a, 1                    ; Specify bank 1
                                   (0208)     asr     a                       ; Store in carry flag
                                   (0209)                                     ; Load bank 1 table:
                                   (0210)     mov     A, >LoadConfigTBL_transmitter_config_Bank1
                                   (0211)     mov     X, <LoadConfigTBL_transmitter_config_Bank1
                                   (0212)     lcall   LoadConfig              ; Load the bank 1 values
                                   (0213) 
                                   (0214) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
062C: 10       PUSH  X             (0215) ; set config active bit
062D: 70 EF    AND   F,239         (0216) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
062F: 50 00    MOV   A,0           (0217)     M8C_SetBank0                    ; Force return to bank 0
0631: 67       ASR   A             (0218) 	pop		x
                                   (0219) 
0632: 50 03    MOV   A,3           (0220)     RAM_EPILOGUE RAM_USE_CLASS_4
0634: 57 D2    MOV   X,210         (0221)     ret
0636: 7C 07 EB LCALL 0x07EB        (0222) 
                                   (0223) ;---------------------------------------------------------------------------
0639: 50 01    MOV   A,1           (0224) ; Reload Configuration transmitter_config
063B: 67       ASR   A             (0225) ;
                                   (0226) ;    Reload configuration registers for transmitter_config.
063C: 50 03    MOV   A,3           (0227) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
063E: 57 D9    MOV   X,217         (0228) ;
0640: 7C 07 EB LCALL 0x07EB        (0229) ;       INPUTS: None.
                                   (0230) ;      RETURNS: Nothing.
0643: 71 10    OR    F,16          (0231) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0645: 70 EF    AND   F,239         (0232) ;               modified as may the Page Pointer registers!
                                   (0233) ;               In the large memory model currently only the page
0647: 62 D0 00 MOV   REG[208],0    (0234) ;               pointer registers listed below are modified.  This does
064A: 26 02 FE AND   [2],254       (0235) ;               not guarantee that in future implementations of this
064D: 70 EF    AND   F,239         (0236) ;               function other page pointer registers will not be
064F: 20       POP   X             (0237) ;               modified.
                                   (0238) ;          
                                   (0239) ;               Page Pointer Registers Modified: 
0650: 7F       RET                 (0240) ;               CUR_PP
                                   (0241) ;
                                   (0242) _ReloadConfig_transmitter_config:
                                   (0243)  ReloadConfig_transmitter_config:
                                   (0244)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0245) 
                                   (0246) 	push	x
                                   (0247)     M8C_SetBank0                    ; Force bank 0
                                   (0248)     mov     a, 0                    ; Specify bank 0
                                   (0249)     asr     a                       ; Store in carry flag
                                   (0250)                                     ; Bank 0 table address:
                                   (0251)     mov     A, >ReloadConfigTBL_transmitter_config_Bank0
                                   (0252)     mov     X, <ReloadConfigTBL_transmitter_config_Bank0
                                   (0253)     lcall   LoadConfig              ; Reload the bank 0 values
                                   (0254) 
                                   (0255)     mov     a, 1                    ; Specify bank 1
                                   (0256)     asr     a                       ; Store in carry flag
                                   (0257)                                     ; Bank 1 table address:
                                   (0258)     mov     A, >ReloadConfigTBL_transmitter_config_Bank1
                                   (0259)     mov     X, <ReloadConfigTBL_transmitter_config_Bank1
                                   (0260)     lcall   LoadConfig              ; Reload the bank 1 values
                                   (0261) 
                                   (0262) ; set config active bit
                                   (0263) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
0651: 71 10    OR    F,16          (0264) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
                                   (0265)     M8C_SetBank0                    ; Force return to bank 0
0653: 41 04 DF AND   REG[4],223    (0266) 	pop		x
0656: 43 04 20 OR    REG[4],32     (0267) 
                                   (0268)     RAM_EPILOGUE RAM_USE_CLASS_4
0659: 41 05 DF AND   REG[5],223    (0269)     ret
                                   (0270) 
065C: 70 EF    AND   F,239         (0271) ;---------------------------------------------------------------------------
065E: 41 07 D7 AND   REG[7],215    (0272) ; Unload Configuration transmitter_config
                                   (0273) ;
0661: 41 06 D7 AND   REG[6],215    (0274) ;    Reset configuration registers for transmitter_config
0664: 43 06 28 OR    REG[6],40     (0275) ;    to their values as initially configured.
                                   (0276) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0667: 71 10    OR    F,16          (0277) ;
0669: 41 E1 00 AND   REG[225],0    (0278) ;       INPUTS: None.
066C: 43 E1 1C OR    REG[225],28   (0279) ;      RETURNS: Nothing.
                                   (0280) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
066F: 70 EF    AND   F,239         (0281) ;               modified as may the Page Pointer registers!
0671: 41 B0 0F AND   REG[176],15   (0282) ;               In the large memory model currently only the page
                                   (0283) ;               pointer registers listed below are modified.  This does
0674: 41 B8 0C AND   REG[184],12   (0284) ;               not guarantee that in future implementations of this
0677: 43 B8 91 OR    REG[184],145  (0285) ;               function other page pointer registers will not be
                                   (0286) ;               modified.
067A: 10       PUSH  X             (0287) ;          
067B: 70 EF    AND   F,239         (0288) ;               Page Pointer Registers Modified: 
067D: 50 00    MOV   A,0           (0289) ;               CUR_PP
067F: 67       ASR   A             (0290) ;
                                   (0291) _UnloadConfig_transmitter_config:
0680: 50 01    MOV   A,1           (0292)  UnloadConfig_transmitter_config:
0682: 57 A9    MOV   X,169         (0293)     RAM_PROLOGUE RAM_USE_CLASS_4
0684: 7C 07 EB LCALL 0x07EB        (0294) 
                                   (0295) 	push	x
0687: 50 01    MOV   A,1           (0296)     M8C_SetBank0                    ; Force bank 0
0689: 67       ASR   A             (0297)     mov     a, 0                    ; Specify bank 0
                                   (0298)     asr     a                       ; Store in carry flag
068A: 50 01    MOV   A,1           (0299)                                     ; Bank 0 table address:
068C: 57 BC    MOV   X,188         (0300)     mov     A, >UnloadConfigTBL_transmitter_config_Bank0
068E: 7C 07 EB LCALL 0x07EB        (0301)     mov     X, <UnloadConfigTBL_transmitter_config_Bank0
                                   (0302)     lcall   LoadConfig              ; Unload the bank 0 values
0691: 62 D0 00 MOV   REG[208],0    (0303) 
                                   (0304)     mov     a, 1                    ; Specify bank 1
0694: 2E 02 02 OR    [2],2         (0305)     asr     a                       ; Store in carry flag
0697: 70 EF    AND   F,239         (0306)                                     ; Bank 1 table address:
0699: 20       POP   X             (0307)     mov     A, >UnloadConfigTBL_transmitter_config_Bank1
                                   (0308)     mov     X, <UnloadConfigTBL_transmitter_config_Bank1
                                   (0309)     lcall   LoadConfig              ; Unload the bank 1 values
069A: 7F       RET                 (0310) 
                                   (0311) 	M8C_SetBank1
                                   (0312) 	M8C_SetBank0
                                   (0313) ; clear config active bit
                                   (0314) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0315) 	and		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], ~transmitter_config_BIT
                                   (0316)     M8C_SetBank0                    ; Force return to bank 0
                                   (0317) 	pop		x
                                   (0318) 
                                   (0319)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0320)     ret
                                   (0321) 
                                   (0322) ;---------------------------------------------------------------------------
                                   (0323) ; Load Configuration pc_listener
                                   (0324) ;
                                   (0325) ;    Load configuration registers for pc_listener.
                                   (0326) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0327) ;
                                   (0328) ;       INPUTS: None.
                                   (0329) ;      RETURNS: Nothing.
                                   (0330) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0331) ;               modified as may the Page Pointer registers!
                                   (0332) ;               In the large memory model currently only the page
                                   (0333) ;               pointer registers listed below are modified.  This does
                                   (0334) ;               not guarantee that in future implementations of this
                                   (0335) ;               function other page pointer registers will not be
069B: 10       PUSH  X             (0336) ;               modified.
069C: 70 EF    AND   F,239         (0337) ;          
069E: 50 00    MOV   A,0           (0338) ;               Page Pointer Registers Modified: 
06A0: 67       ASR   A             (0339) ;               CUR_PP
                                   (0340) ;
06A1: 50 01    MOV   A,1           (0341) _LoadConfig_pc_listener:
06A3: 57 CF    MOV   X,207         (0342)  LoadConfig_pc_listener:
06A5: 7C 07 EB LCALL 0x07EB        (0343)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0344) 	M8C_SetBank1
06A8: 50 01    MOV   A,1           (0345) ; writing Port_1_DriveMode_0 register
06AA: 67       ASR   A             (0346) 	and		reg[ 4h], ~20h
                                   (0347) 	or		reg[ 4h], 20h
06AB: 50 01    MOV   A,1           (0348) ; writing Port_1_DriveMode_1 register
06AD: 57 D6    MOV   X,214         (0349) 	and		reg[ 5h], ~20h
06AF: 7C 07 EB LCALL 0x07EB        (0350) ; writing Port_1_DriveMode_2 register
                                   (0351) 	M8C_SetBank0
06B2: 71 10    OR    F,16          (0352) 	and		reg[ 7h], ~28h
                                   (0353) ; writing Port_1_GlobalSelect register
06B4: 41 E1 00 AND   REG[225],0    (0354) 	and		reg[ 6h], ~28h
06B7: 43 E1 99 OR    REG[225],153  (0355) 	or		reg[ 6h], 28h
                                   (0356) ; writing OscillatorControl_1 register
06BA: 70 EF    AND   F,239         (0357) 	M8C_SetBank1
06BC: 41 B0 0F AND   REG[176],15   (0358) 	and		reg[e1h], ~ffh
06BF: 43 B0 50 OR    REG[176],80   (0359) 	or		reg[e1h], 1ch
                                   (0360) ; writing Row_0_InputMux register
06C2: 41 B8 0C AND   REG[184],12   (0361) 	M8C_SetBank0
06C5: 43 B8 42 OR    REG[184],66   (0362) 	and		reg[b0h], ~f0h
                                   (0363) ; writing Row_1_InputMux register
06C8: 41 06 D7 AND   REG[6],215    (0364) 	and		reg[b8h], ~f3h
                                   (0365) 	or		reg[b8h], 91h
06CB: 41 07 D7 AND   REG[7],215    (0366) 
06CE: 43 07 28 OR    REG[7],40     (0367) 	push	x
                                   (0368)     M8C_SetBank0                    ; Force bank 0
06D1: 71 10    OR    F,16          (0369)     mov     a, 0                    ; Specify bank 0
06D3: 41 05 DF AND   REG[5],223    (0370)     asr     a                       ; Store in carry flag
06D6: 43 05 20 OR    REG[5],32     (0371)                                     ; Load bank 0 table:
                                   (0372)     mov     A, >LoadConfigTBL_pc_listener_Bank0
06D9: 41 04 DF AND   REG[4],223    (0373)     mov     X, <LoadConfigTBL_pc_listener_Bank0
06DC: 70 EF    AND   F,239         (0374)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0375) 
06DE: 62 D0 00 MOV   REG[208],0    (0376)     mov     a, 1                    ; Specify bank 1
06E1: 26 02 FD AND   [2],253       (0377)     asr     a                       ; Store in carry flag
06E4: 70 EF    AND   F,239         (0378)                                     ; Load bank 1 table:
06E6: 20       POP   X             (0379)     mov     A, >LoadConfigTBL_pc_listener_Bank1
                                   (0380)     mov     X, <LoadConfigTBL_pc_listener_Bank1
                                   (0381)     lcall   LoadConfig              ; Load the bank 1 values
06E7: 7F       RET                 (0382) 
                                   (0383) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0384) ; set config active bit
                                   (0385) 	or		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
                                   (0386)     M8C_SetBank0                    ; Force return to bank 0
                                   (0387) 	pop		x
                                   (0388) 
                                   (0389)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0390)     ret
                                   (0391) 
                                   (0392) ;---------------------------------------------------------------------------
                                   (0393) ; Unload Configuration pc_listener
                                   (0394) ;
                                   (0395) ;    Reset configuration registers for pc_listener
                                   (0396) ;    to their values as initially configured.
                                   (0397) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0398) ;
                                   (0399) ;       INPUTS: None.
                                   (0400) ;      RETURNS: Nothing.
                                   (0401) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0402) ;               modified as may the Page Pointer registers!
                                   (0403) ;               In the large memory model currently only the page
                                   (0404) ;               pointer registers listed below are modified.  This does
                                   (0405) ;               not guarantee that in future implementations of this
06E8: 71 10    OR    F,16          (0406) ;               function other page pointer registers will not be
                                   (0407) ;               modified.
06EA: 41 00 FE AND   REG[0],254    (0408) ;          
                                   (0409) ;               Page Pointer Registers Modified: 
06ED: 41 01 FE AND   REG[1],254    (0410) ;               CUR_PP
06F0: 43 01 01 OR    REG[1],1      (0411) ;
                                   (0412) _UnloadConfig_pc_listener:
06F3: 41 04 FE AND   REG[4],254    (0413)  UnloadConfig_pc_listener:
                                   (0414)     RAM_PROLOGUE RAM_USE_CLASS_4
06F6: 41 05 FE AND   REG[5],254    (0415) 
06F9: 43 05 01 OR    REG[5],1      (0416) 	push	x
                                   (0417)     M8C_SetBank0                    ; Force bank 0
06FC: 70 EF    AND   F,239         (0418)     mov     a, 0                    ; Specify bank 0
06FE: 41 07 FE AND   REG[7],254    (0419)     asr     a                       ; Store in carry flag
0701: 43 07 01 OR    REG[7],1      (0420)                                     ; Bank 0 table address:
                                   (0421)     mov     A, >UnloadConfigTBL_pc_listener_Bank0
0704: 71 10    OR    F,16          (0422)     mov     X, <UnloadConfigTBL_pc_listener_Bank0
0706: 41 08 80 AND   REG[8],128    (0423)     lcall   LoadConfig              ; Unload the bank 0 values
0709: 43 08 7F OR    REG[8],127    (0424) 
                                   (0425)     mov     a, 1                    ; Specify bank 1
070C: 41 09 80 AND   REG[9],128    (0426)     asr     a                       ; Store in carry flag
                                   (0427)                                     ; Bank 1 table address:
070F: 70 EF    AND   F,239         (0428)     mov     A, >UnloadConfigTBL_pc_listener_Bank1
0711: 41 0B 80 AND   REG[11],128   (0429)     mov     X, <UnloadConfigTBL_pc_listener_Bank1
                                   (0430)     lcall   LoadConfig              ; Unload the bank 1 values
0714: 71 10    OR    F,16          (0431) 
0716: 41 60 CF AND   REG[96],207   (0432) 	M8C_SetBank1
0719: 43 60 30 OR    REG[96],48    (0433) ; writing OscillatorControl_1 register
                                   (0434) 	and		reg[e1h], ~ffh
071C: 70 EF    AND   F,239         (0435) 	or		reg[e1h], 99h
071E: 41 60 C3 AND   REG[96],195   (0436) ; writing Row_0_InputMux register
0721: 43 60 34 OR    REG[96],52    (0437) 	M8C_SetBank0
                                   (0438) 	and		reg[b0h], ~f0h
0724: 41 B0 CF AND   REG[176],207  (0439) 	or		reg[b0h], 50h
                                   (0440) ; writing Row_1_InputMux register
0727: 41 B5 FE AND   REG[181],254  (0441) 	and		reg[b8h], ~f3h
                                   (0442) 	or		reg[b8h], 42h
072A: 41 B8 CC AND   REG[184],204  (0443) ; writing Port_1_GlobalSelect register
072D: 43 B8 11 OR    REG[184],17   (0444) 	and		reg[ 6h], ~28h
                                   (0445) ; writing Port_1_DriveMode_2 register
0730: 41 BD BF AND   REG[189],191  (0446) 	and		reg[ 7h], ~28h
                                   (0447) 	or		reg[ 7h], 28h
0733: 10       PUSH  X             (0448) ; writing Port_1_DriveMode_1 register
0734: 70 EF    AND   F,239         (0449) 	M8C_SetBank1
0736: 50 00    MOV   A,0           (0450) 	and		reg[ 5h], ~20h
0738: 67       ASR   A             (0451) 	or		reg[ 5h], 20h
                                   (0452) ; writing Port_1_DriveMode_0 register
0739: 50 01    MOV   A,1           (0453) 	and		reg[ 4h], ~20h
073B: 57 EA    MOV   X,234         (0454) 	M8C_SetBank0
073D: 7C 07 EB LCALL 0x07EB        (0455) ; clear config active bit
                                   (0456) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
0740: 50 01    MOV   A,1           (0457) 	and		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], ~pc_listener_BIT
0742: 67       ASR   A             (0458)     M8C_SetBank0                    ; Force return to bank 0
                                   (0459) 	pop		x
0743: 50 01    MOV   A,1           (0460) 
0745: 57 FD    MOV   X,253         (0461)     RAM_EPILOGUE RAM_USE_CLASS_4
0747: 7C 07 EB LCALL 0x07EB        (0462)     ret
                                   (0463) 
074A: 62 D0 00 MOV   REG[208],0    (0464) ;---------------------------------------------------------------------------
                                   (0465) ; Load Configuration receiver_config
074D: 2E 02 04 OR    [2],4         (0466) ;
0750: 70 EF    AND   F,239         (0467) ;    Load configuration registers for receiver_config.
0752: 20       POP   X             (0468) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0469) ;
                                   (0470) ;       INPUTS: None.
0753: 7F       RET                 (0471) ;      RETURNS: Nothing.
                                   (0472) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0473) ;               modified as may the Page Pointer registers!
                                   (0474) ;               In the large memory model currently only the page
                                   (0475) ;               pointer registers listed below are modified.  This does
                                   (0476) ;               not guarantee that in future implementations of this
                                   (0477) ;               function other page pointer registers will not be
                                   (0478) ;               modified.
                                   (0479) ;          
                                   (0480) ;               Page Pointer Registers Modified: 
                                   (0481) ;               CUR_PP
                                   (0482) ;
                                   (0483) _LoadConfig_receiver_config:
                                   (0484)  LoadConfig_receiver_config:
                                   (0485)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0486) 	M8C_SetBank1
                                   (0487) ; writing Port_0_DriveMode_0 register
                                   (0488) 	and		reg[ 0h], ~ 1h
                                   (0489) ; writing Port_0_DriveMode_1 register
                                   (0490) 	and		reg[ 1h], ~ 1h
                                   (0491) 	or		reg[ 1h],  1h
                                   (0492) ; writing Port_1_DriveMode_0 register
                                   (0493) 	and		reg[ 4h], ~ 1h
                                   (0494) ; writing Port_1_DriveMode_1 register
                                   (0495) 	and		reg[ 5h], ~ 1h
                                   (0496) 	or		reg[ 5h],  1h
0754: 10       PUSH  X             (0497) ; writing Port_1_DriveMode_2 register
0755: 70 EF    AND   F,239         (0498) 	M8C_SetBank0
0757: 50 00    MOV   A,0           (0499) 	and		reg[ 7h], ~ 1h
0759: 67       ASR   A             (0500) 	or		reg[ 7h],  1h
                                   (0501) ; writing Port_2_DriveMode_0 register
075A: 50 02    MOV   A,2           (0502) 	M8C_SetBank1
075C: 57 10    MOV   X,16          (0503) 	and		reg[ 8h], ~7fh
075E: 7C 07 EB LCALL 0x07EB        (0504) 	or		reg[ 8h], 7fh
                                   (0505) ; writing Port_2_DriveMode_1 register
0761: 50 01    MOV   A,1           (0506) 	and		reg[ 9h], ~7fh
0763: 67       ASR   A             (0507) ; writing Port_2_DriveMode_2 register
                                   (0508) 	M8C_SetBank0
0764: 50 02    MOV   A,2           (0509) 	and		reg[ bh], ~7fh
0766: 57 17    MOV   X,23          (0510) ; writing AnalogColumnClockSelect register
0768: 7C 07 EB LCALL 0x07EB        (0511) 	M8C_SetBank1
                                   (0512) 	and		reg[60h], ~30h
076B: 71 10    OR    F,16          (0513) 	or		reg[60h], 30h
                                   (0514) ; writing AnalogColumnInputSelect register
076D: 41 60 CF AND   REG[96],207   (0515) 	M8C_SetBank0
                                   (0516) 	and		reg[60h], ~3ch
0770: 70 EF    AND   F,239         (0517) 	or		reg[60h], 34h
0772: 41 60 C3 AND   REG[96],195   (0518) ; writing Row_0_InputMux register
0775: 43 60 28 OR    REG[96],40    (0519) 	and		reg[b0h], ~30h
                                   (0520) ; writing Row_0_OutputDrive_0 register
0778: 41 B0 CF AND   REG[176],207  (0521) 	and		reg[b5h], ~ 1h
077B: 43 B0 10 OR    REG[176],16   (0522) ; writing Row_1_InputMux register
                                   (0523) 	and		reg[b8h], ~33h
077E: 41 B5 FE AND   REG[181],254  (0524) 	or		reg[b8h], 11h
0781: 43 B5 01 OR    REG[181],1    (0525) ; writing Row_1_OutputDrive_0 register
                                   (0526) 	and		reg[bdh], ~40h
0784: 41 B8 CC AND   REG[184],204  (0527) 
0787: 43 B8 02 OR    REG[184],2    (0528) 	push	x
                                   (0529)     M8C_SetBank0                    ; Force bank 0
078A: 41 BD BF AND   REG[189],191  (0530)     mov     a, 0                    ; Specify bank 0
078D: 43 BD 40 OR    REG[189],64   (0531)     asr     a                       ; Store in carry flag
                                   (0532)                                     ; Load bank 0 table:
0790: 41 0B 80 AND   REG[11],128   (0533)     mov     A, >LoadConfigTBL_receiver_config_Bank0
0793: 43 0B 7F OR    REG[11],127   (0534)     mov     X, <LoadConfigTBL_receiver_config_Bank0
                                   (0535)     lcall   LoadConfig              ; Load the bank 0 values
0796: 71 10    OR    F,16          (0536) 
0798: 41 09 80 AND   REG[9],128    (0537)     mov     a, 1                    ; Specify bank 1
079B: 43 09 7F OR    REG[9],127    (0538)     asr     a                       ; Store in carry flag
                                   (0539)                                     ; Load bank 1 table:
079E: 41 08 80 AND   REG[8],128    (0540)     mov     A, >LoadConfigTBL_receiver_config_Bank1
                                   (0541)     mov     X, <LoadConfigTBL_receiver_config_Bank1
07A1: 70 EF    AND   F,239         (0542)     lcall   LoadConfig              ; Load the bank 1 values
07A3: 41 07 FE AND   REG[7],254    (0543) 
                                   (0544) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
07A6: 71 10    OR    F,16          (0545) ; set config active bit
07A8: 41 05 FE AND   REG[5],254    (0546) 	or		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
                                   (0547)     M8C_SetBank0                    ; Force return to bank 0
07AB: 41 04 FE AND   REG[4],254    (0548) 	pop		x
07AE: 43 04 01 OR    REG[4],1      (0549) 
                                   (0550)     RAM_EPILOGUE RAM_USE_CLASS_4
07B1: 41 01 FE AND   REG[1],254    (0551)     ret
                                   (0552) 
07B4: 41 00 FE AND   REG[0],254    (0553) ;---------------------------------------------------------------------------
07B7: 43 00 01 OR    REG[0],1      (0554) ; Unload Configuration receiver_config
07BA: 70 EF    AND   F,239         (0555) ;
                                   (0556) ;    Reset configuration registers for receiver_config
07BC: 62 D0 00 MOV   REG[208],0    (0557) ;    to their values as initially configured.
07BF: 26 02 FB AND   [2],251       (0558) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
07C2: 70 EF    AND   F,239         (0559) ;
07C4: 20       POP   X             (0560) ;       INPUTS: None.
                                   (0561) ;      RETURNS: Nothing.
                                   (0562) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
07C5: 7F       RET                 (0563) ;               modified as may the Page Pointer registers!
                                   (0564) ;               In the large memory model currently only the page
                                   (0565) ;               pointer registers listed below are modified.  This does
                                   (0566) ;               not guarantee that in future implementations of this
                                   (0567) ;               function other page pointer registers will not be
                                   (0568) ;               modified.
                                   (0569) ;          
                                   (0570) ;               Page Pointer Registers Modified: 
                                   (0571) ;               CUR_PP
                                   (0572) ;
                                   (0573) _UnloadConfig_receiver_config:
                                   (0574)  UnloadConfig_receiver_config:
                                   (0575)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0576) 
                                   (0577) 	push	x
                                   (0578)     M8C_SetBank0                    ; Force bank 0
                                   (0579)     mov     a, 0                    ; Specify bank 0
                                   (0580)     asr     a                       ; Store in carry flag
                                   (0581)                                     ; Bank 0 table address:
                                   (0582)     mov     A, >UnloadConfigTBL_receiver_config_Bank0
                                   (0583)     mov     X, <UnloadConfigTBL_receiver_config_Bank0
                                   (0584)     lcall   LoadConfig              ; Unload the bank 0 values
                                   (0585) 
                                   (0586)     mov     a, 1                    ; Specify bank 1
                                   (0587)     asr     a                       ; Store in carry flag
                                   (0588)                                     ; Bank 1 table address:
07C6: 10       PUSH  X             (0589)     mov     A, >UnloadConfigTBL_receiver_config_Bank1
07C7: 70 EF    AND   F,239         (0590)     mov     X, <UnloadConfigTBL_receiver_config_Bank1
07C9: 50 00    MOV   A,0           (0591)     lcall   LoadConfig              ; Unload the bank 1 values
07CB: 67       ASR   A             (0592) 
                                   (0593) 	M8C_SetBank1
07CC: 50 03    MOV   A,3           (0594) ; writing AnalogColumnClockSelect register
07CE: 57 ED    MOV   X,237         (0595) 	and		reg[60h], ~30h
07D0: 7C 07 EB LCALL 0x07EB        (0596) ; writing AnalogColumnInputSelect register
                                   (0597) 	M8C_SetBank0
07D3: 50 01    MOV   A,1           (0598) 	and		reg[60h], ~3ch
07D5: 67       ASR   A             (0599) 	or		reg[60h], 28h
                                   (0600) ; writing Row_0_InputMux register
07D6: 50 04    MOV   A,4           (0601) 	and		reg[b0h], ~30h
07D8: 57 6E    MOV   X,110         (0602) 	or		reg[b0h], 10h
07DA: 7C 07 EB LCALL 0x07EB        (0603) ; writing Row_0_OutputDrive_0 register
                                   (0604) 	and		reg[b5h], ~ 1h
07DD: 71 10    OR    F,16          (0605) 	or		reg[b5h],  1h
07DF: 70 EF    AND   F,239         (0606) ; writing Row_1_InputMux register
                                   (0607) 	and		reg[b8h], ~33h
07E1: 62 D0 00 MOV   REG[208],0    (0608) 	or		reg[b8h],  2h
07E4: 55 02 00 MOV   [2],0         (0609) ; writing Row_1_OutputDrive_0 register
07E7: 70 EF    AND   F,239         (0610) 	and		reg[bdh], ~40h
07E9: 20       POP   X             (0611) 	or		reg[bdh], 40h
                                   (0612) ; writing Port_2_DriveMode_2 register
                                   (0613) 	and		reg[ bh], ~7fh
07EA: 7F       RET                 (0614) 	or		reg[ bh], 7fh
                                   (0615) ; writing Port_2_DriveMode_1 register
                                   (0616) 	M8C_SetBank1
                                   (0617) 	and		reg[ 9h], ~7fh
                                   (0618) 	or		reg[ 9h], 7fh
                                   (0619) ; writing Port_2_DriveMode_0 register
                                   (0620) 	and		reg[ 8h], ~7fh
                                   (0621) ; writing Port_1_DriveMode_2 register
                                   (0622) 	M8C_SetBank0
                                   (0623) 	and		reg[ 7h], ~ 1h
                                   (0624) ; writing Port_1_DriveMode_1 register
                                   (0625) 	M8C_SetBank1
                                   (0626) 	and		reg[ 5h], ~ 1h
                                   (0627) ; writing Port_1_DriveMode_0 register
                                   (0628) 	and		reg[ 4h], ~ 1h
                                   (0629) 	or		reg[ 4h],  1h
                                   (0630) ; writing Port_0_DriveMode_1 register
                                   (0631) 	and		reg[ 1h], ~ 1h
                                   (0632) ; writing Port_0_DriveMode_0 register
                                   (0633) 	and		reg[ 0h], ~ 1h
                                   (0634) 	or		reg[ 0h],  1h
                                   (0635) 	M8C_SetBank0
07EB: 38 02    ADD   SP,2          (0636) ; clear config active bit
07ED: 10       PUSH  X             (0637) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
07EE: 08       PUSH  A             (0638) 	and		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], ~receiver_config_BIT
07EF: 4F       MOV   X,SP          (0639)     M8C_SetBank0                    ; Force return to bank 0
07F0: 56 FC 00 MOV   [X-4],0       (0640) 	pop		x
07F3: D0 04    JNC   0x07F8        (0641) 
07F5: 56 FC 01 MOV   [X-4],1       (0642)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0643)     ret
07F8: 18       POP   A             (0644) 
07F9: 20       POP   X             (0645) ;---------------------------------------------------------------------------
                                   (0646) ; Unload Configuration Total
                                   (0647) ;
07FA: 70 EF    AND   F,239         (0648) ;    Reset configuration registers for Total
07FC: 62 E3 00 MOV   REG[227],0    (0649) ;    to their values as initially configured.
07FF: 10       PUSH  X             (0650) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0800: 08       PUSH  A             (0651) ;
0801: 28       ROMX                (0652) ;       INPUTS: None.
0802: 39 FF    CMP   A,255         (0653) ;      RETURNS: Nothing.
0804: A0 1F    JZ    0x0824        (0654) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0806: 4F       MOV   X,SP          (0655) ;               modified as may the Page Pointer registers!
0807: 48 FC 01 TST   [X-4],1       (0656) ;               In the large memory model currently only the page
080A: A0 03    JZ    0x080E        (0657) ;               pointer registers listed below are modified.  This does
080C: 71 10    OR    F,16          (0658) ;               not guarantee that in future implementations of this
                                   (0659) ;               function other page pointer registers will not be
080E: 54 FD    MOV   [X-3],A       (0660) ;               modified.
0810: 18       POP   A             (0661) ;          
0811: 20       POP   X             (0662) ;               Page Pointer Registers Modified: 
0812: 75       INC   X             (0663) ;               CUR_PP
0813: 09 00    ADC   A,0           (0664) ;
0815: 10       PUSH  X             (0665) _UnloadConfig_Total:
0816: 08       PUSH  A             (0666)  UnloadConfig_Total:
0817: 28       ROMX                (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
0818: 4F       MOV   X,SP          (0668) 
0819: 59 FD    MOV   X,[X-3]       (0669) 	push	x
081B: 61 00    MOV   REG[X+0],A    (0670)     M8C_SetBank0                    ; Force bank 0
081D: 18       POP   A             (0671)     mov     a, 0                    ; Specify bank 0
081E: 20       POP   X             (0672)     asr     a                       ; Store in carry flag
081F: 75       INC   X             (0673)                                     ; Bank 0 table address:
0820: 09 00    ADC   A,0           (0674)     mov     A, >UnloadConfigTBL_Total_Bank0
0822: 8F D7    JMP   0x07FA        (0675)     mov     X, <UnloadConfigTBL_Total_Bank0
                                   (0676)     lcall   LoadConfig              ; Unload the bank 0 values
0824: 38 FC    ADD   SP,252        (0677) 
0826: 70 3F    AND   F,63
0828: 71 C0    OR    F,192         (0678)     mov     a, 1                    ; Specify bank 1
082B: 43 E1 02 OR    REG[225],2    (0679)     asr     a                       ; Store in carry flag

FILE: lib\tx_timeout.asm
                                   (0102) ;;*****************************************************************************
082E: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: TX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "TX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
082F: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
0832: 7F       RET                 (0131) export  TX_TIMEOUT_EnableInt
                                   (0132) export _TX_TIMEOUT_EnableInt
                                   (0133) export  TX_TIMEOUT_DisableInt
                                   (0134) export _TX_TIMEOUT_DisableInt
                                   (0135) export  TX_TIMEOUT_Start
                                   (0136) export _TX_TIMEOUT_Start
                                   (0137) export  TX_TIMEOUT_Stop
                                   (0138) export _TX_TIMEOUT_Stop
                                   (0139) export  TX_TIMEOUT_WritePeriod
                                   (0140) export _TX_TIMEOUT_WritePeriod
                                   (0141) export  TX_TIMEOUT_WriteCompareValue
                                   (0142) export _TX_TIMEOUT_WriteCompareValue
                                   (0143) export  TX_TIMEOUT_wReadCompareValue
                                   (0144) export _TX_TIMEOUT_wReadCompareValue
                                   (0145) export  TX_TIMEOUT_wReadTimer
                                   (0146) export _TX_TIMEOUT_wReadTimer
                                   (0147) export  TX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _TX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
0833: 43 23 01 OR    REG[35],1     (0157) export _wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
0836: 7F       RET                 (0159) export  wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA transmitter_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: TX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
0837: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
083A: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  TX_TIMEOUT_EnableInt:
                                   (0200) _TX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    TX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: TX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
083B: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
083D: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
083E: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
0840: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  TX_TIMEOUT_DisableInt:
                                   (0228) _TX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    TX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: TX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
0841: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
0843: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
0844: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
0846: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  TX_TIMEOUT_Start:
                                   (0256) _TX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    TX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: TX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
0847: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0849: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
084A: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
084C: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  TX_TIMEOUT_Stop:
                                   (0284) _TX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    TX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  TX_TIMEOUT_WritePeriod:
                                   (0313) _TX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[TX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[TX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: TX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call TX_TIMEOUT_Stop to disable).
084D: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
084E: 38 03    ADD   SP,3          (0334) ;
0850: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
0852: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
0853: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
0855: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
0856: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
0858: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0859: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
085B: 5D 26    MOV   A,REG[38]     (0343) ;
085D: 54 01    MOV   [X+1],A       (0344)  TX_TIMEOUT_WriteCompareValue:
085F: 5D 22    MOV   A,REG[34]     (0345) _TX_TIMEOUT_WriteCompareValue:
0861: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
0863: 50 00    MOV   A,0           (0347)    mov   reg[TX_TIMEOUT_COMPARE_LSB_REG], A
0865: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
0868: A0 03    JZ    0x086C        (0349)    mov   reg[TX_TIMEOUT_COMPARE_MSB_REG], A
086A: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
086C: 54 00    MOV   [X+0],A       (0352) 
086E: 70 FE    AND   F,254         (0353) .ENDSECTION
0870: 41 23 FE AND   REG[35],254   (0354) 
0873: 18       POP   A             (0355) 
0874: 60 26    MOV   REG[38],A     (0356) .SECTION
0876: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
0877: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: TX_TIMEOUT_wReadCompareValue
0879: 18       POP   A             (0359) ;
087A: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
087C: 18       POP   A             (0361) ;     Reads the Compare registers.
087D: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
087E: 70 3F    AND   F,63
0880: 71 C0    OR    F,192         (0363) ;
0882: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  TX_TIMEOUT_wReadCompareValue:
                                   (0374) _TX_TIMEOUT_wReadCompareValue:
                                   (0375)  wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[TX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[TX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: TX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
0883: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
0885: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
0887: 5C       MOV   X,A           (0409) ;
0888: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
088C: 43 E1 04 OR    REG[225],4    (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\tx_repeater.asm
                                   (0109) ;;*****************************************************************************
088F: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TX_REPEATER.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TX_REPEATER.inc"
0890: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
0893: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TX_REPEATER_SetTxIntMode
                                   (0143) export  _TX_REPEATER_SetTxIntMode
                                   (0144) export   TX_REPEATER_EnableInt
                                   (0145) export  _TX_REPEATER_EnableInt
                                   (0146) export   TX_REPEATER_DisableInt
                                   (0147) export  _TX_REPEATER_DisableInt
                                   (0148) export   TX_REPEATER_Start
                                   (0149) export  _TX_REPEATER_Start
                                   (0150) export   TX_REPEATER_Stop
                                   (0151) export  _TX_REPEATER_Stop
                                   (0152) export   TX_REPEATER_SendData
                                   (0153) export  _TX_REPEATER_SendData
                                   (0154) export   TX_REPEATER_bReadTxStatus
                                   (0155) export  _TX_REPEATER_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTX_REPEATER_ReadTxStatus
                                   (0160) export  _bTX_REPEATER_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TX_REPEATER_PutSHexByte
                                   (0166) export _TX_REPEATER_PutSHexByte
                                   (0167) export  TX_REPEATER_PutSHexInt
                                   (0168) export _TX_REPEATER_PutSHexInt
                                   (0169) 
0894: 71 10    OR    F,16          (0170) export  TX_REPEATER_CPutString
0896: 21 01    AND   A,1           (0171) export _TX_REPEATER_CPutString
0898: A0 07    JZ    0x08A0        (0172) export  TX_REPEATER_PutString
089A: 43 28 10 OR    REG[40],16    (0173) export _TX_REPEATER_PutString
089D: 70 EF    AND   F,239         (0174) export  TX_REPEATER_PutChar
                                   (0175) export _TX_REPEATER_PutChar
089F: 7F       RET                 (0176) export  TX_REPEATER_Write
                                   (0177) export _TX_REPEATER_Write
                                   (0178) export  TX_REPEATER_CWrite
08A0: 41 28 EF AND   REG[40],239   (0179) export _TX_REPEATER_CWrite
08A3: 70 EF    AND   F,239         (0180) export  TX_REPEATER_PutCRLF
                                   (0181) export _TX_REPEATER_PutCRLF 
08A5: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TX_REPEATER_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
08A6: 29 01    OR    A,1           (0211) ;    functions.
08A8: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TX_REPEATER_EnableInt:
08AA: 7F       RET                 (0214) _TX_REPEATER_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TX_REPEATER_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
08AB: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
08AE: 7F       RET                 (0242)  TX_REPEATER_DisableInt:
                                   (0243) _TX_REPEATER_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TX_REPEATER_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
08AF: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
08B1: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TX_REPEATER_SetTxIntMode:
                                   (0276) _TX_REPEATER_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TX_REPEATER_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TX_REPEATER_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TX_REPEATER_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_REPEATER_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
08B2: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
08B4: 7F       RET                 (0303) ;
08B5: 30       HALT  
08B6: 31 32    XOR   A,50
08B8: 33 34    XOR   A,[X+52]
08BA: 35 36    XOR   [X+54],A
08BC: 37 38 39 XOR   [X+56],57
08BF: 41 42 43 AND   REG[66],67
08C2: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TX_REPEATER_Start:
                                   (0317) _TX_REPEATER_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TX_REPEATER_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TX_REPEATER_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
08C5: 08       PUSH  A             (0335) ;
08C6: 67       ASR   A             (0336) ;  RETURNS:  none
08C7: 67       ASR   A             (0337) ;
08C8: 67       ASR   A             (0338) ;  SIDE EFFECTS:
08C9: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
08CA: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
08CC: FF E7    INDEX 0x08B5        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
08CE: 90 0F    CALL  0x08DF        (0342) ;    responsibility to perserve their values across calls to fastcall16 
08D0: 18       POP   A             (0343) ;    functions.
08D1: 21 0F    AND   A,15          (0344) ;
08D3: FF E0    INDEX 0x08B5        (0345)  TX_REPEATER_Stop:
08D5: 90 08    CALL  0x08DF        (0346) _TX_REPEATER_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
08D7: 7F       RET                 (0348)    and   REG[TX_REPEATER_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TX_REPEATER_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TX_REPEATER_SendData:
                                   (0375) _TX_REPEATER_SendData:
08D8: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
08D9: 9F EA    CALL  0x08C5        (0377)    mov REG[TX_REPEATER_TX_BUFFER_REG], A
08DB: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
08DC: 9F E7    CALL  0x08C5        (0379)    ret
                                   (0380) .ENDSECTION
08DE: 7F       RET                 (0381) 
08DF: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TX_REPEATER_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TX_REPEATER_bReadTxStatus:
                                   (0405) _TX_REPEATER_bReadTxStatus:
                                   (0406)  bTX_REPEATER_ReadTxStatus:
                                   (0407) _bTX_REPEATER_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TX_REPEATER_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
08E2: AF FC    JZ    0x08DF        (0416) ;  FUNCTION NAME: TX_REPEATER_PutSHexByte
08E4: 60 29    MOV   REG[41],A
                                   (0417) ;
08E6: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TX_REPEATER_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TX_REPEATER_PutSHexByte:
                                   (0441) _TX_REPEATER_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0450)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0454)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
08E7: 70 BF    AND   F,191         (0456)     ret
08E9: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
08EB: 52 00    MOV   A,[X+0]       (0459) .SECTION
08ED: A0 06    JZ    0x08F4        (0460) ;-----------------------------------------------------------------------------
08EF: 9F EE    CALL  0x08DF        (0461) ;  FUNCTION NAME: TX_REPEATER_PutSHexInt
08F1: 75       INC   X             (0462) ;
08F2: 8F F8    JMP   0x08EB        (0463) ;  DESCRIPTION:
08F4: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
08F6: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
08F8: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TX_REPEATER_PutSHexInt:
                                   (0482) _TX_REPEATER_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TX_REPEATER_PutSHexByte      ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TX_REPEATER_PutSHexByte      ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TX_REPEATER_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
08F9: 70 BF    AND   F,191         (0503) ;  RETURNS:
08FB: 62 D3 07 MOV   REG[211],7    (0504) ;     none
08FE: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
08FF: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
0901: A0 1A    JZ    0x091C        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
0903: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
0905: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TX_REPEATER_CONTROL_REG], TX_REPEATER_TX_BUFFER_EMPTY    ; Check Tx Status
0907: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
0909: 60 D3    MOV   REG[211],A    (0517)    mov REG[TX_REPEATER_TX_BUFFER_REG], @Source    ; Write data to Tx Port
090B: 52 00    MOV   A,[X+0]       (0518)    endm
090D: 49 2B 10 TST   REG[43],16
0910: AF FC    JZ    0x090D        (0519) 
0912: 60 29    MOV   REG[41],A
0914: 4F       MOV   X,SP          (0520) 
0915: 62 D3 07 MOV   REG[211],7    (0521)  TX_REPEATER_PutChar:
0918: 77 FD    INC   [X-3]         (0522) _TX_REPEATER_PutChar:
091A: 8F E4    JMP   0x08FF        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
091C: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
091E: 71 C0    OR    F,192         (0526)    ret
0920: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TX_REPEATER_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TX_REPEATER_PutString:
                                   (0563) _TX_REPEATER_PutString:
0921: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
0922: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
0925: B0 06    JNZ   0x092C        (0569)    call  TX_REPEATER_PutChar                ; Send character to Tx port
0927: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
092A: A0 1D    JZ    0x0948        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
092C: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
092D: 52 FC    MOV   A,[X-4]       (0575)    ret
092F: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
0931: 28       ROMX                (0577) 
0932: 49 2B 10 TST   REG[43],16
0935: AF FC    JZ    0x0932        (0578) .SECTION
0937: 60 29    MOV   REG[41],A
0939: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TX_REPEATER_Write
093A: 07 FD 01 ADD   [X-3],1       (0581) ;
093D: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
0940: 17 FB 01 SUB   [X-5],1       (0585) ;
0943: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
0946: 8F DB    JMP   0x0922        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
0948: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TX_REPEATER_Write:
                                   (0610) _TX_REPEATER_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
0949: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
094A: 10       PUSH  X             (0622)    ENDIF
094B: 28       ROMX                (0623) 
094C: A0 0B    JZ    0x0958        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
094E: 9F 8F    CALL  0x08DF        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
0950: 20       POP   X             (0626)    mov   A,[X]
0951: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
0952: 75       INC   X             (0628)    mov   X, SP
0953: DF F5    JNC   0x0949        (0629)    RAM_SETPAGE_IDX2STK
0955: 74       INC   A             (0630)    inc   [X+STR_LSB]
0956: 8F F2    JMP   0x0949        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
0958: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
095A: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TX_REPEATER_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
095B: 50 0D    MOV   A,13          (0663) ;
095D: 9F 80    CALL  0x08DF        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
095F: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
0961: 9F 7C    CALL  0x08DF        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
0965: 43 E1 04 OR    REG[225],4    (0668) 

FILE: lib\transmit.asm
                                   (0109) ;;*****************************************************************************
0968: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TRANSMIT.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TRANSMIT.inc"
0969: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
096C: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TRANSMIT_SetTxIntMode
                                   (0143) export  _TRANSMIT_SetTxIntMode
                                   (0144) export   TRANSMIT_EnableInt
                                   (0145) export  _TRANSMIT_EnableInt
                                   (0146) export   TRANSMIT_DisableInt
                                   (0147) export  _TRANSMIT_DisableInt
                                   (0148) export   TRANSMIT_Start
                                   (0149) export  _TRANSMIT_Start
                                   (0150) export   TRANSMIT_Stop
                                   (0151) export  _TRANSMIT_Stop
                                   (0152) export   TRANSMIT_SendData
                                   (0153) export  _TRANSMIT_SendData
                                   (0154) export   TRANSMIT_bReadTxStatus
                                   (0155) export  _TRANSMIT_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTRANSMIT_ReadTxStatus
                                   (0160) export  _bTRANSMIT_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TRANSMIT_PutSHexByte
                                   (0166) export _TRANSMIT_PutSHexByte
                                   (0167) export  TRANSMIT_PutSHexInt
                                   (0168) export _TRANSMIT_PutSHexInt
                                   (0169) 
096D: 71 10    OR    F,16          (0170) export  TRANSMIT_CPutString
096F: 21 01    AND   A,1           (0171) export _TRANSMIT_CPutString
0971: A0 07    JZ    0x0979        (0172) export  TRANSMIT_PutString
0973: 43 28 10 OR    REG[40],16    (0173) export _TRANSMIT_PutString
0976: 70 EF    AND   F,239         (0174) export  TRANSMIT_PutChar
                                   (0175) export _TRANSMIT_PutChar
0978: 7F       RET                 (0176) export  TRANSMIT_Write
                                   (0177) export _TRANSMIT_Write
                                   (0178) export  TRANSMIT_CWrite
0979: 41 28 EF AND   REG[40],239   (0179) export _TRANSMIT_CWrite
097C: 70 EF    AND   F,239         (0180) export  TRANSMIT_PutCRLF
                                   (0181) export _TRANSMIT_PutCRLF 
097E: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TRANSMIT_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
097F: 29 01    OR    A,1           (0211) ;    functions.
0981: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TRANSMIT_EnableInt:
0983: 7F       RET                 (0214) _TRANSMIT_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TRANSMIT_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
0984: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
0987: 7F       RET                 (0242)  TRANSMIT_DisableInt:
                                   (0243) _TRANSMIT_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TRANSMIT_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
0988: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
098A: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TRANSMIT_SetTxIntMode:
                                   (0276) _TRANSMIT_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TRANSMIT_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TRANSMIT_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TRANSMIT_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TRANSMIT_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
098B: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
098D: 7F       RET                 (0303) ;
098E: 30       HALT  
098F: 31 32    XOR   A,50
0991: 33 34    XOR   A,[X+52]
0993: 35 36    XOR   [X+54],A
0995: 37 38 39 XOR   [X+56],57
0998: 41 42 43 AND   REG[66],67
099B: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TRANSMIT_Start:
                                   (0317) _TRANSMIT_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TRANSMIT_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TRANSMIT_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
099E: 08       PUSH  A             (0335) ;
099F: 67       ASR   A             (0336) ;  RETURNS:  none
09A0: 67       ASR   A             (0337) ;
09A1: 67       ASR   A             (0338) ;  SIDE EFFECTS:
09A2: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
09A3: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
09A5: FF E7    INDEX 0x098E        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
09A7: 90 0F    CALL  0x09B8        (0342) ;    responsibility to perserve their values across calls to fastcall16 
09A9: 18       POP   A             (0343) ;    functions.
09AA: 21 0F    AND   A,15          (0344) ;
09AC: FF E0    INDEX 0x098E        (0345)  TRANSMIT_Stop:
09AE: 90 08    CALL  0x09B8        (0346) _TRANSMIT_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
09B0: 7F       RET                 (0348)    and   REG[TRANSMIT_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TRANSMIT_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TRANSMIT_SendData:
                                   (0375) _TRANSMIT_SendData:
09B1: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
09B2: 9F EA    CALL  0x099E        (0377)    mov REG[TRANSMIT_TX_BUFFER_REG], A
09B4: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
09B5: 9F E7    CALL  0x099E        (0379)    ret
                                   (0380) .ENDSECTION
09B7: 7F       RET                 (0381) 
09B8: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TRANSMIT_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TRANSMIT_bReadTxStatus:
                                   (0405) _TRANSMIT_bReadTxStatus:
                                   (0406)  bTRANSMIT_ReadTxStatus:
                                   (0407) _bTRANSMIT_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TRANSMIT_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
09BB: AF FC    JZ    0x09B8        (0416) ;  FUNCTION NAME: TRANSMIT_PutSHexByte
09BD: 60 29    MOV   REG[41],A
                                   (0417) ;
09BF: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TRANSMIT_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TRANSMIT_PutSHexByte:
                                   (0441) _TRANSMIT_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0450)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0454)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
09C0: 70 BF    AND   F,191         (0456)     ret
09C2: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
09C4: 52 00    MOV   A,[X+0]       (0459) .SECTION
09C6: A0 06    JZ    0x09CD        (0460) ;-----------------------------------------------------------------------------
09C8: 9F EE    CALL  0x09B8        (0461) ;  FUNCTION NAME: TRANSMIT_PutSHexInt
09CA: 75       INC   X             (0462) ;
09CB: 8F F8    JMP   0x09C4        (0463) ;  DESCRIPTION:
09CD: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
09CF: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
09D1: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TRANSMIT_PutSHexInt:
                                   (0482) _TRANSMIT_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TRANSMIT_PutSHexByte         ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TRANSMIT_PutSHexByte         ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TRANSMIT_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
09D2: 70 BF    AND   F,191         (0503) ;  RETURNS:
09D4: 62 D3 07 MOV   REG[211],7    (0504) ;     none
09D7: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
09D8: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
09DA: A0 1A    JZ    0x09F5        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
09DC: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
09DE: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TRANSMIT_CONTROL_REG], TRANSMIT_TX_BUFFER_EMPTY    ; Check Tx Status
09E0: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
09E2: 60 D3    MOV   REG[211],A    (0517)    mov REG[TRANSMIT_TX_BUFFER_REG], @Source    ; Write data to Tx Port
09E4: 52 00    MOV   A,[X+0]       (0518)    endm
09E6: 49 2B 10 TST   REG[43],16
09E9: AF FC    JZ    0x09E6        (0519) 
09EB: 60 29    MOV   REG[41],A
09ED: 4F       MOV   X,SP          (0520) 
09EE: 62 D3 07 MOV   REG[211],7    (0521)  TRANSMIT_PutChar:
09F1: 77 FD    INC   [X-3]         (0522) _TRANSMIT_PutChar:
09F3: 8F E4    JMP   0x09D8        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
09F5: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
09F7: 71 C0    OR    F,192         (0526)    ret
09F9: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TRANSMIT_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TRANSMIT_PutString:
                                   (0563) _TRANSMIT_PutString:
09FA: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
09FB: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
09FE: B0 06    JNZ   0x0A05        (0569)    call  TRANSMIT_PutChar                   ; Send character to Tx port
0A00: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
0A03: A0 1D    JZ    0x0A21        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
0A05: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
0A06: 52 FC    MOV   A,[X-4]       (0575)    ret
0A08: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
0A0A: 28       ROMX                (0577) 
0A0B: 49 2B 10 TST   REG[43],16
0A0E: AF FC    JZ    0x0A0B        (0578) .SECTION
0A10: 60 29    MOV   REG[41],A
0A12: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TRANSMIT_Write
0A13: 07 FD 01 ADD   [X-3],1       (0581) ;
0A16: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
0A19: 17 FB 01 SUB   [X-5],1       (0585) ;
0A1C: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
0A1F: 8F DB    JMP   0x09FB        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
0A21: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TRANSMIT_Write:
                                   (0610) _TRANSMIT_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
0A22: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
0A23: 10       PUSH  X             (0622)    ENDIF
0A24: 28       ROMX                (0623) 
0A25: A0 0B    JZ    0x0A31        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
0A27: 9F 8F    CALL  0x09B8        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
0A29: 20       POP   X             (0626)    mov   A,[X]
0A2A: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
0A2B: 75       INC   X             (0628)    mov   X, SP
0A2C: DF F5    JNC   0x0A22        (0629)    RAM_SETPAGE_IDX2STK
0A2E: 74       INC   A             (0630)    inc   [X+STR_LSB]
0A2F: 8F F2    JMP   0x0A22        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
0A31: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
0A33: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TRANSMIT_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
0A34: 50 0D    MOV   A,13          (0663) ;
0A36: 9F 80    CALL  0x09B8        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
0A38: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
0A3A: 9F 7C    CALL  0x09B8        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
0A3D: 43 E1 02 OR    REG[225],2    (0668) 

FILE: lib\rx_timeout.asm
                                   (0102) ;;*****************************************************************************
0A40: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: RX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "RX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
0A41: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
0A44: 7F       RET                 (0131) export  RX_TIMEOUT_EnableInt
                                   (0132) export _RX_TIMEOUT_EnableInt
                                   (0133) export  RX_TIMEOUT_DisableInt
                                   (0134) export _RX_TIMEOUT_DisableInt
                                   (0135) export  RX_TIMEOUT_Start
                                   (0136) export _RX_TIMEOUT_Start
                                   (0137) export  RX_TIMEOUT_Stop
                                   (0138) export _RX_TIMEOUT_Stop
                                   (0139) export  RX_TIMEOUT_WritePeriod
                                   (0140) export _RX_TIMEOUT_WritePeriod
                                   (0141) export  RX_TIMEOUT_WriteCompareValue
                                   (0142) export _RX_TIMEOUT_WriteCompareValue
                                   (0143) export  RX_TIMEOUT_wReadCompareValue
                                   (0144) export _RX_TIMEOUT_wReadCompareValue
                                   (0145) export  RX_TIMEOUT_wReadTimer
                                   (0146) export _RX_TIMEOUT_wReadTimer
                                   (0147) export  RX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _RX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
0A45: 43 23 01 OR    REG[35],1     (0157) export _wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
0A48: 7F       RET                 (0159) export  wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA receiver_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: RX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
0A49: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
0A4C: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  RX_TIMEOUT_EnableInt:
                                   (0200) _RX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    RX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: RX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
0A4D: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
0A4F: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
0A50: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
0A52: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  RX_TIMEOUT_DisableInt:
                                   (0228) _RX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    RX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: RX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
0A53: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
0A55: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
0A56: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
0A58: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  RX_TIMEOUT_Start:
                                   (0256) _RX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    RX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: RX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
0A59: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0A5B: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
0A5C: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
0A5E: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  RX_TIMEOUT_Stop:
                                   (0284) _RX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    RX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: RX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  RX_TIMEOUT_WritePeriod:
                                   (0313) _RX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[RX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[RX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: RX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call RX_TIMEOUT_Stop to disable).
0A5F: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
0A60: 38 03    ADD   SP,3          (0334) ;
0A62: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
0A64: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
0A65: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
0A67: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
0A68: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
0A6A: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0A6B: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
0A6D: 5D 26    MOV   A,REG[38]     (0343) ;
0A6F: 54 01    MOV   [X+1],A       (0344)  RX_TIMEOUT_WriteCompareValue:
0A71: 5D 22    MOV   A,REG[34]     (0345) _RX_TIMEOUT_WriteCompareValue:
0A73: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
0A75: 50 00    MOV   A,0           (0347)    mov   reg[RX_TIMEOUT_COMPARE_LSB_REG], A
0A77: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
0A7A: A0 03    JZ    0x0A7E        (0349)    mov   reg[RX_TIMEOUT_COMPARE_MSB_REG], A
0A7C: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
0A7E: 54 00    MOV   [X+0],A       (0352) 
0A80: 70 FE    AND   F,254         (0353) .ENDSECTION
0A82: 41 23 FE AND   REG[35],254   (0354) 
0A85: 18       POP   A             (0355) 
0A86: 60 26    MOV   REG[38],A     (0356) .SECTION
0A88: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
0A89: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: RX_TIMEOUT_wReadCompareValue
0A8B: 18       POP   A             (0359) ;
0A8C: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
0A8E: 18       POP   A             (0361) ;     Reads the Compare registers.
0A8F: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
0A90: 70 3F    AND   F,63
0A92: 71 C0    OR    F,192         (0363) ;
0A94: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  RX_TIMEOUT_wReadCompareValue:
                                   (0374) _RX_TIMEOUT_wReadCompareValue:
                                   (0375)  wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[RX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[RX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: RX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
0A95: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
0A97: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
0A99: 5C       MOV   X,A           (0409) ;
0A9A: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
0A9D: 08       PUSH  A             (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\receiveint.asm
0A9E: 10       PUSH  X             (0104) ;;*****************************************************************************
0A9F: 5D D3    MOV   A,REG[211]
                                   (0105) ;;*****************************************************************************
                                   (0106) ;;  FILENAME: RECEIVEINT.asm
0AA1: 08       PUSH  A             (0107) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0108) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0109) ;;
0AA2: 58 01    MOV   X,[1]         (0110) ;;  DESCRIPTION: RX8 Interrupt Service Routine.
0AA4: 5D 2B    MOV   A,REG[43]     (0111) ;;-----------------------------------------------------------------------------
0AA6: 08       PUSH  A             (0112) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0113) ;;*****************************************************************************
0AA7: 21 08    AND   A,8           (0114) ;;*****************************************************************************
0AA9: B0 04    JNZ   0x0AAE        (0115) 
0AAB: 18       POP   A             (0116) include "m8c.inc"
0AAC: 80 62    JMP   0x0B0F        (0117) include "memory.inc"
                                   (0118) include "RECEIVE.inc"
                                   (0119) 
                                   (0120) 
0AAE: 18       POP   A             (0121) ;-----------------------------------------------
                                   (0122) ;  Global Symbols
                                   (0123) ;-----------------------------------------------
0AAF: 21 E0    AND   A,224         (0124) export  _RECEIVE_ISR
0AB1: A0 12    JZ    0x0AC4        (0125) 
                                   (0126) 
0AB3: 2C 00    OR    [0],A         (0127) IF (RECEIVE_RXBUF_ENABLE)
                                   (0128) export  RECEIVE_aRxBuffer
0AB5: 49 2A 00 TST   REG[42],0     (0129) export _RECEIVE_aRxBuffer
                                   (0130) export  RECEIVE_bRxCnt
0AB8: 21 20    AND   A,32          (0131) export _RECEIVE_bRxCnt
0ABA: A0 54    JZ    0x0B0F        (0132) export  RECEIVE_fStatus
                                   (0133) export _RECEIVE_fStatus
                                   (0134) ENDIF
                                   (0135) 
0ABC: 41 2B FE AND   REG[43],254   (0136) 
0ABF: 43 2B 01 OR    REG[43],1     (0137) ;-----------------------------------------------
0AC2: 80 4C    JMP   0x0B0F        (0138) ; Variable Allocation
                                   (0139) ;-----------------------------------------------
                                   (0140) 
                                   (0141) IF (RECEIVE_RXBUF_ENABLE)
0AC4: 5D 2A    MOV   A,REG[42]     (0142) AREA InterruptRAM(RAM,REL,CON)
                                   (0143)  RECEIVE_fStatus:
                                   (0144) _RECEIVE_fStatus:      BLK  1
0AC6: 47 00 01 TST   [0],1         (0145)  RECEIVE_bRxCnt:
0AC9: B0 45    JNZ   0x0B0F        (0146) _RECEIVE_bRxCnt:       BLK  1
                                   (0147) AREA RECEIVE_RAM(RAM,REL,CON)
0ACB: 39 00    CMP   A,0           (0148)  RECEIVE_aRxBuffer:    
0ACD: B0 14    JNZ   0x0AE2        (0149) _RECEIVE_aRxBuffer:    BLK RECEIVE_RX_BUFFER_SIZE
0ACF: 2E 00 01 OR    [0],1         (0150) ENDIF
                                   (0151) 
0AD2: 62 D3 00 MOV   REG[211],0    (0152) 
0AD5: 70 3F    AND   F,63
0AD7: 71 80    OR    F,128         (0153) AREA InterruptRAM(RAM,REL,CON)
0AD9: 56 48 00 MOV   [X+72],0      (0154) 
0ADC: 70 3F    AND   F,63
0ADE: 71 00    OR    F,0           (0155) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0AE0: 80 2E    JMP   0x0B0F        (0156) ;---------------------------------------------------
                                   (0157) ; Insert your custom declarations below this banner
                                   (0158) ;---------------------------------------------------
                                   (0159) 
                                   (0160) ;------------------------
                                   (0161) ; Includes
0AE2: 39 01    CMP   A,1           (0162) ;------------------------
0AE4: C0 2A    JC    0x0B0F        (0163) 
                                   (0164) 	
                                   (0165) ;------------------------
                                   (0166) ;  Constant Definitions
0AE6: 3C 01 3F CMP   [1],63        (0167) ;------------------------
0AE9: C0 14    JC    0x0AFE        (0168) 
0AEB: 2E 00 10 OR    [0],16        (0169) 
                                   (0170) ;------------------------
0AEE: 62 D3 00 MOV   REG[211],0    (0171) ; Variable Allocation
0AF1: 70 3F    AND   F,63
0AF3: 71 80    OR    F,128         (0172) ;------------------------
0AF5: 56 48 00 MOV   [X+72],0      (0173) 
0AF8: 70 3F    AND   F,63
0AFA: 71 00    OR    F,0           (0174) 
0AFC: 80 12    JMP   0x0B0F        (0175) ;---------------------------------------------------
                                   (0176) ; Insert your custom declarations above this banner
                                   (0177) ;---------------------------------------------------
                                   (0178) ;@PSoC_UserCode_END@ (Do not change this line.)
0AFE: 75       INC   X             (0179) 
0AFF: 5A 01    MOV   [1],X         (0180) 
0B01: 79       DEC   X             (0181) AREA UserModules (ROM, REL)
                                   (0182) 
0B02: 62 D3 00 MOV   REG[211],0    (0183) ;-----------------------------------------------------------------------------
0B05: 70 3F    AND   F,63
0B07: 71 80    OR    F,128         (0184) ;  FUNCTION NAME: _RECEIVE_ISR
0B09: 54 48    MOV   [X+72],A      (0185) ;
0B0B: 70 3F    AND   F,63
0B0D: 71 00    OR    F,0           (0186) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
0B0F: 18       POP   A
                                   (0187) ;
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) 
0B10: 60 D3    MOV   REG[211],A    (0191) _RECEIVE_ISR:
                                   (0192) 
                                   (0193)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                   (0194)    ;---------------------------------------------------
0B12: 20       POP   X             (0195)    ; Insert your custom code below this banner
0B13: 18       POP   A             (0196)    ;---------------------------------------------------
                                   (0197)    ;   NOTE: interrupt service routines must preserve
                                   (0198)    ;   the values of the A and X CPU registers.
                                   (0199) 
                                   (0200)    ;---------------------------------------------------
0B15: 43 E1 04 OR    REG[225],4    (0201)    ; Insert your custom code above this banner

FILE: lib\receive.asm
                                   (0121) ;;*****************************************************************************
0B18: 7F       RET                 (0122) ;;*****************************************************************************
                                   (0123) ;;  FILENAME: RECEIVE.asm
                                   (0124) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0125) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0126) ;;
                                   (0127) ;;  DESCRIPTION: RX8 User Module software implementation file
                                   (0128) ;;               for 22/24/25/26/27xxx PSoC family of devices.
                                   (0129) ;;
                                   (0130) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0131) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0132) ;;        This means it is the caller's responsibility to preserve any values
                                   (0133) ;;        in the X and A registers that are still needed after the API functions
                                   (0134) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0135) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0136) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0137) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0138) ;;-----------------------------------------------------------------------------
                                   (0139) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0140) ;;*****************************************************************************
                                   (0141) ;;*****************************************************************************
                                   (0142) 
                                   (0143) ;-----------------------------------------------
                                   (0144) ; include instance specific register definitions
                                   (0145) ;-----------------------------------------------
                                   (0146) include "m8c.inc"
                                   (0147) include "memory.inc"
                                   (0148) include "RECEIVE.inc"
0B19: 41 E1 FB AND   REG[225],251  (0149) 
                                   (0150) 
0B1C: 7F       RET                 (0151) ;-----------------------------------------------
                                   (0152) ;  Global Symbols
                                   (0153) ;-----------------------------------------------
                                   (0154) export   RECEIVE_EnableInt
                                   (0155) export  _RECEIVE_EnableInt
                                   (0156) export   RECEIVE_DisableInt
                                   (0157) export  _RECEIVE_DisableInt
                                   (0158) export   RECEIVE_Start
                                   (0159) export  _RECEIVE_Start
                                   (0160) export   RECEIVE_Stop
                                   (0161) export  _RECEIVE_Stop
                                   (0162) export   RECEIVE_bReadRxData
                                   (0163) export  _RECEIVE_bReadRxData
                                   (0164) export   RECEIVE_bReadRxStatus
                                   (0165) export  _RECEIVE_bReadRxStatus
                                   (0166) 
                                   (0167) ; Old function name convension, do not use.
                                   (0168) ; These will be removed in a future release.
                                   (0169) export  bRECEIVE_ReadRxData
                                   (0170) export _bRECEIVE_ReadRxData
                                   (0171) export  bRECEIVE_ReadRxStatus
                                   (0172) export _bRECEIVE_ReadRxStatus
                                   (0173) 
                                   (0174) ;-----------------------------------------------
                                   (0175) ; High Level RX functions
                                   (0176) ;-----------------------------------------------
                                   (0177) 
                                   (0178) export  RECEIVE_cGetChar
0B1D: 29 01    OR    A,1           (0179) export _RECEIVE_cGetChar
0B1F: 60 2B    MOV   REG[43],A     (0180) export  RECEIVE_cReadChar
                                   (0181) export _RECEIVE_cReadChar
0B21: 7F       RET                 (0182) export  RECEIVE_iReadChar
                                   (0183) export _RECEIVE_iReadChar
                                   (0184) 
                                   (0185) IF (RECEIVE_RXBUF_ENABLE)
                                   (0186) export  RECEIVE_CmdReset
                                   (0187) export _RECEIVE_CmdReset
                                   (0188) export  RECEIVE_bCmdCheck
                                   (0189) export _RECEIVE_bCmdCheck
                                   (0190) export  RECEIVE_bCmdLength
                                   (0191) export _RECEIVE_bCmdLength
                                   (0192) export  RECEIVE_bErrCheck
                                   (0193) export _RECEIVE_bErrCheck
                                   (0194) 
                                   (0195) export  RECEIVE_szGetParam
                                   (0196) export _RECEIVE_szGetParam
                                   (0197) export  RECEIVE_szGetRestOfParams
                                   (0198) export _RECEIVE_szGetRestOfParams
                                   (0199) 
                                   (0200) ;-----------------------------------------------
                                   (0201) ;  Variables
                                   (0202) ;-----------------------------------------------
                                   (0203) 
                                   (0204) AREA RECEIVE_RAM(RAM,REL,CON)
                                   (0205)  ptrParam:   			BLK  1
                                   (0206) 
                                   (0207) ENDIF
0B22: 41 2B FE AND   REG[43],254   (0208) ;-----------------------------------------------
                                   (0209) ;  EQUATES
0B25: 7F       RET                 (0210) ;-----------------------------------------------
                                   (0211) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0212) 
                                   (0213) area UserModules (ROM, REL)
                                   (0214) 
                                   (0215) .SECTION
                                   (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;  FUNCTION NAME: RECEIVE_EnableInt
                                   (0218) ;
                                   (0219) ;  DESCRIPTION:
                                   (0220) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                   (0221) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0222) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0223) ;
                                   (0224) ;-----------------------------------------------------------------------------
                                   (0225) ;
                                   (0226) ;  ARGUMENTS: none
                                   (0227) ;
                                   (0228) ;  RETURNS: none
                                   (0229) ;
                                   (0230) ;  SIDE EFFECTS:
                                   (0231) ;    The A and X registers may be modified by this or future implementations
                                   (0232) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0235) ;    functions.
                                   (0236) ;
                                   (0237)  RECEIVE_EnableInt:
                                   (0238) _RECEIVE_EnableInt:
                                   (0239)    RAM_PROLOGUE RAM_USE_CLASS_1
0B26: 5D 2A    MOV   A,REG[42]     (0240)    M8C_EnableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0241)    RAM_EPILOGUE RAM_USE_CLASS_1
0B28: 7F       RET                 (0242)    ret
                                   (0243) .ENDSECTION
                                   (0244) 
                                   (0245) .SECTION
                                   (0246) ;-----------------------------------------------------------------------------
                                   (0247) ;  FUNCTION NAME: RECEIVE_DisableInt
                                   (0248) ;
                                   (0249) ;  DESCRIPTION:
                                   (0250) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                   (0251) ;     associated with this User Module.
                                   (0252) ;
                                   (0253) ;-----------------------------------------------------------------------------
                                   (0254) ;
                                   (0255) ;  ARGUMENTS:  none
                                   (0256) ;
                                   (0257) ;  RETURNS:  none
                                   (0258) ;
                                   (0259) ;  SIDE EFFECTS:
                                   (0260) ;    The A and X registers may be modified by this or future implementations
                                   (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0264) ;    functions.
                                   (0265) ;
                                   (0266)  RECEIVE_DisableInt:
                                   (0267) _RECEIVE_DisableInt:
                                   (0268)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0269)    M8C_DisableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0270)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0271)    ret
0B29: 5D 2B    MOV   A,REG[43]     (0272) .ENDSECTION
                                   (0273) 
0B2B: 7F       RET                 (0274) .SECTION
                                   (0275) ;-----------------------------------------------------------------------------
                                   (0276) ;  FUNCTION NAME: RECEIVE_Start(BYTE bParity)
                                   (0277) ;
                                   (0278) ;  DESCRIPTION:
                                   (0279) ;    Sets the start bit and parity in the Control register of this user module.
                                   (0280) ;
                                   (0281) ;-----------------------------------------------------------------------------
                                   (0282) ;
                                   (0283) ;  ARGUMENTS:
                                   (0284) ;    BYTE bParity - parity of received data.  Use defined masks.
                                   (0285) ;    passed in A register.
                                   (0286) ;
                                   (0287) ;  RETURNS: none
                                   (0288) ;
                                   (0289) ;  SIDE EFFECTS:
                                   (0290) ;    The A and X registers may be modified by this or future implementations
                                   (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0294) ;    functions.
                                   (0295) ;
                                   (0296)  RECEIVE_Start:
                                   (0297) _RECEIVE_Start:
                                   (0298)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0299)    or    A, bfCONTROL_REG_START_BIT
                                   (0300)    mov   REG[RECEIVE_CONTROL_REG], A
                                   (0301)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0302)    ret
                                   (0303) .ENDSECTION
                                   (0304) 
                                   (0305) .SECTION
                                   (0306) ;-----------------------------------------------------------------------------
                                   (0307) ;  FUNCTION NAME: RECEIVE_Stop
                                   (0308) ;
                                   (0309) ;  DESCRIPTION:
                                   (0310) ;     Disables RX8 operation.
0B2C: 49 2B 08 TST   REG[43],8     (0311) ;
0B2F: AF FC    JZ    0x0B2C        (0312) ;-----------------------------------------------------------------------------
                                   (0313) ;
0B31: 5D 2A    MOV   A,REG[42]     (0314) ;  ARGUMENTS: none
                                   (0315) ;
0B33: 7F       RET                 (0316) ;  RETURNS: none
                                   (0317) ;
                                   (0318) ;  SIDE EFFECTS:
                                   (0319) ;    The A and X registers may be modified by this or future implementations
                                   (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0323) ;    functions.
                                   (0324) ;
                                   (0325)  RECEIVE_Stop:
                                   (0326) _RECEIVE_Stop:
                                   (0327)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0328)    and   REG[RECEIVE_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0329)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0330)    ret
                                   (0331) .ENDSECTION
                                   (0332) 
                                   (0333) .SECTION
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  FUNCTION NAME: RECEIVE_bReadRxData
                                   (0336) ;
                                   (0337) ;  DESCRIPTION:
                                   (0338) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0339) ;     sure data is valid.
                                   (0340) ;
                                   (0341) ;-----------------------------------------------------------------------------
                                   (0342) ;
                                   (0343) ;  ARGUMENTS:  none
                                   (0344) ;
                                   (0345) ;  RETURNS:
0B34: 5D 2B    MOV   A,REG[43]     (0346) ;    bRxData - returned in A.
0B36: 08       PUSH  A             (0347) ;
0B37: 21 08    AND   A,8           (0348) ;  SIDE EFFECTS:
0B39: B0 04    JNZ   0x0B3E        (0349) ;    The A and X registers may be modified by this or future implementations
0B3B: 18       POP   A             (0350) ;    of this function.  The same is true for all RAM page pointer registers in
0B3C: 80 0B    JMP   0x0B48        (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
0B3E: 5D 2A    MOV   A,REG[42]     (0354) ;
0B40: 4B       SWAP  A,X           (0355)  RECEIVE_bReadRxData:
                                   (0356) _RECEIVE_bReadRxData:
0B41: 18       POP   A             (0357)  bRECEIVE_ReadRxData:
0B42: 21 A0    AND   A,160         (0358) _bRECEIVE_ReadRxData:
0B44: B0 03    JNZ   0x0B48        (0359)    RAM_PROLOGUE RAM_USE_CLASS_1
0B46: 4B       SWAP  A,X           (0360)    mov A, REG[RECEIVE_RX_BUFFER_REG]
                                   (0361)    RAM_EPILOGUE RAM_USE_CLASS_1
0B47: 7F       RET                 (0362)    ret
                                   (0363) .ENDSECTION
                                   (0364) 
0B48: 50 00    MOV   A,0           (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: RECEIVE_bReadRxStatus
                                   (0368) ;
0B4A: 7F       RET                 (0369) ;  DESCRIPTION:
                                   (0370) ;    Reads the RX Status bits in the Control/Status register.
                                   (0371) ;
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:  none
                                   (0375) ;
                                   (0376) ;  RETURNS:
                                   (0377) ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
                                   (0378) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  RECEIVE_bReadRxStatus:
                                   (0388) _RECEIVE_bReadRxStatus:
                                   (0389)  bRECEIVE_ReadRxStatus:
                                   (0390) _bRECEIVE_ReadRxStatus:
                                   (0391)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0392)    mov A,  REG[RECEIVE_CONTROL_REG]
                                   (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0394)    ret
                                   (0395) .ENDSECTION
                                   (0396) 
                                   (0397) ;-----------------------------------------------
                                   (0398) ; High Level RX functions
                                   (0399) ;-----------------------------------------------
                                   (0400) 
                                   (0401) .SECTION
                                   (0402) ;-----------------------------------------------------------------------------
                                   (0403) ;  FUNCTION NAME: RECEIVE_cGetChar
                                   (0404) ;
                                   (0405) ;  DESCRIPTION:
0B4B: 5D 2B    MOV   A,REG[43]     (0406) ;     Read character from UART RX port.
                                   (0407) ;
0B4D: 21 E8    AND   A,232         (0408) ;
0B4F: 08       PUSH  A             (0409) ;  ARGUMENTS:
0B50: 21 08    AND   A,8           (0410) ;      none
0B52: B0 07    JNZ   0x0B5A        (0411) ;
0B54: 18       POP   A             (0412) ;  RETURNS:
0B55: 29 01    OR    A,1           (0413) ;     char that is returned from UART
0B57: 4B       SWAP  A,X           (0414) ;
0B58: 80 07    JMP   0x0B60        (0415) ;  SIDE EFFECTS:
                                   (0416) ;    The A and X registers may be modified by this or future implementations
                                   (0417) ;    of this function.  The same is true for all RAM page pointer registers in
0B5A: 18       POP   A             (0418) ;    the Large Memory Model.  When necessary, it is the calling function's
0B5B: 21 E0    AND   A,224         (0419) ;    responsibility to perserve their values across calls to fastcall16 
0B5D: 4B       SWAP  A,X           (0420) ;    functions.
0B5E: 5D 2A    MOV   A,REG[42]     (0421) ;    
                                   (0422) ;    Program flow will stay in this function until a character is received.
                                   (0423) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0424) ;    the delay between characters is less than the watchdog timeout.
                                   (0425) ;
0B60: 7F       RET                 (0426)  RECEIVE_cGetChar:
                                   (0427) _RECEIVE_cGetChar:
                                   (0428)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0429) 
                                   (0430) .getChar_Loop:
                                   (0431)    tst REG[RECEIVE_CONTROL_REG],RECEIVE_RX_REG_FULL   ; Check if a character is ready
                                   (0432)    jz  .getChar_Loop                                        ; If not loop
                                   (0433) 
                                   (0434)    mov A, REG[RECEIVE_RX_BUFFER_REG]             ; Get character
                                   (0435)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0436)    ret
                                   (0437) .ENDSECTION
                                   (0438) 
                                   (0439) .SECTION
                                   (0440) ;-----------------------------------------------------------------------------
                                   (0441) ;  FUNCTION NAME: RECEIVE_cReadChar
                                   (0442) ;
                                   (0443) ;  DESCRIPTION:
                                   (0444) ;     Read character from UART RX port.
                                   (0445) ;
                                   (0446) ;  ARGUMENTS:
                                   (0447) ;      none
                                   (0448) ;
                                   (0449) ;  RETURNS:
                                   (0450) ;     char that is returned from UART
                                   (0451) ;
                                   (0452) ;  SIDE EFFECTS:
                                   (0453) ;    The A and X registers may be modified by this or future implementations
                                   (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0457) ;    functions.
                                   (0458) ;
                                   (0459) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                   (0460) ;    implies a valid character or an error condition occured.
                                   (0461) ;
                                   (0462)  RECEIVE_cReadChar:
                                   (0463) _RECEIVE_cReadChar:
                                   (0464)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0465) 
                                   (0466)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0467)    push A
                                   (0468)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
0B61: 62 D0 00 MOV   REG[208],0    (0469)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0B64: 55 48 00 MOV   [72],0        (0470)    pop  A
0B67: 62 D0 00 MOV   REG[208],0    (0471)    jmp  .RX_NO_VALID_CHAR
0B6A: 55 A2 00 MOV   [TIMEOUT+3],0 (0472) 
0B6D: 62 D0 00 MOV   REG[208],0    (0473) .RX_DATA_RDY:
0B70: 55 01 00 MOV   [1],0         (0474)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
0B73: 26 00 00 AND   [0],0         (0475)    swap A,X                                                ; determine if data is valid
                                   (0476) 
0B76: 7F       RET                 (0477)    pop  A                                                  ; Check for errors
                                   (0478)    and  A,(RECEIVE_RX_PARITY_ERROR | RECEIVE_RX_FRAMING_ERROR)
                                   (0479)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0480)    swap A,X                                                ; Put data in A and exit
                                   (0481)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0482)    ret
                                   (0483) 
                                   (0484) .RX_NO_VALID_CHAR:
                                   (0485)    mov A,0x00                                              ; Zero out character
                                   (0486) 
                                   (0487)  End_RECEIVE_cReadChar:
                                   (0488)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)    ret
                                   (0490) .ENDSECTION
                                   (0491) 																			
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: RECEIVE_iReadChar
                                   (0495) ;
                                   (0496) ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0497) ; to just set a value in the upper byte if error conditions exists.
                                   (0498) ;
                                   (0499) ;  DESCRIPTION:
                                   (0500) ;     Read character from UART RX port.
                                   (0501) ;
                                   (0502) ;  ARGUMENTS:
                                   (0503) ;      none
                                   (0504) ;
                                   (0505) ;  RETURNS:
                                   (0506) ;     An integer value is returned.  A negative value inplies and error
                                   (0507) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0508) ;
                                   (0509) ;     Error Codes:
0B77: 62 D0 00 MOV   REG[208],0    (0510) ;        0x80CC    Parity Error
0B7A: 51 00    MOV   A,[0]         (0511) ;        0x40CC    Overrun Error
0B7C: 21 01    AND   A,1           (0512) ;        0x20CC    Framing Error
                                   (0513) ;        0x01CC    No Data available
0B7E: 7F       RET                 (0514) ;
                                   (0515) ;  SIDE EFFECTS:
                                   (0516) ;    The A and X registers may be modified by this or future implementations
                                   (0517) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0518) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0519) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0520) ;    functions.
                                   (0521) ;
                                   (0522)  RECEIVE_iReadChar:
                                   (0523) _RECEIVE_iReadChar:
                                   (0524)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0525) 
                                   (0526)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0527)                                                            ; Mask only errors and data ready
                                   (0528)    and  A,(RECEIVE_RX_ERROR|RECEIVE_RX_REG_FULL)
                                   (0529)    push A
                                   (0530)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
                                   (0531)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (0532)    pop  A
                                   (0533)    or   A,RECEIVE_RX_NO_DATA                               ; Add no data flag
                                   (0534)    swap A,X
                                   (0535)    jmp  End_RECEIVE_iReadChar
                                   (0536) 
                                   (0537) .RX_GET_DATA:
                                   (0538)    pop  A
                                   (0539)    and  A,RECEIVE_RX_ERROR
                                   (0540)    swap A,X
                                   (0541)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
                                   (0542)                                                            ; determine if data is valid
                                   (0543) 
                                   (0544)  End_RECEIVE_iReadChar:
                                   (0545)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0546)    ret
                                   (0547) .ENDSECTION
                                   (0548) 
                                   (0549) 
                                   (0550) 
                                   (0551) IF (RECEIVE_RXBUF_ENABLE)
                                   (0552) .SECTION
0B7F: 62 D0 00 MOV   REG[208],0    (0553) ;-----------------------------------------------------------------------------
0B82: 51 00    MOV   A,[0]         (0554) ;-----------------------------------------------------------------------------
0B84: 21 F0    AND   A,240         (0555) ;
0B86: 26 00 0F AND   [0],15        (0556) ;     Command Buffer commands
                                   (0557) ;
0B89: 7F       RET                 (0558) ;-----------------------------------------------------------------------------
                                   (0559) ;-----------------------------------------------------------------------------
                                   (0560) 
                                   (0561) ;-----------------------------------------------------------------------------
                                   (0562) ;  FUNCTION NAME: RECEIVE_CmdReset
                                   (0563) ;
                                   (0564) ;  DESCRIPTION:
                                   (0565) ;     Reset command string and status flags
                                   (0566) ;
                                   (0567) ;  ARGUMENTS:
                                   (0568) ;     none.
                                   (0569) ;
                                   (0570) ;  RETURNS:
                                   (0571) ;     none.
                                   (0572) ;
                                   (0573) ;  SIDE EFFECTS:
                                   (0574) ;    The A and X registers may be modified by this or future implementations
                                   (0575) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0576) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0577) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0578) ;    functions.
                                   (0579) ;          
                                   (0580) ;    Currently only the page pointer registers listed below are modified: 
                                   (0581) ;          CUR_PP
                                   (0582) ;
                                   (0583) ;  THEORY of OPERATION or PROCEDURE:
                                   (0584) ;     Clear the command buffer, command counter, and flag.
                                   (0585) ;
                                   (0586)  RECEIVE_CmdReset:
0B8A: 62 D0 00 MOV   REG[208],0    (0587) _RECEIVE_CmdReset:
0B8D: 51 01    MOV   A,[1]         (0588)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0589)    RAM_SETPAGE_CUR >RECEIVE_aRxBuffer
0B8F: 7F       RET                 (0590)    mov [RECEIVE_aRxBuffer], 0x00
                                   (0591)    RAM_SETPAGE_CUR >ptrParam
                                   (0592)    mov [ptrParam],0x00
                                   (0593)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
                                   (0594)    mov [RECEIVE_bRxCnt], 0x00
                                   (0595)    and [RECEIVE_fStatus], 0x00
                                   (0596)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0597)    ret
                                   (0598) .ENDSECTION
                                   (0599) 
                                   (0600) .SECTION
                                   (0601) ;-----------------------------------------------------------------------------
                                   (0602) ;  FUNCTION NAME: RECEIVE_bCmdCheck
                                   (0603) ;
                                   (0604) ;  DESCRIPTION:
                                   (0605) ;     Check to see if valid command in buffer.
                                   (0606) ;
                                   (0607) ;  ARGUMENTS:
                                   (0608) ;     none.
                                   (0609) ;
                                   (0610) ;  RETURNS:
                                   (0611) ;     BYTE  fStatus - Status of command receive buffer.
                                   (0612) ;                     Returns non-zero value in A if command is valid.
                                   (0613) ;
                                   (0614) ;  SIDE EFFECTS:
                                   (0615) ;    The A and X registers may be modified by this or future implementations
                                   (0616) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0617) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0618) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0619) ;    functions.
                                   (0620) ;          
                                   (0621) ;    Currently only the page pointer registers listed below are modified: 
                                   (0622) ;          CUR_PP
                                   (0623) ;
                                   (0624) ;  THEORY of OPERATION or PROCEDURE:
                                   (0625) ;     Read the status and control register.
                                   (0626) ;
                                   (0627)  RECEIVE_bCmdCheck:
                                   (0628) _RECEIVE_bCmdCheck:
                                   (0629)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0630)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0631)    mov A,  [RECEIVE_fStatus]
                                   (0632)    and A, RECEIVE_RX_BUF_CMDTERM                 ; Mask off Command status
                                   (0633)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0634)    ret
                                   (0635) .ENDSECTION
                                   (0636) 
                                   (0637) .SECTION
                                   (0638) ;-----------------------------------------------------------------------------
                                   (0639) ;  FUNCTION NAME: RECEIVE_bErrCheck
                                   (0640) ;
                                   (0641) ;  DESCRIPTION:
                                   (0642) ;     Check to see if an error has occured since last CmdReset
                                   (0643) ;
0B90: 70 BF    AND   F,191         (0644) ;  ARGUMENTS:
0B92: 62 D0 00 MOV   REG[208],0    (0645) ;     none.
0B95: 62 D3 00 MOV   REG[211],0    (0646) ;
                                   (0647) ;  RETURNS:
0B98: 50 48    MOV   A,72          (0648) ;     BYTE  fStatus - Status of command receive buffer.
0B9A: 02 A2    ADD   A,[TIMEOUT+3] (0649) ;                     Returns non-zero value in A if command is valid.
0B9C: 5C       MOV   X,A           (0650) ;           0x80 => Parity Error
                                   (0651) ;           0x40 => OverRun Error
0B9D: 52 00    MOV   A,[X+0]       (0652) ;           0x20 => Framing Error
0B9F: B0 04    JNZ   0x0BA4        (0653) ;           0x10 => Software Buffer OverRun
0BA1: 10       PUSH  X             (0654) ;
0BA2: 80 33    JMP   0x0BD6        (0655) ;  SIDE EFFECTS:
                                   (0656) ;    The A and X registers may be modified by this or future implementations
                                   (0657) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0658) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0659) ;    responsibility to perserve their values across calls to fastcall16 
0BA4: 39 00    CMP   A,0           (0660) ;    functions.
0BA6: B0 11    JNZ   0x0BB8        (0661) ;          
0BA8: 75       INC   X             (0662) ;    Currently only the page pointer registers listed below are modified: 
0BA9: 76 A2    INC   [TIMEOUT+3]   (0663) ;          CUR_PP
0BAB: 52 00    MOV   A,[X+0]       (0664) ;
0BAD: 3C A2 3F CMP   [TIMEOUT+3],63(0665) ;     Error Status is clear when read.
0BB0: BF F3    JNZ   0x0BA4        (0666) ;
                                   (0667) ;  THEORY of OPERATION or PROCEDURE:
                                   (0668) ;     Read RX buffer error status and clear status
0BB2: 10       PUSH  X             (0669) ;
                                   (0670)  RECEIVE_bErrCheck:
0BB3: 56 00 00 MOV   [X+0],0       (0671) _RECEIVE_bErrCheck:
0BB6: 80 1F    JMP   0x0BD6        (0672)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0673)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0674)    mov A,  [RECEIVE_fStatus]
0BB8: 10       PUSH  X             (0675)    and A, RECEIVE_RX_BUF_ERROR                   ; Mask off Error status
                                   (0676)    and [RECEIVE_fStatus], ~RECEIVE_RX_BUF_ERROR
                                   (0677)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0678)    ret
0BB9: 75       INC   X             (0679) .ENDSECTION
0BBA: 76 A2    INC   [TIMEOUT+3]   (0680) 
0BBC: 3C A2 3F CMP   [TIMEOUT+3],63(0681) .SECTION
0BBF: AF F3    JZ    0x0BB3        (0682) ;-----------------------------------------------------------------------------
0BC1: 52 00    MOV   A,[X+0]       (0683) ;  FUNCTION NAME: RECEIVE_bCmdLength
0BC3: A0 12    JZ    0x0BD6        (0684) ;
0BC5: 39 00    CMP   A,0           (0685) ;  DESCRIPTION:
0BC7: BF F1    JNZ   0x0BB9        (0686) ;     Get length of command string
                                   (0687) ;
0BC9: 56 00 00 MOV   [X+0],0       (0688) ;  ARGUMENTS:
0BCC: 76 A2    INC   [TIMEOUT+3]   (0689) ;     none.
0BCE: 3C A2 3F CMP   [TIMEOUT+3],63(0690) ;
0BD1: B0 04    JNZ   0x0BD6        (0691) ;  RETURNS:
0BD3: 55 A2 3F MOV   [TIMEOUT+3],63(0692) ;     BYTE  bRxCnt    Returns the command length in A.
                                   (0693) ;
                                   (0694) ;  SIDE EFFECTS:
                                   (0695) ;    The A and X registers may be modified by this or future implementations
0BD6: 20       POP   X             (0696) ;    of this function.  The same is true for all RAM page pointer registers in
0BD7: 10       PUSH  X             (0697) ;    the Large Memory Model.  When necessary, it is the calling function's
0BD8: 3D 00 00 CMP   [X+0],0       (0698) ;    responsibility to perserve their values across calls to fastcall16 
0BDB: B0 0B    JNZ   0x0BE7        (0699) ;    functions.
0BDD: 20       POP   X             (0700) ;          
0BDE: 57 00    MOV   X,0           (0701) ;    Currently only the page pointer registers listed below are modified: 
0BE0: 50 00    MOV   A,0           (0702) ;          CUR_PP
0BE2: 70 3F    AND   F,63
0BE4: 71 C0    OR    F,192         (0703) ;
                                   (0704)  RECEIVE_bCmdLength:
0BE6: 7F       RET                 (0705) _RECEIVE_bCmdLength:
                                   (0706)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0707)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
0BE7: 20       POP   X             (0708)    mov A,  [RECEIVE_bRxCnt]
0BE8: 50 00    MOV   A,0           (0709)    RAM_EPILOGUE RAM_USE_CLASS_4
0BEA: 70 3F    AND   F,63
0BEC: 71 C0    OR    F,192         (0710)    ret
                                   (0711) .ENDSECTION
0BEE: 7F       RET                 (0712) 
                                   (0713) .SECTION
                                   (0714) ;-----------------------------------------------------------------------------
                                   (0715) ;  FUNCTION NAME: RECEIVE_szGetParam
                                   (0716) ;
                                   (0717) ;  DESCRIPTION:
                                   (0718) ;      Return next parameter from UART Rx buffer
                                   (0719) ;
                                   (0720) ;
                                   (0721) ;  ARGUMENTS:  none
                                   (0722) ;
                                   (0723) ;  RETURNS:
                                   (0724) ;     A => MSB of parameter address
                                   (0725) ;     X => LSB of parameter address
                                   (0726) ;
                                   (0727) ;  SIDE EFFECTS:
                                   (0728) ;    The A and X registers may be modified by this or future implementations
                                   (0729) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0730) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0731) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0732) ;    functions.
                                   (0733) ;          
                                   (0734) ;    Currently only the page pointer registers listed below are modified:
                                   (0735) ;          CUR_PP
                                   (0736) ;          IDX_PP
                                   (0737) ;
                                   (0738) ;     The receive string is modified by placing Null characters at the end
                                   (0739) ;     of each parameter as they are recovered.
                                   (0740) ;
                                   (0741) ;  THEORY OF OPERATION:
0BEF: 62 D0 00 MOV   REG[208],0    (0742) ;     This function is a stateful generator of addresses to the "parameters"
                                   (0743) ;     of an input "Command". It scans the (optional) input buffer and breaks
0BF2: 50 48    MOV   A,72          (0744) ;     each lexically distinct element into a null-terminated string by replacing
0BF4: 02 A2    ADD   A,[TIMEOUT+3] (0745) ;     delimiters with nulls, as appropriate. The state of the generator is 
0BF6: 5C       MOV   X,A           (0746) ;     maintained by the private variable ptrParam, which is a buffer-relative
0BF7: 50 00    MOV   A,0           (0747) ;     offset. The generator is initialized by a call to the function
                                   (0748) ;     RECEIVE_CmdReset which resets the entire buffer to the 'empty'
                                   (0749) ;     state. Typically this function, RECEIVE_szGetParam, is
0BFA: 08       PUSH  A             (0750) ;     not called until the buffer has been loaded with an entire command

FILE: lib\lcd_1.asm
0BFB: 10       PUSH  X             (0210) ;;*****************************************************************************
0BFC: 28       ROMX                (0211) ;;*****************************************************************************
0BFD: B0 04    JNZ   0x0C02        (0212) ;;  FILENAME:   LCD_1.asm
0BFF: 20       POP   X             (0213) ;;  Version: 1.5, Updated on 2009/7/10 at 10:44:58
0C00: 18       POP   A             (0214) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0215) ;;
0C01: 7F       RET                 (0216) ;;  DESCRIPTION: LCD User Module software implementation file
                                   (0217) ;;               for the M8C based PSoC family of devices.
                                   (0218) ;;
0C02: 90 44    CALL  0x0C48        (0219) ;; This set of functions is written for the common 2 and 4 line
0C04: 20       POP   X             (0220) ;; LCDs that use the Hitachi HD44780A controller.
0C05: 18       POP   A             (0221) ;;
0C06: 75       INC   X             (0222) ;;  LCD connections to PSoC port
0C07: DF F2    JNC   0x0BFA        (0223) ;;
0C09: 74       INC   A             (0224) ;;    PX.0 ==> LCD D4
0C0A: 8F EF    JMP   0x0BFA        (0225) ;;    PX.1 ==> LCD D5
0C0C: 30       HALT  
0C0D: 31 32    XOR   A,50
0C0F: 33 34    XOR   A,[X+52]
0C11: 35 36    XOR   [X+54],A
0C13: 37 38 39 XOR   [X+56],57
0C16: 41 42 43 AND   REG[66],67
0C19: 44 45 46 OR    REG[X+69],70
                                   (0226) ;;    PX.2 ==> LCD D6
                                   (0227) ;;    PX.3 ==> LCD D7
                                   (0228) ;;    PX.4 ==> LCD E
                                   (0229) ;;    PX.5 ==> LCD RS
                                   (0230) ;;    PX.6 ==> LCD R/W
                                   (0231) ;;
                                   (0232) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0233) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0234) ;;        This means it is the caller's responsibility to preserve any values
                                   (0235) ;;        in the X and A registers that are still needed after the API functions
                                   (0236) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0237) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0238) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0239) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0240) ;;-----------------------------------------------------------------------------
                                   (0241) ;;  Copyright (c) Cypress Semiconductor 2001-2006. All Rights Reserved.
                                   (0242) ;;*****************************************************************************
                                   (0243) ;;*****************************************************************************
                                   (0244) 
                                   (0245) include "m8c.inc"
                                   (0246) include "memory.inc"
                                   (0247) include "LCD_1.inc"
                                   (0248) 
                                   (0249) ;-----------------------------------------------
                                   (0250) ;  Global Symbols
                                   (0251) ;-----------------------------------------------
                                   (0252) 
                                   (0253) export   LCD_1_Start
                                   (0254) export  _LCD_1_Start
                                   (0255) export   LCD_1_Init
                                   (0256) export  _LCD_1_Init
                                   (0257) 
                                   (0258) export   LCD_1_WriteData
                                   (0259) export  _LCD_1_WriteData
                                   (0260) 
0C1C: 08       PUSH  A             (0261) export   LCD_1_Control
0C1D: 67       ASR   A             (0262) export  _LCD_1_Control
0C1E: 67       ASR   A             (0263) 
0C1F: 67       ASR   A             (0264) export  LCD_1_PrString
0C20: 67       ASR   A             (0265) export _LCD_1_PrString
0C21: 21 0F    AND   A,15          (0266) 
0C23: FF E7    INDEX 0x0C0C        (0267) export  LCD_1_PrCString
0C25: 90 21    CALL  0x0C48        (0268) export _LCD_1_PrCString
0C27: 18       POP   A             (0269) 
0C28: 21 0F    AND   A,15          (0270) export  LCD_1_Position
0C2A: FF E0    INDEX 0x0C0C        (0271) export _LCD_1_Position
0C2C: 90 1A    CALL  0x0C48        (0272) 
                                   (0273) export  LCD_1_PrHexByte
0C2E: 7F       RET                 (0274) export _LCD_1_PrHexByte
                                   (0275) 
                                   (0276) export  LCD_1_PrHexInt
                                   (0277) export _LCD_1_PrHexInt
                                   (0278) 
                                   (0279) export  LCD_1_Delay50uTimes
                                   (0280) export _LCD_1_Delay50uTimes
                                   (0281) 
                                   (0282) export  LCD_1_Delay50u
                                   (0283) export _LCD_1_Delay50u
                                   (0284) 
                                   (0285) ;-----------------------------------------------
                                   (0286) ; If bargraph functions not required, don't
                                   (0287) ; export the function names.
                                   (0288) ;-----------------------------------------------
                                   (0289) 
                                   (0290) IF (LCD_1_BARGRAPH_ENABLE)
                                   (0291) export  LCD_1_InitBG
                                   (0292) export _LCD_1_InitBG
                                   (0293) 
                                   (0294) export  LCD_1_InitVBG
                                   (0295) export _LCD_1_InitVBG
                                   (0296) 
                                   (0297) ; NOTE: The two functions,
                                   (0298) ;
                                   (0299) ;    LCD_1_DrawVBG and
                                   (0300) ;    LCD_1_DrawBG
                                   (0301) ;
                                   (0302) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                   (0303) ; fall into a special and rare case where the calling sequences specified
                                   (0304) ; by the two disciplines are incompatible. The fastcall16 versions are
                                   (0305) ; provided for both C and Assembly users in all memory models. The legacy
0C2F: 4B       SWAP  A,X           (0306) ; fastcall16 versions are provided only to support existing small memory
0C30: 9F EA    CALL  0x0C1C        (0307) ; model assembly language code---they do not work in the large memory
0C32: 5B       MOV   A,X           (0308) ; model.
0C33: 9F E7    CALL  0x0C1C        (0309) ;
                                   (0310) ; ** The legacy fastcall16 versions are provided on a temporary basis to
0C35: 7F       RET                 (0311) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                   (0312) ; ** deprecated and their status is "No Further Maintenance".
                                   (0313) ;
                                   (0314) ; The fastcall16 versions of these functions are distinguished by a
                                   (0315) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                   (0316) ; in this comment) do not have the leading underscore. Details on the
                                   (0317) ; calling sequence to be used for fastcall16 are given in the user module
                                   (0318) ; datasheet.
                                   (0319) ;
                                   (0320) ; Fastcall16 versions:
                                   (0321) export _LCD_1_DrawVBG
                                   (0322) export _LCD_1_DrawBG
                                   (0323) 
                                   (0324) IF SYSTEM_SMALL_MEMORY_MODEL
                                   (0325) ; Legacy Fastcall versions:
                                   (0326) export  LCD_1_DrawVBG
                                   (0327) export  LCD_1_DrawBG
                                   (0328) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                   (0329) 
                                   (0330) ENDIF  ; BARGRAPH_ENABLE
                                   (0331) 
                                   (0332) ;
                                   (0333) ; The following functions are deprecated and will be eliminated in a future
                                   (0334) ; version of PSoC Designer.
                                   (0335) ;
                                   (0336) export   LCD_1_Write_Data
                                   (0337) export  _LCD_1_Write_Data
                                   (0338) 
                                   (0339) 
                                   (0340) ;-----------------------------------------------
                                   (0341) ;  EQUATES
                                   (0342) ;-----------------------------------------------
                                   (0343) 
0C36: 70 BF    AND   F,191         (0344) LCD_1_Port:           equ    PRT2DR
0C38: 60 D3    MOV   REG[211],A    (0345) LCD_1_PortMode0:      equ    PRT2DM0
                                   (0346) LCD_1_PortMode1:      equ    PRT2DM1
0C3A: 52 00    MOV   A,[X+0]       (0347) 
0C3C: A0 06    JZ    0x0C43        (0348) LCD_1_E:              equ    10h
                                   (0349) LCD_1_RW:             equ    40h
0C3E: 90 08    CALL  0x0C48        (0350) LCD_1_RS:             equ    20h
0C40: 75       INC   X             (0351) 
0C41: 8F F8    JMP   0x0C3A        (0352) LCD_1_DATA_MASK:      equ    0Fh
0C43: 70 3F    AND   F,63
                                   (0353) LCD_1_READY_BIT:      equ    08h
0C45: 71 C0    OR    F,192         (0354) 
0C47: 7F       RET                 (0355) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                   (0356) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                   (0357) LCD_1_PORT_WRITE:     equ    7Fh
                                   (0358) LCD_1_PORT_MASK:      equ    7Fh
                                   (0359) 
                                   (0360) LCD_1_DISP_INC:       equ    03h
                                   (0361) LCD_1_DISP_OFF:       equ    08h
                                   (0362) LCD_1_DISP_ON:        equ    0Ch
                                   (0363) LCD_1_4BIT_2LINE:     equ    2Ch
                                   (0364) 
                                   (0365) 
                                   (0366) ;-----------------------------------------------
                                   (0367) ;      Bargraph definitions
                                   (0368) ;-----------------------------------------------
                                   (0369) 
                                   (0370) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                   (0371) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                   (0372) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                   (0373) 
                                   (0374)                                   ; Offsets for 2x16, 2x20, 4x20
                                   (0375)                                   ; Change these values for a custom LCD
                                   (0376) 
                                   (0377) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                   (0378) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                   (0379) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                   (0380) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                   (0381) 
                                   (0382) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                   (0383) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                   (0384) 
                                   (0385) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                   (0386) 
0C48: 90 65    CALL  0x0CAF        (0387) AREA UserModules (ROM, REL)
                                   (0388) 
0C4A: 08       PUSH  A             (0389) .SECTION
0C4B: 67       ASR   A             (0390) ;-----------------------------------------------------------------------------
0C4C: 67       ASR   A             (0391) ;  FUNCTION NAME: LCD_1_PrCString
0C4D: 67       ASR   A             (0392) ;
0C4E: 67       ASR   A             (0393) ;  DESCRIPTION:
0C4F: 21 0F    AND   A,15          (0394) ;    Print constant (ROM) string to LCD
0C51: 90 3B    CALL  0x0C8E        (0395) ;-----------------------------------------------------------------------------
0C53: 18       POP   A             (0396) ;
0C54: 21 0F    AND   A,15          (0397) ;  ARGUMENTS:
0C56: 40       NOP                 (0398) ;     A:X  Pointer to String
0C57: 40       NOP                 (0399) ;          A contains MSB of string address
0C58: 40       NOP                 (0400) ;          X contains LSB of string address
0C59: 90 33    CALL  0x0C8E        (0401) ;
                                   (0402) ;  RETURNS:  none
0C5B: 7F       RET                 (0403) ;
                                   (0404) ;  SIDE EFFECTS:
                                   (0405) ;    The A and X registers may be modified by this or future implementations
                                   (0406) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0407) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0408) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0409) ;    functions.
                                   (0410) ;          
                                   (0411) ;    Currently only the page pointer registers listed below are modified: 
                                   (0412) ;          CUR_PP
                                   (0413) ;
                                   (0414)  LCD_1_PrCString:
                                   (0415) _LCD_1_PrCString:
                                   (0416)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0417)  .Loop_PrCString:
                                   (0418)     push  A                            ; Store ROM pointer
                                   (0419)     push  X
                                   (0420)     romx                               ; Get character from ROM
                                   (0421)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
                                   (0422)     pop   X                            ; Restore the stack
                                   (0423)     pop   A
                                   (0424)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0425)     ret                                ; Return
                                   (0426) 
                                   (0427) .LCD_PrCString_WR:
                                   (0428)     call  LCD_1_WriteData              ; Write data to LCD
                                   (0429)     pop   X                            ; Get ROM pointer
                                   (0430)     pop   A
                                   (0431)     inc   X                            ; Inc LSB of pointer
                                   (0432)     jnc   .Loop_PrCString
0C5C: 90 51    CALL  0x0CAF        (0433)     inc   A                            ; Inc MSB of pointer if LSB overflow
                                   (0434)     jmp   .Loop_PrCString
0C5E: 08       PUSH  A             (0435) 
0C5F: 67       ASR   A             (0436) .ENDSECTION
0C60: 67       ASR   A             (0437) 
0C61: 67       ASR   A             (0438) ;-----------------------------------------------------------------------------
0C62: 67       ASR   A             (0439) ;  FUNCTION NAME: LCD_1_PrHexByte
0C63: 21 0F    AND   A,15          (0440) ;
0C65: 90 09    CALL  0x0C70        (0441) ;  DESCRIPTION:
0C67: 18       POP   A             (0442) ;     Print a byte in Hex (two characters) to current LCD position
0C68: 21 0F    AND   A,15          (0443) ;
0C6A: 40       NOP                 (0444) ;-----------------------------------------------------------------------------
0C6B: 40       NOP                 (0445) ;
0C6C: 40       NOP                 (0446) ;  ARGUMENTS:
0C6D: 90 01    CALL  0x0C70        (0447) ;     A  => (BYTE) Data/char to be printed
                                   (0448) ;
0C6F: 7F       RET                 (0449) ;  RETURNS: none
                                   (0450) ;
                                   (0451) ;  SIDE EFFECTS:
                                   (0452) ;    The A and X registers may be modified by this or future implementations
                                   (0453) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0454) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0455) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0456) ;    functions.
                                   (0457) ;          
                                   (0458) ;    Currently only the page pointer registers listed below are modified: 
                                   (0459) ;          CUR_PP
                                   (0460) ;
                                   (0461) .LITERAL
                                   (0462) LCD_1_HEX_STR::
                                   (0463)      DS    "0123456789ABCDEF"
                                   (0464) .ENDLITERAL
                                   (0465) .SECTION
                                   (0466) 
                                   (0467)  LCD_1_PrHexByte:
                                   (0468) _LCD_1_PrHexByte:
                                   (0469)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0470)     push  A                            ; Save lower nibble
                                   (0471)     asr   A                            ; Shift high nibble to right
                                   (0472)     asr   A
                                   (0473)     asr   A
                                   (0474)     asr   A
                                   (0475)     and   A,0Fh                        ; Mask off nibble
                                   (0476)     index LCD_1_HEX_STR                  ; Get Hex value
                                   (0477)     call  LCD_1_WriteData              ; Write data to screen
0C70: 08       PUSH  A             (0478)     pop   A                            ; Restore value
0C71: 62 D0 00 MOV   REG[208],0    (0479)     and   A,0Fh                        ; Mask off lower nibble
0C74: 26 03 80 AND   [3],128       (0480)     index LCD_1_HEX_STR                  ; Get Hex value
0C77: 51 03    MOV   A,[3]         (0481)     call  LCD_1_WriteData              ; Write data to screen
0C79: 60 08    MOV   REG[8],A      (0482)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0483)     ret
0C7B: 18       POP   A             (0484) .ENDSECTION
0C7C: 21 0F    AND   A,15          (0485) 
0C7E: 29 10    OR    A,16          (0486) .SECTION
0C80: 2A 03    OR    A,[3]         (0487) ;-----------------------------------------------------------------------------
0C82: 60 08    MOV   REG[8],A      (0488) ;  FUNCTION NAME: LCD_1_PrHexInt
0C84: 53 03    MOV   [3],A         (0489) ;
0C86: 40       NOP                 (0490) ;  DESCRIPTION:
0C87: 21 8F    AND   A,143         (0491) ;     Print an Int in Hex (four characters) to current LCD position
0C89: 53 03    MOV   [3],A         (0492) ;
0C8B: 60 08    MOV   REG[8],A      (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;
0C8D: 7F       RET                 (0495) ;  ARGUMENTS:
                                   (0496) ;     A:X Integer value
                                   (0497) ;         A  contains LSB of Int
                                   (0498) ;         X  contains MSB of Int
                                   (0499) ;
                                   (0500) ;  RETURNS: none
                                   (0501) ;
                                   (0502) ;  SIDE EFFECTS:
                                   (0503) ;    The A and X registers may be modified by this or future implementations
                                   (0504) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0505) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0506) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0507) ;    functions.
                                   (0508) ;          
                                   (0509) ;    Currently only the page pointer registers listed below are modified: 
                                   (0510) ;          CUR_PP
                                   (0511) ;
                                   (0512)  LCD_1_PrHexInt:
                                   (0513) _LCD_1_PrHexInt:
                                   (0514)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0515)     swap  A,X
                                   (0516)     call  LCD_1_PrHexByte              ; Print MSB
                                   (0517)     mov   A,X                          ; Move LSB into position
                                   (0518)     call  LCD_1_PrHexByte              ; Print LSB
                                   (0519)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0520)     ret
                                   (0521) .ENDSECTION
                                   (0522) 
                                   (0523) .SECTION
0C8E: 08       PUSH  A             (0524) ;-----------------------------------------------------------------------------
0C8F: 62 D0 00 MOV   REG[208],0    (0525) ;  FUNCTION NAME: LCD_1_PrString
0C92: 26 03 80 AND   [3],128       (0526) ;
0C95: 2E 03 20 OR    [3],32        (0527) ;  DESCRIPTION:
0C98: 51 03    MOV   A,[3]         (0528) ;     Print (RAM) ASCII string to LCD
0C9A: 60 08    MOV   REG[8],A      (0529) ;
                                   (0530) ;-----------------------------------------------------------------------------
0C9C: 18       POP   A             (0531) ;
0C9D: 21 0F    AND   A,15          (0532) ;  ARGUMENTS:
0C9F: 29 30    OR    A,48          (0533) ;     A:X contains pointer to string
0CA1: 2A 03    OR    A,[3]         (0534) ;         X  contains LSB of string pointer
0CA3: 60 08    MOV   REG[8],A      (0535) ;         A  contains MSB or page of string pointer (not used at this time)
0CA5: 53 03    MOV   [3],A         (0536) ;
0CA7: 40       NOP                 (0537) ;  RETURNS:
0CA8: 21 AF    AND   A,175         (0538) ;
0CAA: 53 03    MOV   [3],A         (0539) ;  SIDE EFFECTS:
0CAC: 60 08    MOV   REG[8],A      (0540) ;    The A and X registers may be modified by this or future implementations
                                   (0541) ;    of this function.  The same is true for all RAM page pointer registers in
0CAE: 7F       RET                 (0542) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0543) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0544) ;    functions.
                                   (0545) ;          
                                   (0546) ;    Currently only the page pointer registers listed below are modified: 
                                   (0547) ;          CUR_PP
                                   (0548) ;          IDX_PP
                                   (0549) ;
                                   (0550) ;
                                   (0551)  LCD_1_PrString:
                                   (0552) _LCD_1_PrString:
                                   (0553)     RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0554)     RAM_SETPAGE_IDX A
                                   (0555)  .Loop_PrString:
                                   (0556)     mov   A,[X]                        ; Get value pointed to by X
                                   (0557)     jz    .End_LCD_PrString            ; Check for end of string
                                   (0558)     ;LCD_1_writeData is known not to modify X so no need to preserve
                                   (0559)     call  LCD_1_WriteData              ; Write data to screen
                                   (0560)     inc   X                            ; Advance pointer to next character
                                   (0561)     jmp   .Loop_PrString               ; Go get next character
                                   (0562) .End_LCD_PrString:
                                   (0563)     RAM_EPILOGUE RAM_USE_CLASS_3
                                   (0564)     ret
                                   (0565) .ENDSECTION
                                   (0566) 
                                   (0567) .SECTION
                                   (0568) ;-----------------------------------------------------------------------------
                                   (0569) ;  FUNCTION NAME: LCD_1_WriteData
                                   (0570) ;
                                   (0571) ;  DESCRIPTION:
0CAF: 08       PUSH  A             (0572) ;     Write a byte to the LCD's data register.
0CB0: 62 D0 00 MOV   REG[208],0    (0573) ;
0CB3: 26 03 80 AND   [3],128       (0574) ;-----------------------------------------------------------------------------
0CB6: 51 03    MOV   A,[3]         (0575) ;
0CB8: 60 08    MOV   REG[8],A      (0576) ;  ARGUMENTS:
                                   (0577) ;    A contains byte to be written to LCD data register
0CBA: 26 04 F0 AND   [4],240       (0578) ;
0CBD: 51 04    MOV   A,[4]         (0579) ;  RETURNS: none
0CBF: 71 10    OR    F,16          (0580) ;
0CC1: 60 08    MOV   REG[8],A      (0581) ;  SIDE EFFECTS:
0CC3: 70 EF    AND   F,239         (0582) ;    The A and X registers may be modified by this or future implementations
                                   (0583) ;    of this function.  The same is true for all RAM page pointer registers in
0CC5: 2E 03 40 OR    [3],64        (0584) ;    the Large Memory Model.  When necessary, it is the calling function's
0CC8: 51 03    MOV   A,[3]         (0585) ;    responsibility to preserve their values across calls to fastcall16 
0CCA: 60 08    MOV   REG[8],A      (0586) ;    functions.
0CCC: 40       NOP                 (0587) ;          
                                   (0588) ;    Currently only the page pointer registers listed below are modified: 
0CCD: 10       PUSH  X             (0589) ;          CUR_PP
0CCE: 57 FF    MOV   X,255         (0590) ;
                                   (0591)  LCD_1_WriteData:
                                   (0592) _LCD_1_WriteData:
0CD0: 2E 03 50 OR    [3],80        (0593)  LCD_1_Write_Data:   ; Do not use
0CD3: 51 03    MOV   A,[3]         (0594) _LCD_1_Write_Data:   ; Do not use
0CD5: 60 08    MOV   REG[8],A      (0595)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0596)     call  LCD_1_Check_Ready            ; Make sure controller is ready
0CD7: 40       NOP                 (0597)                                        ; A is preserved in LCD_1_Check_Ready
0CD8: 40       NOP                 (0598)     push  A                            ; Save copy of character
0CD9: 5D 08    MOV   A,REG[8]      (0599)     asr   A                            ; Shift high nibble to right
                                   (0600)     asr   A
                                   (0601)     asr   A
                                   (0602)     asr   A
                                   (0603)     and   A,0Fh                        ; Mask off high nibble
                                   (0604)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
                                   (0605)     pop   A                            ; Retrieve copy of character
                                   (0606)     and   A,0Fh                        ; Mask off high nibble
                                   (0607)     nop
                                   (0608)     nop
                                   (0609)     nop
                                   (0610)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
0CDB: 08       PUSH  A             (0611)     RAM_EPILOGUE RAM_USE_CLASS_1
0CDC: 26 03 C0 AND   [3],192       (0612)     ret
0CDF: 51 03    MOV   A,[3]         (0613) .ENDSECTION
0CE1: 60 08    MOV   REG[8],A      (0614) 
                                   (0615) .SECTION
0CE3: 40       NOP                 (0616) ;-----------------------------------------------------------------------------
0CE4: 40       NOP                 (0617) ;  FUNCTION NAME: LCD_1_Control
0CE5: 40       NOP                 (0618) ;
                                   (0619) ;  DESCRIPTION:
0CE6: 2E 03 50 OR    [3],80        (0620) ;     Write a byte to the LCD's control register.
0CE9: 51 03    MOV   A,[3]         (0621) ;
0CEB: 60 08    MOV   REG[8],A      (0622) ;-----------------------------------------------------------------------------
                                   (0623) ;
0CED: 40       NOP                 (0624) ;  ARGUMENTS:
0CEE: 40       NOP                 (0625) ;     A contains data to be written to LCD control register.
                                   (0626) ;
0CEF: 26 03 C0 AND   [3],192       (0627) ;  RETURNS: none
0CF2: 51 03    MOV   A,[3]         (0628) ;
0CF4: 60 08    MOV   REG[8],A      (0629) ;  SIDE EFFECTS:
                                   (0630) ;    The A and X registers may be modified by this or future implementations
0CF6: 18       POP   A             (0631) ;    of this function.  The same is true for all RAM page pointer registers in
0CF7: 21 08    AND   A,8           (0632) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0633) ;    responsibility to preserve their values across calls to fastcall16 
0CF9: A0 04    JZ    0x0CFE        (0634) ;    functions.
0CFB: 79       DEC   X             (0635) ;          
0CFC: BF D3    JNZ   0x0CD0        (0636) ;    Currently only the page pointer registers listed below are modified: 
                                   (0637) ;          CUR_PP
0CFE: 20       POP   X             (0638) ;
                                   (0639)  LCD_1_Control:
0CFF: 2E 04 7F OR    [4],127       (0640) _LCD_1_Control:
0D02: 51 04    MOV   A,[4]         (0641)     RAM_PROLOGUE RAM_USE_CLASS_1
0D04: 71 10    OR    F,16          (0642)     call  LCD_1_Check_Ready            ; Make sure controller is ready
0D06: 60 08    MOV   REG[8],A      (0643)                                        ; A is preserved in LCD_1_Check_Ready
0D08: 70 EF    AND   F,239         (0644)     push  A                            ; Save copy of byte
0D0A: 18       POP   A             (0645)     asr   A                            ; Shift Upper Nibble to right
                                   (0646)     asr   A
0D0B: 7F       RET                 (0647)     asr   A
                                   (0648)     asr   A
                                   (0649)     and   A,0Fh                        ; Mask off, just in case
                                   (0650)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
                                   (0651)     pop   A                            ; Restore copy of byte
                                   (0652)     and   A,0Fh                        ; Mask off high nibble
                                   (0653)     nop
                                   (0654)     nop
                                   (0655)     nop
                                   (0656)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                   (0657)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0658)     ret
                                   (0659) .ENDSECTION
                                   (0660) 
                                   (0661) .SECTION
                                   (0662) ;-----------------------------------------------------------------------------
                                   (0663) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                   (0664) ;
                                   (0665) ;  DESCRIPTION:
                                   (0666) ;     Write a single nibble to the LCD's command register
                                   (0667) ;
                                   (0668) ;-----------------------------------------------------------------------------
                                   (0669) ;
                                   (0670) ;  ARGUMENTS:
                                   (0671) ;     A[3:0]   Contains Nibble to be written to command register
                                   (0672) ;
                                   (0673) ;  RETURNS: none
                                   (0674) ;
                                   (0675) ;  SIDE EFFECTS:
                                   (0676) ;    The A and X registers may be modified by this or future implementations
                                   (0677) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0678) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0679) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0680) ;    functions.
                                   (0681) ;          
                                   (0682) ;    Currently only the page pointer registers listed below are modified: 
                                   (0683) ;          CUR_PP
0D0C: 62 D0 00 MOV   REG[208],0    (0684) ;
                                   (0685)  LCD_1_WCNTL_Nibble:
0D0F: 26 04 80 AND   [4],128       (0686)     RAM_PROLOGUE RAM_USE_CLASS_4
0D12: 2E 04 7F OR    [4],127       (0687)     push  A
0D15: 26 05 80 AND   [5],128       (0688)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
                                   (0689)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0D18: 51 04    MOV   A,[4]         (0690)     mov   A,[Port_2_Data_SHADE]
0D1A: 71 10    OR    F,16          (0691)     mov   reg[LCD_1_Port],A                      ; Reset control lines
0D1C: 60 08    MOV   REG[8],A      (0692) 
0D1E: 51 05    MOV   A,[5]         (0693)     pop   A
0D20: 60 09    MOV   REG[9],A      (0694)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0D22: 70 EF    AND   F,239         (0695)     or    A,LCD_1_E                              ; Bring "E" Enable line high
                                   (0696)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0D24: 50 FA    MOV   A,250         (0697)     mov   reg[LCD_1_Port], A                     ; Write data
0D26: 90 67    CALL  0x0D8F        (0698)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0D28: 50 FA    MOV   A,250         (0699)     nop
0D2A: 90 63    CALL  0x0D8F        (0700)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
                                   (0701)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0D2C: 50 03    MOV   A,3           (0702)     mov   reg[LCD_1_Port],A
0D2E: 9F 40    CALL  0x0C70        (0703)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0704)     ret
0D30: 50 52    MOV   A,82          (0705) .ENDSECTION
0D32: 90 5B    CALL  0x0D8F        (0706) 
                                   (0707) .SECTION
0D34: 50 03    MOV   A,3           (0708) ;-----------------------------------------------------------------------------
0D36: 9F 38    CALL  0x0C70        (0709) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                   (0710) ;
0D38: 90 63    CALL  0x0D9D        (0711) ;  DESCRIPTION:
0D3A: 90 61    CALL  0x0D9D        (0712) ;     Write a single nibble to the LCD's DATA register
0D3C: 90 5F    CALL  0x0D9D        (0713) ;
                                   (0714) ;-----------------------------------------------------------------------------
0D3E: 50 03    MOV   A,3           (0715) ;
0D40: 9F 2E    CALL  0x0C70        (0716) ;  ARGUMENTS:
                                   (0717) ;     A[3:0]   Contains Nibble to be written to data register
0D42: 50 5A    MOV   A,90          (0718) ;
0D44: 90 49    CALL  0x0D8F        (0719) ;  RETURNS: none
                                   (0720) ;
0D46: 50 02    MOV   A,2           (0721) ;  SIDE EFFECTS:
0D48: 9F 26    CALL  0x0C70        (0722) ;    The A and X registers may be modified by this or future implementations
                                   (0723) ;    of this function.  The same is true for all RAM page pointer registers in
0D4A: 50 5A    MOV   A,90          (0724) ;    the Large Memory Model.  When necessary, it is the calling function's
0D4C: 90 41    CALL  0x0D8F        (0725) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0726) ;    functions.
0D4E: 50 08    MOV   A,8           (0727) ;          
0D50: 9F 0A    CALL  0x0C5C        (0728) ;    Currently only the page pointer registers listed below are modified: 
0D52: 50 5A    MOV   A,90          (0729) ;          CUR_PP
0D54: 90 39    CALL  0x0D8F        (0730) ;
                                   (0731) LCD_1_WDATA_Nibble:
0D56: 50 01    MOV   A,1           (0732)     RAM_PROLOGUE RAM_USE_CLASS_4
0D58: 9F 02    CALL  0x0C5C        (0733)     push  A
0D5A: 50 5A    MOV   A,90          (0734)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0D5C: 90 31    CALL  0x0D8F        (0735)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
                                   (0736)     or    [Port_2_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
0D5E: 50 06    MOV   A,6           (0737)     mov   A,[Port_2_Data_SHADE]
0D60: 9E FA    CALL  0x0C5C        (0738)     mov   reg[LCD_1_Port],A
                                   (0739) 
0D62: 50 0E    MOV   A,14          (0740)     pop   A
0D64: 9E F6    CALL  0x0C5C        (0741)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
                                   (0742)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
0D66: 50 2C    MOV   A,44          (0743)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0D68: 9E F2    CALL  0x0C5C        (0744)     mov   reg[LCD_1_Port], A                            ; Write data
                                   (0745)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0D6A: 50 08    MOV   A,8           (0746)     NOP
0D6C: 9E EE    CALL  0x0C5C        (0747)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
                                   (0748)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0D6E: 50 0C    MOV   A,12          (0749)     mov   reg[LCD_1_Port],A
0D70: 9E EA    CALL  0x0C5C        (0750)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0751)     ret
0D72: 50 03    MOV   A,3           (0752) .ENDSECTION
0D74: 9E E6    CALL  0x0C5C        (0753) 
                                   (0754) .SECTION
0D76: 50 5A    MOV   A,90          (0755) ;-----------------------------------------------------------------------------
0D78: 90 15    CALL  0x0D8F        (0756) ;  FUNCTION NAME: LCD_1_Check_Ready
                                   (0757) ;
0D7A: 7F       RET                 (0758) ;  DESCRIPTION:
0D7B: 80 C0    JMP   0x0E3C
0D7D: 94 D4    CALL  0x1253
                                   (0759) ;     Wait until LCD has completed last command.
                                   (0760) ;
                                   (0761) ;-----------------------------------------------------------------------------
                                   (0762) ;
                                   (0763) ;  ARGUMENTS: none
                                   (0764) ;
                                   (0765) ;  RETURNS: none
                                   (0766) ;
                                   (0767) ;  SIDE EFFECTS:
                                   (0768) ;    The A and X registers may be modified by this or future implementations
                                   (0769) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0770) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0771) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0772) ;    functions.
                                   (0773) ;          
                                   (0774) ;    Currently only the page pointer registers listed below are modified: 
                                   (0775) ;          CUR_PP
                                   (0776) ;
                                   (0777) ;     If LCD is not present, this routine may never return.
                                   (0778) ;
                                   (0779) LCD_1_Check_Ready:
                                   (0780)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0781)     push  A                                           ; Save Accumulator
                                   (0782)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
                                   (0783)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
                                   (0784)     mov   A,[Port_2_Data_SHADE]
                                   (0785)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                   (0786) 
                                   (0787)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
                                   (0788)     mov   A,[Port_2_DriveMode_0_SHADE]
                                   (0789)     M8C_SetBank1                                      ; Change port mode to read status
                                   (0790)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
0D7F: 21 03    AND   A,3           (0791)     M8C_SetBank0
0D81: 10       PUSH  X             (0792) 
0D82: FF F7    INDEX 0x0D7B        (0793)     or    [Port_2_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
0D84: 4F       MOV   X,SP          (0794)     mov   A,[Port_2_Data_SHADE]
0D85: 03 FF    ADD   A,[X-1]       (0795)     mov   reg[LCD_1_Port],A
0D87: 20       POP   X             (0796)     NOP
                                   (0797) 
0D88: 9E D2    CALL  0x0C5C        (0798)     push  X							                            ; Save 'X' register
0D8A: 70 3F    AND   F,63
0D8C: 71 C0    OR    F,192         (0799)     mov   X,255                         			            ; 255 Attempts
0D8E: 7F       RET                 (0800) 
                                   (0801) .LCD_RDY_LOOP:
                                   (0802)     or    [Port_2_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
                                   (0803)     mov   A,[Port_2_Data_SHADE]
                                   (0804)     mov   reg[LCD_1_Port],A
                                   (0805) 
                                   (0806)     nop                                               ; Wait 2 nops to make sure data is ready
                                   (0807)     nop
                                   (0808)     mov   A,reg[LCD_1_Port]
                                   (0809) 
                                   (0810) ; The code below is used to work around the async read issue with the ICE with the 
                                   (0811) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                   (0812) ; errors.  It is not required when running without the ICE or when using any other 
                                   (0813) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                   (0814) ; the ICE_PORT_SYNC flag should be set to 0.
                                   (0815) IF(ICE_PORT_SYNC)                          
                                   (0816)     mov   reg[ 0xfa], A                    
                                   (0817)     mov   A, reg[0xfa]                     
                                   (0818) ENDIF   
                                   (0819)                                    
                                   (0820)     push  A
                                   (0821)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
                                   (0822)     mov   A,[Port_2_Data_SHADE]
                                   (0823)     mov   reg[LCD_1_Port],A
                                   (0824) 
                                   (0825)     nop                                    ; Add delay for the slowest part and the
                                   (0826)     nop                                    ; fastest PSoC
                                   (0827)     nop
0D8F: 90 0C    CALL  0x0D9D        (0828)                                                                 ; Get the LSBs
0D91: 78       DEC   A             (0829)     or    [Port_2_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
0D92: BF FC    JNZ   0x0D8F        (0830)     mov   A,[Port_2_Data_SHADE]
                                   (0831)     mov   reg[LCD_1_Port],A
0D94: 7F       RET                 (0832) 
0D95: 08       PUSH  A
0D96: 19 3A    SBB   A,58
0D98: 7C 01 01 LCALL 0x0101
0D9B: 01 01    ADD   A,1
                                   (0833)     nop
                                   (0834)     nop
                                   (0835) 
                                   (0836)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
                                   (0837)     mov   A,[Port_2_Data_SHADE]
                                   (0838)     mov   reg[LCD_1_Port],A
                                   (0839) 
                                   (0840)     pop   A
                                   (0841)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                   (0842) 
                                   (0843)     jz    .UNLOCK
                                   (0844)     dec   X
                                   (0845)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                   (0846) .UNLOCK:
                                   (0847)     pop   X							                            ; Restore 'X' register
                                   (0848) 
                                   (0849)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
                                   (0850)     mov   A,[Port_2_DriveMode_0_SHADE]
                                   (0851)     M8C_SetBank1
                                   (0852)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
                                   (0853)     M8C_SetBank0
                                   (0854)     pop   A
                                   (0855)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
                                   (0856)     ret
                                   (0857) .ENDSECTION
                                   (0858) 
                                   (0859) .SECTION
                                   (0860) ;-----------------------------------------------------------------------------
                                   (0861) ;  FUNCTION NAME: LCD_1_Start
                                   (0862) ;  FUNCTION NAME: LCD_1_Init
                                   (0863) ;
                                   (0864) ;  DESCRIPTION:
                                   (0865) ;     Initialize LCD
                                   (0866) ;
                                   (0867) ;-----------------------------------------------------------------------------
                                   (0868) ;
                                   (0869) ;  ARGUMENTS: none
                                   (0870) ;
                                   (0871) ;  RETURNS: none
0D9D: 08       PUSH  A             (0872) ;
0D9E: 71 10    OR    F,16          (0873) ;  SIDE EFFECTS:
0DA0: 5D E0    MOV   A,REG[224]    (0874) ;    The A and X registers may be modified by this or future implementations
0DA2: 70 EF    AND   F,239         (0875) ;    of this function.  The same is true for all RAM page pointer registers in
0DA4: 21 07    AND   A,7           (0876) ;    the Large Memory Model.  When necessary, it is the calling function's
0DA6: 39 05    CMP   A,5           (0877) ;    responsibility to preserve their values across calls to fastcall16 
0DA8: D0 06    JNC   0x0DAF        (0878) ;    functions.
0DAA: FF E9    INDEX 0x0D95        (0879) ;          
                                   (0880) ;    Currently only the page pointer registers listed below are modified: 
0DAC: 78       DEC   A             (0881) ;          CUR_PP
0DAD: BF FE    JNZ   0x0DAC        (0882) ;
                                   (0883) ;  THEORY of OPERATION or PROCEDURE:
0DAF: 18       POP   A             (0884) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                   (0885) ;    This initialization is a bit long, but it should work for
0DB0: 7F       RET                 (0886) ;    most 2 and 4 line LCDs.
                                   (0887) ;
                                   (0888)  LCD_1_Start:
                                   (0889) _LCD_1_Start:
                                   (0890)  LCD_1_Init:
                                   (0891) _LCD_1_Init:
                                   (0892)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0893)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                   (0894) 
                                   (0895)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                   (0896)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
                                   (0897)     and   [Port_2_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                   (0898) 
                                   (0899)     mov   A,[Port_2_DriveMode_0_SHADE]
                                   (0900)     M8C_SetBank1
                                   (0901)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
                                   (0902)     mov   A,[Port_2_DriveMode_1_SHADE]
                                   (0903)     mov   reg[LCD_1_PortMode1],A
                                   (0904)     M8C_SetBank0
                                   (0905) 
                                   (0906)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
                                   (0907)     call  LCD_1_Delay50uTimes
                                   (0908)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
                                   (0909)     call  LCD_1_Delay50uTimes
                                   (0910) 
                                   (0911)     mov   A,03h
                                   (0912)     call  LCD_1_WCNTL_Nibble
                                   (0913) 
                                   (0914)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
                                   (0915)     call  LCD_1_Delay50uTimes
                                   (0916) 
                                   (0917)     mov   A,03h
                                   (0918)     call  LCD_1_WCNTL_Nibble
                                   (0919) 
                                   (0920)     call  LCD_1_Delay50u
                                   (0921)     call  LCD_1_Delay50u
                                   (0922)     call  LCD_1_Delay50u
                                   (0923) 
                                   (0924)     mov   A,03h
                                   (0925)     call  LCD_1_WCNTL_Nibble
                                   (0926) 
                                   (0927)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                   (0928)     call  LCD_1_Delay50uTimes
                                   (0929) 
                                   (0930)     mov   A,02h
                                   (0931)     call  LCD_1_WCNTL_Nibble
                                   (0932) 
                                   (0933)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                   (0934)     call  LCD_1_Delay50uTimes
                                   (0935) 
                                   (0936)     mov   A,08h
                                   (0937)     call  LCD_1_Control
                                   (0938)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                   (0939)     call  LCD_1_Delay50uTimes
                                   (0940) 
                                   (0941)     mov   A,01h
                                   (0942)     call  LCD_1_Control
                                   (0943)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                   (0944)     call  LCD_1_Delay50uTimes
                                   (0945) 
                                   (0946)     mov   A,06h
                                   (0947)     call  LCD_1_Control
                                   (0948) 
                                   (0949)     mov   A,0Eh
                                   (0950)     call  LCD_1_Control
                                   (0951) 
                                   (0952)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
                                   (0953)     call  LCD_1_Control
                                   (0954) 
                                   (0955)     mov   A,LCD_1_DISP_OFF
                                   (0956)     call  LCD_1_Control
                                   (0957) 
                                   (0958)     mov   A,LCD_1_DISP_ON
                                   (0959)     call  LCD_1_Control
                                   (0960) 
                                   (0961)     mov   A,LCD_1_DISP_INC
                                   (0962)     call  LCD_1_Control
                                   (0963) 
                                   (0964)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                   (0965)     call  LCD_1_Delay50uTimes
                                   (0966)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0967)     ret
                                   (0968) .ENDSECTION
                                   (0969) 
                                   (0970) ;-----------------------------------------------------------------------------
                                   (0971) ;  FUNCTION NAME: LCD_1_Position
                                   (0972) ;
                                   (0973) ;  DESCRIPTION:
                                   (0974) ;     Position Cursor at Row and Col location
                                   (0975) ;
                                   (0976) ;-----------------------------------------------------------------------------
                                   (0977) ;
                                   (0978) ;  ARGUMENTS:
                                   (0979) ;     A => Row  0 to 3
                                   (0980) ;     X => Col  0 to 39+
                                   (0981) ;
                                   (0982) ;  RETURNS:  none
                                   (0983) ;
                                   (0984) ;  SIDE EFFECTS:
                                   (0985) ;    The A and X registers may be modified by this or future implementations
                                   (0986) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0987) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0988) ;    responsibility to preserve their values across calls to fastcall16 
                                   (0989) ;    functions.
                                   (0990) ;
                                   (0991) .LITERAL
                                   (0992) LCD_1_ROW_OFFSET::
                                   (0993)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                   (0994) .ENDLITERAL
                                   (0995) 
                                   (0996) .SECTION
                                   (0997)  LCD_1_Position:
                                   (0998) _LCD_1_Position:
                                   (0999)     RAM_PROLOGUE RAM_USE_CLASS_2
                                   (1000)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
                                   (1001)     push  X                            ; Store COL
                                   (1002)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
                                   (1003)     mov   X,SP                         ; Get Stack pointer
                                   (1004)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
                                   (1005)     pop   X
                                   (1006) 
                                   (1007)     call  LCD_1_Control                ; Write control byte
                                   (1008)     RAM_EPILOGUE RAM_USE_CLASS_2
                                   (1009)     ret
                                   (1010) .ENDSECTION
                                   (1011) 
                                   (1012) .SECTION
                                   (1013) ;-----------------------------------------------------------------------------
                                   (1014) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                   (1015) ;
0DB1: 4F       MOV   X,SP          (1016) ;  DESCRIPTION:
0DB2: 10       PUSH  X             (1017) ;     Delay increments of 50uSeconds
0DB3: 52 FD    MOV   A,[X-3]       (1018) ;
0DB5: 59 FC    MOV   X,[X-4]       (1019) ;-----------------------------------------------------------------------------
0DB7: 70 3F    AND   F,63
0DB9: 71 C0    OR    F,192         (1020) ;
0DBB: 9F C2    CALL  0x0D7F        (1021) ;  ARGUMENTS:
                                   (1022) ;     A contains the delay multiplier
0DBD: 20       POP   X             (1023) ;
                                   (1024) ;  RETURNS:
                                   (1025) ;
0DBE: 3D FA 00 CMP   [X-6],0       (1026) ;  SIDE EFFECTS:
0DC1: B0 05    JNZ   0x0DC7        (1027) ;    The A and X registers may be modified by this or future implementations
0DC3: 50 00    MOV   A,0           (1028) ;    of this function.  The same is true for all RAM page pointer registers in
0DC5: 80 11    JMP   0x0DD7        (1029) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1030) ;    responsibility to preserve their values across calls to fastcall16 
                                   (1031) ;    functions.
0DC7: 3D FA 06 CMP   [X-6],6       (1032) ;
0DCA: D0 07    JNC   0x0DD2        (1033) ;
0DCC: 52 FA    MOV   A,[X-6]       (1034)  LCD_1_Delay50uTimes:
0DCE: 15 FA    SUB   [X-6],A       (1035) _LCD_1_Delay50uTimes:
0DD0: 80 06    JMP   0x0DD7        (1036)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (1037)     call  LCD_1_Delay50u
                                   (1038)     dec   A
0DD2: 50 06    MOV   A,6           (1039)     jnz   LCD_1_Delay50uTimes
0DD4: 17 FA 05 SUB   [X-6],5       (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1041)     ret
                                   (1042) 
0DD7: 9E 6F    CALL  0x0C48        (1043) .ENDSECTION
                                   (1044) 
0DD9: 7B FB    DEC   [X-5]         (1045) ;-----------------------------------------------------------------------------
0DDB: BF E2    JNZ   0x0DBE        (1046) ;  FUNCTION NAME: LCD_1_Delay50u
0DDD: 70 3F    AND   F,63
0DDF: 71 C0    OR    F,192         (1047) ;
0DE1: 7F       RET                 (1048) ;  DESCRIPTION:
                                   (1049) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                   (1050) ;     Slower clock frequencies the delay will be;
                                   (1051) ;           1.5
                                   (1052) ;        -------------- * 50uSec
                                   (1053) ;        clock_freq(MHz)
                                   (1054) ;
                                   (1055) ;
                                   (1056) ;-----------------------------------------------------------------------------
                                   (1057) ;
                                   (1058) ;  ARGUMENTS: none
                                   (1059) ;
                                   (1060) ;  RETURNS: none
                                   (1061) ;
                                   (1062) ;  SIDE EFFECTS:
                                   (1063) ;    The A and X registers may be modified by this or future implementations
                                   (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1066) ;    responsibility to preserve their values across calls to fastcall16 
                                   (1067) ;    functions.
                                   (1068) ;
                                   (1069) ;  THEORY of OPERATION or PROCEDURE:
                                   (1070) ;
                                   (1071) .LITERAL
                                   (1072)  LCD_1_Delay50u_Table::
                                   (1073)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                   (1074) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                   (1075) .ENDLITERAL
                                   (1076) .SECTION
                                   (1077) 
                                   (1078)   LCD_1_Delay50u:
                                   (1079)  _LCD_1_Delay50u:                      ; [11]  Call
                                   (1080)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (1081)     push  A
                                   (1082)     M8C_SetBank1                         ; [4]
                                   (1083)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
                                   (1084)     M8C_SetBank0                         ; [4]
                                   (1085)     and   A,07h                          ; [4] Mask off only the clock bits
                                   (1086)     cmp   A,05h
                                   (1087)     jnc   .Delay50u_End
                                   (1088)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                   (1089) .Delay50u_Loop:                          ;
                                   (1090)     dec   A                              ; [4]
                                   (1091)     jnz   .Delay50u_Loop                 ; [5]
                                   (1092) .Delay50u_End:
                                   (1093)     pop   A
                                   (1094)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1095)     ret
                                   (1096) .ENDSECTION
                                   (1097) 
                                   (1098) 
                                   (1099) ;-----------------------------------------------------------------------------
                                   (1100) ;      If bargraph is not enabled, the following functions are not required.
                                   (1101) ;-----------------------------------------------------------------------------
                                   (1102) 
                                   (1103) IF (LCD_1_BARGRAPH_ENABLE)
                                   (1104) 
                                   (1105) IF SYSTEM_SMALL_MEMORY_MODEL
                                   (1106) .SECTION
                                   (1107) ;-----------------------------------------------------------------------------
                                   (1108) ;  FUNCTION NAME: LCD_1_DrawBG
                                   (1109) ;
                                   (1110) ;  DESCRIPTION:
                                   (1111) ;  This legacy fastcall version are provided only to support existing small
                                   (1112) ;  memory model assembly language code---it does not work in the large memory
                                   (1113) ;  model.
                                   (1114) ;
                                   (1115) ;  ** This legacy fastcall version is provided on a temporary basis to
                                   (1116) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                   (1117) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                   (1118) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                   (1119) ;  ** (with a leading underscore) and the fastcall16 interface
                                   (1120) ;
                                   (1121) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                   (1122) ;  is a legacy function that is intended to support existing Assembly
                                   (1123) ;  language programs that call this function.  This should not be used for
                                   (1124) ;  new code or with Large Memory Model programs.
                                   (1125) ;-----------------------------------------------------------------------------
                                   (1126) ;
                                   (1127) ;  LEGACY FASTCALL ARGUMENTS:
                                   (1128) ;    A    => Starting row for bargraph 0 to 3
                                   (1129) ;   [X]   => Starting Column for bargraph 0 to 39+
                                   (1130) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                   (1131) ;   [X-2] => Position of pointer in segments 5 times Length
                                   (1132) ;
                                   (1133) ;
                                   (1134) ;  RETURNS:  none
                                   (1135) ;
                                   (1136) ;  SIDE EFFECTS:
                                   (1137) ;    The A and X registers may be modified by this or future implementations
                                   (1138) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1139) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1140) ;    responsibility to preserve their values across calls to fastcall16 
                                   (1141) ;    functions.
                                   (1142) ;
                                   (1143) ;    If LCD_1_Init is not called before this function, the
                                   (1144) ;    bargraph will not be drawn properly.
                                   (1145) ;
                                   (1146) ; Stack offset constants
                                   (1147) BG_COLX:       equ  0                   ; Stack position of Column
                                   (1148) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                   (1149) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                   (1150) 
                                   (1151) 
                                   (1152) LCD_1_DrawBG:
                                   (1153)     push  X
                                   (1154)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                   (1155)     call  LCD_1_Position               ; Set cursor position
                                   (1156)     pop   X                             ; Restore pointer
                                   (1157) 
                                   (1158) .LCD_BG_LOOP1X:
                                   (1159)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                   (1160)     jnz   .LCD_CHECK1X
                                   (1161)     mov   A,00h                         ; Load empty character
                                   (1162)     jmp   .LCD_BG_DOITX                 ;
                                   (1163) 
                                   (1164) .LCD_CHECK1X:
                                   (1165)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                   (1166)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                   (1167)     mov   A,[X+BG_LENGTHX]
                                   (1168)     sub   [X+BG_LENGTHX],A
0DE2: 4F       MOV   X,SP          (1169)     jmp   .LCD_BG_DOITX
0DE3: 52 FD    MOV   A,[X-3]       (1170) 
0DE5: 21 03    AND   A,3           (1171) .LCD_CHECK2X:                           ; Put index to full character
                                   (1172)     mov   A, 06h
0DE7: 08       PUSH  A             (1173)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
0DE8: FF 91    INDEX 0x0D7B        (1174) 
0DEA: 03 FC    ADD   A,[X-4]       (1175) .LCD_BG_DOITX:
0DEC: 9E 6E    CALL  0x0C5C        (1176)     call  LCD_1_WriteData              ; Display BG character
0DEE: 3D FA 00 CMP   [X-6],0       (1177) 
0DF1: B0 05    JNZ   0x0DF7        (1178)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0DF3: 50 20    MOV   A,32          (1179)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0DF5: 80 13    JMP   0x0E09        (1180)     ret
                                   (1181) .ENDSECTION
0DF7: 3D FA 09 CMP   [X-6],9       (1182) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
0DFA: D0 09    JNC   0x0E04        (1183) 
                                   (1184) .SECTION
0DFC: 52 FA    MOV   A,[X-6]       (1185) ;-----------------------------------------------------------------------------
0DFE: 78       DEC   A             (1186) ;  FUNCTION NAME: LCD_1_DrawBG
0DFF: 56 FA 00 MOV   [X-6],0       (1187) ;
0E02: 80 06    JMP   0x0E09        (1188) ;  DESCRIPTION:
                                   (1189) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                   (1190) ;
0E04: 17 FA 08 SUB   [X-6],8       (1191) ;
0E07: 50 07    MOV   A,7           (1192) ;-----------------------------------------------------------------------------
                                   (1193) ;
                                   (1194) ;  FASTCALL16 ARGUMENTS:
0E09: 9E 3D    CALL  0x0C48        (1195) ;   [SP-3] => Starting row for bargraph 0 to 3
0E0B: 18       POP   A             (1196) ;   [SP-4] => Starting Column for bargraph 0 to 39+
0E0C: 78       DEC   A             (1197) ;   [SP-5] => Length of bargraph in chars 1 to 40+
0E0D: 7B FB    DEC   [X-5]         (1198) ;   [SP-6] => Position of pointer in segments 5 times Length
0E0F: BF D7    JNZ   0x0DE7        (1199) ;
0E11: 70 3F    AND   F,63
0E13: 71 C0    OR    F,192         (1200) ;
0E15: 7F       RET                 (1201) ;  RETURNS:  none
                                   (1202) ;
                                   (1203) ;  SIDE EFFECTS:
                                   (1204) ;    The A and X registers may be modified by this or future implementations
                                   (1205) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1207) ;    responsibility to preserve their values across calls to fastcall16 
                                   (1208) ;    functions.
                                   (1209) ;          
                                   (1210) ;    Currently only the page pointer registers listed below are modified: 
                                   (1211) ;          CUR_PP
                                   (1212) ;
                                   (1213) ;    If LCD_1_Init is not called before this function, the
                                   (1214) ;    bargraph will not be drawn properly.
                                   (1215) ;
                                   (1216) ; Stack offset constants
                                   (1217) BG_ROW:       equ -3
                                   (1218) BG_COL:       equ -4                   ; Stack position of Column
                                   (1219) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                   (1220) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                   (1221) 
                                   (1222) 
                                   (1223) _LCD_1_DrawBG:
                                   (1224)     RAM_PROLOGUE RAM_USE_CLASS_2
                                   (1225)     mov   X, SP
                                   (1226)     push  X
                                   (1227)     mov   A,[X+BG_ROW]                 ; Row in A
                                   (1228)     mov   X,[X+BG_COL]                 ; Col in X
                                   (1229)     RAM_EPILOGUE RAM_USE_CLASS_2
                                   (1230)     call  LCD_1_Position               ; Set cursor position
                                   (1231)     RAM_PROLOGUE RAM_USE_CLASS_2
                                   (1232)     pop  X
                                   (1233) 
                                   (1234) .LCD_BG_LOOP1:
                                   (1235)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                   (1236)     jnz   .LCD_CHECK1
                                   (1237)     mov   A,00h                        ; Load empty character
                                   (1238)     jmp   .LCD_BG_DOIT                  ;
0E16: 4F       MOV   X,SP          (1239) 
0E17: 08       PUSH  A             (1240) .LCD_CHECK1:
0E18: 08       PUSH  A             (1241)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                   (1242)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0E19: 50 40    MOV   A,64          (1243)     mov   A,[X+BG_LENGTH]
0E1B: 9E 3F    CALL  0x0C5C        (1244)     sub   [X+BG_LENGTH],A
0E1D: 56 00 01 MOV   [X+0],1       (1245)     jmp   .LCD_BG_DOIT
                                   (1246) 
                                   (1247) .LCD_CHECK2:                            ; Put index to full character
0E20: 56 01 08 MOV   [X+1],8       (1248)     mov   A, 06h
                                   (1249)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
0E23: 52 00    MOV   A,[X+0]       (1250) 
0E25: 3B 01    CMP   A,[X+1]       (1251) .LCD_BG_DOIT:
0E27: D0 05    JNC   0x0E2D        (1252)     call  LCD_1_WriteData              ; Display BG character
0E29: 50 00    MOV   A,0           (1253) 
0E2B: 80 03    JMP   0x0E2F        (1254)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                   (1255)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0E2D: 50 FF    MOV   A,255         (1256)     RAM_EPILOGUE RAM_USE_CLASS_2
                                   (1257)     ret
0E2F: 9E 17    CALL  0x0C48        (1258) .ENDSECTION
0E31: 7B 01    DEC   [X+1]         (1259) 
0E33: BF EF    JNZ   0x0E23        (1260) IF SYSTEM_SMALL_MEMORY_MODEL
0E35: 77 00    INC   [X+0]         (1261) .SECTION
0E37: 3D 00 09 CMP   [X+0],9       (1262) ;-----------------------------------------------------------------------------
0E3A: BF E5    JNZ   0x0E20        (1263) ;  FUNCTION NAME: LCD_1_DrawVBG
                                   (1264) ;
0E3C: 18       POP   A             (1265) ;  DESCRIPTION:
0E3D: 18       POP   A             (1266) ;  This legacy fastcall version are provided only to support existing small
0E3E: 50 0C    MOV   A,12          (1267) ;  memory model assembly language code---it does not work in the large memory
0E40: 9E 1A    CALL  0x0C5C        (1268) ;  model.
0E42: 70 3F    AND   F,63
0E44: 71 C0    OR    F,192         (1269) ;
0E46: 7F       RET                 (1270) ;  ** This legacy fastcall version is provided on a temporary basis to
0E47: 00       SWI   
0E48: 10       PUSH  X
0E49: 18       POP   A
0E4A: 1C 1E    SBB   [30],A
0E4C: 1F 1F 00 SBB   [X+31],0
0E4F: 10       PUSH  X
0E50: 08       PUSH  A
0E51: 04 02    ADD   [2],A
0E53: 01 00    ADD   A,0
                                   (1271) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                   (1272) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                   (1273) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                   (1274) ;  ** (with a leading underscore) and the fastcall16 interface
                                   (1275) ;
                                   (1276) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                   (1277) ;  is a legacy function that is intended to support existing Assembly
                                   (1278) ;  language programs that call this function.  This should not be used for
                                   (1279) ;  new code or with Large Memory Model programs.
                                   (1280) ;-----------------------------------------------------------------------------
                                   (1281) ;
                                   (1282) ;  LEGACY FASTCALL ARGUMENTS:
                                   (1283) ;    A    => Starting row for bargraph 0 to 3
                                   (1284) ;   [X]   => Starting Column for bargraph 0 to 40+
                                   (1285) ;   [x-1] => Height of bargraph in chars 1 - 4
                                   (1286) ;   [X-2] => Position of pointer in segments 8 times height
                                   (1287) ;  RETURNS:
                                   (1288) ;
                                   (1289) ;  SIDE EFFECTS:
                                   (1290) ;    The A and X registers may be modified by this or future implementations
                                   (1291) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1293) ;    responsibility to preserve their values across calls to fastcall16 
                                   (1294) ;    functions.
                                   (1295) ;    
                                   (1296) ;    If LCD_1_Init is not called before this function, the
                                   (1297) ;    bargraph will not be drawn properly.
                                   (1298) ;
                                   (1299) ; Stack offset constants
                                   (1300) VBG_COLX:            equ  0
                                   (1301) VBG_CHAR_HEIGHTX:    equ -1
                                   (1302) VBG_SEG_HEIGHTX:     equ -2
                                   (1303) 
                                   (1304) LCD_1_DrawVBG:
                                   (1305) 
                                   (1306)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                   (1307) .VBG_LOOPX:
                                   (1308)     push  A
                                   (1309)     index LCD_1_ROW_OFFSET  ; Get row offset
                                   (1310)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                   (1311)     call  LCD_1_Control                ; Position Cursor
                                   (1312)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                   (1313)     jnz   .VBG_NZ_SEGX
                                   (1314)     mov   A,' '                        ; Load space character
                                   (1315)     jmp   .VBG_WRITE_CHARX
                                   (1316) .VBG_NZ_SEGX:
                                   (1317)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                   (1318)     jnc   .VBG_FULL_SEGX
                                   (1319)                                         ; Partial segment between 1 and 8
0E55: 4F       MOV   X,SP          (1320)     mov   A,[X+VBG_SEG_HEIGHTX]
0E56: 38 03    ADD   SP,3          (1321)     dec   A
0E58: 54 02    MOV   [X+2],A       (1322)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                   (1323)     jmp   .VBG_WRITE_CHARX
0E5A: 50 40    MOV   A,64          (1324) 
0E5C: 9D FE    CALL  0x0C5C        (1325) .VBG_FULL_SEGX:                          ; Bargaph
0E5E: 56 00 00 MOV   [X+0],0       (1326)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                   (1327)     mov   A,07h                        ; Load full segment
                                   (1328) 
0E61: 56 01 08 MOV   [X+1],8       (1329) .VBG_WRITE_CHARX:                        ; Write character to display
                                   (1330)     call  LCD_1_WriteData              ; Write value
0E64: 52 00    MOV   A,[X+0]       (1331)     pop   A
0E66: 3D 02 00 CMP   [X+2],0       (1332)     dec   A
0E69: B0 05    JNZ   0x0E6F        (1333)     dec   [X+VBG_CHAR_HEIGHTX]
0E6B: FF DA    INDEX 0x0E47        (1334)     jnz   .VBG_LOOPX
0E6D: 80 03    JMP   0x0E71        (1335)     ret
                                   (1336) .ENDSECTION
0E6F: FF DD    INDEX 0x0E4E        (1337) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                   (1338) 
0E71: 9D D5    CALL  0x0C48        (1339) .SECTION
0E73: 7B 01    DEC   [X+1]         (1340) ;-----------------------------------------------------------------------------
0E75: BF EE    JNZ   0x0E64        (1341) ;  FUNCTION NAME: LCD_1_DrawVBG
0E77: 77 00    INC   [X+0]         (1342) ;
0E79: 3D 00 07 CMP   [X+0],7       (1343) ;  DESCRIPTION:
0E7C: BF E4    JNZ   0x0E61        (1344) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                   (1345) ;
0E7E: 38 FD    ADD   SP,253        (1346) ;
0E80: 50 0C    MOV   A,12          (1347) ;-----------------------------------------------------------------------------
0E82: 9D D8    CALL  0x0C5C        (1348) ;
0E84: 70 3F    AND   F,63
0E86: 71 C0    OR    F,192         (1349) ;  FASTCALL16 ARGUMENTS:
0E89: 7E       RETI                (1350) ;

FILE: lib\comp_serialint.asm
                                   (0102) ;;*****************************************************************************
                                   (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME:   COMP_SERIALINT.asm
                                   (0105) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                   (0109) ;;-----------------------------------------------------------------------------
                                   (0110) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0111) ;;*****************************************************************************
                                   (0112) ;;*****************************************************************************
                                   (0113) 
                                   (0114) 
                                   (0115) include "COMP_SERIAL.inc"
                                   (0116) include "memory.inc"
                                   (0117) include "m8c.inc"
                                   (0118) 
                                   (0119) ;-----------------------------------------------
                                   (0120) ;  Global Symbols
                                   (0121) ;-----------------------------------------------
                                   (0122) export  _COMP_SERIAL_TX_ISR
                                   (0123) export  _COMP_SERIAL_RX_ISR
                                   (0124) 
                                   (0125) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0126) export  COMP_SERIAL_aRxBuffer
                                   (0127) export _COMP_SERIAL_aRxBuffer
                                   (0128) export  COMP_SERIAL_bRxCnt
                                   (0129) export _COMP_SERIAL_bRxCnt
                                   (0130) export  COMP_SERIAL_fStatus
                                   (0131) export _COMP_SERIAL_fStatus
                                   (0132) ENDIF
                                   (0133) 
                                   (0134) 
                                   (0135) ;-----------------------------------------------
                                   (0136) ; Variable Allocation
                                   (0137) ;-----------------------------------------------
                                   (0138) AREA InterruptRAM (RAM, REL, CON)
                                   (0139) 
                                   (0140) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0141)  COMP_SERIAL_fStatus:
                                   (0142) _COMP_SERIAL_fStatus:      BLK  1
                                   (0143)  COMP_SERIAL_bRxCnt:
                                   (0144) _COMP_SERIAL_bRxCnt:       BLK  1
                                   (0145) AREA COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0146)  COMP_SERIAL_aRxBuffer:
                                   (0147) _COMP_SERIAL_aRxBuffer:    BLK COMP_SERIAL_RX_BUFFER_SIZE
                                   (0148) ENDIF
                                   (0149) 
                                   (0150) AREA InterruptRAM (RAM, REL, CON)
                                   (0151) 
0E8A: 08       PUSH  A             (0152) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0E8B: 10       PUSH  X             (0153) ;---------------------------------------------------
0E8C: 5D D3    MOV   A,REG[211]
                                   (0154) ; Insert your custom declarations below this banner
                                   (0155) ;---------------------------------------------------
0E8E: 08       PUSH  A             (0156) 
                                   (0157) ;------------------------
                                   (0158) ;  Includes
0E8F: 58 07    MOV   X,[7]         (0159) ;------------------------
0E91: 5D 3F    MOV   A,REG[63]     (0160) 
0E93: 08       PUSH  A             (0161) 
                                   (0162) ;------------------------
0E94: 21 08    AND   A,8           (0163) ;  Constant Definitions
0E96: B0 04    JNZ   0x0E9B        (0164) ;------------------------
0E98: 18       POP   A             (0165) 
0E99: 80 5E    JMP   0x0EF8        (0166) 
                                   (0167) ;------------------------
                                   (0168) ; Variable Allocation
0E9B: 18       POP   A             (0169) ;------------------------
                                   (0170) 
                                   (0171) 
0E9C: 21 E0    AND   A,224         (0172) ;---------------------------------------------------
0E9E: A0 12    JZ    0x0EB1        (0173) ; Insert your custom declarations above this banner
                                   (0174) ;---------------------------------------------------
0EA0: 2C 06    OR    [6],A         (0175) ;@PSoC_UserCode_END@ (Do not change this line.)
0EA2: 49 3E 00 TST   REG[62],0     (0176) 
0EA5: 21 20    AND   A,32          (0177) 
0EA7: A0 50    JZ    0x0EF8        (0178) AREA UserModules (ROM, REL, CON)
                                   (0179) 
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: _COMP_SERIAL_TX_ISR
0EA9: 41 3F FE AND   REG[63],254   (0182) ;
0EAC: 43 3F 01 OR    REG[63],1     (0183) ;  DESCRIPTION:
0EAF: 80 48    JMP   0x0EF8        (0184) ;     UART TX interrupt handler for instance COMP_SERIAL.
                                   (0185) ;
                                   (0186) ;     This is a place holder function.  If the user requires use of an interrupt
                                   (0187) ;     handler for this function, then place code where specified.
0EB1: 5D 3E    MOV   A,REG[62]     (0188) ;-----------------------------------------------------------------------------
                                   (0189) 
                                   (0190) _COMP_SERIAL_TX_ISR:
0EB3: 47 06 01 TST   [6],1         (0191)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
0EB6: B0 41    JNZ   0x0EF8        (0192)    ;---------------------------------------------------
                                   (0193)    ; Insert your custom code below this banner
0EB8: 39 3B    CMP   A,59          (0194)    ;---------------------------------------------------
0EBA: B0 14    JNZ   0x0ECF        (0195)    ;   NOTE: interrupt service routines must preserve
0EBC: 2E 06 01 OR    [6],1         (0196)    ;   the values of the A and X CPU registers.
                                   (0197)    
                                   (0198)    ;---------------------------------------------------
                                   (0199)    ; Insert your custom code above this banner
0EBF: 62 D3 00 MOV   REG[211],0    (0200)    ;---------------------------------------------------
0EC2: 70 3F    AND   F,63
0EC4: 71 80    OR    F,128         (0201)    ;@PSoC_UserCode_END@ (Do not change this line.)
0EC6: 56 08 00 MOV   [X+8],0       (0202)    reti
0EC9: 70 3F    AND   F,63
0ECB: 71 00    OR    F,0           (0203) 
0ECD: 80 2A    JMP   0x0EF8        (0204) 
                                   (0205) ;-----------------------------------------------------------------------------
                                   (0206) ;  FUNCTION NAME: _COMP_SERIAL_RX_ISR
                                   (0207) ;
                                   (0208) ;  DESCRIPTION:
                                   (0209) ;     UART RX interrupt handler for instance COMP_SERIAL.
                                   (0210) ;     This ISR handles the background processing of received characters if
                                   (0211) ;     the buffer is enabled.
                                   (0212) ;
                                   (0213) ;
                                   (0214) ;  The following assumes that the RX buffer feature has been enabled.
                                   (0215) ;
                                   (0216) ;  SIDE EFFECTS:
                                   (0217) ;     There are 3 posible errors that may occur with the serial port.
0ECF: 39 20    CMP   A,32          (0218) ;      1) Parity Error
0ED1: C0 26    JC    0x0EF8        (0219) ;      2) Framing Error
                                   (0220) ;      3) OverRun Error
                                   (0221) ;
                                   (0222) ;  This user module check for parity and framing error.  If either of these
                                   (0223) ;  two errors are detected, the data is read and ignored.  When an overRun
0ED3: 62 D3 00 MOV   REG[211],0    (0224) ;  error occurs, the last byte was lost, but the current byte is valid.  For
0ED6: 3C 07 3F CMP   [7],63        (0225) ;  this reason this error is ignored at this time.  Code could be added to
0ED9: C0 11    JC    0x0EEB        (0226) ;  this ISR to set a flag if an error condition occurs.
0EDB: 70 3F    AND   F,63
0EDD: 71 80    OR    F,128         (0227) ;
0EDF: 56 08 00 MOV   [X+8],0       (0228) ;  THEORY of OPERATION:
0EE2: 70 3F    AND   F,63
0EE4: 71 00    OR    F,0           (0229) ;     When using the RX buffer feature, the ISR collects received characters
0EE6: 2E 06 10 OR    [6],16        (0230) ;     in a buffer until the user defined command terminator is detected.  After
0EE9: 80 0E    JMP   0x0EF8        (0231) ;     the command terminator is detected, the command bit is set and all other
0EEB: 70 3F    AND   F,63
                                   (0232) ;     characters will be ignored until the command bit is reset.  Up to
                                   (0233) ;     buffer_size - 1 characters will be collected waiting for a command
                                   (0234) ;     terminator.  After that, the characters will be discarded, although
0EED: 71 80    OR    F,128         (0235) ;     a command determinator will still cause the command bit to be set.
0EEF: 54 08    MOV   [X+8],A       (0236) ;
0EF1: 70 3F    AND   F,63
0EF3: 71 00    OR    F,0           (0237) ;-----------------------------------------------------------------------------
0EF5: 75       INC   X             (0238) _COMP_SERIAL_RX_ISR:
0EF6: 5A 07    MOV   [7],X         (0239) 
0EF8: 18       POP   A
                                   (0240)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0241)    ;---------------------------------------------------
                                   (0242)    ; Insert your custom code below this banner
0EF9: 60 D3    MOV   REG[211],A    (0243)    ;---------------------------------------------------
                                   (0244)    ;   NOTE: interrupt service routines must preserve
                                   (0245)    ;   the values of the A and X CPU registers.
                                   (0246) 
0EFB: 20       POP   X             (0247)    ;---------------------------------------------------
0EFC: 18       POP   A             (0248)    ; Insert your custom code above this banner
                                   (0249)    ;---------------------------------------------------
                                   (0250)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0251) 
                                   (0252) IF (COMP_SERIAL_RXBUF_ENABLE)
0EFE: 43 E1 40 OR    REG[225],64   (0253)    push A

FILE: lib\comp_serial.asm
0F01: 43 E1 80 OR    REG[225],128  (0180) ;;*****************************************************************************
                                   (0181) ;;*****************************************************************************
0F04: 7F       RET                 (0182) ;;  Filename:   COMP_SERIAL.asm
                                   (0183) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0184) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0185) ;;
                                   (0186) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                   (0187) ;;                22/24/25/26/27xxx families.
                                   (0188) ;;
                                   (0189) ;;
                                   (0190) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0191) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0192) ;;        This means it is the caller's responsibility to preserve any values
                                   (0193) ;;        in the X and A registers that are still needed after the API functions
                                   (0194) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0195) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0196) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0197) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0198) ;;-----------------------------------------------------------------------------
                                   (0199) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0200) ;;*****************************************************************************
                                   (0201) ;;*****************************************************************************
                                   (0202) 
                                   (0203) 
                                   (0204) include "m8c.inc"
                                   (0205) include "memory.inc"
                                   (0206) include "COMP_SERIAL.inc"
                                   (0207) 
                                   (0208) ;-----------------------------------------------
                                   (0209) ;  Global Symbols
                                   (0210) ;-----------------------------------------------
0F05: 41 E1 BF AND   REG[225],191  (0211) ;-------------------------------------------------------------------
0F08: 41 E1 7F AND   REG[225],127  (0212) ;  Declare the functions global for both assembler and C compiler.
                                   (0213) ;
0F0B: 7F       RET                 (0214) ;  Note that there are two names for each API. First name is
                                   (0215) ;  assembler reference. Name with underscore is name refence for
                                   (0216) ;  C compiler.  Calling function in C source code does not require
                                   (0217) ;  the underscore.
                                   (0218) ;-------------------------------------------------------------------
                                   (0219) export  COMP_SERIAL_SetTxIntMode
                                   (0220) export _COMP_SERIAL_SetTxIntMode
                                   (0221) export  COMP_SERIAL_EnableInt
                                   (0222) export _COMP_SERIAL_EnableInt
                                   (0223) export  COMP_SERIAL_DisableInt
                                   (0224) export _COMP_SERIAL_DisableInt
                                   (0225) 
                                   (0226) export  COMP_SERIAL_Start
                                   (0227) export _COMP_SERIAL_Start
                                   (0228) export  COMP_SERIAL_Stop
                                   (0229) export _COMP_SERIAL_Stop
                                   (0230) export  COMP_SERIAL_SendData
                                   (0231) export _COMP_SERIAL_SendData
                                   (0232) export  COMP_SERIAL_bReadTxStatus
                                   (0233) export _COMP_SERIAL_bReadTxStatus
                                   (0234) export  COMP_SERIAL_bReadRxData
                                   (0235) export _COMP_SERIAL_bReadRxData
                                   (0236) export  COMP_SERIAL_bReadRxStatus
                                   (0237) export _COMP_SERIAL_bReadRxStatus
                                   (0238) 
                                   (0239) export  COMP_SERIAL_IntCntl
                                   (0240) export _COMP_SERIAL_IntCntl
                                   (0241) 
                                   (0242) export  COMP_SERIAL_TxIntMode
                                   (0243) export _COMP_SERIAL_TxIntMode
                                   (0244) 
                                   (0245) export  COMP_SERIAL_PutSHexByte
                                   (0246) export _COMP_SERIAL_PutSHexByte
0F0C: 71 10    OR    F,16          (0247) export  COMP_SERIAL_PutSHexInt
0F0E: 21 01    AND   A,1           (0248) export _COMP_SERIAL_PutSHexInt
0F10: A0 07    JZ    0x0F18        (0249) 
0F12: 43 38 10 OR    REG[56],16    (0250) export  COMP_SERIAL_CPutString
0F15: 70 EF    AND   F,239         (0251) export _COMP_SERIAL_CPutString
                                   (0252) export  COMP_SERIAL_PutString
0F17: 7F       RET                 (0253) export _COMP_SERIAL_PutString
                                   (0254) export  COMP_SERIAL_PutChar
                                   (0255) export _COMP_SERIAL_PutChar
0F18: 41 38 EF AND   REG[56],239   (0256) export  COMP_SERIAL_Write
0F1B: 70 EF    AND   F,239         (0257) export _COMP_SERIAL_Write
                                   (0258) export  COMP_SERIAL_CWrite
0F1D: 7F       RET                 (0259) export _COMP_SERIAL_CWrite
                                   (0260) 
                                   (0261) export  COMP_SERIAL_cGetChar
                                   (0262) export _COMP_SERIAL_cGetChar
                                   (0263) export  COMP_SERIAL_cReadChar
                                   (0264) export _COMP_SERIAL_cReadChar
                                   (0265) export  COMP_SERIAL_iReadChar
                                   (0266) export _COMP_SERIAL_iReadChar
                                   (0267) export  COMP_SERIAL_PutCRLF
                                   (0268) export _COMP_SERIAL_PutCRLF
                                   (0269) 
                                   (0270) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0271) export  COMP_SERIAL_CmdReset
                                   (0272) export _COMP_SERIAL_CmdReset
                                   (0273) export  COMP_SERIAL_bCmdCheck
                                   (0274) export _COMP_SERIAL_bCmdCheck
                                   (0275) export  COMP_SERIAL_bCmdLength
                                   (0276) export _COMP_SERIAL_bCmdLength
                                   (0277) export  COMP_SERIAL_bErrCheck
                                   (0278) export _COMP_SERIAL_bErrCheck
                                   (0279) 
                                   (0280) export  COMP_SERIAL_szGetParam
                                   (0281) export _COMP_SERIAL_szGetParam
                                   (0282) export  COMP_SERIAL_szGetRestOfParams
                                   (0283) export _COMP_SERIAL_szGetRestOfParams
                                   (0284) ENDIF
                                   (0285) 
                                   (0286) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0287) ; WARNING WARNING WARNING
                                   (0288) ; The following exports are for backwards compatibility only and should
                                   (0289) ; not be used for new designs. They may be eliminated in a future release.
0F1E: 29 01    OR    A,1           (0290) ; Their status is "NO FURTHER MAINTENANCE". 
0F20: 60 3B    MOV   REG[59],A     (0291) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F22: 60 3F    MOV   REG[63],A     (0292) export  bCOMP_SERIAL_ReadTxStatus
                                   (0293) export _bCOMP_SERIAL_ReadTxStatus
0F24: 91 2A    CALL  0x1050        (0294) export  bCOMP_SERIAL_ReadRxData
                                   (0295) export _bCOMP_SERIAL_ReadRxData
                                   (0296) export  bCOMP_SERIAL_ReadRxStatus
0F26: 7F       RET                 (0297) export _bCOMP_SERIAL_ReadRxStatus
                                   (0298) 	
                                   (0299) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0300) ;             END WARNING
                                   (0301) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0302) 
                                   (0303) ;-----------------------------------------------
                                   (0304) ; Variable Allocation
                                   (0305) ;-----------------------------------------------
                                   (0306) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0307)     
                                   (0308) area COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0309)     
                                   (0310)  ptrParam:   BLK  1
                                   (0311) 
                                   (0312) ENDIF
                                   (0313) 
                                   (0314) area text (ROM,REL)
                                   (0315) 
                                   (0316) ;-----------------------------------------------
                                   (0317) ;  EQUATES
                                   (0318) ;-----------------------------------------------
                                   (0319) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                   (0320) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                   (0321) 
                                   (0322) area UserModules (ROM, REL, CON)
                                   (0323) 
                                   (0324) ;=============================================================================
0F27: 41 3B FE AND   REG[59],254   (0325) ;=============================================================================
0F2A: 41 3F FE AND   REG[63],254   (0326) ;
                                   (0327) ;     Low-Level Commands
0F2D: 7F       RET                 (0328) ;
                                   (0329) ;=============================================================================
                                   (0330) ;=============================================================================
                                   (0331) 
                                   (0332) .SECTION
                                   (0333) ;-----------------------------------------------------------------------------
                                   (0334) ;  FUNCTION NAME: COMP_SERIAL_EnableInt
                                   (0335) ;
                                   (0336) ;  DESCRIPTION:
                                   (0337) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                   (0338) ;     bit associated with this User Module. Remember to call the global
                                   (0339) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0340) ;-----------------------------------------------------------------------------
                                   (0341) ;
                                   (0342) ;  ARGUMENTS:
                                   (0343) ;     none.
                                   (0344) ;
                                   (0345) ;  RETURNS:
                                   (0346) ;     none.
                                   (0347) ;
                                   (0348) ;  SIDE EFFECTS:
                                   (0349) ;    The A and X registers may be modified by this or future implementations
                                   (0350) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
                                   (0354) ;
                                   (0355)  COMP_SERIAL_EnableInt:
0F2E: 60 39    MOV   REG[57],A     (0356) _COMP_SERIAL_EnableInt:
                                   (0357)    RAM_PROLOGUE RAM_USE_CLASS_1
0F30: 7F       RET                 (0358)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0359)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0360)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0361)    ret
                                   (0362) .ENDSECTION
                                   (0363) 
                                   (0364)     
                                   (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: COMP_SERIAL_DisableInt
                                   (0368) ;
                                   (0369) ;  DESCRIPTION:
                                   (0370) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                   (0371) ;     associated with this User Module.
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:
                                   (0375) ;     none.
                                   (0376) ;
                                   (0377) ;  RETURNS:
                                   (0378) ;     none.
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  COMP_SERIAL_DisableInt:
                                   (0388) _COMP_SERIAL_DisableInt:
0F31: 5D 3B    MOV   A,REG[59]     (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0390)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
0F33: 7F       RET                 (0391)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0392)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0393)    ret
                                   (0394) .ENDSECTION
                                   (0395) 
                                   (0396) 
                                   (0397) .SECTION
                                   (0398) ;-----------------------------------------------------------------------------
                                   (0399) ;  FUNCTION NAME: COMP_SERIAL_SetTxIntMode(BYTE bTxIntMode)
                                   (0400) ;
                                   (0401) ;  DESCRIPTION:
                                   (0402) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0403) ;-----------------------------------------------------------------------------
                                   (0404) ;
                                   (0405) ;  ARGUMENTS:
                                   (0406) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0407) ;        Passed in the A register
                                   (0408) ;
                                   (0409) ;  RETURNS:
                                   (0410) ;     none.
                                   (0411) ;
                                   (0412) ;  SIDE EFFECTS:
                                   (0413) ;    The A and X registers may be modified by this or future implementations
                                   (0414) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0415) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0416) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0417) ;    functions.
                                   (0418) ;
                                   (0419) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0420) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0421) ;     on TX register empty or TX transmit complete
0F34: 5D 3E    MOV   A,REG[62]     (0422) ;
                                   (0423)  COMP_SERIAL_SetTxIntMode:
0F36: 7F       RET                 (0424) _COMP_SERIAL_SetTxIntMode:
                                   (0425)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0426)    M8C_SetBank1
                                   (0427)    and   A, COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0428)    jz    .SetModeRegEmpty
                                   (0429)    or    REG[COMP_SERIAL_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0430)    M8C_SetBank0
                                   (0431)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0432)    ret
                                   (0433) 
                                   (0434) .SetModeRegEmpty:
                                   (0435)    and   REG[COMP_SERIAL_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0436)    M8C_SetBank0
                                   (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0438)    ret
                                   (0439) .ENDSECTION
                                   (0440) 
                                   (0441) 
                                   (0442) .SECTION
                                   (0443) ;-----------------------------------------------------------------------------
                                   (0444) ;  FUNCTION NAME: COMP_SERIAL_Start(BYTE bParity)
                                   (0445) ;
                                   (0446) ;  DESCRIPTION:
                                   (0447) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0448) ;-----------------------------------------------------------------------------
                                   (0449) ;
                                   (0450) ;  ARGUMENTS:
                                   (0451) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                   (0452) ;        Passed in the A register.
                                   (0453) ;
                                   (0454) ;  RETURNS:
                                   (0455) ;     none.
0F37: 5D 3F    MOV   A,REG[63]     (0456) ;
                                   (0457) ;  SIDE EFFECTS:
0F39: 7F       RET                 (0458) ;    The A and X registers may be modified by this or future implementations
                                   (0459) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0460) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0461) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0462) ;    functions.
                                   (0463) ;
                                   (0464)  COMP_SERIAL_Start:
                                   (0465) _COMP_SERIAL_Start:
                                   (0466)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0467)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                   (0468) 
                                   (0469)    or    A, bfCONTROL_REG_START_BIT
                                   (0470)    mov   REG[COMP_SERIAL_TX_CONTROL_REG], A
                                   (0471)    mov   REG[COMP_SERIAL_RX_CONTROL_REG], A
                                   (0472) IF ( COMP_SERIAL_RXBUF_ENABLE )
                                   (0473)    call  _COMP_SERIAL_CmdReset
                                   (0474) ENDIF
                                   (0475)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0476)    ret
                                   (0477) .ENDSECTION
                                   (0478) 
                                   (0479) 
                                   (0480) .SECTION
                                   (0481) ;-----------------------------------------------------------------------------
                                   (0482) ;  FUNCTION NAME: COMP_SERIAL_Stop
                                   (0483) ;
                                   (0484) ;  DESCRIPTION:
                                   (0485) ;     Disables UART operation.
                                   (0486) ;-----------------------------------------------------------------------------
                                   (0487) ;
                                   (0488) ;  ARGUMENTS:
0F3A: 21 01    AND   A,1           (0489) ;     none.
0F3C: 71 10    OR    F,16          (0490) ;
0F3E: 39 01    CMP   A,1           (0491) ;  RETURNS:
0F40: A0 06    JZ    0x0F47        (0492) ;     none.
                                   (0493) ;
0F42: 41 38 EF AND   REG[56],239   (0494) ;  SIDE EFFECTS:
0F45: 80 04    JMP   0x0F4A        (0495) ;    The A and X registers may be modified by this or future implementations
                                   (0496) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0497) ;    the Large Memory Model.  When necessary, it is the calling function's
0F47: 43 38 10 OR    REG[56],16    (0498) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0499) ;    functions.
                                   (0500) ;
0F4A: 70 EF    AND   F,239         (0501)  COMP_SERIAL_Stop:
                                   (0502) _COMP_SERIAL_Stop:
0F4C: 7F       RET                 (0503)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0504)    and   REG[COMP_SERIAL_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0505)    and   REG[COMP_SERIAL_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0506)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0507)    ret
                                   (0508) .ENDSECTION
                                   (0509) 
                                   (0510) 
                                   (0511) .SECTION
                                   (0512) ;-----------------------------------------------------------------------------
                                   (0513) ;  FUNCTION NAME: COMP_SERIAL_SendData
                                   (0514) ;
                                   (0515) ;  DESCRIPTION:
                                   (0516) ;     Initiates a transmission of data.
                                   (0517) ;-----------------------------------------------------------------------------
                                   (0518) ;
                                   (0519) ;  ARGUMENTS:
                                   (0520) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                   (0521) ;
                                   (0522) ;  RETURNS:
                                   (0523) ;     none.
                                   (0524) ;
                                   (0525) ;  SIDE EFFECTS:
                                   (0526) ;    The A and X registers may be modified by this or future implementations
                                   (0527) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0528) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0529) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0530) ;    functions.
                                   (0531) ;
                                   (0532)  COMP_SERIAL_SendData:
                                   (0533) _COMP_SERIAL_SendData:
                                   (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0535)    mov REG[COMP_SERIAL_TX_BUFFER_REG], A
0F4D: 08       PUSH  A             (0536)    RAM_EPILOGUE RAM_USE_CLASS_1
0F4E: 21 01    AND   A,1           (0537)    ret
0F50: A0 06    JZ    0x0F57        (0538) .ENDSECTION
                                   (0539) 
0F52: 43 E1 80 OR    REG[225],128  (0540) 
0F55: 80 04    JMP   0x0F5A        (0541) .SECTION
                                   (0542) ;-----------------------------------------------------------------------------
                                   (0543) ;  FUNCTION NAME: COMP_SERIAL_bReadTxStatus
0F57: 41 E1 7F AND   REG[225],127  (0544) ;
                                   (0545) ;  DESCRIPTION:
                                   (0546) ;     Reads the Tx Status bits in the Control/Status register.
0F5A: 18       POP   A             (0547) ;-----------------------------------------------------------------------------
0F5B: 21 02    AND   A,2           (0548) ;
0F5D: A0 06    JZ    0x0F64        (0549) ;  ARGUMENTS:
                                   (0550) ;     none.
0F5F: 43 E1 40 OR    REG[225],64   (0551) ;
0F62: 80 04    JMP   0x0F67        (0552) ;  RETURNS:
                                   (0553) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                   (0554) ;           status bits (returned in A)
0F64: 41 E1 BF AND   REG[225],191  (0555) ;
                                   (0556) ;  SIDE EFFECTS:
                                   (0557) ;    The A and X registers may be modified by this or future implementations
                                   (0558) ;    of this function.  The same is true for all RAM page pointer registers in
0F67: 7F       RET                 (0559) ;    the Large Memory Model.  When necessary, it is the calling function's
0F68: 30       HALT  
0F69: 31 32    XOR   A,50
0F6B: 33 34    XOR   A,[X+52]
0F6D: 35 36    XOR   [X+54],A
0F6F: 37 38 39 XOR   [X+56],57
0F72: 41 42 43 AND   REG[66],67
0F75: 44 45 46 OR    REG[X+69],70
                                   (0560) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0561) ;    functions.
                                   (0562) ;
                                   (0563)  COMP_SERIAL_bReadTxStatus:
                                   (0564) _COMP_SERIAL_bReadTxStatus:
                                   (0565)  bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0566) _bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0567)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0568)    mov A,  REG[COMP_SERIAL_TX_CONTROL_REG]
                                   (0569)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0570)    ret
                                   (0571) .ENDSECTION
                                   (0572) 
                                   (0573) 
                                   (0574) .SECTION
                                   (0575) ;-----------------------------------------------------------------------------
                                   (0576) ;  FUNCTION NAME: COMP_SERIAL_bReadRxData
                                   (0577) ;
                                   (0578) ;  DESCRIPTION:
                                   (0579) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0580) ;     sure data is valid.
                                   (0581) ;-----------------------------------------------------------------------------
                                   (0582) ;
                                   (0583) ;  ARGUMENTS:
                                   (0584) ;     none.
                                   (0585) ;
                                   (0586) ;  RETURNS:
                                   (0587) ;     bRxData - returned in A.
                                   (0588) ;
                                   (0589) ;  SIDE EFFECTS:
                                   (0590) ;    The A and X registers may be modified by this or future implementations
                                   (0591) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0592) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0593) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0594) ;    functions.
                                   (0595) ;
                                   (0596)  COMP_SERIAL_bReadRxData:
                                   (0597) _COMP_SERIAL_bReadRxData:
                                   (0598)  bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0599) _bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0F78: 08       PUSH  A             (0601)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]
0F79: 67       ASR   A             (0602)    RAM_EPILOGUE RAM_USE_CLASS_1
0F7A: 67       ASR   A             (0603)    ret
0F7B: 67       ASR   A             (0604) .ENDSECTION
0F7C: 67       ASR   A             (0605) 
0F7D: 21 0F    AND   A,15          (0606) 
0F7F: FF E7    INDEX 0x0F68        (0607) .SECTION
0F81: 90 0F    CALL  0x0F92        (0608) ;-----------------------------------------------------------------------------
0F83: 18       POP   A             (0609) ;  FUNCTION NAME: COMP_SERIAL_bReadRxStatus
0F84: 21 0F    AND   A,15          (0610) ;
0F86: FF E0    INDEX 0x0F68        (0611) ;  DESCRIPTION:
0F88: 90 08    CALL  0x0F92        (0612) ;     Reads the RX Status bits in the Control/Status register.
                                   (0613) ;-----------------------------------------------------------------------------
0F8A: 7F       RET                 (0614) ;
                                   (0615) ;  ARGUMENTS:
                                   (0616) ;     none.
                                   (0617) ;
                                   (0618) ;  RETURNS:
                                   (0619) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                   (0620) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0621) ;           returned in A.
                                   (0622) ;
                                   (0623) ;  SIDE EFFECTS:
                                   (0624) ;    The A and X registers may be modified by this or future implementations
                                   (0625) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0626) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0627) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0628) ;    functions.
                                   (0629) ;
                                   (0630)  COMP_SERIAL_bReadRxStatus:
                                   (0631) _COMP_SERIAL_bReadRxStatus:
                                   (0632)  bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0633) _bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0634)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0635)    mov A,  REG[COMP_SERIAL_RX_CONTROL_REG]
                                   (0636)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0637)    ret
                                   (0638) .ENDSECTION
                                   (0639) 
                                   (0640) 
                                   (0641) .SECTION
                                   (0642) ;-----------------------------------------------------------------------------
                                   (0643) ;  FUNCTION NAME: COMP_SERIAL_TxIntMode
                                   (0644) ;
0F8B: 4B       SWAP  A,X           (0645) ;  DESCRIPTION:
0F8C: 9F EA    CALL  0x0F78        (0646) ;     This function is used to change the TX Interrupt mode.
0F8E: 5B       MOV   A,X           (0647) ;-----------------------------------------------------------------------------
0F8F: 9F E7    CALL  0x0F78        (0648) ;
                                   (0649) ;  ARGUMENTS:
0F91: 7F       RET                 (0650) ;     A => Tx Interrupt mode
0F92: 49 3B 10 TST   REG[59],16
                                   (0651) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                   (0652) ;             1 => Interrupt on TX Complete
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none.
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
                                   (0663) ;
                                   (0664)  COMP_SERIAL_TxIntMode:
                                   (0665) _COMP_SERIAL_TxIntMode:
                                   (0666)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0667) 
                                   (0668)    and  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0669)    M8C_SetBank1
                                   (0670)    cmp  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0671)    jz   .SetTxCmpMode
                                   (0672) 
                                   (0673)    and  reg[COMP_SERIAL_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
                                   (0674)    jmp  .TxIntMode_End
                                   (0675) 
                                   (0676) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
                                   (0677)    or   reg[COMP_SERIAL_TX_FUNC_REG],0x10
                                   (0678) 
                                   (0679) .TxIntMode_End:
                                   (0680)    M8C_SetBank0
                                   (0681)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0682)    ret
                                   (0683) .ENDSECTION
                                   (0684) 
                                   (0685)     
0F95: AF FC    JZ    0x0F92        (0686) .SECTION
0F97: 60 39    MOV   REG[57],A
                                   (0687) ;-----------------------------------------------------------------------------
0F99: 7F       RET                 (0688) ;  FUNCTION NAME: COMP_SERIAL_IntCntl
                                   (0689) ;
                                   (0690) ;  DESCRIPTION:
                                   (0691) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                   (0692) ;-----------------------------------------------------------------------------
                                   (0693) ;
                                   (0694) ;  ARGUMENTS:
                                   (0695) ;     A => Interrupt mask
                                   (0696) ;
                                   (0697) ;  RETURNS:
                                   (0698) ;     none.
                                   (0699) ;
                                   (0700) ;  SIDE EFFECTS:
                                   (0701) ;    The A and X registers may be modified by this or future implementations
                                   (0702) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0703) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0704) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0705) ;    functions.
                                   (0706) ;
                                   (0707) ;  THEORY of OPERATION or PROCEDURE:
                                   (0708) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                   (0709) ;     and RX block.
                                   (0710) ;
                                   (0711)  COMP_SERIAL_IntCntl:
                                   (0712) _COMP_SERIAL_IntCntl:
                                   (0713)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0714) 
                                   (0715)    push A
                                   (0716)    and  A,COMP_SERIAL_ENABLE_RX_INT
                                   (0717)    jz   .DisRxInt
                                   (0718)      ; Enable Rx Interrupt
                                   (0719)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0F9A: 49 3F 08 TST   REG[63],8     (0720)    jmp  .CheckTxInt
0F9D: AF FC    JZ    0x0F9A        (0721) .DisRxInt:
0F9F: 5D 3E    MOV   A,REG[62]     (0722)      ; Disable Rx Interrupt
                                   (0723)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0FA1: 7F       RET                 (0724) 
                                   (0725) .CheckTxInt:
                                   (0726)    pop  A
                                   (0727)    and  A,COMP_SERIAL_ENABLE_TX_INT
                                   (0728)    jz   .DisTxInt
                                   (0729)      ; Enable Tx Interrupt
                                   (0730)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0731)    jmp  .End_IntCntl
                                   (0732) .DisTxInt:
                                   (0733)      ; Disable Tx Interrupt
                                   (0734)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0735) 
                                   (0736) .End_IntCntl:
                                   (0737)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0738)    ret
                                   (0739) .ENDSECTION
                                   (0740) 
                                   (0741) 
                                   (0742) ;=============================================================================
                                   (0743) ;=============================================================================
                                   (0744) ;
                                   (0745) ;     High-Level Commands
                                   (0746) ;
                                   (0747) ;=============================================================================
                                   (0748) ;=============================================================================
                                   (0749) 
                                   (0750) 
                                   (0751) ;-----------------------------------------------------------------------------
                                   (0752) ;  FUNCTION NAME: COMP_SERIAL_PutSHexByte
                                   (0753) ;
                                   (0754) ;  DESCRIPTION:
0FA2: 5D 3F    MOV   A,REG[63]     (0755) ;     Print a byte in Hex (two characters) to the UART Tx
0FA4: 08       PUSH  A             (0756) ;-----------------------------------------------------------------------------
0FA5: 21 08    AND   A,8           (0757) ;
0FA7: B0 04    JNZ   0x0FAC        (0758) ;  ARGUMENTS:
0FA9: 18       POP   A             (0759) ;     A  => (BYTE) Data/char to be printed
0FAA: 80 0B    JMP   0x0FB6        (0760) ;
                                   (0761) ;  RETURNS:
                                   (0762) ;     none.
0FAC: 5D 3E    MOV   A,REG[62]     (0763) ;
0FAE: 4B       SWAP  A,X           (0764) ;  SIDE EFFECTS:
                                   (0765) ;    The A and X registers may be modified by this or future implementations
0FAF: 18       POP   A             (0766) ;    of this function.  The same is true for all RAM page pointer registers in
0FB0: 21 A0    AND   A,160         (0767) ;    the Large Memory Model.  When necessary, it is the calling function's
0FB2: B0 03    JNZ   0x0FB6        (0768) ;    responsibility to perserve their values across calls to fastcall16 
0FB4: 4B       SWAP  A,X           (0769) ;    functions.
                                   (0770) ;
0FB5: 7F       RET                 (0771) .LITERAL
                                   (0772) COMP_SERIAL_HEX_STR:
                                   (0773)      DS    "0123456789ABCDEF"
0FB6: 50 00    MOV   A,0           (0774) .ENDLITERAL
                                   (0775) 
                                   (0776) .SECTION
                                   (0777)  COMP_SERIAL_PutSHexByte:
0FB8: 7F       RET                 (0778) _COMP_SERIAL_PutSHexByte:
                                   (0779)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0780)    push  A                             ; Save lower nibble
                                   (0781)    asr   A                             ; Shift high nibble to right
                                   (0782)    asr   A
                                   (0783)    asr   A
                                   (0784)    asr   A
                                   (0785)    and   A,0Fh                         ; Mask off nibble
                                   (0786)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0787)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0788)    pop   A                             ; Restore value
                                   (0789)    and   A,0Fh                         ; Mask off lower nibble
                                   (0790)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0791)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0792)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0793)    ret
                                   (0794) .ENDSECTION
                                   (0795) 
                                   (0796) 
                                   (0797) .SECTION
                                   (0798) ;-----------------------------------------------------------------------------
                                   (0799) ;  FUNCTION NAME: COMP_SERIAL_PutSHexInt
                                   (0800) ;
                                   (0801) ;  DESCRIPTION:
                                   (0802) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0803) ;-----------------------------------------------------------------------------
                                   (0804) ;
                                   (0805) ;  ARGUMENTS:
                                   (0806) ;     Pointer to string
                                   (0807) ;     A  => ASB of Int
                                   (0808) ;     X  => MSB of Int
                                   (0809) ;
                                   (0810) ;  RETURNS:
                                   (0811) ;     none.
                                   (0812) ;
                                   (0813) ;  SIDE EFFECTS:
                                   (0814) ;    The A and X registers may be modified by this or future implementations
                                   (0815) ;    of this function.  The same is true for all RAM page pointer registers in
0FB9: 5D 3F    MOV   A,REG[63]     (0816) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0817) ;    responsibility to perserve their values across calls to fastcall16 
0FBB: 21 E8    AND   A,232         (0818) ;    functions.
0FBD: 08       PUSH  A             (0819) ;
0FBE: 21 08    AND   A,8           (0820) 
0FC0: B0 07    JNZ   0x0FC8        (0821)  COMP_SERIAL_PutSHexInt:
0FC2: 18       POP   A             (0822) _COMP_SERIAL_PutSHexInt:
0FC3: 29 01    OR    A,1           (0823)    RAM_PROLOGUE RAM_USE_CLASS_1
0FC5: 4B       SWAP  A,X           (0824)    swap  A,X
0FC6: 80 07    JMP   0x0FCE        (0825)    call  COMP_SERIAL_PutSHexByte       ; Print MSB
                                   (0826)    mov   A,X                           ; Move LSB into position
                                   (0827)    call  COMP_SERIAL_PutSHexByte       ; Print LSB
0FC8: 18       POP   A             (0828)    RAM_EPILOGUE RAM_USE_CLASS_1
0FC9: 21 E0    AND   A,224         (0829)    ret
0FCB: 4B       SWAP  A,X           (0830) .ENDSECTION
0FCC: 5D 3E    MOV   A,REG[62]     (0831) 
                                   (0832) 
                                   (0833) .SECTION
                                   (0834) ;-----------------------------------------------------------------------------
                                   (0835) ;  FUNCTION NAME: COMP_SERIAL_PutChar
0FCE: 7F       RET                 (0836) ;
                                   (0837) ;  DESCRIPTION:
                                   (0838) ;     Send character out through UART TX port.
                                   (0839) ;-----------------------------------------------------------------------------
                                   (0840) ;
                                   (0841) ;  ARGUMENTS:
                                   (0842) ;     A has Character to send to UART Tx Port
                                   (0843) ;
                                   (0844) ;  RETURNS:
                                   (0845) ;     none
                                   (0846) ;
                                   (0847) ;  SIDE EFFECTS:
                                   (0848) ;    The A and X registers may be modified by this or future implementations
                                   (0849) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0850) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0851) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0852) ;    functions.
                                   (0853) ;
                                   (0854) 
                                   (0855)    macro InLinePutChar( Source )
                                   (0856) .BufEmptyWaitLoop:
                                   (0857)    tst REG[COMP_SERIAL_TX_CONTROL_REG], COMP_SERIAL_TX_BUFFER_EMPTY     ; Check Tx Status
                                   (0858)    jz  .BufEmptyWaitLoop
                                   (0859)    mov REG[COMP_SERIAL_TX_BUFFER_REG], @Source     ; Write data to Tx Port
                                   (0860)    endm
                                   (0861) 
                                   (0862)  COMP_SERIAL_PutChar:
                                   (0863) _COMP_SERIAL_PutChar:
                                   (0864)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0865)    InLinePutChar A
                                   (0866)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0867)    ret
0FCF: 70 BF    AND   F,191         (0868) .ENDSECTION
0FD1: 60 D3    MOV   REG[211],A    (0869) 
                                   (0870) 
0FD3: 52 00    MOV   A,[X+0]       (0871) .SECTION
0FD5: A0 06    JZ    0x0FDC        (0872) ;-----------------------------------------------------------------------------
0FD7: 9F B9    CALL  0x0F92        (0873) ;  FUNCTION NAME: COMP_SERIAL_cGetChar
0FD9: 75       INC   X             (0874) ;
0FDA: 8F F8    JMP   0x0FD3        (0875) ;  DESCRIPTION:
0FDC: 70 3F    AND   F,63
                                   (0876) ;     Read character from UART RX port.
                                   (0877) ;-----------------------------------------------------------------------------
0FDE: 71 C0    OR    F,192         (0878) ;
0FE0: 7F       RET                 (0879) ;  ARGUMENTS:
                                   (0880) ;      none
                                   (0881) ;
                                   (0882) ;  RETURNS:
                                   (0883) ;     char that is returned from UART
                                   (0884) ;
                                   (0885) ;  SIDE EFFECTS:
                                   (0886) ;    The A and X registers may be modified by this or future implementations
                                   (0887) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0888) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0889) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0890) ;    functions.
                                   (0891) ;
                                   (0892) ;    Program flow will stay in this function until a character is received.
                                   (0893) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0894) ;    the delay between characters is less than the watchdog timeout.
                                   (0895) ;
                                   (0896)  COMP_SERIAL_cGetChar:
                                   (0897) _COMP_SERIAL_cGetChar:
                                   (0898)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0899)    tst REG[COMP_SERIAL_RX_CONTROL_REG],COMP_SERIAL_RX_REG_FULL    ; Check if a character is ready
                                   (0900)    jz  COMP_SERIAL_cGetChar                              ; If not loop
                                   (0901)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]                 ; Get character
                                   (0902)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0903)    ret
                                   (0904) .ENDSECTION
                                   (0905) 
                                   (0906) 
                                   (0907) .SECTION
                                   (0908) ;-----------------------------------------------------------------------------
                                   (0909) ;  FUNCTION NAME: COMP_SERIAL_cReadChar
                                   (0910) ;
                                   (0911) ;  DESCRIPTION:
                                   (0912) ;     Read character from UART RX port.
                                   (0913) ;-----------------------------------------------------------------------------
                                   (0914) ;
0FE1: 70 BF    AND   F,191         (0915) ;  ARGUMENTS:
0FE3: 62 D3 07 MOV   REG[211],7    (0916) ;      none
0FE6: 4F       MOV   X,SP          (0917) ;
                                   (0918) ;  RETURNS:
                                   (0919) ;     char that is returned from UART
0FE7: 52 FB    MOV   A,[X-5]       (0920) ;
0FE9: A0 1A    JZ    0x1004        (0921) ;  SIDE EFFECTS:
0FEB: 7B FB    DEC   [X-5]         (0922) ;    The A and X registers may be modified by this or future implementations
                                   (0923) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0924) ;    the Large Memory Model.  When necessary, it is the calling function's
0FED: 52 FC    MOV   A,[X-4]       (0925) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0926) ;    functions.
                                   (0927) ;
0FEF: 59 FD    MOV   X,[X-3]       (0928) ;    A valid 0x00 character will be ignored, since a 0x00 return value
0FF1: 60 D3    MOV   REG[211],A    (0929) ;    implies a valid character or an error condition occured.
0FF3: 52 00    MOV   A,[X+0]       (0930) ;
0FF5: 49 3B 10 TST   REG[59],16
0FF8: AF FC    JZ    0x0FF5        (0931)  COMP_SERIAL_cReadChar:
0FFA: 60 39    MOV   REG[57],A
0FFC: 4F       MOV   X,SP          (0932) _COMP_SERIAL_cReadChar:
0FFD: 62 D3 07 MOV   REG[211],7    (0933)    RAM_PROLOGUE RAM_USE_CLASS_1
1000: 77 FD    INC   [X-3]         (0934)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
1002: 8F E4    JMP   0x0FE7        (0935)    push A
1004: 70 3F    AND   F,63
                                   (0936)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (0937)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
1006: 71 C0    OR    F,192         (0938)    pop  A
1008: 7F       RET                 (0939)    jmp  .RX_NO_VALID_CHAR
                                   (0940) 
                                   (0941) .RX_DATA_RDY:
                                   (0942)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]          
                                   (0943)    swap A,X                                                ; determine if data is valid
                                   (0944) 
                                   (0945)    pop  A                                                  ; Check for errors
                                   (0946)    and  A,(COMP_SERIAL_RX_PARITY_ERROR | COMP_SERIAL_RX_FRAMING_ERROR)
                                   (0947)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0948)    swap A,X                                                ; Put data in A and exit
                                   (0949)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0950)    ret
                                   (0951) 
                                   (0952) .RX_NO_VALID_CHAR:
                                   (0953)    mov A,0x00                                              ; Zero out character
                                   (0954) 
                                   (0955)  End_COMP_SERIAL_cReadChar:
                                   (0956)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0957)    ret
                                   (0958) .ENDSECTION
                                   (0959) 
                                   (0960) 
                                   (0961) .SECTION
                                   (0962) ;-----------------------------------------------------------------------------
                                   (0963) ;  FUNCTION NAME: COMP_SERIAL_iReadChar
                                   (0964) ;
                                   (0965) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0966) ;  to just set a value in the upper byte if error conditions exists.
                                   (0967) ;
                                   (0968) ;  DESCRIPTION:
                                   (0969) ;     Read character from UART RX port.
                                   (0970) ;-----------------------------------------------------------------------------
                                   (0971) ;
                                   (0972) ;  ARGUMENTS:
                                   (0973) ;      none
                                   (0974) ;
                                   (0975) ;  RETURNS:
                                   (0976) ;     An integer value is returned.  A negative value inplies and error
1009: 4F       MOV   X,SP          (0977) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0978) ;
100A: 3D FA 00 CMP   [X-6],0       (0979) ;     Error Codes:
100D: B0 06    JNZ   0x1014        (0980) ;        0x80CC    Parity Error
100F: 3D FB 00 CMP   [X-5],0       (0981) ;        0x40CC    Overrun Error
1012: A0 1D    JZ    0x1030        (0982) ;        0x20CC    Framing Error
                                   (0983) ;        0x01CC    No Data available
                                   (0984) ;
1014: 10       PUSH  X             (0985) ;  SIDE EFFECTS:
1015: 52 FC    MOV   A,[X-4]       (0986) ;    The A and X registers may be modified by this or future implementations
1017: 59 FD    MOV   X,[X-3]       (0987) ;    of this function.  The same is true for all RAM page pointer registers in
1019: 28       ROMX                (0988) ;    the Large Memory Model.  When necessary, it is the calling function's
101A: 49 3B 10 TST   REG[59],16
101D: AF FC    JZ    0x101A        (0989) ;    responsibility to perserve their values across calls to fastcall16 
101F: 60 39    MOV   REG[57],A
1021: 20       POP   X             (0990) ;    functions.
1022: 07 FD 01 ADD   [X-3],1       (0991) ;
1025: 0F FC 00 ADC   [X-4],0       (0992)  COMP_SERIAL_iReadChar:
1028: 17 FB 01 SUB   [X-5],1       (0993) _COMP_SERIAL_iReadChar:
102B: 1F FA 00 SBB   [X-6],0       (0994)    RAM_PROLOGUE RAM_USE_CLASS_1
102E: 8F DB    JMP   0x100A        (0995)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
1030: 70 3F    AND   F,63
                                   (0996)                                                            ; Mask only errors and data ready
                                   (0997)    and  A,(COMP_SERIAL_RX_ERROR|COMP_SERIAL_RX_REG_FULL)
1032: 71 C0    OR    F,192         (0998)    push A
1034: 7F       RET                 (0999)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (1000)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (1001)    pop  A
                                   (1002)    or   A,COMP_SERIAL_RX_NO_DATA                           ; Add no data flag
                                   (1003)    swap A,X
                                   (1004)    jmp  End_COMP_SERIAL_iReadChar
                                   (1005) 
                                   (1006) .RX_GET_DATA:
                                   (1007)    pop  A
                                   (1008)    and  A,COMP_SERIAL_RX_ERROR
                                   (1009)    swap A,X
                                   (1010)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]                  ; Read data first, then
                                   (1011)                                                            ; determine if data is valid
                                   (1012) 
                                   (1013)  End_COMP_SERIAL_iReadChar:
                                   (1014)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1015)    ret
                                   (1016) .ENDSECTION
                                   (1017) 
                                   (1018) 
                                   (1019) .SECTION
                                   (1020) ;-----------------------------------------------------------------------------
                                   (1021) ;  FUNCTION NAME: COMP_SERIAL_PutString
                                   (1022) ;
                                   (1023) ;  DESCRIPTION:
                                   (1024) ;     Send String out through UART TX port.
                                   (1025) ;-----------------------------------------------------------------------------
                                   (1026) ;
                                   (1027) ;  ARGUMENTS:
                                   (1028) ;     Pointer to String
1035: 08       PUSH  A             (1029) ;     A has MSB of string address
1036: 10       PUSH  X             (1030) ;     X has LSB of string address
1037: 28       ROMX                (1031) ;
1038: A0 0B    JZ    0x1044        (1032) ;  RETURNS:
103A: 9F 56    CALL  0x0F92        (1033) ;     none
103C: 20       POP   X             (1034) ;
103D: 18       POP   A             (1035) ;  SIDE EFFECTS:
103E: 75       INC   X             (1036) ;    The A and X registers may be modified by this or future implementations
103F: DF F5    JNC   0x1035        (1037) ;    of this function.  The same is true for all RAM page pointer registers in
1041: 74       INC   A             (1038) ;    the Large Memory Model.  When necessary, it is the calling function's
1042: 8F F2    JMP   0x1035        (1039) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1040) ;    functions.
                                   (1041) ;          
                                   (1042) ;    Currently only the page pointer registers listed below are modified: 
1044: 38 FE    ADD   SP,254        (1043) ;          IDX_PP
                                   (1044) ;
1046: 7F       RET                 (1045)  COMP_SERIAL_PutString:
                                   (1046) _COMP_SERIAL_PutString:
                                   (1047)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1048)    RAM_SETPAGE_IDX A
                                   (1049) .PutStringLoop:
                                   (1050)    mov   A,[X]                                   ; Get value pointed to by X
                                   (1051)    jz    End_PutString                           ; Check for end of string
                                   (1052)    call  COMP_SERIAL_PutChar                     ; Send character to Tx port
                                   (1053)    inc   X                                       ; Advance pointer to next character
                                   (1054)    jmp   .PutStringLoop                          ; Get next character
                                   (1055) 
                                   (1056) End_PutString:
                                   (1057)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1058)    ret
                                   (1059) .ENDSECTION
                                   (1060)     
                                   (1061) .SECTION
                                   (1062) ;-----------------------------------------------------------------------------
                                   (1063) ;  FUNCTION NAME: COMP_SERIAL_Write
                                   (1064) ;
                                   (1065) ;  DESCRIPTION:
                                   (1066) ;     Send String of length X to serial port
                                   (1067) ;-----------------------------------------------------------------------------
                                   (1068) ;
                                   (1069) ;  ARGUMENTS:
                                   (1070) ;     Pointer to String
                                   (1071) ;     [SP-5] Count of characters to send
                                   (1072) ;     [SP-4] has MSB of string address
1047: 50 0D    MOV   A,13          (1073) ;     [SP-3] has LSB of string address
1049: 9F 47    CALL  0x0F92        (1074) ;
104B: 50 0A    MOV   A,10          (1075) ;  RETURNS:
104D: 9F 43    CALL  0x0F92        (1076) ;     none
                                   (1077) ;
104F: 7F       RET                 (1078) ;  SIDE EFFECTS:
                                   (1079) ;    The A and X registers may be modified by this or future implementations
                                   (1080) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1082) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1083) ;    functions.
                                   (1084) ;          
                                   (1085) ;    Currently only the page pointer registers listed below are modified: 
                                   (1086) ;          IDX_PP
                                   (1087) ;
                                   (1088) CNT_LEN:    equ -5                               ; Length of data to send
                                   (1089) STR_MSB:    equ -4                               ; MSB pointer of string 
                                   (1090) STR_LSB:    equ -3                               ; LSB pointer of string 
                                   (1091) 
                                   (1092)  COMP_SERIAL_Write:
                                   (1093) _COMP_SERIAL_Write:
                                   (1094)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1095)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
                                   (1096)    mov   X, SP                                   ; Establish the frame pointer 
                                   (1097) 
                                   (1098) .NextByteLoop:
                                   (1099)    mov   A, [X+CNT_LEN]                          ; End of the string?
                                   (1100)    jz    .End_Write                              ;   Yes, prepare to exit
                                   (1101)    dec   [X+CNT_LEN]                             ; Decrement counter
                                   (1102) 
                                   (1103)    IF SYSTEM_LARGE_MEMORY_MODEL
                                   (1104)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                   (1105)    ENDIF
                                   (1106) 
                                   (1107)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                   (1108)    RAM_SETPAGE_IDX A                             ; switch index pages
                                   (1109)    mov   A, [X]                                  ; Grab the data
                                   (1110)    InLinePutChar A                               ; Put data in empty TX buf reg
                                   (1111)    mov   X, SP                                   ; Recover frame pointer
                                   (1112)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
                                   (1113)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
                                   (1114)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                   (1115) 
                                   (1116) .End_Write:
                                   (1117)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1118)    ret
                                   (1119) .ENDSECTION
                                   (1120)     
1050: 62 D0 00 MOV   REG[208],0    (1121) 
1053: 55 08 00 MOV   [8],0         (1122) .SECTION
1056: 62 D0 00 MOV   REG[208],0    (1123) ;-----------------------------------------------------------------------------
1059: 55 07 00 MOV   [7],0         (1124) ;  FUNCTION NAME: COMP_SERIAL_CWrite
105C: 26 06 00 AND   [6],0         (1125) ;
105F: 62 D0 00 MOV   REG[208],0    (1126) ;             WARNING WARNING NOT COMPLETE
1062: 55 A1 00 MOV   [TIMEOUT+2],0 (1127) ;
                                   (1128) ;  DESCRIPTION:
1065: 7F       RET                 (1129) ;     Send String of length X to serial port
                                   (1130) ;-----------------------------------------------------------------------------
                                   (1131) ;
                                   (1132) ;  ARGUMENTS:
                                   (1133) ;     [SP-4] MSB of Count of character to send
                                   (1134) ;     [SP-3] LSB of Count of character to send
                                   (1135) ;     [SP-2] has MSB of string address
                                   (1136) ;     [SP-1] has LSB of string address
                                   (1137) ;
                                   (1138) ;  RETURNS:
                                   (1139) ;     none
                                   (1140) ;
                                   (1141) ;  SIDE EFFECTS:
                                   (1142) ;    The A and X registers may be modified by this or future implementations
                                   (1143) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1144) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1145) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1146) ;    functions.
                                   (1147) ;
                                   (1148) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                   (1149) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                   (1150) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (1151) CSTR_LSB:   equ -3           ; LSB pointer of string
                                   (1152) 
                                   (1153)  COMP_SERIAL_CWrite:
                                   (1154) _COMP_SERIAL_CWrite:
                                   (1155)    RAM_PROLOGUE RAM_USE_CLASS_2
                                   (1156)    mov   X,SP
                                   (1157) .CW_Loop:
                                   (1158)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
                                   (1159)    jnz   .CW_WRITEIT
                                   (1160)    cmp   [X+CLEN_LSB],0x00
                                   (1161)    jz    .End_CWrite                        ; Leave if done
                                   (1162) 
                                   (1163) .CW_WRITEIT:                                
1066: 62 D0 00 MOV   REG[208],0    (1164)    push  X                                  ; Save frame pointer
1069: 51 06    MOV   A,[6]         (1165)    mov   A,[X+CSTR_MSB]
106B: 21 01    AND   A,1           (1166)    mov   X,[X+CSTR_LSB]
                                   (1167)    romx                                     ; Get character from ROM
106D: 7F       RET                 (1168)    InLinePutChar A                          ; Put data in empty TX buf reg
                                   (1169)    pop   X                                  ; Restore frame pointer
                                   (1170)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
                                   (1171)    adc   [X+CSTR_MSB],0
                                   (1172)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
                                   (1173)    sbb   [X+CLEN_MSB],0x00
                                   (1174)    jmp   .CW_Loop
                                   (1175) 
                                   (1176) .End_CWrite:
                                   (1177)    RAM_EPILOGUE RAM_USE_CLASS_2
                                   (1178)    ret
                                   (1179) .ENDSECTION
                                   (1180) 
                                   (1181) 
                                   (1182) .SECTION
                                   (1183) ;-----------------------------------------------------------------------------
                                   (1184) ;  FUNCTION NAME: COMP_SERIAL_CPutString
                                   (1185) ;
                                   (1186) ;  DESCRIPTION:
                                   (1187) ;     Send String out through UART TX port.
                                   (1188) ;-----------------------------------------------------------------------------
                                   (1189) ;
                                   (1190) ;  ARGUMENTS:
                                   (1191) ;     Pointer to String
                                   (1192) ;     A has MSB of string address
                                   (1193) ;     X has LSB of string address
                                   (1194) ;
                                   (1195) ;  RETURNS:
                                   (1196) ;     none
                                   (1197) ;
                                   (1198) ;  SIDE EFFECTS:
                                   (1199) ;    The A and X registers may be modified by this or future implementations
                                   (1200) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1202) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1203) ;    functions.
                                   (1204) ;
                                   (1205)  COMP_SERIAL_CPutString:
                                   (1206) _COMP_SERIAL_CPutString:
                                   (1207)    RAM_PROLOGUE RAM_USE_CLASS_1
106E: 62 D0 00 MOV   REG[208],0    (1208)    push  A                                       ; Store ROM pointer
1071: 51 06    MOV   A,[6]         (1209)    push  X
1073: 21 F0    AND   A,240         (1210)    romx                                          ; Get character from ROM
1075: 26 06 0F AND   [6],15        (1211)    jz    .End_CPutString
                                   (1212)    call  COMP_SERIAL_PutChar                     ; Print character
1078: 7F       RET                 (1213)    pop   X
                                   (1214)    pop   A
                                   (1215)    inc   X                                       ; Inc LSB of pointer
                                   (1216)    jnc   COMP_SERIAL_CPutString                  ; Check for carry
                                   (1217)    inc   A                                       ; Inc MSB of pointer
                                   (1218)    jmp   COMP_SERIAL_CPutString
                                   (1219) 
                                   (1220) 
                                   (1221) .End_CPutString:
                                   (1222)    add   SP, -2
                                   (1223)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1224)    ret
                                   (1225) .ENDSECTION
                                   (1226) 
                                   (1227) 
                                   (1228) .SECTION
                                   (1229) ;-----------------------------------------------------------------------------
                                   (1230) ;  FUNCTION NAME: COMP_SERIAL_PutCRLF
                                   (1231) ;
                                   (1232) ;  DESCRIPTION:
                                   (1233) ;     Send a CR and LF
                                   (1234) ;-----------------------------------------------------------------------------
                                   (1235) ;
                                   (1236) ;  ARGUMENTS:
                                   (1237) ;     none.
                                   (1238) ;
                                   (1239) ;  RETURNS:
                                   (1240) ;     none.
                                   (1241) ;
                                   (1242) ;  SIDE EFFECTS:
1079: 62 D0 00 MOV   REG[208],0    (1243) ;    The A and X registers may be modified by this or future implementations
107C: 51 07    MOV   A,[7]         (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
107E: 7F       RET                 (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1247) ;    functions.
                                   (1248) ;
                                   (1249)  COMP_SERIAL_PutCRLF:
                                   (1250) _COMP_SERIAL_PutCRLF:
                                   (1251)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (1252)    mov  A,0x0D                        ; Send CR
                                   (1253)    call COMP_SERIAL_PutChar
                                   (1254)    mov  A,0x0A                        ; Send LF
                                   (1255)    call COMP_SERIAL_PutChar
                                   (1256)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1257)    ret
                                   (1258) .ENDSECTION
                                   (1259) 
                                   (1260) 
                                   (1261) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (1262) ;=============================================================================
                                   (1263) ;=============================================================================
                                   (1264) ;
                                   (1265) ;     Command Buffer commands
                                   (1266) ;
                                   (1267) ;=============================================================================
                                   (1268) ;=============================================================================
                                   (1269) 
                                   (1270) .SECTION
                                   (1271) ;-----------------------------------------------------------------------------
                                   (1272) ;  FUNCTION NAME: COMP_SERIAL_CmdReset
                                   (1273) ;
                                   (1274) ;  DESCRIPTION:
                                   (1275) ;     Reset command string and status flags
                                   (1276) ;-----------------------------------------------------------------------------
                                   (1277) ;
                                   (1278) ;  ARGUMENTS:
                                   (1279) ;     none.
                                   (1280) ;
                                   (1281) ;  RETURNS:
                                   (1282) ;     none.
                                   (1283) ;
                                   (1284) ;  SIDE EFFECTS:
                                   (1285) ;    The A and X registers may be modified by this or future implementations
                                   (1286) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1287) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1288) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1289) ;    functions.
                                   (1290) ;          
                                   (1291) ;    Currently only the page pointer registers listed below are modified: 
                                   (1292) ;          CUR_PP
                                   (1293) ;
                                   (1294) ;  THEORY of OPERATION or PROCEDURE:
                                   (1295) ;     Clear the command buffer, command counter, and flag.
                                   (1296) ;
                                   (1297)  COMP_SERIAL_CmdReset:
                                   (1298) _COMP_SERIAL_CmdReset:
                                   (1299)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1300)    RAM_SETPAGE_CUR >COMP_SERIAL_aRxBuffer
107F: 70 BF    AND   F,191         (1301)    mov [COMP_SERIAL_aRxBuffer], 0x00
                                   (1302)    RAM_SETPAGE_CUR >COMP_SERIAL_bRxCnt
1081: 62 D0 00 MOV   REG[208],0    (1303)    mov [COMP_SERIAL_bRxCnt], 0x00
1084: 50 08    MOV   A,8           (1304)    and [COMP_SERIAL_fStatus], 0x00
1086: 02 A1    ADD   A,[TIMEOUT+2] (1305)    RAM_SETPAGE_CUR >ptrParam
1088: 5C       MOV   X,A           (1306)    mov [ptrParam],0x00
1089: 62 D3 00 MOV   REG[211],0    (1307)    RAM_EPILOGUE RAM_USE_CLASS_4
108C: 52 00    MOV   A,[X+0]       (1308)    ret
108E: B0 04    JNZ   0x1093        (1309) .ENDSECTION
1090: 10       PUSH  X             (1310) 
1091: 80 33    JMP   0x10C5        (1311) 
                                   (1312) .SECTION
                                   (1313) ;-----------------------------------------------------------------------------
                                   (1314) ;  FUNCTION NAME: COMP_SERIAL_bCmdCheck
1093: 39 2C    CMP   A,44          (1315) ;
1095: B0 11    JNZ   0x10A7        (1316) ;  DESCRIPTION:
1097: 75       INC   X             (1317) ;     Check to see if valid command in buffer.
1098: 76 A1    INC   [TIMEOUT+2]   (1318) ;-----------------------------------------------------------------------------
109A: 52 00    MOV   A,[X+0]       (1319) ;
109C: 3C A1 3F CMP   [TIMEOUT+2],63(1320) ;  ARGUMENTS:
109F: BF F3    JNZ   0x1093        (1321) ;     none.
                                   (1322) ;
                                   (1323) ;  RETURNS:
10A1: 10       PUSH  X             (1324) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1325) ;                     Returns non-zero value in A if command is valid.
10A2: 56 00 00 MOV   [X+0],0       (1326) ;
10A5: 80 1F    JMP   0x10C5        (1327) ;  SIDE EFFECTS:
                                   (1328) ;    The A and X registers may be modified by this or future implementations
                                   (1329) ;    of this function.  The same is true for all RAM page pointer registers in
10A7: 10       PUSH  X             (1330) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1331) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1332) ;    functions.
10A8: 75       INC   X             (1333) ;          
10A9: 76 A1    INC   [TIMEOUT+2]   (1334) ;    Currently only the page pointer registers listed below are modified: 
10AB: 3C A1 3F CMP   [TIMEOUT+2],63(1335) ;          CUR_PP
10AE: AF F3    JZ    0x10A2        (1336) ;
10B0: 52 00    MOV   A,[X+0]       (1337) ;  THEORY of OPERATION or PROCEDURE:
10B2: A0 12    JZ    0x10C5        (1338) ;     Read the status and control register.
10B4: 39 2C    CMP   A,44          (1339) ;
10B6: BF F1    JNZ   0x10A8        (1340)  COMP_SERIAL_bCmdCheck:
10B8: 56 00 00 MOV   [X+0],0       (1341) _COMP_SERIAL_bCmdCheck:
10BB: 76 A1    INC   [TIMEOUT+2]   (1342)    RAM_PROLOGUE RAM_USE_CLASS_4
10BD: 3C A1 3F CMP   [TIMEOUT+2],63(1343)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
10C0: B0 04    JNZ   0x10C5        (1344)    mov A,  [COMP_SERIAL_fStatus]
10C2: 55 A1 3F MOV   [TIMEOUT+2],63(1345)    and A, COMP_SERIAL_RX_BUF_CMDTERM             ; Mask off Command status
                                   (1346)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1347)    ret
10C5: 20       POP   X             (1348) .ENDSECTION
10C6: 10       PUSH  X             (1349)     
10C7: 3D 00 00 CMP   [X+0],0       (1350) 
10CA: B0 0B    JNZ   0x10D6        (1351) .SECTION
10CC: 20       POP   X             (1352) ;-----------------------------------------------------------------------------
10CD: 57 00    MOV   X,0           (1353) ;  FUNCTION NAME: COMP_SERIAL_bErrCheck
10CF: 50 00    MOV   A,0           (1354) ;
10D1: 70 3F    AND   F,63
10D3: 71 C0    OR    F,192         (1355) ;  DESCRIPTION:
                                   (1356) ;     Check to see if an error has occured since last CmdReset
10D5: 7F       RET                 (1357) ;-----------------------------------------------------------------------------
                                   (1358) ;
                                   (1359) ;  ARGUMENTS:
10D6: 20       POP   X             (1360) ;     none.
10D7: 50 00    MOV   A,0           (1361) ;
10D9: 70 3F    AND   F,63
10DB: 71 C0    OR    F,192         (1362) ;  RETURNS:
                                   (1363) ;     BYTE  fStatus - Status of command receive buffer.
10DD: 7F       RET                 (1364) ;                     Returns non-zero value in A if command is valid.
                                   (1365) ;           0x80 => Parity Error
                                   (1366) ;           0x40 => OverRun Error
                                   (1367) ;           0x20 => Framing Error
                                   (1368) ;           0x10 => Software Buffer OverRun
                                   (1369) ;
                                   (1370) ;  SIDE EFFECTS:
                                   (1371) ;    The A and X registers may be modified by this or future implementations
                                   (1372) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1373) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1374) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1375) ;    functions.
                                   (1376) ;          
                                   (1377) ;    Currently only the page pointer registers listed below are modified: 
                                   (1378) ;          CUR_PP
                                   (1379) ;     Error Status is clear when read.
                                   (1380) ;
                                   (1381) ;  THEORY of OPERATION or PROCEDURE:
                                   (1382) ;     Read RX buffer error status and clear status
                                   (1383) ;
                                   (1384)  COMP_SERIAL_bErrCheck:
                                   (1385) _COMP_SERIAL_bErrCheck:
                                   (1386)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1387)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
                                   (1388)    mov A,  [COMP_SERIAL_fStatus]
                                   (1389)    and A, COMP_SERIAL_RX_BUF_ERROR               ; Mask off Error status
                                   (1390)    and [COMP_SERIAL_fStatus], ~COMP_SERIAL_RX_BUF_ERROR
                                   (1391)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1392)    ret
                                   (1393) .ENDSECTION
                                   (1394) 
10DE: 62 D0 00 MOV   REG[208],0    (1395) .SECTION
10E1: 50 08    MOV   A,8           (1396) ;-----------------------------------------------------------------------------
10E3: 02 A1    ADD   A,[TIMEOUT+2] (1397) ;  FUNCTION NAME: COMP_SERIAL_bCmdLength
10E5: 5C       MOV   X,A           (1398) ;
10E6: 50 00    MOV   A,0           (1399) ;  DESCRIPTION:
                                   (1400) ;     Get length of command string
__text_start:
_main:
  angle                --> X+4
  softwareReset        --> X+2
  tempValue            --> X+0
10E9: 10       PUSH  X             (1401) ;-----------------------------------------------------------------------------
10EA: 4F       MOV   X,SP
10EB: 38 08    ADD   SP,8

FILE: C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
(0098) //----------------------------------------------------------------------------
10ED: 56 01 00 MOV   [X+1],0
10F0: 56 00 00 MOV   [X+0],0
(0099) // C main line
10F3: 56 03 00 MOV   [X+3],0
10F6: 56 02 00 MOV   [X+2],0
(0100) //----------------------------------------------------------------------------
10F9: 56 04 00 MOV   [X+4],0
10FC: 56 05 00 MOV   [X+5],0
10FF: 56 06 00 MOV   [X+6],0
1102: 56 07 00 MOV   [X+7],0
(0101) 
(0102) #include <m8c.h>        	// part specific constants and macros
1105: 62 D0 00 MOV   REG[208],0
1108: 55 9C 00 MOV   [NUM_MODULES+1],0
110B: 55 9B 00 MOV   [NUM_MODULES],0
(0103) #include "PSoCAPI.h"    	// PSoC API definitions for all User Modules
(0104) #include "psocdynamic.h"
110E: 71 01    OR    F,1
(0105) #include <stdlib.h>
1110: 43 E0 20 OR    REG[224],32
(0106) #include <string.h>
(0107) #pragma interrupt_handler TX_TIMEOUT_ISR
1113: 7C 1C D7 LCALL _unloadAllConfigs
(0108) #pragma interrupt_handler RX_TIMEOUT_ISR
(0109) 
1116: 50 00    MOV   A,0
1118: 08       PUSH  A
1119: 50 01    MOV   A,1
111B: 08       PUSH  A
111C: 7C 1B E8 LCALL _configToggle
111F: 38 FE    ADD   SP,254
(0110) // These defines are used as parameters of the configToggle function.
(0111) // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
(0112) #define		PC_MODE						(2)
1121: 62 D0 00 MOV   REG[208],0
1124: 51 A0    MOV   A,[TIMEOUT+1]
1126: 11 C8    SUB   A,200
1128: 51 9F    MOV   A,[TIMEOUT]
112A: 31 80    XOR   A,128
112C: 19 80    SBB   A,128
112E: CF F2    JC    0x1121
(0113) #define		RX_MODE						(1)
(0114) #define		TX_MODE						(0)
(0115) 
1130: 7C 1D 10 LCALL _initializeSlaves
1133: 80 0F    JMP   0x1143
(0116) // These defines are used as comparisons to find what port the newest module is connected to.
(0117) #define		PORT_1						('1')
(0118) #define		PORT_2						('2')
(0119) #define		PORT_3						('3')
1135: 10       PUSH  X
1136: 7C 10 66 LCALL 0x1066
1139: 62 D0 00 MOV   REG[208],0
113C: 20       POP   X
113D: 39 00    CMP   A,0
113F: A0 03    JZ    0x1143
(0120) #define		PORT_4						('4')
(0121) 
1141: 94 1C    CALL  _decodeTransmission
1143: 8F F1    JMP   0x1135
1145: 38 F8    ADD   SP,248
1147: 20       POP   X
1148: 8F FF    JMP   0x1148
(0122) // These defines are used as transmission indicators.
(0123) #define		START_TRANSMIT				(252)	// Indicates the beginning of a transmission.
(0124) #define		END_TRANSMIT				(253)	// Indicates the end of a transmission.
(0125) #define		HELLO_BYTE					(200)	// Indicates master is ready to talk.
(0126) #define		ID_ASSIGNMENT				(201)	// Indicates an ID assignment from the master.
(0127) #define		ID_ASSIGN_OK				(202)	// Indicates an ID assignment is acknowledged.
_pingModule:
  response             --> X+0
  module_id            --> X-5
114A: 10       PUSH  X
114B: 4F       MOV   X,SP
114C: 38 02    ADD   SP,2
(0128) #define		PING						(203)	// Indicates that someone is pinging someone else.
114E: 56 01 00 MOV   [X+1],0
1151: 56 00 00 MOV   [X+0],0
(0129) #define		CLEAR_CONFIG				(204)	// Indicates that the master is asking for a config clear.
(0130) #define		CONFIG_CLEARED				(205)	// Indicates that a module has cleared its own config.
1154: 50 00    MOV   A,0
1156: 08       PUSH  A
1157: 08       PUSH  A
1158: 7C 1B E8 LCALL _configToggle
115B: 38 FE    ADD   SP,254
(0131) #define		MASTER_ID					(0)		// The master node's ID.
(0132) #define		BROADCAST					(254)	// The broadcast ID for talking to all nodes.
(0133) #define		BLANK_MODULE_ID				(251)	// This is the ID of an unconfigured module.
115D: 10       PUSH  X
115E: 50 FC    MOV   A,252
1160: 7C 09 B8 LCALL 0x09B8
1163: 20       POP   X
(0134) 
1164: 10       PUSH  X
1165: 50 FC    MOV   A,252
1167: 7C 09 B8 LCALL 0x09B8
116A: 20       POP   X
(0135) // These defines are used to fill in the instruction we are using on the servo.
116B: 10       PUSH  X
116C: 50 00    MOV   A,0
116E: 7C 09 B8 LCALL 0x09B8
1171: 20       POP   X
(0136) #define		PING_SERVO					(1)		// This is the instruction number for ping.
1172: 62 D0 00 MOV   REG[208],0
1175: 52 FC    MOV   A,[X-4]
1177: 10       PUSH  X
1178: 7C 09 B8 LCALL 0x09B8
117B: 20       POP   X
(0137) #define		READ_SERVO					(2)		// This is the instruction number for a read.
117C: 10       PUSH  X
117D: 50 CB    MOV   A,203
117F: 7C 09 B8 LCALL 0x09B8
1182: 20       POP   X
(0138) #define		WRITE_SERVO					(3)		// This is the instruction number for a write.
1183: 10       PUSH  X
1184: 50 FD    MOV   A,253
1186: 7C 09 B8 LCALL 0x09B8
1189: 20       POP   X
(0139) #define		RESET_SERVO					(6)		// This is the instruction to reset the servo EEPROM.
118A: 10       PUSH  X
118B: 50 FD    MOV   A,253
118D: 7C 09 B8 LCALL 0x09B8
1190: 20       POP   X
(0140) 
(0141) // These defines are used for transmission timing.
(0142) #define 	RX_TIMEOUT_DURATION			(5)		// This is receive wait time in 1 ms units.
1191: 10       PUSH  X
1192: 7C 09 8B LCALL 0x098B
1195: 62 D0 00 MOV   REG[208],0
1198: 20       POP   X
1199: 53 9A    MOV   [__r0],A
119B: 47 9A 20 TST   [__r0],32
119E: AF F2    JZ    0x1191
(0143) 
(0144) // These defines are used for the initial probing stage, where receive waits are longer to make
11A0: 7C 1E 42 LCALL _xmitWait
(0145) // sure of transmission failure or success.
(0146) #define		BOOT_TIMEOUT				(200)	// This is boot wait time in 1 ms units.
11A3: 50 00    MOV   A,0
11A5: 08       PUSH  A
11A6: 50 01    MOV   A,1
11A8: 08       PUSH  A
11A9: 7C 1B E8 LCALL _configToggle
11AC: 38 FE    ADD   SP,254
(0147) #define		MAX_TIMEOUTS				(10)	// Number of timeouts allowed before hello mode exit.
(0148) 
11AE: 10       PUSH  X
11AF: 7C 0A 49 LCALL 0x0A49
11B2: 20       POP   X
(0149) // This is the maximum number of allowable modules per branch out from the master
11B3: 62 D0 00 MOV   REG[208],0
11B6: 55 A0 00 MOV   [TIMEOUT+1],0
11B9: 55 9F 00 MOV   [TIMEOUT],0
(0150) #define		MAX_MODULES					(250)
11BC: 10       PUSH  X
11BD: 7C 0A 45 LCALL 0x0A45
11C0: 20       POP   X
11C1: 80 48    JMP   0x120A
(0151) 
(0152) #define		SERVO_START					(255)
(0153) 
(0154) // This function receives a mode identifier as a parameter and toggles the
11C3: 10       PUSH  X
11C4: 7C 0B 34 LCALL 0x0B34
11C7: 62 D0 00 MOV   REG[208],0
11CA: 20       POP   X
11CB: 39 FC    CMP   A,252
11CD: B0 3C    JNZ   0x120A
(0155) // system configuration between receive and transmit modes for half duplex UART.
(0156) void configToggle(int mode);
11CF: 92 FF    CALL  _validTransmission
11D1: 62 D0 00 MOV   REG[208],0
11D4: 3C 9A 00 CMP   [__r0],0
11D7: B0 06    JNZ   0x11DE
11D9: 3C 99 00 CMP   [__r1],0
11DC: A0 2D    JZ    0x120A
(0157) 
(0158) // This function pings the index passed to it. Returns 1 on success, 0 on fail.
11DE: 62 D0 00 MOV   REG[208],0
11E1: 3C A5 CB CMP   [COMMAND_TYPE],203
11E4: B0 25    JNZ   0x120A
(0159) int pingModule(int module_id);
(0160) 
(0161) // This function assigns an ID to a module.
11E6: 62 D0 00 MOV   REG[208],0
11E9: 3C A3 00 CMP   [COMMAND_DESTINATION],0
11EC: B0 1D    JNZ   0x120A
(0162) int assignID(int assigned_ID);
(0163) 
11EE: 62 D0 00 MOV   REG[208],0
11F1: 51 A4    MOV   A,[COMMAND_SOURCE]
11F3: 62 D0 00 MOV   REG[208],0
11F6: 53 99    MOV   [__r1],A
11F8: 50 00    MOV   A,0
11FA: 3B FB    CMP   A,[X-5]
11FC: B0 0D    JNZ   0x120A
11FE: 51 99    MOV   A,[__r1]
1200: 3B FC    CMP   A,[X-4]
1202: B0 07    JNZ   0x120A
(0164) int validTransmission(void);
(0165) 
1204: 56 01 01 MOV   [X+1],1
1207: 56 00 00 MOV   [X+0],0
120A: 62 D0 00 MOV   REG[208],0
120D: 51 A0    MOV   A,[TIMEOUT+1]
120F: 11 05    SUB   A,5
1211: 51 9F    MOV   A,[TIMEOUT]
1213: 31 80    XOR   A,128
1215: 19 80    SBB   A,128
1217: D0 0B    JNC   0x1223
1219: 3D 00 00 CMP   [X+0],0
121C: B0 06    JNZ   0x1223
121E: 3D 01 00 CMP   [X+1],0
1221: AF A1    JZ    0x11C3
(0166) void decodeTransmission(void);
(0167) 
(0168) void sayHello(void);
(0169) 
(0170) void servoInstruction(char id, char length, char instruction, char address, char value);
(0171) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
(0172) 
(0173) int clearConfig(int module_id);
1223: 10       PUSH  X
1224: 7C 0A 49 LCALL 0x0A49
1227: 20       POP   X
(0174) // This function checks the current mode and unloads the configuration for that mode.
1228: 62 D0 00 MOV   REG[208],0
122B: 55 A0 00 MOV   [TIMEOUT+1],0
122E: 55 9F 00 MOV   [TIMEOUT],0
(0175) void unloadAllConfigs(void);
1231: 10       PUSH  X
1232: 7C 0A 45 LCALL 0x0A45
1235: 20       POP   X
(0176) // This function unloads the configuration corresponding to the number passed to it.
(0177) void unloadConfig(int config_num);
1236: 62 D0 00 MOV   REG[208],0
1239: 52 01    MOV   A,[X+1]
123B: 53 99    MOV   [__r1],A
123D: 52 00    MOV   A,[X+0]
123F: 53 9A    MOV   [__r0],A
1241: 38 FE    ADD   SP,254
1243: 20       POP   X
1244: 7F       RET   
(0178) // Initialization function for the slave module controllers.
(0179) void initializeSlaves(void);
(0180) // Static wait time of approximately 50 microseconds for use after starting a transmission.
(0181) void xmitWait(void);
_assignID:
  success              --> X+0
  assigned_ID          --> X-5
1245: 10       PUSH  X
1246: 4F       MOV   X,SP
1247: 38 02    ADD   SP,2
(0182) 
1249: 56 01 00 MOV   [X+1],0
124C: 56 00 00 MOV   [X+0],0
(0183) // This flag is set if there is a timeout.
(0184) int TIMEOUT;
124F: 50 00    MOV   A,0
1251: 08       PUSH  A
1252: 08       PUSH  A
1253: 7C 1B E8 LCALL _configToggle
1256: 38 FE    ADD   SP,254
(0185) 
(0186) int NUM_MODULES;			// Stores the number of modules that have been discovered.
(0187) char COMMAND_SOURCE;		// Stores who the current command is from.
1258: 10       PUSH  X
1259: 50 FC    MOV   A,252
125B: 7C 09 B8 LCALL 0x09B8
125E: 20       POP   X
(0188) char COMMAND_DESTINATION;	// Stores who the current command is for.
125F: 10       PUSH  X
1260: 50 FC    MOV   A,252
1262: 7C 09 B8 LCALL 0x09B8
1265: 20       POP   X
(0189) char COMMAND_TYPE;			// Stores the type of command that was just read.
1266: 10       PUSH  X
1267: 50 00    MOV   A,0
1269: 7C 09 B8 LCALL 0x09B8
126C: 20       POP   X
(0190) char PARAM[10];				// Stores a parameters that accompanies the command (if any).
126D: 10       PUSH  X
126E: 50 FB    MOV   A,251
1270: 7C 09 B8 LCALL 0x09B8
1273: 20       POP   X
(0191) int STATE;					// Stores the current configuration state of the system.
1274: 10       PUSH  X
1275: 50 C9    MOV   A,201
1277: 7C 09 B8 LCALL 0x09B8
127A: 20       POP   X
(0192) 
127B: 62 D0 00 MOV   REG[208],0
127E: 52 FC    MOV   A,[X-4]
1280: 10       PUSH  X
1281: 7C 09 B8 LCALL 0x09B8
1284: 20       POP   X
(0193) void main()
1285: 10       PUSH  X
1286: 50 FD    MOV   A,253
1288: 7C 09 B8 LCALL 0x09B8
128B: 20       POP   X
(0194) {	
128C: 10       PUSH  X
128D: 50 FD    MOV   A,253
128F: 7C 09 B8 LCALL 0x09B8
1292: 20       POP   X
(0195) 	int tempValue = 0;
(0196) 	int softwareReset = 0;
(0197) 	float angle = 0;
1293: 10       PUSH  X
1294: 7C 09 8B LCALL 0x098B
1297: 62 D0 00 MOV   REG[208],0
129A: 20       POP   X
129B: 53 9A    MOV   [__r0],A
129D: 47 9A 20 TST   [__r0],32
12A0: AF F2    JZ    0x1293
(0198) 	
(0199) 	NUM_MODULES = 0;
12A2: 7C 1E 42 LCALL _xmitWait
(0200) 	
(0201) 	M8C_EnableGInt;			// Turn on global interrupts for the transmission timeout timer.
12A5: 50 00    MOV   A,0
12A7: 08       PUSH  A
12A8: 50 01    MOV   A,1
12AA: 08       PUSH  A
12AB: 7C 1B E8 LCALL _configToggle
12AE: 38 FE    ADD   SP,254
(0202) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); //activate GPIO ISR
(0203) 	
12B0: 10       PUSH  X
12B1: 7C 0A 49 LCALL 0x0A49
12B4: 20       POP   X
(0204) 	unloadAllConfigs();
12B5: 62 D0 00 MOV   REG[208],0
12B8: 55 A0 00 MOV   [TIMEOUT+1],0
12BB: 55 9F 00 MOV   [TIMEOUT],0
(0205) 
12BE: 10       PUSH  X
12BF: 7C 0A 45 LCALL 0x0A45
12C2: 20       POP   X
12C3: 80 48    JMP   0x130C
(0206) 	configToggle(RX_MODE);
(0207) 		
(0208) 	// Sit and wait for the worst case setup time to occur.
(0209) 	while(TIMEOUT < BOOT_TIMEOUT) { }
12C5: 10       PUSH  X
12C6: 7C 0B 34 LCALL 0x0B34
12C9: 62 D0 00 MOV   REG[208],0
12CC: 20       POP   X
12CD: 39 FC    CMP   A,252
12CF: B0 3C    JNZ   0x130C
(0210) 		
(0211) 	// Initialize all of the slave modules.
12D1: 91 FD    CALL  _validTransmission
12D3: 62 D0 00 MOV   REG[208],0
12D6: 3C 9A 00 CMP   [__r0],0
12D9: B0 06    JNZ   0x12E0
12DB: 3C 99 00 CMP   [__r1],0
12DE: A0 2D    JZ    0x130C
(0212) 	initializeSlaves();
(0213) 	
12E0: 62 D0 00 MOV   REG[208],0
12E3: 3C A5 CA CMP   [COMMAND_TYPE],202
12E6: B0 25    JNZ   0x130C
(0214) 	while(1)
(0215) 	{	
(0216) 		if(COMP_SERIAL_bCmdCheck())
12E8: 62 D0 00 MOV   REG[208],0
12EB: 3C A3 00 CMP   [COMMAND_DESTINATION],0
12EE: B0 1D    JNZ   0x130C
(0217) 		{
(0218) 			decodeTransmission();
12F0: 62 D0 00 MOV   REG[208],0
12F3: 51 A4    MOV   A,[COMMAND_SOURCE]
12F5: 62 D0 00 MOV   REG[208],0
12F8: 53 99    MOV   [__r1],A
12FA: 50 00    MOV   A,0
12FC: 3B FB    CMP   A,[X-5]
12FE: B0 0D    JNZ   0x130C
1300: 51 99    MOV   A,[__r1]
1302: 3B FC    CMP   A,[X-4]
1304: B0 07    JNZ   0x130C
(0219) 		}
(0220) 	}
1306: 56 01 01 MOV   [X+1],1
1309: 56 00 00 MOV   [X+0],0
130C: 62 D0 00 MOV   REG[208],0
130F: 51 A0    MOV   A,[TIMEOUT+1]
1311: 11 05    SUB   A,5
1313: 51 9F    MOV   A,[TIMEOUT]
1315: 31 80    XOR   A,128
1317: 19 80    SBB   A,128
1319: D0 0B    JNC   0x1325
131B: 3D 00 00 CMP   [X+0],0
131E: B0 06    JNZ   0x1325
1320: 3D 01 00 CMP   [X+1],0
1323: AF A1    JZ    0x12C5
(0221) }
(0222) 
(0223) int pingModule(int module_id)
(0224) {
(0225) 	int response = 0;
(0226) 	
(0227) 	configToggle(TX_MODE);	// Toggle into TX mode.
(0228) 			
1325: 10       PUSH  X
1326: 7C 0D 0C LCALL 0x0D0C
1329: 20       POP   X
(0229) 	// Transmit a hello.
132A: 10       PUSH  X
132B: 50 00    MOV   A,0
132D: 5C       MOV   X,A
132E: 7C 0D 7F LCALL 0x0D7F
1331: 20       POP   X
(0230) 	TRANSMIT_PutChar(START_TRANSMIT);
1332: 10       PUSH  X
1333: 62 D0 00 MOV   REG[208],0
1336: 51 9B    MOV   A,[NUM_MODULES]
1338: 08       PUSH  A
1339: 51 9C    MOV   A,[NUM_MODULES+1]
133B: 20       POP   X
133C: 7C 0C 2F LCALL 0x0C2F
133F: 20       POP   X
(0231) 	TRANSMIT_PutChar(START_TRANSMIT);
1340: 10       PUSH  X
1341: 57 05    MOV   X,5
1343: 50 00    MOV   A,0
1345: 7C 0D 7F LCALL 0x0D7F
1348: 20       POP   X
(0232) 	TRANSMIT_PutChar(MASTER_ID);
1349: 10       PUSH  X
134A: 50 01    MOV   A,1
134C: 08       PUSH  A
134D: 50 A0    MOV   A,160
134F: 5C       MOV   X,A
1350: 18       POP   A
1351: 7C 0B FA LCALL 0x0BFA
(0233) 	TRANSMIT_PutChar(module_id);
(0234) 	TRANSMIT_PutChar(PING);
1354: 7C 0A 49 LCALL 0x0A49
1357: 20       POP   X
(0235) 	TRANSMIT_PutChar(END_TRANSMIT);
1358: 62 D0 00 MOV   REG[208],0
135B: 55 A0 00 MOV   [TIMEOUT+1],0
135E: 55 9F 00 MOV   [TIMEOUT],0
(0236) 	TRANSMIT_PutChar(END_TRANSMIT);
1361: 10       PUSH  X
1362: 7C 0A 45 LCALL 0x0A45
1365: 20       POP   X
(0237) 	
(0238) 	// Wait for the transmission to finish.
1366: 62 D0 00 MOV   REG[208],0
1369: 52 01    MOV   A,[X+1]
136B: 53 99    MOV   [__r1],A
136D: 52 00    MOV   A,[X+0]
136F: 53 9A    MOV   [__r0],A
1371: 38 FE    ADD   SP,254
1373: 20       POP   X
1374: 7F       RET   
(0239) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
(0240) 	
(0241) 	xmitWait();
(0242) 	
_clearConfig:
  response             --> X+0
  module_id            --> X-5
1375: 10       PUSH  X
1376: 4F       MOV   X,SP
1377: 38 02    ADD   SP,2
(0243) 	configToggle(RX_MODE);	// Listen for the response.
1379: 56 01 00 MOV   [X+1],0
137C: 56 00 00 MOV   [X+0],0
(0244) 	
(0245) 	RX_TIMEOUT_Stop();
137F: 50 00    MOV   A,0
1381: 08       PUSH  A
1382: 08       PUSH  A
1383: 7C 1B E8 LCALL _configToggle
1386: 38 FE    ADD   SP,254
(0246) 	TIMEOUT = 0;
(0247) 	RX_TIMEOUT_Start();
(0248) 	
1388: 10       PUSH  X
1389: 50 FC    MOV   A,252
138B: 7C 09 B8 LCALL 0x09B8
138E: 20       POP   X
(0249) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
138F: 10       PUSH  X
1390: 50 FC    MOV   A,252
1392: 7C 09 B8 LCALL 0x09B8
1395: 20       POP   X
(0250) 	{
1396: 10       PUSH  X
1397: 50 00    MOV   A,0
1399: 7C 09 B8 LCALL 0x09B8
139C: 20       POP   X
(0251) 		if(RECEIVE_cReadChar() == START_TRANSMIT)
139D: 62 D0 00 MOV   REG[208],0
13A0: 52 FC    MOV   A,[X-4]
13A2: 10       PUSH  X
13A3: 7C 09 B8 LCALL 0x09B8
13A6: 20       POP   X
(0252) 		{	
13A7: 10       PUSH  X
13A8: 50 CC    MOV   A,204
13AA: 7C 09 B8 LCALL 0x09B8
13AD: 20       POP   X
(0253) 			if(validTransmission())
13AE: 10       PUSH  X
13AF: 50 FD    MOV   A,253
13B1: 7C 09 B8 LCALL 0x09B8
13B4: 20       POP   X
(0254) 			{
13B5: 10       PUSH  X
13B6: 50 FD    MOV   A,253
13B8: 7C 09 B8 LCALL 0x09B8
13BB: 20       POP   X
(0255) 				if(COMMAND_TYPE == PING)	// This is the response we are looking for.
(0256) 				{
(0257) 					// If this is for me, check who it was from.
13BC: 10       PUSH  X
13BD: 7C 09 8B LCALL 0x098B
13C0: 62 D0 00 MOV   REG[208],0
13C3: 20       POP   X
13C4: 53 9A    MOV   [__r0],A
13C6: 47 9A 20 TST   [__r0],32
13C9: AF F2    JZ    0x13BC
(0258) 					if(COMMAND_DESTINATION == MASTER_ID)
(0259) 					{
13CB: 7C 1E 42 LCALL _xmitWait
(0260) 						if(COMMAND_SOURCE == module_id)
(0261) 						{
13CE: 50 00    MOV   A,0
13D0: 08       PUSH  A
13D1: 50 01    MOV   A,1
13D3: 08       PUSH  A
13D4: 7C 1B E8 LCALL _configToggle
13D7: 38 FE    ADD   SP,254
(0262) 							response = 1;
(0263) 						}
13D9: 3D FB 00 CMP   [X-5],0
13DC: B0 06    JNZ   0x13E3
13DE: 3D FC FE CMP   [X-4],254
13E1: A0 89    JZ    0x146B
(0264) 					}
(0265) 				}
13E3: 10       PUSH  X
13E4: 7C 0A 49 LCALL 0x0A49
13E7: 20       POP   X
(0266) 			}
13E8: 62 D0 00 MOV   REG[208],0
13EB: 55 A0 00 MOV   [TIMEOUT+1],0
13EE: 55 9F 00 MOV   [TIMEOUT],0
(0267) 		}
13F1: 10       PUSH  X
13F2: 7C 0A 45 LCALL 0x0A45
13F5: 20       POP   X
13F6: 80 48    JMP   0x143F
(0268) 	}
(0269) 	
(0270) 	RX_TIMEOUT_Stop();
(0271) 	TIMEOUT = 0;
13F8: 10       PUSH  X
13F9: 7C 0B 34 LCALL 0x0B34
13FC: 62 D0 00 MOV   REG[208],0
13FF: 20       POP   X
1400: 39 FC    CMP   A,252
1402: B0 3C    JNZ   0x143F
(0272) 	RX_TIMEOUT_Start();
(0273) 	
1404: 90 CA    CALL  _validTransmission
1406: 62 D0 00 MOV   REG[208],0
1409: 3C 9A 00 CMP   [__r0],0
140C: B0 06    JNZ   0x1413
140E: 3C 99 00 CMP   [__r1],0
1411: A0 2D    JZ    0x143F
(0274) 	return response;
(0275) }
1413: 62 D0 00 MOV   REG[208],0
1416: 3C A5 CD CMP   [COMMAND_TYPE],205
1419: B0 25    JNZ   0x143F
(0276) 
(0277) int assignID(int assigned_ID)
(0278) {
141B: 62 D0 00 MOV   REG[208],0
141E: 3C A3 00 CMP   [COMMAND_DESTINATION],0
1421: B0 1D    JNZ   0x143F
(0279) 	int success = 0;		// Stores 0 on fail, 1 on success.
(0280) 	
1423: 62 D0 00 MOV   REG[208],0
1426: 51 A4    MOV   A,[COMMAND_SOURCE]
1428: 62 D0 00 MOV   REG[208],0
142B: 53 99    MOV   [__r1],A
142D: 50 00    MOV   A,0
142F: 3B FB    CMP   A,[X-5]
1431: B0 0D    JNZ   0x143F
1433: 51 99    MOV   A,[__r1]
1435: 3B FC    CMP   A,[X-4]
1437: B0 07    JNZ   0x143F
(0281) 	configToggle(TX_MODE);	// Switch to TX mode.
(0282) 
1439: 56 01 01 MOV   [X+1],1
143C: 56 00 00 MOV   [X+0],0
143F: 62 D0 00 MOV   REG[208],0
1442: 51 A0    MOV   A,[TIMEOUT+1]
1444: 11 05    SUB   A,5
1446: 51 9F    MOV   A,[TIMEOUT]
1448: 31 80    XOR   A,128
144A: 19 80    SBB   A,128
144C: D0 0B    JNC   0x1458
144E: 3D 00 00 CMP   [X+0],0
1451: B0 06    JNZ   0x1458
1453: 3D 01 00 CMP   [X+1],0
1456: AF A1    JZ    0x13F8
(0283) 	// Transmit the assignment.
(0284) 	TRANSMIT_PutChar(START_TRANSMIT);
(0285) 	TRANSMIT_PutChar(START_TRANSMIT);
(0286) 	TRANSMIT_PutChar(MASTER_ID);
(0287) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
(0288) 	TRANSMIT_PutChar(ID_ASSIGNMENT);
(0289) 	TRANSMIT_PutChar(assigned_ID);
(0290) 	TRANSMIT_PutChar(END_TRANSMIT);
1458: 10       PUSH  X
1459: 7C 0A 49 LCALL 0x0A49
145C: 20       POP   X
(0291) 	TRANSMIT_PutChar(END_TRANSMIT);
145D: 62 D0 00 MOV   REG[208],0
1460: 55 A0 00 MOV   [TIMEOUT+1],0
1463: 55 9F 00 MOV   [TIMEOUT],0
(0292) 	
1466: 10       PUSH  X
1467: 7C 0A 45 LCALL 0x0A45
146A: 20       POP   X
(0293) 	// Wait for the transmission to finish.
(0294) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
(0295) 	
146B: 62 D0 00 MOV   REG[208],0
146E: 52 01    MOV   A,[X+1]
1470: 53 99    MOV   [__r1],A
1472: 52 00    MOV   A,[X+0]
1474: 53 9A    MOV   [__r0],A
1476: 38 FE    ADD   SP,254
1478: 20       POP   X
1479: 7F       RET   
(0296) 	xmitWait();
(0297) 	
(0298) 	configToggle(RX_MODE);	// Switch back to receive mode.
(0299) 	
(0300) 	RX_TIMEOUT_Stop();
(0301) 	TIMEOUT = 0;
_sayHello:
147A: 50 00    MOV   A,0
147C: 08       PUSH  A
147D: 08       PUSH  A
147E: 97 68    CALL  _configToggle
1480: 38 FE    ADD   SP,254
(0302) 	RX_TIMEOUT_Start();
(0303) 	
(0304) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
1482: 10       PUSH  X
1483: 50 FC    MOV   A,252
1485: 7C 09 B8 LCALL 0x09B8
1488: 20       POP   X
(0305) 	{
1489: 10       PUSH  X
148A: 50 FC    MOV   A,252
148C: 7C 09 B8 LCALL 0x09B8
148F: 20       POP   X
(0306) 		if(RECEIVE_cReadChar() == START_TRANSMIT)
1490: 10       PUSH  X
1491: 50 00    MOV   A,0
1493: 7C 09 B8 LCALL 0x09B8
1496: 20       POP   X
(0307) 		{	
1497: 10       PUSH  X
1498: 50 FB    MOV   A,251
149A: 7C 09 B8 LCALL 0x09B8
149D: 20       POP   X
(0308) 			if(validTransmission())
149E: 10       PUSH  X
149F: 50 C8    MOV   A,200
14A1: 7C 09 B8 LCALL 0x09B8
14A4: 20       POP   X
(0309) 			{
14A5: 10       PUSH  X
14A6: 50 FD    MOV   A,253
14A8: 7C 09 B8 LCALL 0x09B8
14AB: 20       POP   X
(0310) 				if(COMMAND_TYPE == ID_ASSIGN_OK)	// This is the response we are looking for.
14AC: 10       PUSH  X
14AD: 50 FD    MOV   A,253
14AF: 7C 09 B8 LCALL 0x09B8
14B2: 20       POP   X
(0311) 				{
(0312) 					// If this is for me, check who it was from.
(0313) 					if(COMMAND_DESTINATION == MASTER_ID)
14B3: 10       PUSH  X
14B4: 7C 09 8B LCALL 0x098B
14B7: 62 D0 00 MOV   REG[208],0
14BA: 20       POP   X
14BB: 53 9A    MOV   [__r0],A
14BD: 47 9A 20 TST   [__r0],32
14C0: AF F2    JZ    0x14B3
(0314) 					{
(0315) 						if(COMMAND_SOURCE == assigned_ID)
14C2: 7C 1E 42 LCALL _xmitWait
(0316) 						{
(0317) 							success = 1;
14C5: 50 00    MOV   A,0
14C7: 08       PUSH  A
14C8: 50 01    MOV   A,1
14CA: 08       PUSH  A
14CB: 97 1B    CALL  _configToggle
14CD: 38 FE    ADD   SP,254
14CF: 7F       RET   
(0318) 						}
(0319) 					}
(0320) 				}
(0321) 			}
(0322) 		}
_validTransmission:
  valid_transmit       --> X+2
  i                    --> X+0
14D0: 10       PUSH  X
14D1: 4F       MOV   X,SP
14D2: 38 04    ADD   SP,4
(0323) 	}
14D4: 56 03 00 MOV   [X+3],0
14D7: 56 02 00 MOV   [X+2],0
(0324) 	
14DA: 56 01 00 MOV   [X+1],0
14DD: 56 00 00 MOV   [X+0],0
(0325) 	LCD_1_Start();
(0326) 	LCD_1_Position(0,0);
14E0: 10       PUSH  X
14E1: 7C 0B 2C LCALL 0x0B2C
14E4: 62 D0 00 MOV   REG[208],0
14E7: 20       POP   X
14E8: 39 FC    CMP   A,252
14EA: B0 65    JNZ   0x1550
(0327) 	LCD_1_PrHexInt(NUM_MODULES);
(0328) 	LCD_1_Position(0,5);
14EC: 10       PUSH  X
14ED: 7C 0B 2C LCALL 0x0B2C
14F0: 20       POP   X
14F1: 62 D0 00 MOV   REG[208],0
14F4: 53 A4    MOV   [COMMAND_SOURCE],A
(0329) 	LCD_1_PrCString("Modules!");
14F6: 10       PUSH  X
14F7: 7C 0B 2C LCALL 0x0B2C
14FA: 20       POP   X
14FB: 62 D0 00 MOV   REG[208],0
14FE: 53 A3    MOV   [COMMAND_DESTINATION],A
(0330) 	
1500: 10       PUSH  X
1501: 7C 0B 2C LCALL 0x0B2C
1504: 20       POP   X
1505: 62 D0 00 MOV   REG[208],0
1508: 53 A5    MOV   [COMMAND_TYPE],A
(0331) 	RX_TIMEOUT_Stop();
150A: 10       PUSH  X
150B: 7C 0B 2C LCALL 0x0B2C
150E: 20       POP   X
150F: 62 D0 00 MOV   REG[208],0
1512: 53 88    MOV   [PARAM],A
1514: 80 20    JMP   0x1535
(0332) 	TIMEOUT = 0;
(0333) 	RX_TIMEOUT_Start();
(0334) 	
(0335) 	return success;
1516: 77 01    INC   [X+1]
1518: 0F 00 00 ADC   [X+0],0
(0336) }
151B: 10       PUSH  X
151C: 7C 0B 2C LCALL 0x0B2C
151F: 62 D0 00 MOV   REG[208],0
1522: 20       POP   X
1523: 53 9A    MOV   [__r0],A
1525: 52 01    MOV   A,[X+1]
1527: 01 88    ADD   A,136
1529: 53 97    MOV   [__r3],A
152B: 52 00    MOV   A,[X+0]
152D: 09 00    ADC   A,0
152F: 60 D5    MOV   REG[213],A
1531: 51 9A    MOV   A,[__r0]
1533: 3F 97    MVI   [__r3],A
1535: 62 D0 00 MOV   REG[208],0
1538: 52 01    MOV   A,[X+1]
153A: 01 88    ADD   A,136
153C: 53 99    MOV   [__r1],A
153E: 52 00    MOV   A,[X+0]
1540: 09 00    ADC   A,0
1542: 60 D4    MOV   REG[212],A
1544: 3E 99    MVI   A,[__r1]
1546: 39 FD    CMP   A,253
1548: BF CD    JNZ   0x1516
(0337) 
(0338) int clearConfig(int module_id)
(0339) {
154A: 56 03 01 MOV   [X+3],1
154D: 56 02 00 MOV   [X+2],0
(0340) 	int response = 0;
(0341) 	
(0342) 	configToggle(TX_MODE);	// Toggle into TX mode.
1550: 62 D0 00 MOV   REG[208],0
1553: 52 03    MOV   A,[X+3]
1555: 53 99    MOV   [__r1],A
1557: 52 02    MOV   A,[X+2]
1559: 53 9A    MOV   [__r0],A
155B: 38 FC    ADD   SP,252
155D: 20       POP   X
155E: 7F       RET   
(0343) 			
(0344) 	// Transmit a hello.
(0345) 	TRANSMIT_PutChar(START_TRANSMIT);
(0346) 	TRANSMIT_PutChar(START_TRANSMIT);
(0347) 	TRANSMIT_PutChar(MASTER_ID);
_decodeTransmission:
  tempByte             --> X+7
  angle                --> X+5
  ID                   --> X+4
  total                --> X+2
  param                --> X+0
155F: 10       PUSH  X
1560: 4F       MOV   X,SP
1561: 38 08    ADD   SP,8
(0348) 	TRANSMIT_PutChar(module_id);
(0349) 	TRANSMIT_PutChar(CLEAR_CONFIG);
(0350) 	TRANSMIT_PutChar(END_TRANSMIT);
(0351) 	TRANSMIT_PutChar(END_TRANSMIT);
(0352) 	
1563: 56 03 00 MOV   [X+3],0
1566: 56 02 00 MOV   [X+2],0
(0353) 	// Wait for the transmission to finish.
(0354) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
1569: 10       PUSH  X
156A: 7C 10 7F LCALL 0x107F
156D: 62 D0 00 MOV   REG[208],0
1570: 53 9A    MOV   [__r0],A
1572: 5A 99    MOV   [__r1],X
1574: 20       POP   X
1575: 51 99    MOV   A,[__r1]
1577: 54 01    MOV   [X+1],A
1579: 51 9A    MOV   A,[__r0]
157B: 54 00    MOV   [X+0],A
157D: 3C 9A 00 CMP   [__r0],0
1580: B0 06    JNZ   0x1587
1582: 3C 99 00 CMP   [__r1],0
1585: A5 06    JZ    0x1A8C
(0355) 	
(0356) 	xmitWait();
1587: 62 D0 00 MOV   REG[208],0
158A: 52 01    MOV   A,[X+1]
158C: 53 99    MOV   [__r1],A
158E: 52 00    MOV   A,[X+0]
1590: 60 D4    MOV   REG[212],A
1592: 3E 99    MVI   A,[__r1]
1594: 53 99    MOV   [__r1],A
1596: 55 9A 00 MOV   [__r0],0
1599: 3C 9A 00 CMP   [__r0],0
159C: B0 05    JNZ   0x15A2
159E: 39 6E    CMP   A,110
15A0: A0 0E    JZ    0x15AF
15A2: 62 D0 00 MOV   REG[208],0
15A5: 3C 9A 00 CMP   [__r0],0
15A8: B0 3A    JNZ   0x15E3
15AA: 3C 99 4E CMP   [__r1],78
15AD: B0 35    JNZ   0x15E3
(0357) 	
(0358) 	configToggle(RX_MODE);	// Listen for the response.
15AF: 10       PUSH  X
15B0: 7C 10 50 LCALL 0x1050
15B3: 20       POP   X
(0359) 	
15B4: 50 00    MOV   A,0
15B6: 08       PUSH  A
15B7: 50 0A    MOV   A,10
15B9: 08       PUSH  A
15BA: 62 D0 00 MOV   REG[208],0
15BD: 51 9B    MOV   A,[NUM_MODULES]
15BF: 08       PUSH  A
15C0: 51 9C    MOV   A,[NUM_MODULES+1]
15C2: 08       PUSH  A
15C3: 52 00    MOV   A,[X+0]
15C5: 08       PUSH  A
15C6: 52 01    MOV   A,[X+1]
15C8: 08       PUSH  A
15C9: 7C 20 A9 LCALL _itoa
15CC: 38 FA    ADD   SP,250
(0360) 	if(module_id != BROADCAST)
15CE: 10       PUSH  X
15CF: 52 00    MOV   A,[X+0]
15D1: 08       PUSH  A
15D2: 52 01    MOV   A,[X+1]
15D4: 5C       MOV   X,A
15D5: 18       POP   A
15D6: 7C 0F CF LCALL 0x0FCF
15D9: 20       POP   X
(0361) 	{
15DA: 10       PUSH  X
15DB: 50 0A    MOV   A,10
15DD: 7C 0F 92 LCALL 0x0F92
15E0: 20       POP   X
(0362) 		RX_TIMEOUT_Stop();
15E1: 84 AA    JMP   0x1A8C
(0363) 		TIMEOUT = 0;
15E3: 62 D0 00 MOV   REG[208],0
15E6: 52 01    MOV   A,[X+1]
15E8: 53 99    MOV   [__r1],A
15EA: 52 00    MOV   A,[X+0]
15EC: 60 D4    MOV   REG[212],A
15EE: 3E 99    MVI   A,[__r1]
15F0: 53 99    MOV   [__r1],A
15F2: 55 9A 00 MOV   [__r0],0
15F5: 3C 9A 00 CMP   [__r0],0
15F8: B0 05    JNZ   0x15FE
15FA: 39 77    CMP   A,119
15FC: A0 0E    JZ    0x160B
15FE: 62 D0 00 MOV   REG[208],0
1601: 3C 9A 00 CMP   [__r0],0
1604: B1 6B    JNZ   0x1770
1606: 3C 99 57 CMP   [__r1],87
1609: B1 66    JNZ   0x1770
(0364) 		RX_TIMEOUT_Start();
(0365) 		
160B: 10       PUSH  X
160C: 7C 10 7F LCALL 0x107F
160F: 62 D0 00 MOV   REG[208],0
1612: 53 9A    MOV   [__r0],A
1614: 5A 99    MOV   [__r1],X
1616: 20       POP   X
1617: 51 99    MOV   A,[__r1]
1619: 54 01    MOV   [X+1],A
161B: 51 9A    MOV   A,[__r0]
161D: 54 00    MOV   [X+0],A
161F: 3C 9A 00 CMP   [__r0],0
1622: B0 06    JNZ   0x1629
1624: 3C 99 00 CMP   [__r1],0
1627: A4 64    JZ    0x1A8C
(0366) 		while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
(0367) 		{
1629: 52 00    MOV   A,[X+0]
162B: 08       PUSH  A
162C: 52 01    MOV   A,[X+1]
162E: 08       PUSH  A
162F: 7C 1F 68 LCALL _atoi
1632: 38 FE    ADD   SP,254
1634: 62 D0 00 MOV   REG[208],0
1637: 51 99    MOV   A,[__r1]
1639: 54 04    MOV   [X+4],A
(0368) 			if(RECEIVE_cReadChar() == START_TRANSMIT)
163B: 10       PUSH  X
163C: 7C 10 7F LCALL 0x107F
163F: 62 D0 00 MOV   REG[208],0
1642: 53 9A    MOV   [__r0],A
1644: 5A 99    MOV   [__r1],X
1646: 20       POP   X
1647: 51 99    MOV   A,[__r1]
1649: 54 01    MOV   [X+1],A
164B: 51 9A    MOV   A,[__r0]
164D: 54 00    MOV   [X+0],A
164F: 3C 9A 00 CMP   [__r0],0
1652: B0 06    JNZ   0x1659
1654: 3C 99 00 CMP   [__r1],0
1657: A4 34    JZ    0x1A8C
(0369) 			{	
(0370) 				if(validTransmission())
1659: 62 D0 00 MOV   REG[208],0
165C: 52 01    MOV   A,[X+1]
165E: 53 99    MOV   [__r1],A
1660: 52 00    MOV   A,[X+0]
1662: 60 D4    MOV   REG[212],A
1664: 3E 99    MVI   A,[__r1]
1666: 53 99    MOV   [__r1],A
1668: 55 9A 00 MOV   [__r0],0
166B: 3C 9A 00 CMP   [__r0],0
166E: B0 05    JNZ   0x1674
1670: 39 61    CMP   A,97
1672: A0 0E    JZ    0x1681
1674: 62 D0 00 MOV   REG[208],0
1677: 3C 9A 00 CMP   [__r0],0
167A: B0 89    JNZ   0x1704
167C: 3C 99 41 CMP   [__r1],65
167F: B0 84    JNZ   0x1704
(0371) 				{
(0372) 					if(COMMAND_TYPE == CONFIG_CLEARED)	// This is the response we are looking for.
1681: 10       PUSH  X
1682: 7C 10 7F LCALL 0x107F
1685: 62 D0 00 MOV   REG[208],0
1688: 53 9A    MOV   [__r0],A
168A: 5A 99    MOV   [__r1],X
168C: 20       POP   X
168D: 51 99    MOV   A,[__r1]
168F: 54 01    MOV   [X+1],A
1691: 51 9A    MOV   A,[__r0]
1693: 54 00    MOV   [X+0],A
1695: 3C 9A 00 CMP   [__r0],0
1698: B0 06    JNZ   0x169F
169A: 3C 99 00 CMP   [__r1],0
169D: A3 EE    JZ    0x1A8C
(0373) 					{
(0374) 						// If this is for me, check who it was from.
169F: 10       PUSH  X
16A0: 7C 10 50 LCALL 0x1050
16A3: 20       POP   X
(0375) 						if(COMMAND_DESTINATION == MASTER_ID)
16A4: 52 00    MOV   A,[X+0]
16A6: 08       PUSH  A
16A7: 52 01    MOV   A,[X+1]
16A9: 08       PUSH  A
16AA: 7C 1F 68 LCALL _atoi
16AD: 38 FE    ADD   SP,254
16AF: 62 D0 00 MOV   REG[208],0
16B2: 51 99    MOV   A,[__r1]
16B4: 54 03    MOV   [X+3],A
16B6: 51 9A    MOV   A,[__r0]
16B8: 54 02    MOV   [X+2],A
(0376) 						{
16BA: 50 01    MOV   A,1
16BC: 08       PUSH  A
16BD: 50 00    MOV   A,0
16BF: 08       PUSH  A
16C0: 52 02    MOV   A,[X+2]
16C2: 08       PUSH  A
16C3: 52 03    MOV   A,[X+3]
16C5: 08       PUSH  A
16C6: 7C 1E D6 LCALL __divmod_16X16_16
16C9: 38 FE    ADD   SP,254
16CB: 18       POP   A
16CC: 53 99    MOV   [__r1],A
16CE: 18       POP   A
16CF: 51 99    MOV   A,[__r1]
16D1: 54 05    MOV   [X+5],A
(0377) 							if(COMMAND_SOURCE == module_id)
16D3: 50 01    MOV   A,1
16D5: 08       PUSH  A
16D6: 50 00    MOV   A,0
16D8: 08       PUSH  A
16D9: 52 02    MOV   A,[X+2]
16DB: 08       PUSH  A
16DC: 52 03    MOV   A,[X+3]
16DE: 08       PUSH  A
16DF: 7C 1E D6 LCALL __divmod_16X16_16
16E2: 18       POP   A
16E3: 53 99    MOV   [__r1],A
16E5: 18       POP   A
16E6: 38 FE    ADD   SP,254
16E8: 51 99    MOV   A,[__r1]
16EA: 54 06    MOV   [X+6],A
(0378) 							{
16EC: 52 06    MOV   A,[X+6]
16EE: 08       PUSH  A
16EF: 52 05    MOV   A,[X+5]
16F1: 08       PUSH  A
16F2: 50 1E    MOV   A,30
16F4: 08       PUSH  A
16F5: 50 03    MOV   A,3
16F7: 08       PUSH  A
16F8: 50 05    MOV   A,5
16FA: 08       PUSH  A
16FB: 52 04    MOV   A,[X+4]
16FD: 08       PUSH  A
16FE: 94 46    CALL  _longServoInstruction
1700: 38 FA    ADD   SP,250
(0379) 								response = 1;
(0380) 							}
1702: 83 89    JMP   0x1A8C
(0381) 						}
1704: 62 D0 00 MOV   REG[208],0
1707: 52 01    MOV   A,[X+1]
1709: 53 99    MOV   [__r1],A
170B: 52 00    MOV   A,[X+0]
170D: 60 D4    MOV   REG[212],A
170F: 3E 99    MVI   A,[__r1]
1711: 53 99    MOV   [__r1],A
1713: 55 9A 00 MOV   [__r0],0
1716: 3C 9A 00 CMP   [__r0],0
1719: B0 05    JNZ   0x171F
171B: 39 70    CMP   A,112
171D: A0 0E    JZ    0x172C
171F: 62 D0 00 MOV   REG[208],0
1722: 3C 9A 00 CMP   [__r0],0
1725: B3 66    JNZ   0x1A8C
1727: 3C 99 50 CMP   [__r1],80
172A: B3 61    JNZ   0x1A8C
(0382) 					}
(0383) 				}
172C: 10       PUSH  X
172D: 7C 10 7F LCALL 0x107F
1730: 62 D0 00 MOV   REG[208],0
1733: 53 9A    MOV   [__r0],A
1735: 5A 99    MOV   [__r1],X
1737: 20       POP   X
1738: 51 99    MOV   A,[__r1]
173A: 54 01    MOV   [X+1],A
173C: 51 9A    MOV   A,[__r0]
173E: 54 00    MOV   [X+0],A
1740: 3C 9A 00 CMP   [__r0],0
1743: B0 06    JNZ   0x174A
1745: 3C 99 00 CMP   [__r1],0
1748: A3 43    JZ    0x1A8C
(0384) 			}
(0385) 		}
174A: 10       PUSH  X
174B: 7C 10 50 LCALL 0x1050
174E: 20       POP   X
(0386) 		
174F: 52 00    MOV   A,[X+0]
1751: 08       PUSH  A
1752: 52 01    MOV   A,[X+1]
1754: 08       PUSH  A
1755: 7C 1F 68 LCALL _atoi
1758: 62 D0 00 MOV   REG[208],0
175B: 51 99    MOV   A,[__r1]
175D: 08       PUSH  A
175E: 50 18    MOV   A,24
1760: 08       PUSH  A
1761: 50 03    MOV   A,3
1763: 08       PUSH  A
1764: 50 04    MOV   A,4
1766: 08       PUSH  A
1767: 52 04    MOV   A,[X+4]
1769: 08       PUSH  A
176A: 93 46    CALL  _servoInstruction
176C: 38 F9    ADD   SP,249
(0387) 		RX_TIMEOUT_Stop();
(0388) 		TIMEOUT = 0;
(0389) 		RX_TIMEOUT_Start();
(0390) 	}
(0391) 	
176E: 83 1D    JMP   0x1A8C
(0392) 	return response;
1770: 62 D0 00 MOV   REG[208],0
1773: 52 01    MOV   A,[X+1]
1775: 53 99    MOV   [__r1],A
1777: 52 00    MOV   A,[X+0]
1779: 60 D4    MOV   REG[212],A
177B: 3E 99    MVI   A,[__r1]
177D: 53 99    MOV   [__r1],A
177F: 55 9A 00 MOV   [__r0],0
1782: 3C 9A 00 CMP   [__r0],0
1785: B0 05    JNZ   0x178B
1787: 39 72    CMP   A,114
1789: A0 0E    JZ    0x1798
178B: 62 D0 00 MOV   REG[208],0
178E: 3C 9A 00 CMP   [__r0],0
1791: B2 FA    JNZ   0x1A8C
1793: 3C 99 52 CMP   [__r1],82
1796: B2 F5    JNZ   0x1A8C
(0393) }
(0394) 
1798: 10       PUSH  X
1799: 7C 10 7F LCALL 0x107F
179C: 62 D0 00 MOV   REG[208],0
179F: 53 9A    MOV   [__r0],A
17A1: 5A 99    MOV   [__r1],X
17A3: 20       POP   X
17A4: 51 99    MOV   A,[__r1]
17A6: 54 01    MOV   [X+1],A
17A8: 51 9A    MOV   A,[__r0]
17AA: 54 00    MOV   [X+0],A
17AC: 3C 9A 00 CMP   [__r0],0
17AF: B0 06    JNZ   0x17B6
17B1: 3C 99 00 CMP   [__r1],0
17B4: A2 D7    JZ    0x1A8C
(0395) // This function transmits a hello message.
(0396) void sayHello(void)
17B6: 52 00    MOV   A,[X+0]
17B8: 08       PUSH  A
17B9: 52 01    MOV   A,[X+1]
17BB: 08       PUSH  A
17BC: 7C 1F 68 LCALL _atoi
17BF: 38 FE    ADD   SP,254
17C1: 62 D0 00 MOV   REG[208],0
17C4: 51 99    MOV   A,[__r1]
17C6: 54 04    MOV   [X+4],A
(0397) {
17C8: 10       PUSH  X
17C9: 7C 10 7F LCALL 0x107F
17CC: 62 D0 00 MOV   REG[208],0
17CF: 53 9A    MOV   [__r0],A
17D1: 5A 99    MOV   [__r1],X
17D3: 20       POP   X
17D4: 51 99    MOV   A,[__r1]
17D6: 54 01    MOV   [X+1],A
17D8: 51 9A    MOV   A,[__r0]
17DA: 54 00    MOV   [X+0],A
17DC: 3C 9A 00 CMP   [__r0],0
17DF: B0 06    JNZ   0x17E6
17E1: 3C 99 00 CMP   [__r1],0
17E4: A2 A7    JZ    0x1A8C
(0398) 	configToggle(TX_MODE);				// Toggle into TX mode.
(0399) 			
17E6: 62 D0 00 MOV   REG[208],0
17E9: 52 01    MOV   A,[X+1]
17EB: 53 99    MOV   [__r1],A
17ED: 52 00    MOV   A,[X+0]
17EF: 60 D4    MOV   REG[212],A
17F1: 3E 99    MVI   A,[__r1]
17F3: 53 99    MOV   [__r1],A
17F5: 55 9A 00 MOV   [__r0],0
17F8: 3C 9A 00 CMP   [__r0],0
17FB: B0 05    JNZ   0x1801
17FD: 39 61    CMP   A,97
17FF: A0 0E    JZ    0x180E
1801: 62 D0 00 MOV   REG[208],0
1804: 3C 9A 00 CMP   [__r0],0
1807: B0 CC    JNZ   0x18D4
1809: 3C 99 41 CMP   [__r1],65
180C: B0 C7    JNZ   0x18D4
(0400) 	// Transmit a hello.
(0401) 	TRANSMIT_PutChar(START_TRANSMIT);
180E: 10       PUSH  X
180F: 7C 10 50 LCALL 0x1050
1812: 20       POP   X
(0402) 	TRANSMIT_PutChar(START_TRANSMIT);
1813: 50 02    MOV   A,2
1815: 08       PUSH  A
1816: 50 24    MOV   A,36
1818: 08       PUSH  A
1819: 50 02    MOV   A,2
181B: 08       PUSH  A
181C: 50 04    MOV   A,4
181E: 08       PUSH  A
181F: 52 04    MOV   A,[X+4]
1821: 08       PUSH  A
1822: 92 8E    CALL  _servoInstruction
(0403) 	TRANSMIT_PutChar(MASTER_ID);
1824: 50 00    MOV   A,0
1826: 08       PUSH  A
1827: 50 01    MOV   A,1
1829: 08       PUSH  A
182A: 93 BC    CALL  _configToggle
182C: 38 F9    ADD   SP,249
182E: 80 94    JMP   0x18C3
(0404) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
(0405) 	TRANSMIT_PutChar(HELLO_BYTE);
(0406) 	TRANSMIT_PutChar(END_TRANSMIT);
(0407) 	TRANSMIT_PutChar(END_TRANSMIT);
(0408) 	
1830: 10       PUSH  X
1831: 7C 0B 34 LCALL 0x0B34
1834: 62 D0 00 MOV   REG[208],0
1837: 20       POP   X
1838: 39 FF    CMP   A,255
183A: B0 88    JNZ   0x18C3
(0409) 	// Wait for the transmission to finish.
(0410) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
183C: 10       PUSH  X
183D: 7C 0B 2C LCALL 0x0B2C
1840: 62 D0 00 MOV   REG[208],0
1843: 20       POP   X
1844: 39 FF    CMP   A,255
1846: B0 7C    JNZ   0x18C3
(0411) 	
(0412) 	xmitWait();
1848: 10       PUSH  X
1849: 7C 0B 2C LCALL 0x0B2C
184C: 62 D0 00 MOV   REG[208],0
184F: 20       POP   X
1850: 3B 04    CMP   A,[X+4]
1852: B0 70    JNZ   0x18C3
(0413) 	
(0414) 	configToggle(RX_MODE);				// Listen for the response.
1854: 10       PUSH  X
1855: 7C 0B 2C LCALL 0x0B2C
1858: 62 D0 00 MOV   REG[208],0
185B: 20       POP   X
185C: 39 04    CMP   A,4
185E: B0 64    JNZ   0x18C3
(0415) }
(0416) 
1860: 10       PUSH  X
1861: 7C 0B 2C LCALL 0x0B2C
1864: 62 D0 00 MOV   REG[208],0
1867: 20       POP   X
1868: 39 00    CMP   A,0
186A: B0 58    JNZ   0x18C3
(0417) // This function returns whether or not a valid transmission has been received.
(0418) int validTransmission(void)
186C: 10       PUSH  X
186D: 7C 0B 2C LCALL 0x0B2C
1870: 62 D0 00 MOV   REG[208],0
1873: 20       POP   X
1874: 54 05    MOV   [X+5],A
(0419) {
1876: 10       PUSH  X
1877: 7C 0B 2C LCALL 0x0B2C
187A: 62 D0 00 MOV   REG[208],0
187D: 20       POP   X
187E: 54 06    MOV   [X+6],A
(0420) 	int valid_transmit = 0;
(0421) 	int i = 0;
1880: 50 00    MOV   A,0
1882: 08       PUSH  A
1883: 50 02    MOV   A,2
1885: 08       PUSH  A
1886: 93 60    CALL  _configToggle
(0422) 	
(0423) 	if(RECEIVE_cGetChar() == START_TRANSMIT)
1888: 52 05    MOV   A,[X+5]
188A: 54 03    MOV   [X+3],A
188C: 52 06    MOV   A,[X+6]
188E: 54 02    MOV   [X+2],A
(0424) 	{
1890: 50 00    MOV   A,0
1892: 08       PUSH  A
1893: 50 0A    MOV   A,10
1895: 08       PUSH  A
1896: 52 02    MOV   A,[X+2]
1898: 08       PUSH  A
1899: 52 03    MOV   A,[X+3]
189B: 08       PUSH  A
189C: 52 00    MOV   A,[X+0]
189E: 08       PUSH  A
189F: 52 01    MOV   A,[X+1]
18A1: 08       PUSH  A
18A2: 7C 20 A9 LCALL _itoa
18A5: 38 F8    ADD   SP,248
(0425) 		COMMAND_SOURCE = RECEIVE_cGetChar();
18A7: 10       PUSH  X
18A8: 52 00    MOV   A,[X+0]
18AA: 08       PUSH  A
18AB: 52 01    MOV   A,[X+1]
18AD: 5C       MOV   X,A
18AE: 18       POP   A
18AF: 7C 0F CF LCALL 0x0FCF
18B2: 20       POP   X
(0426) 		COMMAND_DESTINATION = RECEIVE_cGetChar();
18B3: 10       PUSH  X
18B4: 50 0A    MOV   A,10
18B6: 7C 0F 92 LCALL 0x0F92
18B9: 20       POP   X
(0427) 		COMMAND_TYPE = RECEIVE_cGetChar();
(0428) 		PARAM[0] = RECEIVE_cGetChar();
18BA: 62 D0 00 MOV   REG[208],0
18BD: 55 A0 05 MOV   [TIMEOUT+1],5
18C0: 55 9F 00 MOV   [TIMEOUT],0
18C3: 62 D0 00 MOV   REG[208],0
18C6: 51 A0    MOV   A,[TIMEOUT+1]
18C8: 11 05    SUB   A,5
18CA: 51 9F    MOV   A,[TIMEOUT]
18CC: 31 80    XOR   A,128
18CE: 19 80    SBB   A,128
18D0: CF 5F    JC    0x1830
(0429) 		
(0430) 		while(PARAM[i] != END_TRANSMIT)
(0431) 		{
(0432) 			i++;
(0433) 			PARAM[i] = RECEIVE_cGetChar();
(0434) 		}
(0435) 		
18D2: 81 B9    JMP   0x1A8C
(0436) 		valid_transmit = 1;
18D4: 62 D0 00 MOV   REG[208],0
18D7: 52 01    MOV   A,[X+1]
18D9: 53 99    MOV   [__r1],A
18DB: 52 00    MOV   A,[X+0]
18DD: 60 D4    MOV   REG[212],A
18DF: 3E 99    MVI   A,[__r1]
18E1: 53 99    MOV   [__r1],A
18E3: 55 9A 00 MOV   [__r0],0
18E6: 3C 9A 00 CMP   [__r0],0
18E9: B0 05    JNZ   0x18EF
18EB: 39 70    CMP   A,112
18ED: A0 0E    JZ    0x18FC
18EF: 62 D0 00 MOV   REG[208],0
18F2: 3C 9A 00 CMP   [__r0],0
18F5: B0 A5    JNZ   0x199B
18F7: 3C 99 50 CMP   [__r1],80
18FA: B0 A0    JNZ   0x199B
(0437) 	}
(0438) 	
18FC: 10       PUSH  X
18FD: 7C 10 50 LCALL 0x1050
1900: 20       POP   X
(0439) 	return valid_transmit;
1901: 50 01    MOV   A,1
1903: 08       PUSH  A
1904: 50 18    MOV   A,24
1906: 08       PUSH  A
1907: 50 02    MOV   A,2
1909: 08       PUSH  A
190A: 50 04    MOV   A,4
190C: 08       PUSH  A
190D: 52 04    MOV   A,[X+4]
190F: 08       PUSH  A
1910: 91 A0    CALL  _servoInstruction
(0440) }
1912: 50 00    MOV   A,0
1914: 08       PUSH  A
1915: 50 01    MOV   A,1
1917: 08       PUSH  A
1918: 92 CE    CALL  _configToggle
191A: 38 F9    ADD   SP,249
191C: 80 6D    JMP   0x198A
(0441) 
(0442) // This function decodes the transmission and takes the correct action.
(0443) void decodeTransmission(void)
(0444) {
(0445) 	char* param;
191E: 10       PUSH  X
191F: 7C 0B 34 LCALL 0x0B34
1922: 62 D0 00 MOV   REG[208],0
1925: 20       POP   X
1926: 39 FF    CMP   A,255
1928: B0 61    JNZ   0x198A
(0446) 	char ID;
(0447) 	char tempByte;
192A: 10       PUSH  X
192B: 7C 0B 2C LCALL 0x0B2C
192E: 62 D0 00 MOV   REG[208],0
1931: 20       POP   X
1932: 39 FF    CMP   A,255
1934: B0 55    JNZ   0x198A
(0448) 	char angle[2];
(0449) 	int total = 0;
1936: 10       PUSH  X
1937: 7C 0B 2C LCALL 0x0B2C
193A: 62 D0 00 MOV   REG[208],0
193D: 20       POP   X
193E: 3B 04    CMP   A,[X+4]
1940: B0 49    JNZ   0x198A
(0450) 	
(0451) 	if(param = COMP_SERIAL_szGetParam())
1942: 10       PUSH  X
1943: 7C 0B 2C LCALL 0x0B2C
1946: 62 D0 00 MOV   REG[208],0
1949: 20       POP   X
194A: 39 03    CMP   A,3
194C: B0 3D    JNZ   0x198A
(0452) 	{
(0453) 		if((param[0] == 'n') || (param[0] == 'N'))
194E: 10       PUSH  X
194F: 7C 0B 2C LCALL 0x0B2C
1952: 62 D0 00 MOV   REG[208],0
1955: 20       POP   X
1956: 39 00    CMP   A,0
1958: B0 31    JNZ   0x198A
(0454) 		{
(0455) 			COMP_SERIAL_CmdReset();
195A: 10       PUSH  X
195B: 7C 0B 2C LCALL 0x0B2C
195E: 62 D0 00 MOV   REG[208],0
1961: 20       POP   X
1962: 54 07    MOV   [X+7],A
(0456) 			itoa(param,NUM_MODULES,10);
(0457) 			COMP_SERIAL_PutString(param);
1964: 50 00    MOV   A,0
1966: 08       PUSH  A
1967: 50 02    MOV   A,2
1969: 08       PUSH  A
196A: 92 7C    CALL  _configToggle
196C: 38 FE    ADD   SP,254
(0458) 			COMP_SERIAL_PutChar('\n');
(0459) 		}
(0460) 		else if((param[0] == 'w') || (param[0] == 'W'))
196E: 62 D0 00 MOV   REG[208],0
1971: 52 07    MOV   A,[X+7]
1973: 01 30    ADD   A,48
1975: 10       PUSH  X
1976: 7C 0F 92 LCALL 0x0F92
1979: 20       POP   X
(0461) 		{
197A: 10       PUSH  X
197B: 50 0A    MOV   A,10
197D: 7C 0F 92 LCALL 0x0F92
1980: 20       POP   X
(0462) 			if(param = COMP_SERIAL_szGetParam())
(0463) 			{
1981: 62 D0 00 MOV   REG[208],0
1984: 55 A0 05 MOV   [TIMEOUT+1],5
1987: 55 9F 00 MOV   [TIMEOUT],0
198A: 62 D0 00 MOV   REG[208],0
198D: 51 A0    MOV   A,[TIMEOUT+1]
198F: 11 05    SUB   A,5
1991: 51 9F    MOV   A,[TIMEOUT]
1993: 31 80    XOR   A,128
1995: 19 80    SBB   A,128
1997: CF 86    JC    0x191E
(0464) 				ID = atoi(param);
(0465) 				if(param = COMP_SERIAL_szGetParam())
(0466) 				{
(0467) 					if((param[0] == 'a') || (param[0] == 'A'))
(0468) 					{
(0469) 						if(param = COMP_SERIAL_szGetParam())
(0470) 						{
1999: 80 F2    JMP   0x1A8C
(0471) 							COMP_SERIAL_CmdReset();
199B: 62 D0 00 MOV   REG[208],0
199E: 52 01    MOV   A,[X+1]
19A0: 53 99    MOV   [__r1],A
19A2: 52 00    MOV   A,[X+0]
19A4: 60 D4    MOV   REG[212],A
19A6: 3E 99    MVI   A,[__r1]
19A8: 53 99    MOV   [__r1],A
19AA: 55 9A 00 MOV   [__r0],0
19AD: 3C 9A 00 CMP   [__r0],0
19B0: B0 05    JNZ   0x19B6
19B2: 39 74    CMP   A,116
19B4: A0 0E    JZ    0x19C3
19B6: 62 D0 00 MOV   REG[208],0
19B9: 3C 9A 00 CMP   [__r0],0
19BC: B0 68    JNZ   0x1A25
19BE: 3C 99 54 CMP   [__r1],84
19C1: B0 63    JNZ   0x1A25
(0472) 							total = atoi(param);
(0473) 							angle[0] = total%256;
19C3: 10       PUSH  X
19C4: 7C 10 50 LCALL 0x1050
19C7: 20       POP   X
(0474) 							angle[1] = total/256;
19C8: 62 D0 00 MOV   REG[208],0
19CB: 52 04    MOV   A,[X+4]
19CD: 53 99    MOV   [__r1],A
19CF: 50 00    MOV   A,0
19D1: 08       PUSH  A
19D2: 51 99    MOV   A,[__r1]
19D4: 08       PUSH  A
19D5: 7C 11 4A LCALL _pingModule
19D8: 38 FE    ADD   SP,254
19DA: 62 D0 00 MOV   REG[208],0
19DD: 3C 9A 00 CMP   [__r0],0
19E0: B0 06    JNZ   0x19E7
19E2: 3C 99 00 CMP   [__r1],0
19E5: A0 A6    JZ    0x1A8C
(0475) 							longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
(0476) 						}
19E7: 50 00    MOV   A,0
19E9: 08       PUSH  A
19EA: 50 02    MOV   A,2
19EC: 08       PUSH  A
19ED: 91 F9    CALL  _configToggle
(0477) 					}
(0478) 					else if((param[0] == 'p') || (param[0] == 'P'))
19EF: 62 D0 00 MOV   REG[208],0
19F2: 51 88    MOV   A,[PARAM]
19F4: 54 03    MOV   [X+3],A
19F6: 56 02 00 MOV   [X+2],0
(0479) 					{
19F9: 50 00    MOV   A,0
19FB: 08       PUSH  A
19FC: 50 0A    MOV   A,10
19FE: 08       PUSH  A
19FF: 52 02    MOV   A,[X+2]
1A01: 08       PUSH  A
1A02: 52 03    MOV   A,[X+3]
1A04: 08       PUSH  A
1A05: 52 00    MOV   A,[X+0]
1A07: 08       PUSH  A
1A08: 52 01    MOV   A,[X+1]
1A0A: 08       PUSH  A
1A0B: 7C 20 A9 LCALL _itoa
1A0E: 38 F8    ADD   SP,248
(0480) 						if(param = COMP_SERIAL_szGetParam())
1A10: 10       PUSH  X
1A11: 52 00    MOV   A,[X+0]
1A13: 08       PUSH  A
1A14: 52 01    MOV   A,[X+1]
1A16: 5C       MOV   X,A
1A17: 18       POP   A
1A18: 7C 0F CF LCALL 0x0FCF
1A1B: 20       POP   X
(0481) 						{
1A1C: 10       PUSH  X
1A1D: 50 0A    MOV   A,10
1A1F: 7C 0F 92 LCALL 0x0F92
1A22: 20       POP   X
(0482) 							COMP_SERIAL_CmdReset();
(0483) 							servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
1A23: 80 68    JMP   0x1A8C
(0484) 						}
1A25: 62 D0 00 MOV   REG[208],0
1A28: 52 01    MOV   A,[X+1]
1A2A: 53 99    MOV   [__r1],A
1A2C: 52 00    MOV   A,[X+0]
1A2E: 60 D4    MOV   REG[212],A
1A30: 3E 99    MVI   A,[__r1]
1A32: 53 99    MOV   [__r1],A
1A34: 55 9A 00 MOV   [__r0],0
1A37: 3C 9A 00 CMP   [__r0],0
1A3A: B0 05    JNZ   0x1A40
1A3C: 39 63    CMP   A,99
1A3E: A0 0E    JZ    0x1A4D
1A40: 62 D0 00 MOV   REG[208],0
1A43: 3C 9A 00 CMP   [__r0],0
1A46: B0 45    JNZ   0x1A8C
1A48: 3C 99 43 CMP   [__r1],67
1A4B: B0 40    JNZ   0x1A8C
(0485) 					}
(0486) 				}
1A4D: 10       PUSH  X
1A4E: 7C 10 50 LCALL 0x1050
1A51: 20       POP   X
(0487) 			}
1A52: 62 D0 00 MOV   REG[208],0
1A55: 52 04    MOV   A,[X+4]
1A57: 53 99    MOV   [__r1],A
1A59: 50 00    MOV   A,0
1A5B: 08       PUSH  A
1A5C: 51 99    MOV   A,[__r1]
1A5E: 08       PUSH  A
1A5F: 7C 11 4A LCALL _pingModule
1A62: 38 FE    ADD   SP,254
1A64: 62 D0 00 MOV   REG[208],0
1A67: 3C 9A 00 CMP   [__r0],0
1A6A: B0 06    JNZ   0x1A71
1A6C: 3C 99 00 CMP   [__r1],0
1A6F: A0 1C    JZ    0x1A8C
(0488) 		}
(0489) 		else if((param[0] == 'r') || (param[0] == 'R'))
1A71: 50 00    MOV   A,0
1A73: 08       PUSH  A
1A74: 50 02    MOV   A,2
1A76: 08       PUSH  A
1A77: 91 6F    CALL  _configToggle
1A79: 38 FE    ADD   SP,254
(0490) 		{			
(0491) 			if(param = COMP_SERIAL_szGetParam())
1A7B: 10       PUSH  X
1A7C: 62 D0 00 MOV   REG[208],0
1A7F: 51 89    MOV   A,[PARAM+1]
1A81: 7C 0F 92 LCALL 0x0F92
1A84: 20       POP   X
(0492) 			{
1A85: 10       PUSH  X
1A86: 50 0A    MOV   A,10
1A88: 7C 0F 92 LCALL 0x0F92
1A8B: 20       POP   X
(0493) 				ID = atoi(param);
(0494) 				if(param = COMP_SERIAL_szGetParam())
(0495) 				{
(0496) 					if((param[0] == 'a') || (param[0] == 'A'))
(0497) 					{
(0498) 						COMP_SERIAL_CmdReset();
(0499) 						servoInstruction(ID,4,READ_SERVO,36,2);
(0500) 						configToggle(RX_MODE);
1A8C: 62 D0 00 MOV   REG[208],0
1A8F: 3C 9D 00 CMP   [STATE],0
1A92: B0 06    JNZ   0x1A99
1A94: 3C 9E 02 CMP   [STATE+1],2
1A97: A0 0D    JZ    0x1AA5
(0501) 							
(0502) 						// Loop until we read a response or time out.
1A99: 50 00    MOV   A,0
1A9B: 08       PUSH  A
1A9C: 50 02    MOV   A,2
1A9E: 08       PUSH  A
1A9F: 91 47    CALL  _configToggle
1AA1: 38 FE    ADD   SP,254
(0503) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
1AA3: 80 0A    JMP   0x1AAE
(0504) 						{
(0505) 							if(RECEIVE_cReadChar() == SERVO_START)
(0506) 							{
1AA5: 62 D0 00 MOV   REG[208],0
1AA8: 55 A0 00 MOV   [TIMEOUT+1],0
1AAB: 55 9F 00 MOV   [TIMEOUT],0
(0507) 								if(RECEIVE_cGetChar() == SERVO_START)
1AAE: 38 F8    ADD   SP,248
1AB0: 20       POP   X
1AB1: 7F       RET   
(0508) 								{
(0509) 									if(RECEIVE_cGetChar() == ID)
(0510) 									{
(0511) 										if(RECEIVE_cGetChar() == 4)
(0512) 										{
(0513) 											if(RECEIVE_cGetChar() == 0)
_servoInstruction:
  total                --> X+1
  checksum             --> X+0
  value                --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
1AB2: 10       PUSH  X
1AB3: 4F       MOV   X,SP
1AB4: 38 03    ADD   SP,3
(0514) 											{
(0515) 												angle[0] = RECEIVE_cGetChar();
(0516) 												angle[1] = RECEIVE_cGetChar();
(0517) 												
1AB6: 62 D0 00 MOV   REG[208],0
1AB9: 52 FB    MOV   A,[X-5]
1ABB: 53 99    MOV   [__r1],A
1ABD: 55 9A 00 MOV   [__r0],0
1AC0: 52 FC    MOV   A,[X-4]
1AC2: 02 99    ADD   A,[__r1]
1AC4: 53 99    MOV   [__r1],A
1AC6: 50 00    MOV   A,0
1AC8: 0A 9A    ADC   A,[__r0]
1ACA: 53 9A    MOV   [__r0],A
1ACC: 52 FA    MOV   A,[X-6]
1ACE: 04 99    ADD   [__r1],A
1AD0: 0E 9A 00 ADC   [__r0],0
1AD3: 52 F9    MOV   A,[X-7]
1AD5: 04 99    ADD   [__r1],A
1AD7: 0E 9A 00 ADC   [__r0],0
1ADA: 52 F8    MOV   A,[X-8]
1ADC: 53 97    MOV   [__r3],A
1ADE: 55 98 00 MOV   [__r2],0
1AE1: 51 99    MOV   A,[__r1]
1AE3: 02 97    ADD   A,[__r3]
1AE5: 54 02    MOV   [X+2],A
1AE7: 51 9A    MOV   A,[__r0]
1AE9: 0A 98    ADC   A,[__r2]
1AEB: 54 01    MOV   [X+1],A
(0518) 												configToggle(PC_MODE);
(0519) 												
(0520) 												total = ((angle[1])*256) + angle[0];
1AED: 50 01    MOV   A,1
1AEF: 08       PUSH  A
1AF0: 50 00    MOV   A,0
1AF2: 08       PUSH  A
1AF3: 52 01    MOV   A,[X+1]
1AF5: 08       PUSH  A
1AF6: 52 02    MOV   A,[X+2]
1AF8: 08       PUSH  A
1AF9: 7C 1E D6 LCALL __divmod_16X16_16
1AFC: 38 FE    ADD   SP,254
1AFE: 18       POP   A
1AFF: 53 99    MOV   [__r1],A
1B01: 18       POP   A
1B02: 50 FF    MOV   A,255
1B04: 12 99    SUB   A,[__r1]
1B06: 54 00    MOV   [X+0],A
(0521) 												itoa(param,total,10);
(0522) 												COMP_SERIAL_PutString(param);
(0523) 												COMP_SERIAL_PutChar('\n');
1B08: 10       PUSH  X
1B09: 50 FF    MOV   A,255
1B0B: 7C 08 DF LCALL 0x08DF
1B0E: 20       POP   X
(0524) 
1B0F: 10       PUSH  X
1B10: 50 FF    MOV   A,255
1B12: 7C 08 DF LCALL 0x08DF
1B15: 20       POP   X
(0525) 												TIMEOUT = RX_TIMEOUT_DURATION;
1B16: 10       PUSH  X
1B17: 52 FC    MOV   A,[X-4]
1B19: 7C 08 DF LCALL 0x08DF
1B1C: 20       POP   X
(0526) 											}
1B1D: 10       PUSH  X
1B1E: 52 FB    MOV   A,[X-5]
1B20: 7C 08 DF LCALL 0x08DF
1B23: 20       POP   X
(0527) 										}
1B24: 10       PUSH  X
1B25: 52 FA    MOV   A,[X-6]
1B27: 7C 08 DF LCALL 0x08DF
1B2A: 20       POP   X
(0528) 									}
1B2B: 10       PUSH  X
1B2C: 52 F9    MOV   A,[X-7]
1B2E: 7C 08 DF LCALL 0x08DF
1B31: 20       POP   X
(0529) 								}
1B32: 10       PUSH  X
1B33: 52 F8    MOV   A,[X-8]
1B35: 7C 08 DF LCALL 0x08DF
1B38: 20       POP   X
(0530) 							}
1B39: 10       PUSH  X
1B3A: 52 00    MOV   A,[X+0]
1B3C: 7C 08 DF LCALL 0x08DF
1B3F: 20       POP   X
(0531) 						}
(0532) 					}
(0533) 					else if ((param[0] == 'p') || (param[0] == 'P'))
(0534) 					{
(0535) 						COMP_SERIAL_CmdReset();
(0536) 						servoInstruction(ID,4,READ_SERVO,24,1);
1B40: 93 00    CALL  _xmitWait
1B42: 38 FD    ADD   SP,253
1B44: 20       POP   X
1B45: 7F       RET   
(0537) 						configToggle(RX_MODE);
(0538) 							
(0539) 						// Loop until we read a response or time out.
(0540) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
(0541) 						{
_longServoInstruction:
  total                --> X+1
  checksum             --> X+0
  value2               --> X-9
  value1               --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
1B46: 10       PUSH  X
1B47: 4F       MOV   X,SP
1B48: 38 03    ADD   SP,3
(0542) 							if(RECEIVE_cReadChar() == SERVO_START)
(0543) 							{
(0544) 								if(RECEIVE_cGetChar() == SERVO_START)
(0545) 								{
1B4A: 62 D0 00 MOV   REG[208],0
1B4D: 52 FB    MOV   A,[X-5]
1B4F: 53 99    MOV   [__r1],A
1B51: 55 9A 00 MOV   [__r0],0
1B54: 52 FC    MOV   A,[X-4]
1B56: 02 99    ADD   A,[__r1]
1B58: 53 99    MOV   [__r1],A
1B5A: 50 00    MOV   A,0
1B5C: 0A 9A    ADC   A,[__r0]
1B5E: 53 9A    MOV   [__r0],A
1B60: 52 FA    MOV   A,[X-6]
1B62: 04 99    ADD   [__r1],A
1B64: 0E 9A 00 ADC   [__r0],0
1B67: 52 F9    MOV   A,[X-7]
1B69: 04 99    ADD   [__r1],A
1B6B: 0E 9A 00 ADC   [__r0],0
1B6E: 52 F8    MOV   A,[X-8]
1B70: 04 99    ADD   [__r1],A
1B72: 0E 9A 00 ADC   [__r0],0
1B75: 52 F7    MOV   A,[X-9]
1B77: 53 97    MOV   [__r3],A
1B79: 55 98 00 MOV   [__r2],0
1B7C: 51 99    MOV   A,[__r1]
1B7E: 02 97    ADD   A,[__r3]
1B80: 54 02    MOV   [X+2],A
1B82: 51 9A    MOV   A,[__r0]
1B84: 0A 98    ADC   A,[__r2]
1B86: 54 01    MOV   [X+1],A
(0546) 									if(RECEIVE_cGetChar() == ID)
(0547) 									{
(0548) 										if(RECEIVE_cGetChar() == 3)
1B88: 50 01    MOV   A,1
1B8A: 08       PUSH  A
1B8B: 50 00    MOV   A,0
1B8D: 08       PUSH  A
1B8E: 52 01    MOV   A,[X+1]
1B90: 08       PUSH  A
1B91: 52 02    MOV   A,[X+2]
1B93: 08       PUSH  A
1B94: 7C 1E D6 LCALL __divmod_16X16_16
1B97: 38 FE    ADD   SP,254
1B99: 18       POP   A
1B9A: 53 99    MOV   [__r1],A
1B9C: 18       POP   A
1B9D: 50 FF    MOV   A,255
1B9F: 12 99    SUB   A,[__r1]
1BA1: 54 00    MOV   [X+0],A
(0549) 										{
(0550) 											if(RECEIVE_cGetChar() == 0)
(0551) 											{
1BA3: 10       PUSH  X
1BA4: 50 FF    MOV   A,255
1BA6: 7C 08 DF LCALL 0x08DF
1BA9: 20       POP   X
(0552) 												tempByte = RECEIVE_cGetChar();
1BAA: 10       PUSH  X
1BAB: 50 FF    MOV   A,255
1BAD: 7C 08 DF LCALL 0x08DF
1BB0: 20       POP   X
(0553) 												
1BB1: 10       PUSH  X
1BB2: 52 FC    MOV   A,[X-4]
1BB4: 7C 08 DF LCALL 0x08DF
1BB7: 20       POP   X
(0554) 												configToggle(PC_MODE);
1BB8: 10       PUSH  X
1BB9: 52 FB    MOV   A,[X-5]
1BBB: 7C 08 DF LCALL 0x08DF
1BBE: 20       POP   X
(0555) 												
1BBF: 10       PUSH  X
1BC0: 52 FA    MOV   A,[X-6]
1BC2: 7C 08 DF LCALL 0x08DF
1BC5: 20       POP   X
(0556) 												// Convert tempByte to an ascii value and send.
1BC6: 10       PUSH  X
1BC7: 52 F9    MOV   A,[X-7]
1BC9: 7C 08 DF LCALL 0x08DF
1BCC: 20       POP   X
(0557) 												COMP_SERIAL_PutChar(tempByte + 48);
1BCD: 10       PUSH  X
1BCE: 52 F8    MOV   A,[X-8]
1BD0: 7C 08 DF LCALL 0x08DF
1BD3: 20       POP   X
(0558) 												COMP_SERIAL_PutChar('\n');
1BD4: 10       PUSH  X
1BD5: 52 F7    MOV   A,[X-9]
1BD7: 7C 08 DF LCALL 0x08DF
1BDA: 20       POP   X
(0559) 
1BDB: 10       PUSH  X
1BDC: 52 00    MOV   A,[X+0]
1BDE: 7C 08 DF LCALL 0x08DF
1BE1: 20       POP   X
(0560) 												TIMEOUT = RX_TIMEOUT_DURATION;
(0561) 											}
(0562) 										}
(0563) 									}
(0564) 								}
(0565) 							}
1BE2: 92 5E    CALL  _xmitWait
1BE4: 38 FD    ADD   SP,253
1BE6: 20       POP   X
1BE7: 7F       RET   
(0566) 						}
(0567) 					}
(0568) 					else if ((param[0] == 't') || (param[0] == 'T'))
(0569) 					{
(0570) 						COMP_SERIAL_CmdReset();
(0571) 						if(pingModule(ID))
_configToggle:
  mode                 --> X-5
1BE8: 10       PUSH  X
1BE9: 4F       MOV   X,SP
(0572) 						{
(0573) 							configToggle(PC_MODE);
1BEA: 43 00 80 OR    REG[0],128
(0574) 												
1BED: 41 02 7F AND   REG[2],127
(0575) 							total = PARAM[0];
(0576) 							itoa(param,total,10);
(0577) 							COMP_SERIAL_PutString(param);
(0578) 							COMP_SERIAL_PutChar('\n');
1BF0: 62 D0 00 MOV   REG[208],0
1BF3: 3C 9D 00 CMP   [STATE],0
1BF6: B0 06    JNZ   0x1BFD
1BF8: 3C 9E 00 CMP   [STATE+1],0
1BFB: A0 10    JZ    0x1C0C
(0579) 						}
(0580) 					}
1BFD: 62 D0 00 MOV   REG[208],0
1C00: 51 9D    MOV   A,[STATE]
1C02: 08       PUSH  A
1C03: 51 9E    MOV   A,[STATE+1]
1C05: 08       PUSH  A
1C06: 90 D9    CALL  _unloadConfig
1C08: 38 FE    ADD   SP,254
(0581) 					else if ((param[0] == 'c') || (param[0] == 'C'))
1C0A: 80 03    JMP   0x1C0E
(0582) 					{
(0583) 						COMP_SERIAL_CmdReset();
(0584) 						if(pingModule(ID))
1C0C: 90 C9    CALL  _unloadAllConfigs
(0585) 						{	
(0586) 							configToggle(PC_MODE);
(0587) 												
1C0E: 3D FB 00 CMP   [X-5],0
1C11: B0 32    JNZ   0x1C44
1C13: 3D FC 02 CMP   [X-4],2
1C16: B0 2D    JNZ   0x1C44
(0588) 							COMP_SERIAL_PutChar(PARAM[1]);
(0589) 							COMP_SERIAL_PutChar('\n');
1C18: 7C 06 51 LCALL 0x0651
(0590) 						}
(0591) 					}
(0592) 				}
1C1B: 10       PUSH  X
1C1C: 50 01    MOV   A,1
1C1E: 7C 0F 4D LCALL 0x0F4D
1C21: 20       POP   X
(0593) 			}
1C22: 10       PUSH  X
1C23: 50 00    MOV   A,0
1C25: 7C 0F 1E LCALL 0x0F1E
1C28: 20       POP   X
(0594) 		}
(0595) 	}
1C29: 10       PUSH  X
1C2A: 50 00    MOV   A,0
1C2C: 7C 08 A6 LCALL 0x08A6
1C2F: 20       POP   X
(0596) 	
(0597) 	if(STATE != PC_MODE)
1C30: 62 D0 00 MOV   REG[208],0
1C33: 55 A0 00 MOV   [TIMEOUT+1],0
1C36: 55 9F 00 MOV   [TIMEOUT],0
(0598) 	{
1C39: 62 D0 00 MOV   REG[208],0
1C3C: 55 9E 02 MOV   [STATE+1],2
1C3F: 55 9D 00 MOV   [STATE],0
(0599) 		configToggle(PC_MODE);
1C42: 80 7A    JMP   0x1CBD
(0600) 	}
1C44: 3D FB 00 CMP   [X-5],0
1C47: B0 2C    JNZ   0x1C74
1C49: 3D FC 01 CMP   [X-4],1
1C4C: B0 27    JNZ   0x1C74
(0601) 	else
(0602) 	{
1C4E: 7C 06 E8 LCALL 0x06E8
(0603) 		TIMEOUT = 0;
(0604) 	}
(0605) }
(0606) 
(0607) // This function receives a destination, command length, instruction type, address, and value.
1C51: 10       PUSH  X
1C52: 50 00    MOV   A,0
1C54: 7C 0B 1D LCALL 0x0B1D
1C57: 20       POP   X
(0608) // With these parameters, the function sends a packet to the communication bus.
(0609) void servoInstruction(char id, char length, char instruction, char address, char value)
(0610) {
1C58: 62 D0 00 MOV   REG[208],0
1C5B: 55 A0 00 MOV   [TIMEOUT+1],0
1C5E: 55 9F 00 MOV   [TIMEOUT],0
(0611) 	char checksum;
1C61: 10       PUSH  X
1C62: 7C 0A 3D LCALL 0x0A3D
(0612) 	int total;
1C65: 7C 0A 45 LCALL 0x0A45
1C68: 20       POP   X
(0613) 	
(0614) 	total = id + length + instruction + address + value;
1C69: 62 D0 00 MOV   REG[208],0
1C6C: 55 9E 01 MOV   [STATE+1],1
1C6F: 55 9D 00 MOV   [STATE],0
(0615) 	
1C72: 80 4A    JMP   0x1CBD
(0616) 	// Calculate the checksum value for our servo communication.
1C74: 3D FB 00 CMP   [X-5],0
1C77: B0 45    JNZ   0x1CBD
1C79: 3D FC 00 CMP   [X-4],0
1C7C: B0 40    JNZ   0x1CBD
(0617) 	checksum = 255-(total%256);
(0618) 	
1C7E: 7C 05 E8 LCALL 0x05E8
(0619) 	// Talk to the servo.
(0620) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
1C81: 10       PUSH  X
1C82: 50 00    MOV   A,0
1C84: 7C 09 7F LCALL 0x097F
1C87: 20       POP   X
(0621) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
(0622) 	TX_REPEATER_PutChar(id);			// Servo ID
1C88: 62 D0 00 MOV   REG[208],0
1C8B: 55 A0 00 MOV   [TIMEOUT+1],0
1C8E: 55 9F 00 MOV   [TIMEOUT],0
(0623) 	TX_REPEATER_PutChar(length);		// The instruction length.
1C91: 10       PUSH  X
1C92: 7C 08 2B LCALL 0x082B
(0624) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
1C95: 7C 08 33 LCALL 0x0833
1C98: 20       POP   X
(0625) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
(0626) 	TX_REPEATER_PutChar(value);			// The value to write or number of bytes to read.
1C99: 62 D0 00 MOV   REG[208],0
1C9C: 3C 9F 00 CMP   [TIMEOUT],0
1C9F: B0 06    JNZ   0x1CA6
1CA1: 3C A0 00 CMP   [TIMEOUT+1],0
1CA4: AF F4    JZ    0x1C99
(0627) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
(0628) 	
(0629) 	// Wait for the transmission to finish.
(0630) 	//while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
(0631) 	
(0632) 	// Make completely sure we're done.
1CA6: 10       PUSH  X
1CA7: 7C 08 37 LCALL 0x0837
1CAA: 20       POP   X
(0633) 	xmitWait();
1CAB: 62 D0 00 MOV   REG[208],0
1CAE: 55 A0 00 MOV   [TIMEOUT+1],0
1CB1: 55 9F 00 MOV   [TIMEOUT],0
(0634) }
(0635) 
1CB4: 62 D0 00 MOV   REG[208],0
1CB7: 55 9E 00 MOV   [STATE+1],0
1CBA: 55 9D 00 MOV   [STATE],0
(0636) // This function receives a destination, command length, instruction type, address, and two values.
(0637) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
(0638) {
(0639) 	char checksum;
(0640) 	int total;
(0641) 	
1CBD: 62 D0 00 MOV   REG[208],0
1CC0: 3C 9D 00 CMP   [STATE],0
1CC3: B0 0B    JNZ   0x1CCF
1CC5: 3C 9E 00 CMP   [STATE+1],0
1CC8: B0 06    JNZ   0x1CCF
(0642) 	total = id + length + instruction + address + value1 + value2;
(0643) 	
1CCA: 43 04 01 OR    REG[4],1
(0644) 	// Calculate the checksum value for our servo communication.
1CCD: 80 04    JMP   0x1CD2
(0645) 	checksum = 255-(total%256);
(0646) 	
(0647) 	// Talk to the servo.
1CCF: 41 04 FE AND   REG[4],254
(0648) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
(0649) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
(0650) 	TX_REPEATER_PutChar(id);			// Servo ID
(0651) 	TX_REPEATER_PutChar(length);		// The instruction length.
(0652) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
1CD2: 43 02 80 OR    REG[2],128
1CD5: 20       POP   X
1CD6: 7F       RET   
(0653) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
(0654) 	TX_REPEATER_PutChar(value1);		// The first value to write.
(0655) 	TX_REPEATER_PutChar(value2);		// The first value to write.
(0656) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
(0657) 	
(0658) 	// Wait for the transmission to finish.
(0659) 	//while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
_unloadAllConfigs:
1CD7: 7C 06 9B LCALL 0x069B
(0660) 	
1CDA: 7C 07 54 LCALL 0x0754
(0661) 	// Make completely sure we're done.
1CDD: 7C 06 2C LCALL 0x062C
1CE0: 7F       RET   
(0662) 	xmitWait();
(0663) }
(0664) 
(0665) // This function allows the program to pass an RX or TX mode flag for switching between modes on the
(0666) // half duplex UART serial communication line.
(0667) void configToggle(int mode)
_unloadConfig:
  config_num           --> X-5
1CE1: 10       PUSH  X
1CE2: 4F       MOV   X,SP
(0668) {
1CE3: 3D FB 00 CMP   [X-5],0
1CE6: B0 0B    JNZ   0x1CF2
1CE8: 3D FC 02 CMP   [X-4],2
1CEB: B0 06    JNZ   0x1CF2
(0669) 	// Disconnect from the global bus and leave the pin high.
(0670) 	PRT0DR |= 0b10000000;
1CED: 7C 06 9B LCALL 0x069B
(0671) 	PRT0GS &= 0b01111111;
1CF0: 80 1D    JMP   0x1D0E
(0672) 
1CF2: 3D FB 00 CMP   [X-5],0
1CF5: B0 0B    JNZ   0x1D01
1CF7: 3D FC 01 CMP   [X-4],1
1CFA: B0 06    JNZ   0x1D01
(0673) 	// Unload the configuration of the current state.
(0674) 	// If there is no state, blindly wipe all configurations.
1CFC: 7C 07 54 LCALL 0x0754
(0675) 	if(STATE)
1CFF: 80 0E    JMP   0x1D0E
(0676) 	{
1D01: 3D FB 00 CMP   [X-5],0
1D04: B0 09    JNZ   0x1D0E
1D06: 3D FC 00 CMP   [X-4],0
1D09: B0 04    JNZ   0x1D0E
(0677) 		unloadConfig(STATE);
(0678) 	}
1D0B: 7C 06 2C LCALL 0x062C
(0679) 	else
1D0E: 20       POP   X
1D0F: 7F       RET   
(0680) 	{
(0681) 		unloadAllConfigs();
(0682) 	}
(0683) 	
_initializeSlaves:
  num_timeouts         --> X+0
1D10: 10       PUSH  X
1D11: 4F       MOV   X,SP
1D12: 38 02    ADD   SP,2
(0684) 	if(mode == PC_MODE)
1D14: 56 01 00 MOV   [X+1],0
1D17: 56 00 00 MOV   [X+0],0
(0685) 	{
(0686) 		LoadConfig_pc_listener();
1D1A: 7C 14 7A LCALL _sayHello
1D1D: 81 0A    JMP   0x1E28
(0687) 		
(0688) 		//COMP_SERIAL_CmdReset(); 						// Initializes the RX buffer
(0689) 		COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
(0690) 		COMP_SERIAL_Start(UART_PARITY_NONE);			// Starts the UART.
(0691) 		
(0692) 		TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);		// Start the TX repeater.
1D1F: 10       PUSH  X
1D20: 7C 0B 34 LCALL 0x0B34
1D23: 62 D0 00 MOV   REG[208],0
1D26: 20       POP   X
1D27: 39 FC    CMP   A,252
1D29: B0 D8    JNZ   0x1E02
(0693) 		
(0694) 		TIMEOUT = 0;
1D2B: 7C 14 D0 LCALL _validTransmission
1D2E: 62 D0 00 MOV   REG[208],0
1D31: 3C 9A 00 CMP   [__r0],0
1D34: B0 06    JNZ   0x1D3B
1D36: 3C 99 00 CMP   [__r1],0
1D39: A0 EE    JZ    0x1E28
(0695) 		STATE = PC_MODE;
(0696) 	}
1D3B: 62 D0 00 MOV   REG[208],0
1D3E: 3C A5 C8 CMP   [COMMAND_TYPE],200
1D41: B0 E6    JNZ   0x1E28
(0697) 	else if(mode == RX_MODE)
(0698) 	{
(0699) 		LoadConfig_receiver_config();
1D43: 62 D0 00 MOV   REG[208],0
1D46: 3C A3 00 CMP   [COMMAND_DESTINATION],0
1D49: B0 DE    JNZ   0x1E28
(0700) 		
(0701) 		// Clear the buffer.
1D4B: 62 D0 00 MOV   REG[208],0
1D4E: 76 9C    INC   [NUM_MODULES+1]
1D50: 0E 9B 00 ADC   [NUM_MODULES],0
(0702) 		//RECEIVE_CmdReset();
1D53: 56 01 00 MOV   [X+1],0
1D56: 56 00 00 MOV   [X+0],0
(0703) 		// Start the receiver.
(0704) 		RECEIVE_Start(RECEIVE_PARITY_NONE);
1D59: 51 9B    MOV   A,[NUM_MODULES]
1D5B: 08       PUSH  A
1D5C: 51 9C    MOV   A,[NUM_MODULES+1]
1D5E: 08       PUSH  A
1D5F: 7C 12 45 LCALL _assignID
1D62: 38 FE    ADD   SP,254
1D64: 62 D0 00 MOV   REG[208],0
1D67: 3C 9A 00 CMP   [__r0],0
1D6A: B0 BD    JNZ   0x1E28
1D6C: 3C 99 00 CMP   [__r1],0
1D6F: B0 B8    JNZ   0x1E28
(0705) 		
(0706) 		// Start response timeout timer and enable its interrupt routine.
(0707) 		TIMEOUT = 0;
(0708) 		RX_TIMEOUT_EnableInt();
(0709) 		RX_TIMEOUT_Start();
1D71: 62 D0 00 MOV   REG[208],0
1D74: 51 9B    MOV   A,[NUM_MODULES]
1D76: 08       PUSH  A
1D77: 51 9C    MOV   A,[NUM_MODULES+1]
1D79: 08       PUSH  A
1D7A: 7C 11 4A LCALL _pingModule
1D7D: 38 FE    ADD   SP,254
1D7F: 62 D0 00 MOV   REG[208],0
1D82: 3C 9A 00 CMP   [__r0],0
1D85: B0 A2    JNZ   0x1E28
1D87: 3C 99 00 CMP   [__r1],0
1D8A: B0 9D    JNZ   0x1E28
(0710) 		
(0711) 		STATE = RX_MODE;
1D8C: 62 D0 00 MOV   REG[208],0
1D8F: 51 9B    MOV   A,[NUM_MODULES]
1D91: 08       PUSH  A
1D92: 51 9C    MOV   A,[NUM_MODULES+1]
1D94: 08       PUSH  A
1D95: 7C 11 4A LCALL _pingModule
1D98: 38 FE    ADD   SP,254
1D9A: 62 D0 00 MOV   REG[208],0
1D9D: 3C 9A 00 CMP   [__r0],0
1DA0: B0 87    JNZ   0x1E28
1DA2: 3C 99 00 CMP   [__r1],0
1DA5: B0 82    JNZ   0x1E28
(0712) 	}
(0713) 	else if(mode == TX_MODE)
1DA7: 62 D0 00 MOV   REG[208],0
1DAA: 51 9B    MOV   A,[NUM_MODULES]
1DAC: 08       PUSH  A
1DAD: 51 9C    MOV   A,[NUM_MODULES+1]
1DAF: 08       PUSH  A
1DB0: 7C 11 4A LCALL _pingModule
1DB3: 38 FE    ADD   SP,254
1DB5: 62 D0 00 MOV   REG[208],0
1DB8: 3C 9A 00 CMP   [__r0],0
1DBB: B0 6C    JNZ   0x1E28
1DBD: 3C 99 00 CMP   [__r1],0
1DC0: B0 67    JNZ   0x1E28
(0714) 	{
(0715) 		LoadConfig_transmitter_config();
1DC2: 62 D0 00 MOV   REG[208],0
1DC5: 51 9B    MOV   A,[NUM_MODULES]
1DC7: 08       PUSH  A
1DC8: 51 9C    MOV   A,[NUM_MODULES+1]
1DCA: 08       PUSH  A
1DCB: 7C 11 4A LCALL _pingModule
1DCE: 38 FE    ADD   SP,254
1DD0: 62 D0 00 MOV   REG[208],0
1DD3: 3C 9A 00 CMP   [__r0],0
1DD6: B0 51    JNZ   0x1E28
1DD8: 3C 99 00 CMP   [__r1],0
1DDB: B0 4C    JNZ   0x1E28
(0716) 		// Start the transmitter.
(0717) 		TRANSMIT_Start(TRANSMIT_PARITY_NONE);
1DDD: 62 D0 00 MOV   REG[208],0
1DE0: 51 9B    MOV   A,[NUM_MODULES]
1DE2: 08       PUSH  A
1DE3: 51 9C    MOV   A,[NUM_MODULES+1]
1DE5: 08       PUSH  A
1DE6: 7C 11 4A LCALL _pingModule
1DE9: 38 FE    ADD   SP,254
1DEB: 62 D0 00 MOV   REG[208],0
1DEE: 3C 9A 00 CMP   [__r0],0
1DF1: B0 36    JNZ   0x1E28
1DF3: 3C 99 00 CMP   [__r1],0
1DF6: B0 31    JNZ   0x1E28
(0718) 		
(0719) 		TIMEOUT = 0;
1DF8: 62 D0 00 MOV   REG[208],0
1DFB: 7A 9C    DEC   [NUM_MODULES+1]
1DFD: 1E 9B 00 SBB   [NUM_MODULES],0
(0720) 		TX_TIMEOUT_EnableInt();	// Make sure interrupts are enabled.
(0721) 		TX_TIMEOUT_Start();		// Start the timer.
(0722) 		
(0723) 		while(!TIMEOUT)
(0724) 		{
(0725) 			// Do nothing while we wait for one timeout period.
(0726) 			// This is to allow everyone to get in the right configuration.
(0727) 		}
(0728) 		
(0729) 		TX_TIMEOUT_Stop();		// Stop the timer.
1E00: 80 27    JMP   0x1E28
(0730) 		TIMEOUT = 0;			// Reset the timeout flag.
1E02: 62 D0 00 MOV   REG[208],0
1E05: 51 A0    MOV   A,[TIMEOUT+1]
1E07: 11 05    SUB   A,5
1E09: 51 9F    MOV   A,[TIMEOUT]
1E0B: 31 80    XOR   A,128
1E0D: 19 80    SBB   A,128
1E0F: C0 18    JC    0x1E28
(0731) 		
(0732) 		STATE = TX_MODE;
1E11: 77 01    INC   [X+1]
1E13: 0F 00 00 ADC   [X+0],0
(0733) 	}
(0734) 	
(0735) 	// Make sure to keep the LED on (active low).
1E16: 62 D0 00 MOV   REG[208],0
1E19: 51 9C    MOV   A,[NUM_MODULES+1]
1E1B: 11 FA    SUB   A,250
1E1D: 51 9B    MOV   A,[NUM_MODULES]
1E1F: 31 80    XOR   A,128
1E21: 19 80    SBB   A,128
1E23: D0 04    JNC   0x1E28
(0736) 	//PRT2DR &= 0b11111110;
(0737) 	
1E25: 7C 14 7A LCALL _sayHello
1E28: 52 01    MOV   A,[X+1]
1E2A: 11 0A    SUB   A,10
1E2C: 52 00    MOV   A,[X+0]
1E2E: 31 80    XOR   A,128
1E30: 19 80    SBB   A,128
1E32: CE EC    JC    0x1D1F
(0738) 	if(STATE == TX_MODE)
(0739) 	{
(0740) 		PRT1DR |= 0b00000001;
(0741) 	}
(0742) 	else
(0743) 	{
1E34: 50 00    MOV   A,0
1E36: 08       PUSH  A
1E37: 50 02    MOV   A,2
1E39: 08       PUSH  A
1E3A: 9D AC    CALL  _configToggle
1E3C: 38 FE    ADD   SP,254
1E3E: 38 FE    ADD   SP,254
1E40: 20       POP   X
1E41: 7F       RET   
(0744) 		PRT1DR &= 0b11111110;
(0745) 		
(0746) 	}
(0747) 	
_xmitWait:
  i                    --> X+0
1E42: 10       PUSH  X
1E43: 4F       MOV   X,SP
1E44: 38 02    ADD   SP,2
(0748) 	// Reconnect to the global bus.
(0749) 	PRT0GS |= 0b10000000;
(0750) }
1E46: 56 01 00 MOV   [X+1],0
1E49: 56 00 00 MOV   [X+0],0
1E4C: 77 01    INC   [X+1]
1E4E: 0F 00 00 ADC   [X+0],0
1E51: 52 01    MOV   A,[X+1]
1E53: 11 19    SUB   A,25
1E55: 52 00    MOV   A,[X+0]
1E57: 31 80    XOR   A,128
1E59: 19 80    SBB   A,128
1E5B: CF F0    JC    0x1E4C
1E5D: 38 FE    ADD   SP,254
1E5F: 20       POP   X
1E60: 7F       RET   
(0751) 
(0752) // This function blindly unloads all user configurations. This will be called once,
(0753) // when the system initially has no known state.
(0754) void unloadAllConfigs(void)
(0755) {
(0756) 	UnloadConfig_pc_listener();
(0757) 	UnloadConfig_receiver_config();
_TX_TIMEOUT_ISR:
1E61: 71 C0    OR    F,192
1E63: 08       PUSH  A
1E64: 5D D0    MOV   A,REG[208]
1E66: 08       PUSH  A
(0758) 	UnloadConfig_transmitter_config();
1E67: 62 D0 00 MOV   REG[208],0
1E6A: 76 A0    INC   [TIMEOUT+1]
1E6C: 0E 9F 00 ADC   [TIMEOUT],0
(0759) }
(0760) 
1E6F: 62 DA FD MOV   REG[218],253
1E72: 18       POP   A
1E73: 60 D0    MOV   REG[208],A
1E75: 18       POP   A
1E76: 7E       RETI  
(0761) // This function unloads the configuration corresponding to the config number passed to it.
(0762) // We do this instead of unloadAllConfigs to cut down on set up time.
(0763) void unloadConfig(int config_num)
(0764) {
_RX_TIMEOUT_ISR:
1E77: 71 C0    OR    F,192
1E79: 08       PUSH  A
1E7A: 5D D0    MOV   A,REG[208]
1E7C: 08       PUSH  A
(0765) 	if(config_num == PC_MODE)
1E7D: 62 D0 00 MOV   REG[208],0
1E80: 76 A0    INC   [TIMEOUT+1]
1E82: 0E 9F 00 ADC   [TIMEOUT],0
(0766) 	{
(0767) 		UnloadConfig_pc_listener();
1E85: 62 DA FD MOV   REG[218],253
1E88: 18       POP   A
1E89: 60 D0    MOV   REG[208],A
1E8B: 18       POP   A
1E8C: 7E       RETI  

FILE: lib\psocdynamicint.asm
                                   (0001) ; Generated by PSoC Designer 5.0.985.0
                                   (0002) ;
                                   (0003) ;
                                   (0004) ;  fakemasterINT.asm
                                   (0005) ;
                                   (0006) ;  Data: 29 October, 2001
                                   (0007) ;  Copyright Cypress MicroSystems 2001
                                   (0008) ;
                                   (0009) ;  This file is generated by the Device Editor on Application Generation.
                                   (0010) ;  It contains dispatch code that ensures that interrupt vectors are 
                                   (0011) ;  serviced by the appropriate ISR depending on the currently active
                                   (0012) ;  configuration.
                                   (0013) ;  
                                   (0014) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0015) ;  Edits to this file will not be preserved.
                                   (0016) ;
                                   (0017) include "PSoCDynamic.inc"
                                   (0018) include "m8c.inc"
                                   (0019) export	Dispatch_INTERRUPT_10
                                   (0020) export	Dispatch_INTERRUPT_9
                                   (0021) 
                                   (0022) 
                                   (0023) Dispatch_INTERRUPT_10:
1E8D: 08       PUSH  A             (0024) 	push	a
1E8E: 50 00    MOV   A,0           (0025) 	mov		a,0
1E90: 47 02 02 TST   [2],2         (0026) 	tst		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
1E93: B0 13    JNZ   0x1EA7        (0027) 	jnz		Dispatch_INTERRUPT_10_END
1E95: 50 04    MOV   A,4           (0028) 	mov		a,4
1E97: 47 02 04 TST   [2],4         (0029) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1E9A: B0 0C    JNZ   0x1EA7        (0030) 	jnz		Dispatch_INTERRUPT_10_END
1E9C: 50 08    MOV   A,8           (0031) 	mov		a,8
1E9E: 47 02 01 TST   [2],1         (0032) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1EA1: B0 05    JNZ   0x1EA7        (0033) 	jnz		Dispatch_INTERRUPT_10_END
1EA3: 18       POP   A             (0034) 	pop		a
1EA4: 7E       RETI                (0035) 	reti
                                   (0036) ; Stop Code Compressor from breaking table alignment
                                   (0037) ; The next instruction does not get executed.
1EA5: 71 00    OR    F,0           (0038) 	Suspend_CodeCompressor
                                   (0039) Dispatch_INTERRUPT_10_END:
1EA7: E0 01    JACC  0x1EA9        (0040) 	jacc	Dispatch_INTERRUPT_10_TBL
                                   (0041) Dispatch_INTERRUPT_10_TBL:
1EA9: 18       POP   A             (0042) 	pop		a
1EAA: 7D 08 8B LJMP  0x088B        (0043) 	ljmp	_TX_REPEATER_ISR
1EAD: 18       POP   A             (0044) 	pop		a
1EAE: 7D 0A 9D LJMP  0x0A9D        (0045) 	ljmp	_RECEIVE_ISR
1EB1: 18       POP   A             (0046) 	pop		a
1EB2: 7D 09 64 LJMP  0x0964        (0047) 	ljmp	_TRANSMIT_ISR
                                   (0048) ; Resume Code Compressor.
                                   (0049) ; The next instruction does not get executed.
1EB5: 38 00    ADD   SP,0          (0050) 	Resume_CodeCompressor
                                   (0051) 
                                   (0052) Dispatch_INTERRUPT_9:
1EB7: 08       PUSH  A             (0053) 	push	a
1EB8: 50 00    MOV   A,0           (0054) 	mov		a,0
1EBA: 47 02 04 TST   [2],4         (0055) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1EBD: B0 0C    JNZ   0x1ECA        (0056) 	jnz		Dispatch_INTERRUPT_9_END
1EBF: 50 04    MOV   A,4           (0057) 	mov		a,4
1EC1: 47 02 01 TST   [2],1         (0058) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1EC4: B0 05    JNZ   0x1ECA        (0059) 	jnz		Dispatch_INTERRUPT_9_END
1EC6: 18       POP   A             (0060) 	pop		a
1EC7: 7E       RETI                (0061) 	reti
                                   (0062) ; Stop Code Compressor from breaking table alignment
                                   (0063) ; The next instruction does not get executed.
1EC8: 71 00    OR    F,0           (0064) 	Suspend_CodeCompressor
                                   (0065) Dispatch_INTERRUPT_9_END:
1ECA: E0 01    JACC  0x1ECC        (0066) 	jacc	Dispatch_INTERRUPT_9_TBL
                                   (0067) Dispatch_INTERRUPT_9_TBL:
1ECC: 18       POP   A             (0068) 	pop		a
1ECD: 7D 1E 77 LJMP  _RX_TIMEOUT_ISR(0069) 	ljmp	_RX_TIMEOUT_ISR
1ED0: 18       POP   A             (0070) 	pop		a
1ED1: 7D 1E 61 LJMP  _TX_TIMEOUT_ISR(0071) 	ljmp	_TX_TIMEOUT_ISR
                                   (0072) ; Resume Code Compressor.
                                   (0073) ; The next instruction does not get executed.
                                   (0074) 	Resume_CodeCompressor

FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.985.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.01
