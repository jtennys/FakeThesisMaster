0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0116) ; Generated by PSoC Designer 5.0.985.0
                                   (0117) ;
                                   (0118) ;@Id: boot.tpl#895 @
0004: 30       HALT                (0119) ;=============================================================================
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0120) ;  FILENAME:   boot.asm
                                   (0121) ;  VERSION:    4.18
                                   (0122) ;  DATE:       28 June 2007
0008: 7E       RETI                (0123) ;
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0124) ;  DESCRIPTION:
                                   (0125) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                   (0126) ;
000C: 7E       RETI                (0127) ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
                                   (0128) ;
                                   (0129) ; NOTES:
                                   (0130) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
0010: 7E       RETI                (0131) ; the project's root directory to create BOOT.ASM. Any changes made to
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
                                   (0132) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                   (0133) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0134) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
0014: 7E       RETI                (0135) ; are not accidentally modified.
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0136) ;
                                   (0137) ;=============================================================================
                                   (0138) 
0018: 7E       RETI                (0139) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
0019: 30       HALT  
001A: 30       HALT  
001B: 30       HALT  
                                   (0140) include "m8c.inc"			;Part specific file
                                   (0141) include "m8ssc.inc"			;Part specific file
                                   (0142) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
001C: 7E       RETI                (0143) 
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0144) ;--------------------------------------
                                   (0145) ; Export Declarations
                                   (0146) ;--------------------------------------
0020: 7E       RETI                (0147) 
0021: 30       HALT  
0022: 30       HALT  
0023: 30       HALT  
                                   (0148) export __Start
                                   (0149) IF	(TOOLCHAIN & HITECH)
0024: 7D 1C 64 LJMP  Dispatch_INTERRUPT_9(0150) ELSE
0027: 7E       RETI                (0151) export __bss_start
                                   (0152) export __data_start
                                   (0153) export __idata_start
0028: 7D 1C 3A LJMP  Dispatch_INTERRUPT_10(0154) export __func_lit_start
002B: 7E       RETI                (0155) export __text_start
                                   (0156) ENDIF
                                   (0157) export  _bGetPowerSetting
                                   (0158) export   bGetPowerSetting
002C: 7E       RETI                (0159) 
002D: 30       HALT  
002E: 30       HALT  
002F: 30       HALT  
                                   (0160) 
                                   (0161) ;--------------------------------------
                                   (0162) ; Optimization flags
0030: 7E       RETI                (0163) ;--------------------------------------
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
                                   (0164) ;
                                   (0165) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0166) ; boot.asm. See the notes in the banner comment at the beginning of
0034: 7E       RETI                (0167) ; this file.
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
                                   (0168) 
                                   (0169) ; Optimization for Assembly language (only) projects and C-language projects
0038: 7D 0B C5 LJMP  0x0BC5        (0170) ; that do not depend on the C compiler to initialize the values of RAM variables.
003B: 7E       RETI                (0171) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0172) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0173) ;
003C: 7D 0B C6 LJMP  0x0BC6        (0174) IF	(TOOLCHAIN & HITECH)
003F: 7E       RETI                (0175) ; The C compiler will customize the startup code - it's not required here
                                   (0176) 
                                   (0177) C_LANGUAGE_SUPPORT:              equ 0
                                   (0178) ELSE
0040: 7E       RETI                (0179) C_LANGUAGE_SUPPORT:              equ 1
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
                                   (0180) ENDIF
                                   (0181) 
                                   (0182) 
0044: 7E       RETI                (0183) ; The following equate is required for proper operation. Reseting its value
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
                                   (0184) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                   (0185) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                   (0186) ; and PLL_Lock must take place within user code. See the family data sheet for
0048: 7E       RETI                (0187) ; the requirements of starting the ECO and PLL lock mode.
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
                                   (0188) ;
                                   (0189) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                   (0190) ;                invoking main
004C: 7E       RETI                (0191) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
                                   (0192) ;               the time code in main starts executing.
                                   (0193) ;
                                   (0194) WAIT_FOR_32K:                    equ 1
0050: 7E       RETI                (0195) 
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
                                   (0196) 
                                   (0197) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0198) ; to invoke the user's _main code. If _main executes a return instruction,
0054: 7E       RETI                (0199) ; boot provides an infinite loop. By changing the following equate from zero
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
                                   (0200) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0201) ; bytes on the stack which are otherwise required for the return address. If
                                   (0202) ; this option is enabled, _main must not return. (Beginning with the 4.2
0058: 7E       RETI                (0203) ; release, the C compiler automatically places an infinite loop at the end
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
                                   (0204) ; of main, rather than a return instruction.)
                                   (0205) ;
                                   (0206) ENABLE_LJMP_TO_MAIN:             equ 0
005C: 7E       RETI                (0207) 
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0208) 
                                   (0209) ;-----------------------------------------------------------------------------
                                   (0210) ; Interrupt Vector Table
0060: 7E       RETI                (0211) ;-----------------------------------------------------------------------------
0061: 30       HALT  
0062: 30       HALT  
0063: 30       HALT  
                                   (0212) ;
                                   (0213) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0214) ; a jump instruction to an ISR (Interrupt Service Routine), although
0064: 7E       RETI                (0215) ; very short ISRs could be encoded within the table itself. Normally,
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0216) ; vector jump targets are modified automatically according to the user
                                   (0217) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0218) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0219) ; configuration files. If you need to hard code a vector, update the
                                   (0220) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0221) ; of this file.
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) 
                                   (0224)     AREA TOP (ROM, ABS, CON)
                                   (0225) 
                                   (0226)     org   0                        ;Reset Interrupt Vector
                                   (0227) IF	(TOOLCHAIN & HITECH)
                                   (0228) ;   jmp   __Start                  ;C compiler fills in this vector
                                   (0229) ELSE
                                   (0230)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0231) ENDIF
                                   (0232) 
                                   (0233)     org   04h                      ;Supply Monitor Interrupt Vector
                                   (0234)     halt                           ;Stop execution if power falls too low
0068: 71 10    OR    F,16          (0235) 
006A: 62 FA 00 MOV   REG[250],0    (0236)     org   08h                      ;Analog Column 0 Interrupt Vector
006D: 62 E3 87 MOV   REG[227],135  (0237)     // call	void_handler
0070: 70 EF    AND   F,239         (0238)     reti
                                   (0239) 
                                   (0240)     org   0Ch                      ;Analog Column 1 Interrupt Vector
0072: 50 20    MOV   A,32          (0241)     // call	void_handler
0074: 28       ROMX                (0242)     reti
0075: 50 40    MOV   A,64          (0243) 
0077: 28       ROMX                (0244)     org   10h                      ;Analog Column 2 Interrupt Vector
0078: 50 60    MOV   A,96          (0245)     // call	void_handler
007A: 28       ROMX                (0246)     reti
                                   (0247) 
                                   (0248)     org   14h                      ;Analog Column 3 Interrupt Vector
                                   (0249)     // call	void_handler
                                   (0250)     reti
                                   (0251) 
                                   (0252)     org   18h                      ;VC3 Interrupt Vector
                                   (0253)     // call	void_handler
                                   (0254)     reti
                                   (0255) 
007B: 41 FE FB AND   REG[254],251  (0256)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0257)     // call	void_handler
                                   (0258)     reti
                                   (0259) 
                                   (0260)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                   (0261)     // call	void_handler
                                   (0262)     reti
                                   (0263) 
                                   (0264)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                   (0265)     ljmp	Dispatch_INTERRUPT_9
007E: 50 80    MOV   A,128         (0266)     reti
0080: 4E       SWAP  SP,A          (0267) 
                                   (0268)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                   (0269)     ljmp	Dispatch_INTERRUPT_10
                                   (0270)     reti
                                   (0271) 
                                   (0272)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                   (0273)     // call	void_handler
                                   (0274)     reti
                                   (0275) 
                                   (0276)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                   (0277)     // call	void_handler
                                   (0278)     reti
                                   (0279) 
                                   (0280)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                   (0281)     // call	void_handler
                                   (0282)     reti
                                   (0283) 
                                   (0284)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                   (0285)     ljmp	_COMP_SERIAL_TX_ISR
                                   (0286)     reti
                                   (0287) 
                                   (0288)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                   (0289)     ljmp	_COMP_SERIAL_RX_ISR
                                   (0290)     reti
                                   (0291) 
                                   (0292)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                   (0293)     // call	void_handler
                                   (0294)     reti
                                   (0295) 
                                   (0296)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                   (0297)     // call	void_handler
0081: 55 F8 00 MOV   [248],0       (0298)     reti
0084: 55 F9 00 MOV   [249],0       (0299) 
                                   (0300)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                   (0301)     // call	void_handler
                                   (0302)     reti
                                   (0303) 
                                   (0304)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                   (0305)     // call	void_handler
                                   (0306)     reti
                                   (0307) 
                                   (0308)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                   (0309)     // call	void_handler
                                   (0310)     reti
                                   (0311) 
                                   (0312)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                   (0313)     // call	void_handler
                                   (0314)     reti
                                   (0315) 
                                   (0316)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                   (0317)     // call	void_handler
                                   (0318)     reti
                                   (0319) 
                                   (0320)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                   (0321)     // call	void_handler
                                   (0322)     reti
0087: 71 10    OR    F,16          (0323) 
0089: 62 E0 02 MOV   REG[224],2    (0324)     org   60h                      ;PSoC I2C Interrupt Vector
008C: 70 EF    AND   F,239         (0325)     // call	void_handler
008E: 62 E3 38 MOV   REG[227],56   (0326)     reti
                                   (0327) 
                                   (0328)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0329)     // call	void_handler
                                   (0330)     reti
                                   (0331) 
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;  Start of Execution.
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0336) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0337) ;
                                   (0338) 
                                   (0339) IF	(TOOLCHAIN & HITECH)
                                   (0340)  	AREA PD_startup(CODE, REL, CON)
                                   (0341) ELSE
                                   (0342)     org 68h
                                   (0343) ENDIF
                                   (0344) __Start:
                                   (0345) 
                                   (0346)     ; initialize SMP values for voltage stabilization, if required,
                                   (0347)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0348)     ; least for now. 
                                   (0349)     ;
                                   (0350)     M8C_SetBank1
                                   (0351)     mov reg[0FAh], 0				;Reset flash location
                                   (0352)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
                                   (0353)     M8C_SetBank0
                                   (0354) 
                                   (0355)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
                                   (0356)     mov   A, 20h
0091: 62 71 05 MOV   REG[113],5    (0357)     romx
0094: 62 75 05 MOV   REG[117],5    (0358)     mov   A, 40h
0097: 62 79 05 MOV   REG[121],5    (0359)     romx
009A: 62 7D 05 MOV   REG[125],5    (0360)     mov   A, 60h
                                   (0361)     romx
                                   (0362)     ; %45%20%46%46% End workaround
                                   (0363) 
                                   (0364) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0365)     M8C_EnableWatchDog
                                   (0366) ENDIF
                                   (0367) 
                                   (0368) IF ( SELECT_32K )
                                   (0369)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                   (0370) ELSE
                                   (0371)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0372) ENDIF
                                   (0373) 
                                   (0374)     ;---------------------------
                                   (0375)     ; Set up the Temporary stack
                                   (0376)     ;---------------------------
                                   (0377)     ; A temporary stack is set up for the SSC instructions.
                                   (0378)     ; The real stack start will be assigned later.
                                   (0379)     ;
                                   (0380) _stack_start:          equ 80h
                                   (0381)     mov   A, _stack_start          ; Set top of stack to end of used RAM
                                   (0382)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0383) 
                                   (0384)     ;-----------------------------------------------
                                   (0385)     ; Set Power-related Trim & the AGND Bypass bit.
                                   (0386)     ;-----------------------------------------------
                                   (0387) 
009D: 62 D1 07 MOV   REG[209],7    (0388) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
00A0: 50 00    MOV   A,0           (0389)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
00A2: 4E       SWAP  SP,A          (0390)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
00A3: 62 D3 07 MOV   REG[211],7    (0391)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
00A6: 62 D0 00 MOV   REG[208],0    (0392)  ELSE                                          ; *** 12MHZ Main Oscillator ***
00A9: 62 D5 00 MOV   REG[213],0    (0393)   IF ( AGND_BYPASS )
00AC: 62 D4 00 MOV   REG[212],0    (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0395)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                   (0396)     ; bit in the write-only BDG_TR register. Recalculate the register
00AF: 71 C0    OR    F,192         (0397)     ; value using the proper trim values.
                                   (0398)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0399)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0400)   ENDIF
                                   (0401)  ENDIF
                                   (0402) ENDIF ; 5.0 V Operation
                                   (0403) 
                                   (0404) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                   (0405)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0406)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0407)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0408)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0409)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0410)  ENDIF
                                   (0411) ENDIF ; 3.3 Volt Operation
                                   (0412) 
                                   (0413)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
                                   (0414)     mov  [bSSC_KEYSP], 0
00B1: 7C 05 C9 LCALL 0x05C9        (0415) 
                                   (0416)     ;---------------------------------------
                                   (0417)     ; Initialize Crystal Oscillator and PLL
                                   (0418)     ;---------------------------------------
                                   (0419) 
                                   (0420) IF ( SELECT_32K & WAIT_FOR_32K )
                                   (0421)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                   (0422)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                   (0423)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                   (0424)     ; the ECO to stabilize.
                                   (0425)     ;
                                   (0426)     M8C_SetBank1
                                   (0427)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                   (0428)     M8C_SetBank0
                                   (0429)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                   (0430)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                   (0431)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                   (0432) .WaitFor1s:
                                   (0433)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                   (0434)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                   (0435)                                           ;   since interrupts are not globally enabled
                                   (0436) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                   (0437)     ; Either no ECO, or waiting for stable clock is to be done in main
                                   (0438)     M8C_SetBank1
                                   (0439)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                   (0440)     M8C_SetBank0
                                   (0441)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0442) 
                                   (0443) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                   (0444) 
                                   (0445) IF ( PLL_MODE )
                                   (0446)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
00B4: 62 D0 00 MOV   REG[208],0    (0447)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                   (0448)     ;
                                   (0449)     M8C_SetBank1
                                   (0450)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                   (0451)     M8C_SetBank0
                                   (0452)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                   (0453)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
00B7: 50 05    MOV   A,5           (0454) 
00B9: 57 C7    MOV   X,199         (0455) .WaitFor16ms:
00BB: 08       PUSH  A             (0456)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
00BC: 28       ROMX                (0457)     jz   .WaitFor16ms
00BD: 53 97    MOV   [__r0],A      (0458)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
00BF: 18       POP   A             (0459)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
00C0: 75       INC   X             (0460)     M8C_SetBank0
00C1: 09 00    ADC   A,0           (0461) 
00C3: 28       ROMX                (0462) IF      ( WAIT_FOR_32K )
00C4: 4B       SWAP  A,X           (0463) ELSE ; !( WAIT_FOR_32K )
00C5: 51 97    MOV   A,[151]       (0464)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                   (0465)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
00C7: 80 04    JMP   0x00CC        (0466) ENDIF ;(WAIT_FOR_32K)
                                   (0467) ENDIF ;(PLL_MODE)
                                   (0468) 
                                   (0469)     ;------------------------
                                   (0470)     ; Close CT leakage path.
                                   (0471)     ;------------------------
                                   (0472)     mov   reg[ACB00CR0], 05h
                                   (0473)     mov   reg[ACB01CR0], 05h
                                   (0474)     mov   reg[ACB02CR0], 05h
                                   (0475)     mov   reg[ACB03CR0], 05h
                                   (0476) 
                                   (0477) 
                                   (0478) IF	(TOOLCHAIN & HITECH)
                                   (0479)     ;---------------------------------------------
                                   (0480)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                   (0481)     ;---------------------------------------------
                                   (0482) 	global		__Lstackps
                                   (0483) 	mov     a,low __Lstackps
00C9: 75       INC   X             (0484) 	swap    a,sp
00CA: 09 00    ADC   A,0           (0485) 
                                   (0486) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0487)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                   (0488)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                   (0489)     RAM_SETPAGE_CUR 0
00CC: 62 E3 00 MOV   REG[227],0    (0490)     RAM_SETPAGE_MVW 0
00CF: 08       PUSH  A             (0491)     RAM_SETPAGE_MVR 0
00D0: 28       ROMX                (0492)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D1: 60 D5    MOV   REG[213],A    (0493)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
00D3: 74       INC   A             (0494)     ELSE
00D4: A0 4B    JZ    0x0120        (0495)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
00D6: 18       POP   A             (0496)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
00D7: 75       INC   X             (0497) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00D8: 09 00    ADC   A,0           (0498) ELSE
00DA: 08       PUSH  A             (0499)     ;---------------------------------------------
00DB: 28       ROMX                (0500)     ; ImageCraft Enter the Large Memory Model, if applicable
00DC: 53 97    MOV   [__r0],A      (0501)     ;---------------------------------------------
00DE: 18       POP   A             (0502) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DF: 75       INC   X             (0503)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00E0: 09 00    ADC   A,0           (0504)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00E2: 08       PUSH  A             (0505)     swap  A, SP
00E3: 28       ROMX                (0506)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00E4: A0 1C    JZ    0x0101        (0507)     RAM_SETPAGE_CUR 0
00E6: 53 96    MOV   [__r1],A      (0508)     RAM_SETPAGE_MVW 0
00E8: 18       POP   A             (0509)     RAM_SETPAGE_MVR 0
                                   (0510) 
                                   (0511)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                   (0512)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0513)   ELSE
                                   (0514)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0515)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0516) ELSE
00E9: 75       INC   X             (0517)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
00EA: 09 00    ADC   A,0           (0518)     swap  SP, A
00EC: 08       PUSH  A             (0519) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
00ED: 28       ROMX                (0520) ENDIF ;	TOOLCHAIN
00EE: 3F 97    MVI   [__r0],A      (0521) 
00F0: 47 97 FF TST   [151],255     (0522)     ;-------------------------
00F3: B0 06    JNZ   0x00FA        (0523)     ; Load Base Configuration
00F5: 5D D5    MOV   A,REG[213]    (0524)     ;-------------------------
00F7: 74       INC   A             (0525)     ; Load global parameter settings and load the user modules in the
00F8: 60 D5    MOV   REG[213],A    (0526)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0527)     ; to minimize start up time; (2) We may still need to play with the
00FA: 18       POP   A             (0528)     ; Sleep Timer.
00FB: 7A 96    DEC   [__r1]        (0529)     ;
00FD: BF EB    JNZ   0x00E9        (0530)     lcall LoadConfigInit
00FF: 8F C9    JMP   0x00C9        (0531) 
                                   (0532)     ;-----------------------------------
                                   (0533)     ; Initialize C Run-Time Environment
0101: 18       POP   A             (0534)     ;-----------------------------------
0102: 75       INC   X             (0535) IF ( C_LANGUAGE_SUPPORT )
0103: 09 00    ADC   A,0           (0536) IF ( SYSTEM_SMALL_MEMORY_MODEL )
0105: 08       PUSH  A             (0537)     mov  A,0                           ; clear the 'bss' segment to zero
0106: 28       ROMX                (0538)     mov  [__r0],<__bss_start
0107: 53 96    MOV   [__r1],A      (0539) BssLoop:
0109: 50 00    MOV   A,0           (0540)     cmp  [__r0],<__bss_end
                                   (0541)     jz   BssDone
                                   (0542)     mvi  [__r0],A
                                   (0543)     jmp  BssLoop
                                   (0544) BssDone:
                                   (0545)     mov  A,>__idata_start              ; copy idata to data segment
010B: 3F 97    MVI   [__r0],A      (0546)     mov  X,<__idata_start
010D: 47 97 FF TST   [151],255     (0547)     mov  [__r0],<__data_start
0110: B0 08    JNZ   0x0119        (0548) IDataLoop:
0112: 5D D5    MOV   A,REG[213]    (0549)     cmp  [__r0],<__data_end
0114: 74       INC   A             (0550)     jz   C_RTE_Done
0115: 60 D5    MOV   REG[213],A    (0551)     push A
0117: 50 00    MOV   A,0           (0552)     romx
                                   (0553)     mvi  [__r0],A
0119: 7A 96    DEC   [__r1]        (0554)     pop  A
011B: BF EF    JNZ   0x010B        (0555)     inc  X
011D: 18       POP   A             (0556)     adc  A,0
011E: 8F AA    JMP   0x00C9        (0557)     jmp  IDataLoop
                                   (0558) 
                                   (0559) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
0120: 18       POP   A             (0560) 
                                   (0561) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0562)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                   (0563)                                        ; to use the Virtual Register page.
                                   (0564) 
                                   (0565)     ; Dereference the constant (flash) pointer pXIData to access the start
                                   (0566)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                   (0567)     ; text segment and may have been relocated by the Code Compressor.
                                   (0568)     ;
                                   (0569)     mov   A, >__pXIData                ; Get the address of the flash
                                   (0570)     mov   X, <__pXIData                ;   pointer to the xidata area.
                                   (0571)     push  A
                                   (0572)     romx                               ; get the MSB of xidata's address
                                   (0573)     mov   [__r0], A
                                   (0574)     pop   A
                                   (0575)     inc   X
                                   (0576)     adc   A, 0
                                   (0577)     romx                               ; get the LSB of xidata's address
                                   (0578)     swap  A, X
                                   (0579)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                   (0580)                                        ;   XIData structure list in flash
                                   (0581)     jmp   .AccessStruct
                                   (0582) 
                                   (0583)     ; Unpack one element in the xidata "structure list" that specifies the
                                   (0584)     ; values of C variables. Each structure contains 3 member elements.
                                   (0585)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                   (0586)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                   (0587)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                   (0588)     ; contains 0xFF. There are two formats for the struct depending on the
                                   (0589)     ; value in the second member element, an unsigned byte:
                                   (0590)     ; (1) If the value of the second element is non-zero, it represents
                                   (0591)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                   (0592)     ; third member of the struct is an array of bytes of length 'size' and
                                   (0593)     ; the bytes are copied to the block of RAM.
                                   (0594)     ; (2) If the value of the second element is zero, the block of RAM is
                                   (0595)     ; to be cleared to zero. In this case, the third member of the struct
                                   (0596)     ; is an unsigned byte containing the number of bytes to clear.
                                   (0597) 
                                   (0598) .AccessNextStructLoop:
                                   (0599)     inc   X                            ; pXIData++
                                   (0600)     adc   A, 0
0121: 71 10    OR    F,16          (0601) .AccessStruct:                         ; Entry point for first block
                                   (0602)     ;
                                   (0603)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                   (0604)     ;
                                   (0605)     M8C_ClearWDT                       ; Clear the watchdog for long inits
                                   (0606)     push  A
                                   (0607)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
                                   (0608)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
0123: 43 E3 20 OR    REG[227],32   (0609)     inc   A                            ; End of Struct List? (MSB==0xFF?)
                                   (0610)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
                                   (0611)     pop   A                            ; restore pXIData to [A,X]
                                   (0612)     inc   X                            ; pXIData++
                                   (0613)     adc   A, 0
0126: 70 EF    AND   F,239         (0614)     push  A
                                   (0615)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
                                   (0616)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
                                   (0617)     pop   A                            ; restore pXIData to [A,X]
                                   (0618)     inc   X                            ; pXIData++ (point to size)
                                   (0619)     adc   A, 0
                                   (0620)     push  A
                                   (0621)     romx                               ; Get the size (CPU.A <- *pXIData)
                                   (0622)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
0128: 62 E0 00 MOV   REG[224],0    (0623)     mov   [__r1], A                    ;             else downcount in __r1
                                   (0624)     pop   A                            ; restore pXIData to [A,X]
                                   (0625) 
                                   (0626) .CopyNextByteLoop:
                                   (0627)     ; For each byte in the structure's array member, copy from flash to RAM.
012B: 71 10    OR    F,16          (0628)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
012D: 62 E0 03 MOV   REG[224],3    (0629)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
0130: 43 E7 80 OR    REG[231],128  (0630)     ;         __r1 holds a non-zero count of the number of bytes remaining.
0133: 70 EF    AND   F,239         (0631)     ;
                                   (0632)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0633)     adc   A, 0
                                   (0634)     push  A
                                   (0635)     romx                               ; Get the data value (CPU.A <- *pXIData)
                                   (0636)     mvi   [__r0], A                    ; Transfer the data to RAM
0135: 62 E2 00 MOV   REG[226],0    (0637)     tst   [__r0], 0xff                 ; Check for page crossing
                                   (0638)     jnz   .CopyLoopTail                ;   No crossing, keep going
                                   (0639)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
                                   (0640)     inc   A
                                   (0641)     mov   reg[ MVW_PP], A
                                   (0642) .CopyLoopTail:
                                   (0643)     pop   A                            ; restore pXIData to [A,X]
                                   (0644)     dec   [__r1]                       ; End of this array in flash?
0138: 7C 0E 25 LCALL __text_start  (0645)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
                                   (0646)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
013B: 8F FF    JMP   0x013B        (0647) 
                                   (0648) .ClearRAMBlockToZero:
                                   (0649)     pop   A                            ; restore pXIData to [A,X]
                                   (0650)     inc   X                            ; pXIData++ (point to next data byte)
                                   (0651)     adc   A, 0
                                   (0652)     push  A
                                   (0653)     romx                               ; Get the run length (CPU.A <- *pXIData)
                                   (0654)     mov   [__r1], A                    ; Initialize downcounter
                                   (0655)     mov   A, 0                         ; Initialize source data
                                   (0656) 
                                   (0657) .ClearRAMBlockLoop:
                                   (0658)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                   (0659)     ;         __r1 holds a non-zero count of the number of bytes remaining.
013D: 50 10    MOV   A,16          (0660)     ;
02BA: 71 10    OR    F,16          (0661)     mvi   [__r0], A                    ; Clear a byte

FILE: lib\psocconfigtbl.asm
02BC: 62 00 01 MOV   REG[0],1      (0247) ; Generated by PSoC Designer 5.0.985.0
02BF: 62 01 FE MOV   REG[1],254    (0248) ;
02C2: 70 EF    AND   F,239         (0249) include "m8c.inc"
02C4: 62 03 FE MOV   REG[3],254    (0250) ;  Personalization tables 
02C7: 62 02 01 MOV   REG[2],1      (0251) export LoadConfigTBL_transmitter_config_Bank1
02CA: 71 10    OR    F,16          (0252) export LoadConfigTBL_transmitter_config_Bank0
02CC: 62 02 00 MOV   REG[2],0      (0253) export LoadConfigTBL_transmitter_config_Ordered
02CF: 62 03 00 MOV   REG[3],0      (0254) export UnloadConfigTBL_transmitter_config_Bank1
02D2: 70 EF    AND   F,239         (0255) export UnloadConfigTBL_transmitter_config_Bank0
02D4: 62 01 00 MOV   REG[1],0      (0256) export ReloadConfigTBL_transmitter_config_Bank1
02D7: 71 10    OR    F,16          (0257) export ReloadConfigTBL_transmitter_config_Bank0
02D9: 62 04 03 MOV   REG[4],3      (0258) export LoadConfigTBL_pc_listener_Bank1
02DC: 62 05 FC MOV   REG[5],252    (0259) export LoadConfigTBL_pc_listener_Bank0
02DF: 70 EF    AND   F,239         (0260) export UnloadConfigTBL_pc_listener_Bank1
02E1: 62 07 FC MOV   REG[7],252    (0261) export UnloadConfigTBL_pc_listener_Bank0
02E4: 62 06 02 MOV   REG[6],2      (0262) export LoadConfigTBL_receiver_config_Bank1
02E7: 71 10    OR    F,16          (0263) export LoadConfigTBL_receiver_config_Bank0
02E9: 62 06 00 MOV   REG[6],0      (0264) export UnloadConfigTBL_receiver_config_Bank1
02EC: 62 07 00 MOV   REG[7],0      (0265) export UnloadConfigTBL_receiver_config_Bank0
02EF: 70 EF    AND   F,239         (0266) export UnloadConfigTBL_Total_Bank1
02F1: 62 05 00 MOV   REG[5],0      (0267) export UnloadConfigTBL_Total_Bank0
02F4: 71 10    OR    F,16          (0268) AREA lit(rom, rel)
02F6: 62 08 00 MOV   REG[8],0      (0269) LoadConfigTBL_pc_listener_Bank0:
02F9: 62 09 FF MOV   REG[9],255    (0270) ;  Instance name COMP_SERIAL, User Module UART
02FC: 70 EF    AND   F,239         (0271) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
02FE: 62 0B FF MOV   REG[11],255   (0272) 	db		3fh, 00h		;COMP_SERIAL_RX_CONTROL_REG(DCB13CR0)
0301: 62 0A 00 MOV   REG[10],0     (0273) 	db		3dh, 00h		;COMP_SERIAL_(DCB13DR1)
0304: 71 10    OR    F,16          (0274) 	db		3eh, 00h		;COMP_SERIAL_RX_BUFFER_REG (DCB13DR2)
0306: 62 0A 00 MOV   REG[10],0     (0275) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0309: 62 0B 00 MOV   REG[11],0     (0276) 	db		3bh, 00h		;COMP_SERIAL_TX_CONTROL_REG(DCB12CR0)
030C: 70 EF    AND   F,239         (0277) 	db		39h, 00h		;COMP_SERIAL_TX_BUFFER_REG (DCB12DR1)
030E: 62 09 00 MOV   REG[9],0      (0278) 	db		3ah, 00h		;COMP_SERIAL_(DCB12DR2)
0311: 71 10    OR    F,16          (0279) ;  Instance name TX_REPEATER, User Module TX8
0313: 62 0C 00 MOV   REG[12],0     (0280) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0316: 62 0D 00 MOV   REG[13],0     (0281) 	db		2bh, 00h		;TX_REPEATER_CONTROL_REG  (DCB02CR0)
0319: 70 EF    AND   F,239         (0282) 	db		29h, 00h		;TX_REPEATER_TX_BUFFER_REG(DCB02DR1)
031B: 62 0F 00 MOV   REG[15],0     (0283) 	db		2ah, 00h		;TX_REPEATER_(DCB02DR2)
031E: 62 0E 00 MOV   REG[14],0     (0284) 	db		ffh
0321: 71 10    OR    F,16          (0285) LoadConfigTBL_pc_listener_Bank1:
0323: 62 0E 00 MOV   REG[14],0     (0286) ;  Instance name COMP_SERIAL, User Module UART
0326: 62 0F 00 MOV   REG[15],0     (0287) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0329: 70 EF    AND   F,239         (0288) 	db		3ch, 05h		;COMP_SERIAL_RX_FUNC_REG   (DCB13FN)
032B: 62 0D 00 MOV   REG[13],0     (0289) 	db		3dh, f6h		;COMP_SERIAL_RX_INPUT_REG  (DCB13IN)
032E: 71 10    OR    F,16          (0290) 	db		3eh, 80h		;COMP_SERIAL_RX_OUTPUT_REG (DCB13OU)
0330: 62 10 00 MOV   REG[16],0     (0291) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0333: 62 11 00 MOV   REG[17],0     (0292) 	db		38h, 1dh		;COMP_SERIAL_TX_FUNC_REG   (DCB12FN)
0336: 70 EF    AND   F,239         (0293) 	db		39h, 06h		;COMP_SERIAL_TX_INPUT_REG  (DCB12IN)
0338: 62 13 00 MOV   REG[19],0     (0294) 	db		3ah, 85h		;COMP_SERIAL_TX_OUTPUT_REG (DCB12OU)
033B: 62 12 00 MOV   REG[18],0     (0295) ;  Instance name TX_REPEATER, User Module TX8
033E: 71 10    OR    F,16          (0296) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0340: 62 12 00 MOV   REG[18],0     (0297) 	db		28h, 1dh		;TX_REPEATER_FUNC_REG     (DCB02FN)
0343: 62 13 00 MOV   REG[19],0     (0298) 	db		29h, 01h		;TX_REPEATER_INPUT_REG    (DCB02IN)
0346: 70 EF    AND   F,239         (0299) 	db		2ah, 84h		;TX_REPEATER_OUTPUT_REG   (DCB02OU)
0348: 62 11 00 MOV   REG[17],0     (0300) 	db		ffh
034B: 71 10    OR    F,16          (0301) UnloadConfigTBL_pc_listener_Bank0:
034D: 62 14 00 MOV   REG[20],0     (0302) ;  Instance name COMP_SERIAL, User Module UART
0350: 62 15 00 MOV   REG[21],0     (0303) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0353: 70 EF    AND   F,239         (0304) 	db		3fh, 00h		;COMP_SERIAL_CONTROL_0 (DCB13CR0)
0355: 62 17 00 MOV   REG[23],0     (0305) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0358: 62 16 00 MOV   REG[22],0     (0306) 	db		3bh, 00h		;COMP_SERIAL_CONTROL_0 (DCB12CR0)
035B: 71 10    OR    F,16          (0307) ;  Instance name TX_REPEATER, User Module TX8
035D: 62 16 00 MOV   REG[22],0     (0308) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0360: 62 17 00 MOV   REG[23],0     (0309) 	db		2bh, 00h		;TX_REPEATER_CONTROL_0 (DCB02CR0)
0363: 70 EF    AND   F,239         (0310) 	db		ffh
0365: 62 15 00 MOV   REG[21],0     (0311) UnloadConfigTBL_pc_listener_Bank1:
0368: 71 10    OR    F,16          (0312) ;  Instance name COMP_SERIAL, User Module UART
036A: 62 18 00 MOV   REG[24],0     (0313) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
036D: 62 19 00 MOV   REG[25],0     (0314) 	db		3ch, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB13FN)
0370: 70 EF    AND   F,239         (0315) 	db		3dh, 00h		;COMP_SERIAL_DIG_Input (DCB13IN)
0372: 62 1B 00 MOV   REG[27],0     (0316) 	db		3eh, 00h		;COMP_SERIAL_DIG_Output (DCB13OU)
0375: 62 1A 00 MOV   REG[26],0     (0317) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
0378: 71 10    OR    F,16          (0318) 	db		38h, 00h		;COMP_SERIAL_DIG_BasicFunction (DCB12FN)
037A: 62 1A 00 MOV   REG[26],0     (0319) 	db		39h, 00h		;COMP_SERIAL_DIG_Input (DCB12IN)
037D: 62 1B 00 MOV   REG[27],0     (0320) 	db		3ah, 00h		;COMP_SERIAL_DIG_Output (DCB12OU)
0380: 70 EF    AND   F,239         (0321) ;  Instance name TX_REPEATER, User Module TX8
0382: 62 19 00 MOV   REG[25],0     (0322) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
0385: 71 10    OR    F,16          (0323) 	db		28h, 00h		;TX_REPEATER_DIG_BasicFunction (DCB02FN)
0387: 62 1C 00 MOV   REG[28],0     (0324) 	db		29h, 00h		;TX_REPEATER_DIG_Input (DCB02IN)
038A: 62 1D 00 MOV   REG[29],0     (0325) 	db		2ah, 00h		;TX_REPEATER_DIG_Output (DCB02OU)
038D: 70 EF    AND   F,239         (0326) 	db		ffh
038F: 62 1F 00 MOV   REG[31],0     (0327) 
0392: 62 1E 00 MOV   REG[30],0     (0328) ;  Instance name COMP_SERIAL, User Module UART
0395: 71 10    OR    F,16          (0329) ;       Instance name COMP_SERIAL, Block Name RX(DCB13)
0397: 62 1E 00 MOV   REG[30],0     (0330) ;       Instance name COMP_SERIAL, Block Name TX(DCB12)
039A: 62 1F 00 MOV   REG[31],0     (0331) ;  Instance name TX_REPEATER, User Module TX8
039D: 70 EF    AND   F,239         (0332) ;       Instance name TX_REPEATER, Block Name TX8(DCB02)
039F: 62 1D 00 MOV   REG[29],0     (0333) 	db		ffh
05C9: 62 D0 00 MOV   REG[208],0    (0334) LoadConfigTBL_receiver_config_Bank0:

FILE: lib\psocconfig.asm
05CC: 55 02 00 MOV   [2],0         (0074) ; Generated by PSoC Designer 5.0.985.0
                                   (0075) ;
05CF: 7C 05 D6 LCALL 0x05D6        (0076) INCLUDE "PSoCDynamic.inc"
05D2: 7C 02 BA LCALL 0x02BA        (0077) ;==========================================================================
                                   (0078) ;  PSoCConfig.asm
                                   (0079) ;  @PSOC_VERSION
                                   (0080) ;
05D5: 7F       RET                 (0081) ;  Version: 0.85
                                   (0082) ;  Revised: June 22, 2004
                                   (0083) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0084) ;
                                   (0085) ;  This file is generated by the Device Editor on Application Generation.
                                   (0086) ;  It contains code which loads the configuration data table generated in
                                   (0087) ;  the file PSoCConfigTBL.asm
                                   (0088) ;
                                   (0089) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0090) ;  Edits to this file will not be preserved.
                                   (0091) ;==========================================================================
                                   (0092) ;
                                   (0093) include "m8c.inc"
                                   (0094) include "memory.inc"
                                   (0095) include "GlobalParams.inc"
                                   (0096) 
                                   (0097) export LoadConfigInit
                                   (0098) export _LoadConfigInit
                                   (0099) export LoadConfig_transmitter_config
                                   (0100) export _LoadConfig_transmitter_config
                                   (0101) export UnloadConfig_transmitter_config
                                   (0102) export _UnloadConfig_transmitter_config
                                   (0103) export ReloadConfig_transmitter_config
                                   (0104) export _ReloadConfig_transmitter_config
05D6: 71 10    OR    F,16          (0105) export LoadConfig_pc_listener
                                   (0106) export _LoadConfig_pc_listener
05D8: 10       PUSH  X             (0107) export UnloadConfig_pc_listener
05D9: 70 EF    AND   F,239         (0108) export _UnloadConfig_pc_listener
05DB: 50 00    MOV   A,0           (0109) export LoadConfig_receiver_config
05DD: 67       ASR   A             (0110) export _LoadConfig_receiver_config
                                   (0111) export UnloadConfig_receiver_config
05DE: 50 02    MOV   A,2           (0112) export _UnloadConfig_receiver_config
05E0: 57 22    MOV   X,34          (0113) export UnloadConfig_Total
05E2: 7C 07 B6 LCALL 0x07B6        (0114) export _UnloadConfig_Total
                                   (0115) export ACTIVE_CONFIG_STATUS
05E5: 50 01    MOV   A,1           (0116) 
05E7: 67       ASR   A             (0117) export NO_SHADOW
                                   (0118) export _NO_SHADOW
05E8: 50 02    MOV   A,2           (0119) 
05EA: 57 83    MOV   X,131         (0120) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
05EC: 7C 07 B6 LCALL 0x07B6        (0121) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                   (0122) 
05EF: 62 D0 00 MOV   REG[208],0    (0123) AREA psoc_config(rom, rel)
                                   (0124) 
05F2: 2E 02 01 OR    [2],1         (0125) ;---------------------------------------------------------------------------
05F5: 70 EF    AND   F,239         (0126) ; LoadConfigInit - Establish the start-up configuration (except for a few
05F7: 20       POP   X             (0127) ;                  parameters handled by boot code, like CPU speed). This
                                   (0128) ;                  function can be called from user code, but typically it
                                   (0129) ;                  is only called from boot.
05F8: 7F       RET                 (0130) ;
                                   (0131) ;       INPUTS: None.
                                   (0132) ;      RETURNS: Nothing.
                                   (0133) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0134) ;               In the large memory model currently only the page
                                   (0135) ;               pointer registers listed below are modified.  This does
                                   (0136) ;               not guarantee that in future implementations of this
                                   (0137) ;               function other page pointer registers will not be
                                   (0138) ;               modified.
                                   (0139) ;          
                                   (0140) ;               Page Pointer Registers Modified: 
                                   (0141) ;               CUR_PP
                                   (0142) ;
                                   (0143) _LoadConfigInit:
                                   (0144)  LoadConfigInit:
                                   (0145)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0146)     RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0147) 	mov		[ACTIVE_CONFIG_STATUS], 0
                                   (0148) 
                                   (0149) 	lcall	LoadConfig_transmitter_config
                                   (0150) 	lcall	LoadConfigTBL_transmitter_config_Ordered
                                   (0151) 
                                   (0152) 
                                   (0153)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0154)     ret
05F9: 10       PUSH  X             (0155) 
05FA: 70 EF    AND   F,239         (0156) ;---------------------------------------------------------------------------
05FC: 50 00    MOV   A,0           (0157) ; Load Configuration transmitter_config
05FE: 67       ASR   A             (0158) ;
                                   (0159) ;    Load configuration registers for transmitter_config.
05FF: 50 03    MOV   A,3           (0160) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0601: 57 A3    MOV   X,163         (0161) ;
0603: 7C 07 B6 LCALL 0x07B6        (0162) ;       INPUTS: None.
                                   (0163) ;      RETURNS: Nothing.
0606: 50 01    MOV   A,1           (0164) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0608: 67       ASR   A             (0165) ;               modified as may the Page Pointer registers!
                                   (0166) ;               In the large memory model currently only the page
0609: 50 03    MOV   A,3           (0167) ;               pointer registers listed below are modified.  This does
060B: 57 B6    MOV   X,182         (0168) ;               not guarantee that in future implementations of this
060D: 7C 07 B6 LCALL 0x07B6        (0169) ;               function other page pointer registers will not be
                                   (0170) ;               modified.
                                   (0171) ;          
0610: 62 D0 00 MOV   REG[208],0    (0172) ;               Page Pointer Registers Modified: 
0613: 2E 02 01 OR    [2],1         (0173) ;               CUR_PP
0616: 70 EF    AND   F,239         (0174) ;
0618: 20       POP   X             (0175) _LoadConfig_transmitter_config:
                                   (0176)  LoadConfig_transmitter_config:
                                   (0177)     RAM_PROLOGUE RAM_USE_CLASS_4
0619: 7F       RET                 (0178) 	M8C_SetBank1
                                   (0179) 
                                   (0180) 	push	x
                                   (0181)     M8C_SetBank0                    ; Force bank 0
                                   (0182)     mov     a, 0                    ; Specify bank 0
                                   (0183)     asr     a                       ; Store in carry flag
                                   (0184)                                     ; Load bank 0 table:
                                   (0185)     mov     A, >LoadConfigTBL_transmitter_config_Bank0
                                   (0186)     mov     X, <LoadConfigTBL_transmitter_config_Bank0
                                   (0187)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0188) 
                                   (0189)     mov     a, 1                    ; Specify bank 1
                                   (0190)     asr     a                       ; Store in carry flag
                                   (0191)                                     ; Load bank 1 table:
                                   (0192)     mov     A, >LoadConfigTBL_transmitter_config_Bank1
                                   (0193)     mov     X, <LoadConfigTBL_transmitter_config_Bank1
                                   (0194)     lcall   LoadConfig              ; Load the bank 1 values
                                   (0195) 
                                   (0196) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0197) ; set config active bit
                                   (0198) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
                                   (0199)     M8C_SetBank0                    ; Force return to bank 0
                                   (0200) 	pop		x
                                   (0201) 
                                   (0202)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0203)     ret
061A: 10       PUSH  X             (0204) 
061B: 70 EF    AND   F,239         (0205) ;---------------------------------------------------------------------------
061D: 50 00    MOV   A,0           (0206) ; Reload Configuration transmitter_config
061F: 67       ASR   A             (0207) ;
                                   (0208) ;    Reload configuration registers for transmitter_config.
0620: 50 03    MOV   A,3           (0209) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0622: 57 C9    MOV   X,201         (0210) ;
0624: 7C 07 B6 LCALL 0x07B6        (0211) ;       INPUTS: None.
                                   (0212) ;      RETURNS: Nothing.
0627: 50 01    MOV   A,1           (0213) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
0629: 67       ASR   A             (0214) ;               modified as may the Page Pointer registers!
                                   (0215) ;               In the large memory model currently only the page
062A: 50 03    MOV   A,3           (0216) ;               pointer registers listed below are modified.  This does
062C: 57 D0    MOV   X,208         (0217) ;               not guarantee that in future implementations of this
062E: 7C 07 B6 LCALL 0x07B6        (0218) ;               function other page pointer registers will not be
                                   (0219) ;               modified.
0631: 71 10    OR    F,16          (0220) ;          
0633: 70 EF    AND   F,239         (0221) ;               Page Pointer Registers Modified: 
                                   (0222) ;               CUR_PP
0635: 62 D0 00 MOV   REG[208],0    (0223) ;
0638: 26 02 FE AND   [2],254       (0224) _ReloadConfig_transmitter_config:
063B: 70 EF    AND   F,239         (0225)  ReloadConfig_transmitter_config:
063D: 20       POP   X             (0226)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0227) 
                                   (0228) 	push	x
063E: 7F       RET                 (0229)     M8C_SetBank0                    ; Force bank 0
                                   (0230)     mov     a, 0                    ; Specify bank 0
                                   (0231)     asr     a                       ; Store in carry flag
                                   (0232)                                     ; Bank 0 table address:
                                   (0233)     mov     A, >ReloadConfigTBL_transmitter_config_Bank0
                                   (0234)     mov     X, <ReloadConfigTBL_transmitter_config_Bank0
                                   (0235)     lcall   LoadConfig              ; Reload the bank 0 values
                                   (0236) 
                                   (0237)     mov     a, 1                    ; Specify bank 1
                                   (0238)     asr     a                       ; Store in carry flag
                                   (0239)                                     ; Bank 1 table address:
                                   (0240)     mov     A, >ReloadConfigTBL_transmitter_config_Bank1
                                   (0241)     mov     X, <ReloadConfigTBL_transmitter_config_Bank1
                                   (0242)     lcall   LoadConfig              ; Reload the bank 1 values
                                   (0243) 
                                   (0244) ; set config active bit
                                   (0245) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0246) 	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
                                   (0247)     M8C_SetBank0                    ; Force return to bank 0
                                   (0248) 	pop		x
                                   (0249) 
                                   (0250)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0251)     ret
                                   (0252) 
063F: 71 10    OR    F,16          (0253) ;---------------------------------------------------------------------------
                                   (0254) ; Unload Configuration transmitter_config
0641: 41 04 DF AND   REG[4],223    (0255) ;
0644: 43 04 20 OR    REG[4],32     (0256) ;    Reset configuration registers for transmitter_config
                                   (0257) ;    to their values as initially configured.
0647: 41 05 DF AND   REG[5],223    (0258) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0259) ;
064A: 70 EF    AND   F,239         (0260) ;       INPUTS: None.
064C: 41 07 D7 AND   REG[7],215    (0261) ;      RETURNS: Nothing.
                                   (0262) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
064F: 41 06 D7 AND   REG[6],215    (0263) ;               modified as may the Page Pointer registers!
0652: 43 06 28 OR    REG[6],40     (0264) ;               In the large memory model currently only the page
                                   (0265) ;               pointer registers listed below are modified.  This does
0655: 71 10    OR    F,16          (0266) ;               not guarantee that in future implementations of this
0657: 41 E1 00 AND   REG[225],0    (0267) ;               function other page pointer registers will not be
065A: 43 E1 1C OR    REG[225],28   (0268) ;               modified.
                                   (0269) ;          
065D: 70 EF    AND   F,239         (0270) ;               Page Pointer Registers Modified: 
065F: 41 B0 0F AND   REG[176],15   (0271) ;               CUR_PP
                                   (0272) ;
0662: 41 B8 0C AND   REG[184],12   (0273) _UnloadConfig_transmitter_config:
0665: 43 B8 91 OR    REG[184],145  (0274)  UnloadConfig_transmitter_config:
                                   (0275)     RAM_PROLOGUE RAM_USE_CLASS_4
0668: 10       PUSH  X             (0276) 
0669: 70 EF    AND   F,239         (0277) 	push	x
066B: 50 00    MOV   A,0           (0278)     M8C_SetBank0                    ; Force bank 0
066D: 67       ASR   A             (0279)     mov     a, 0                    ; Specify bank 0
                                   (0280)     asr     a                       ; Store in carry flag
066E: 50 01    MOV   A,1           (0281)                                     ; Bank 0 table address:
0670: 57 A0    MOV   X,160         (0282)     mov     A, >UnloadConfigTBL_transmitter_config_Bank0
0672: 7C 07 B6 LCALL 0x07B6        (0283)     mov     X, <UnloadConfigTBL_transmitter_config_Bank0
                                   (0284)     lcall   LoadConfig              ; Unload the bank 0 values
0675: 50 01    MOV   A,1           (0285) 
0677: 67       ASR   A             (0286)     mov     a, 1                    ; Specify bank 1
                                   (0287)     asr     a                       ; Store in carry flag
0678: 50 01    MOV   A,1           (0288)                                     ; Bank 1 table address:
067A: 57 B3    MOV   X,179         (0289)     mov     A, >UnloadConfigTBL_transmitter_config_Bank1
067C: 7C 07 B6 LCALL 0x07B6        (0290)     mov     X, <UnloadConfigTBL_transmitter_config_Bank1
                                   (0291)     lcall   LoadConfig              ; Unload the bank 1 values
067F: 62 D0 00 MOV   REG[208],0    (0292) 
                                   (0293) 	M8C_SetBank1
0682: 2E 02 02 OR    [2],2         (0294) 	M8C_SetBank0
0685: 70 EF    AND   F,239         (0295) ; clear config active bit
0687: 20       POP   X             (0296) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0297) 	and		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], ~transmitter_config_BIT
                                   (0298)     M8C_SetBank0                    ; Force return to bank 0
0688: 7F       RET                 (0299) 	pop		x
                                   (0300) 
                                   (0301)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0302)     ret
                                   (0303) 
                                   (0304) ;---------------------------------------------------------------------------
                                   (0305) ; Load Configuration pc_listener
                                   (0306) ;
                                   (0307) ;    Load configuration registers for pc_listener.
                                   (0308) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0309) ;
                                   (0310) ;       INPUTS: None.
                                   (0311) ;      RETURNS: Nothing.
                                   (0312) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0313) ;               modified as may the Page Pointer registers!
                                   (0314) ;               In the large memory model currently only the page
                                   (0315) ;               pointer registers listed below are modified.  This does
                                   (0316) ;               not guarantee that in future implementations of this
                                   (0317) ;               function other page pointer registers will not be
                                   (0318) ;               modified.
                                   (0319) ;          
                                   (0320) ;               Page Pointer Registers Modified: 
                                   (0321) ;               CUR_PP
                                   (0322) ;
                                   (0323) _LoadConfig_pc_listener:
                                   (0324)  LoadConfig_pc_listener:
0689: 10       PUSH  X             (0325)     RAM_PROLOGUE RAM_USE_CLASS_4
068A: 70 EF    AND   F,239         (0326) 	M8C_SetBank1
068C: 50 00    MOV   A,0           (0327) ; writing Port_1_DriveMode_0 register
068E: 67       ASR   A             (0328) 	and		reg[ 4h], ~20h
                                   (0329) 	or		reg[ 4h], 20h
068F: 50 01    MOV   A,1           (0330) ; writing Port_1_DriveMode_1 register
0691: 57 C6    MOV   X,198         (0331) 	and		reg[ 5h], ~20h
0693: 7C 07 B6 LCALL 0x07B6        (0332) ; writing Port_1_DriveMode_2 register
                                   (0333) 	M8C_SetBank0
0696: 50 01    MOV   A,1           (0334) 	and		reg[ 7h], ~28h
0698: 67       ASR   A             (0335) ; writing Port_1_GlobalSelect register
                                   (0336) 	and		reg[ 6h], ~28h
0699: 50 01    MOV   A,1           (0337) 	or		reg[ 6h], 28h
069B: 57 CD    MOV   X,205         (0338) ; writing OscillatorControl_1 register
069D: 7C 07 B6 LCALL 0x07B6        (0339) 	M8C_SetBank1
                                   (0340) 	and		reg[e1h], ~ffh
06A0: 71 10    OR    F,16          (0341) 	or		reg[e1h], 1ch
                                   (0342) ; writing Row_0_InputMux register
06A2: 41 E1 00 AND   REG[225],0    (0343) 	M8C_SetBank0
06A5: 43 E1 99 OR    REG[225],153  (0344) 	and		reg[b0h], ~f0h
                                   (0345) ; writing Row_1_InputMux register
06A8: 70 EF    AND   F,239         (0346) 	and		reg[b8h], ~f3h
06AA: 41 B0 0F AND   REG[176],15   (0347) 	or		reg[b8h], 91h
06AD: 43 B0 50 OR    REG[176],80   (0348) 
                                   (0349) 	push	x
06B0: 41 B8 0C AND   REG[184],12   (0350)     M8C_SetBank0                    ; Force bank 0
06B3: 43 B8 42 OR    REG[184],66   (0351)     mov     a, 0                    ; Specify bank 0
                                   (0352)     asr     a                       ; Store in carry flag
06B6: 41 06 D7 AND   REG[6],215    (0353)                                     ; Load bank 0 table:
                                   (0354)     mov     A, >LoadConfigTBL_pc_listener_Bank0
06B9: 41 07 D7 AND   REG[7],215    (0355)     mov     X, <LoadConfigTBL_pc_listener_Bank0
06BC: 43 07 28 OR    REG[7],40     (0356)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0357) 
06BF: 71 10    OR    F,16          (0358)     mov     a, 1                    ; Specify bank 1
06C1: 41 05 DF AND   REG[5],223    (0359)     asr     a                       ; Store in carry flag
06C4: 43 05 20 OR    REG[5],32     (0360)                                     ; Load bank 1 table:
                                   (0361)     mov     A, >LoadConfigTBL_pc_listener_Bank1
06C7: 41 04 DF AND   REG[4],223    (0362)     mov     X, <LoadConfigTBL_pc_listener_Bank1
06CA: 70 EF    AND   F,239         (0363)     lcall   LoadConfig              ; Load the bank 1 values
                                   (0364) 
06CC: 62 D0 00 MOV   REG[208],0    (0365) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
06CF: 26 02 FD AND   [2],253       (0366) ; set config active bit
06D2: 70 EF    AND   F,239         (0367) 	or		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
06D4: 20       POP   X             (0368)     M8C_SetBank0                    ; Force return to bank 0
                                   (0369) 	pop		x
                                   (0370) 
06D5: 7F       RET                 (0371)     RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0372)     ret
                                   (0373) 
                                   (0374) ;---------------------------------------------------------------------------
                                   (0375) ; Unload Configuration pc_listener
                                   (0376) ;
                                   (0377) ;    Reset configuration registers for pc_listener
                                   (0378) ;    to their values as initially configured.
                                   (0379) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0380) ;
                                   (0381) ;       INPUTS: None.
                                   (0382) ;      RETURNS: Nothing.
                                   (0383) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0384) ;               modified as may the Page Pointer registers!
                                   (0385) ;               In the large memory model currently only the page
                                   (0386) ;               pointer registers listed below are modified.  This does
                                   (0387) ;               not guarantee that in future implementations of this
                                   (0388) ;               function other page pointer registers will not be
                                   (0389) ;               modified.
                                   (0390) ;          
                                   (0391) ;               Page Pointer Registers Modified: 
                                   (0392) ;               CUR_PP
                                   (0393) ;
                                   (0394) _UnloadConfig_pc_listener:
06D6: 71 10    OR    F,16          (0395)  UnloadConfig_pc_listener:
                                   (0396)     RAM_PROLOGUE RAM_USE_CLASS_4
06D8: 41 00 FE AND   REG[0],254    (0397) 
                                   (0398) 	push	x
06DB: 41 01 FE AND   REG[1],254    (0399)     M8C_SetBank0                    ; Force bank 0
06DE: 43 01 01 OR    REG[1],1      (0400)     mov     a, 0                    ; Specify bank 0
                                   (0401)     asr     a                       ; Store in carry flag
06E1: 41 04 FE AND   REG[4],254    (0402)                                     ; Bank 0 table address:
                                   (0403)     mov     A, >UnloadConfigTBL_pc_listener_Bank0
06E4: 41 05 FE AND   REG[5],254    (0404)     mov     X, <UnloadConfigTBL_pc_listener_Bank0
06E7: 43 05 01 OR    REG[5],1      (0405)     lcall   LoadConfig              ; Unload the bank 0 values
                                   (0406) 
06EA: 70 EF    AND   F,239         (0407)     mov     a, 1                    ; Specify bank 1
06EC: 41 07 FE AND   REG[7],254    (0408)     asr     a                       ; Store in carry flag
06EF: 43 07 01 OR    REG[7],1      (0409)                                     ; Bank 1 table address:
                                   (0410)     mov     A, >UnloadConfigTBL_pc_listener_Bank1
06F2: 71 10    OR    F,16          (0411)     mov     X, <UnloadConfigTBL_pc_listener_Bank1
06F4: 41 60 CF AND   REG[96],207   (0412)     lcall   LoadConfig              ; Unload the bank 1 values
06F7: 43 60 30 OR    REG[96],48    (0413) 
                                   (0414) 	M8C_SetBank1
06FA: 70 EF    AND   F,239         (0415) ; writing OscillatorControl_1 register
06FC: 41 60 C3 AND   REG[96],195   (0416) 	and		reg[e1h], ~ffh
06FF: 43 60 34 OR    REG[96],52    (0417) 	or		reg[e1h], 99h
                                   (0418) ; writing Row_0_InputMux register
0702: 41 B0 CF AND   REG[176],207  (0419) 	M8C_SetBank0
                                   (0420) 	and		reg[b0h], ~f0h
0705: 41 B5 FE AND   REG[181],254  (0421) 	or		reg[b0h], 50h
                                   (0422) ; writing Row_1_InputMux register
0708: 41 B8 CC AND   REG[184],204  (0423) 	and		reg[b8h], ~f3h
070B: 43 B8 11 OR    REG[184],17   (0424) 	or		reg[b8h], 42h
                                   (0425) ; writing Port_1_GlobalSelect register
070E: 41 BD BF AND   REG[189],191  (0426) 	and		reg[ 6h], ~28h
                                   (0427) ; writing Port_1_DriveMode_2 register
0711: 10       PUSH  X             (0428) 	and		reg[ 7h], ~28h
0712: 70 EF    AND   F,239         (0429) 	or		reg[ 7h], 28h
0714: 50 00    MOV   A,0           (0430) ; writing Port_1_DriveMode_1 register
0716: 67       ASR   A             (0431) 	M8C_SetBank1
                                   (0432) 	and		reg[ 5h], ~20h
0717: 50 01    MOV   A,1           (0433) 	or		reg[ 5h], 20h
0719: 57 E1    MOV   X,225         (0434) ; writing Port_1_DriveMode_0 register
071B: 7C 07 B6 LCALL 0x07B6        (0435) 	and		reg[ 4h], ~20h
                                   (0436) 	M8C_SetBank0
071E: 50 01    MOV   A,1           (0437) ; clear config active bit
0720: 67       ASR   A             (0438) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0439) 	and		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], ~pc_listener_BIT
0721: 50 01    MOV   A,1           (0440)     M8C_SetBank0                    ; Force return to bank 0
0723: 57 F4    MOV   X,244         (0441) 	pop		x
0725: 7C 07 B6 LCALL 0x07B6        (0442) 
                                   (0443)     RAM_EPILOGUE RAM_USE_CLASS_4
0728: 62 D0 00 MOV   REG[208],0    (0444)     ret
                                   (0445) 
072B: 2E 02 04 OR    [2],4         (0446) ;---------------------------------------------------------------------------
072E: 70 EF    AND   F,239         (0447) ; Load Configuration receiver_config
0730: 20       POP   X             (0448) ;
                                   (0449) ;    Load configuration registers for receiver_config.
                                   (0450) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
0731: 7F       RET                 (0451) ;
                                   (0452) ;       INPUTS: None.
                                   (0453) ;      RETURNS: Nothing.
                                   (0454) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0455) ;               modified as may the Page Pointer registers!
                                   (0456) ;               In the large memory model currently only the page
                                   (0457) ;               pointer registers listed below are modified.  This does
                                   (0458) ;               not guarantee that in future implementations of this
                                   (0459) ;               function other page pointer registers will not be
                                   (0460) ;               modified.
                                   (0461) ;          
                                   (0462) ;               Page Pointer Registers Modified: 
                                   (0463) ;               CUR_PP
                                   (0464) ;
                                   (0465) _LoadConfig_receiver_config:
                                   (0466)  LoadConfig_receiver_config:
                                   (0467)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0468) 	M8C_SetBank1
                                   (0469) ; writing Port_0_DriveMode_0 register
                                   (0470) 	and		reg[ 0h], ~ 1h
                                   (0471) ; writing Port_0_DriveMode_1 register
                                   (0472) 	and		reg[ 1h], ~ 1h
                                   (0473) 	or		reg[ 1h],  1h
                                   (0474) ; writing Port_1_DriveMode_0 register
                                   (0475) 	and		reg[ 4h], ~ 1h
                                   (0476) ; writing Port_1_DriveMode_1 register
0732: 10       PUSH  X             (0477) 	and		reg[ 5h], ~ 1h
0733: 70 EF    AND   F,239         (0478) 	or		reg[ 5h],  1h
0735: 50 00    MOV   A,0           (0479) ; writing Port_1_DriveMode_2 register
0737: 67       ASR   A             (0480) 	M8C_SetBank0
                                   (0481) 	and		reg[ 7h], ~ 1h
0738: 50 02    MOV   A,2           (0482) 	or		reg[ 7h],  1h
073A: 57 07    MOV   X,7           (0483) ; writing AnalogColumnClockSelect register
073C: 7C 07 B6 LCALL 0x07B6        (0484) 	M8C_SetBank1
                                   (0485) 	and		reg[60h], ~30h
073F: 50 01    MOV   A,1           (0486) 	or		reg[60h], 30h
0741: 67       ASR   A             (0487) ; writing AnalogColumnInputSelect register
                                   (0488) 	M8C_SetBank0
0742: 50 02    MOV   A,2           (0489) 	and		reg[60h], ~3ch
0744: 57 0E    MOV   X,14          (0490) 	or		reg[60h], 34h
0746: 7C 07 B6 LCALL 0x07B6        (0491) ; writing Row_0_InputMux register
                                   (0492) 	and		reg[b0h], ~30h
0749: 71 10    OR    F,16          (0493) ; writing Row_0_OutputDrive_0 register
                                   (0494) 	and		reg[b5h], ~ 1h
074B: 41 60 CF AND   REG[96],207   (0495) ; writing Row_1_InputMux register
                                   (0496) 	and		reg[b8h], ~33h
074E: 70 EF    AND   F,239         (0497) 	or		reg[b8h], 11h
0750: 41 60 C3 AND   REG[96],195   (0498) ; writing Row_1_OutputDrive_0 register
0753: 43 60 28 OR    REG[96],40    (0499) 	and		reg[bdh], ~40h
                                   (0500) 
0756: 41 B0 CF AND   REG[176],207  (0501) 	push	x
0759: 43 B0 10 OR    REG[176],16   (0502)     M8C_SetBank0                    ; Force bank 0
                                   (0503)     mov     a, 0                    ; Specify bank 0
075C: 41 B5 FE AND   REG[181],254  (0504)     asr     a                       ; Store in carry flag
075F: 43 B5 01 OR    REG[181],1    (0505)                                     ; Load bank 0 table:
                                   (0506)     mov     A, >LoadConfigTBL_receiver_config_Bank0
0762: 41 B8 CC AND   REG[184],204  (0507)     mov     X, <LoadConfigTBL_receiver_config_Bank0
0765: 43 B8 02 OR    REG[184],2    (0508)     lcall   LoadConfig              ; Load the bank 0 values
                                   (0509) 
0768: 41 BD BF AND   REG[189],191  (0510)     mov     a, 1                    ; Specify bank 1
076B: 43 BD 40 OR    REG[189],64   (0511)     asr     a                       ; Store in carry flag
                                   (0512)                                     ; Load bank 1 table:
076E: 41 07 FE AND   REG[7],254    (0513)     mov     A, >LoadConfigTBL_receiver_config_Bank1
                                   (0514)     mov     X, <LoadConfigTBL_receiver_config_Bank1
0771: 71 10    OR    F,16          (0515)     lcall   LoadConfig              ; Load the bank 1 values
0773: 41 05 FE AND   REG[5],254    (0516) 
                                   (0517) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
0776: 41 04 FE AND   REG[4],254    (0518) ; set config active bit
0779: 43 04 01 OR    REG[4],1      (0519) 	or		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
                                   (0520)     M8C_SetBank0                    ; Force return to bank 0
077C: 41 01 FE AND   REG[1],254    (0521) 	pop		x
                                   (0522) 
077F: 41 00 FE AND   REG[0],254    (0523)     RAM_EPILOGUE RAM_USE_CLASS_4
0782: 43 00 01 OR    REG[0],1      (0524)     ret
0785: 70 EF    AND   F,239         (0525) 
                                   (0526) ;---------------------------------------------------------------------------
0787: 62 D0 00 MOV   REG[208],0    (0527) ; Unload Configuration receiver_config
078A: 26 02 FB AND   [2],251       (0528) ;
078D: 70 EF    AND   F,239         (0529) ;    Reset configuration registers for receiver_config
078F: 20       POP   X             (0530) ;    to their values as initially configured.
                                   (0531) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0532) ;
0790: 7F       RET                 (0533) ;       INPUTS: None.
                                   (0534) ;      RETURNS: Nothing.
                                   (0535) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0536) ;               modified as may the Page Pointer registers!
                                   (0537) ;               In the large memory model currently only the page
                                   (0538) ;               pointer registers listed below are modified.  This does
                                   (0539) ;               not guarantee that in future implementations of this
                                   (0540) ;               function other page pointer registers will not be
                                   (0541) ;               modified.
                                   (0542) ;          
                                   (0543) ;               Page Pointer Registers Modified: 
                                   (0544) ;               CUR_PP
                                   (0545) ;
                                   (0546) _UnloadConfig_receiver_config:
                                   (0547)  UnloadConfig_receiver_config:
                                   (0548)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0549) 
                                   (0550) 	push	x
                                   (0551)     M8C_SetBank0                    ; Force bank 0
                                   (0552)     mov     a, 0                    ; Specify bank 0
                                   (0553)     asr     a                       ; Store in carry flag
                                   (0554)                                     ; Bank 0 table address:
                                   (0555)     mov     A, >UnloadConfigTBL_receiver_config_Bank0
                                   (0556)     mov     X, <UnloadConfigTBL_receiver_config_Bank0
                                   (0557)     lcall   LoadConfig              ; Unload the bank 0 values
                                   (0558) 
0791: 10       PUSH  X             (0559)     mov     a, 1                    ; Specify bank 1
0792: 70 EF    AND   F,239         (0560)     asr     a                       ; Store in carry flag
0794: 50 00    MOV   A,0           (0561)                                     ; Bank 1 table address:
0796: 67       ASR   A             (0562)     mov     A, >UnloadConfigTBL_receiver_config_Bank1
                                   (0563)     mov     X, <UnloadConfigTBL_receiver_config_Bank1
0797: 50 03    MOV   A,3           (0564)     lcall   LoadConfig              ; Unload the bank 1 values
0799: 57 E4    MOV   X,228         (0565) 
079B: 7C 07 B6 LCALL 0x07B6        (0566) 	M8C_SetBank1
                                   (0567) ; writing AnalogColumnClockSelect register
079E: 50 01    MOV   A,1           (0568) 	and		reg[60h], ~30h
07A0: 67       ASR   A             (0569) ; writing AnalogColumnInputSelect register
                                   (0570) 	M8C_SetBank0
07A1: 50 04    MOV   A,4           (0571) 	and		reg[60h], ~3ch
07A3: 57 65    MOV   X,101         (0572) 	or		reg[60h], 28h
07A5: 7C 07 B6 LCALL 0x07B6        (0573) ; writing Row_0_InputMux register
                                   (0574) 	and		reg[b0h], ~30h
07A8: 71 10    OR    F,16          (0575) 	or		reg[b0h], 10h
07AA: 70 EF    AND   F,239         (0576) ; writing Row_0_OutputDrive_0 register
                                   (0577) 	and		reg[b5h], ~ 1h
07AC: 62 D0 00 MOV   REG[208],0    (0578) 	or		reg[b5h],  1h
07AF: 55 02 00 MOV   [2],0         (0579) ; writing Row_1_InputMux register
07B2: 70 EF    AND   F,239         (0580) 	and		reg[b8h], ~33h
07B4: 20       POP   X             (0581) 	or		reg[b8h],  2h
                                   (0582) ; writing Row_1_OutputDrive_0 register
                                   (0583) 	and		reg[bdh], ~40h
07B5: 7F       RET                 (0584) 	or		reg[bdh], 40h
                                   (0585) ; writing Port_1_DriveMode_2 register
                                   (0586) 	and		reg[ 7h], ~ 1h
                                   (0587) ; writing Port_1_DriveMode_1 register
                                   (0588) 	M8C_SetBank1
                                   (0589) 	and		reg[ 5h], ~ 1h
                                   (0590) ; writing Port_1_DriveMode_0 register
                                   (0591) 	and		reg[ 4h], ~ 1h
                                   (0592) 	or		reg[ 4h],  1h
                                   (0593) ; writing Port_0_DriveMode_1 register
                                   (0594) 	and		reg[ 1h], ~ 1h
                                   (0595) ; writing Port_0_DriveMode_0 register
                                   (0596) 	and		reg[ 0h], ~ 1h
                                   (0597) 	or		reg[ 0h],  1h
                                   (0598) 	M8C_SetBank0
                                   (0599) ; clear config active bit
                                   (0600) 	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
                                   (0601) 	and		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], ~receiver_config_BIT
                                   (0602)     M8C_SetBank0                    ; Force return to bank 0
                                   (0603) 	pop		x
                                   (0604) 
                                   (0605)     RAM_EPILOGUE RAM_USE_CLASS_4
07B6: 38 02    ADD   SP,2          (0606)     ret
07B8: 10       PUSH  X             (0607) 
07B9: 08       PUSH  A             (0608) ;---------------------------------------------------------------------------
07BA: 4F       MOV   X,SP          (0609) ; Unload Configuration Total
07BB: 56 FC 00 MOV   [X-4],0       (0610) ;
07BE: D0 04    JNC   0x07C3        (0611) ;    Reset configuration registers for Total
07C0: 56 FC 01 MOV   [X-4],1       (0612) ;    to their values as initially configured.
                                   (0613) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
07C3: 18       POP   A             (0614) ;
07C4: 20       POP   X             (0615) ;       INPUTS: None.
                                   (0616) ;      RETURNS: Nothing.
                                   (0617) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
07C5: 70 EF    AND   F,239         (0618) ;               modified as may the Page Pointer registers!
07C7: 62 E3 00 MOV   REG[227],0    (0619) ;               In the large memory model currently only the page
07CA: 10       PUSH  X             (0620) ;               pointer registers listed below are modified.  This does
07CB: 08       PUSH  A             (0621) ;               not guarantee that in future implementations of this
07CC: 28       ROMX                (0622) ;               function other page pointer registers will not be
07CD: 39 FF    CMP   A,255         (0623) ;               modified.
07CF: A0 1F    JZ    0x07EF        (0624) ;          
07D1: 4F       MOV   X,SP          (0625) ;               Page Pointer Registers Modified: 
07D2: 48 FC 01 TST   [X-4],1       (0626) ;               CUR_PP
07D5: A0 03    JZ    0x07D9        (0627) ;
07D7: 71 10    OR    F,16          (0628) _UnloadConfig_Total:
                                   (0629)  UnloadConfig_Total:
07D9: 54 FD    MOV   [X-3],A       (0630)     RAM_PROLOGUE RAM_USE_CLASS_4
07DB: 18       POP   A             (0631) 
07DC: 20       POP   X             (0632) 	push	x
07DD: 75       INC   X             (0633)     M8C_SetBank0                    ; Force bank 0
07DE: 09 00    ADC   A,0           (0634)     mov     a, 0                    ; Specify bank 0
07E0: 10       PUSH  X             (0635)     asr     a                       ; Store in carry flag
07E1: 08       PUSH  A             (0636)                                     ; Bank 0 table address:
07E2: 28       ROMX                (0637)     mov     A, >UnloadConfigTBL_Total_Bank0
07E3: 4F       MOV   X,SP          (0638)     mov     X, <UnloadConfigTBL_Total_Bank0
07E4: 59 FD    MOV   X,[X-3]       (0639)     lcall   LoadConfig              ; Unload the bank 0 values
07E6: 61 00    MOV   REG[X+0],A    (0640) 
07E8: 18       POP   A             (0641)     mov     a, 1                    ; Specify bank 1
07E9: 20       POP   X             (0642)     asr     a                       ; Store in carry flag
07EA: 75       INC   X             (0643)                                     ; Bank 1 table address:
07EB: 09 00    ADC   A,0           (0644)     mov     A, >UnloadConfigTBL_Total_Bank1
07ED: 8F D7    JMP   0x07C5        (0645)     mov     X, <UnloadConfigTBL_Total_Bank1
                                   (0646)     lcall   LoadConfig              ; Unload the bank 1 values
07EF: 38 FC    ADD   SP,252        (0647) 
07F1: 70 3F    AND   F,63
07F3: 71 C0    OR    F,192         (0648) 	M8C_SetBank1
07F6: 43 E1 02 OR    REG[225],2    (0649) 	M8C_SetBank0

FILE: lib\tx_timeout.asm
                                   (0102) ;;*****************************************************************************
07F9: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: TX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "TX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
07FA: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
07FD: 7F       RET                 (0131) export  TX_TIMEOUT_EnableInt
                                   (0132) export _TX_TIMEOUT_EnableInt
                                   (0133) export  TX_TIMEOUT_DisableInt
                                   (0134) export _TX_TIMEOUT_DisableInt
                                   (0135) export  TX_TIMEOUT_Start
                                   (0136) export _TX_TIMEOUT_Start
                                   (0137) export  TX_TIMEOUT_Stop
                                   (0138) export _TX_TIMEOUT_Stop
                                   (0139) export  TX_TIMEOUT_WritePeriod
                                   (0140) export _TX_TIMEOUT_WritePeriod
                                   (0141) export  TX_TIMEOUT_WriteCompareValue
                                   (0142) export _TX_TIMEOUT_WriteCompareValue
                                   (0143) export  TX_TIMEOUT_wReadCompareValue
                                   (0144) export _TX_TIMEOUT_wReadCompareValue
                                   (0145) export  TX_TIMEOUT_wReadTimer
                                   (0146) export _TX_TIMEOUT_wReadTimer
                                   (0147) export  TX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _TX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wTX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wTX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
07FE: 43 23 01 OR    REG[35],1     (0157) export _wTX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
0801: 7F       RET                 (0159) export  wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wTX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wTX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA transmitter_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: TX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
0802: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
0805: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  TX_TIMEOUT_EnableInt:
                                   (0200) _TX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    TX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: TX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
0806: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
0808: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
0809: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
080B: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  TX_TIMEOUT_DisableInt:
                                   (0228) _TX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    TX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: TX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
080C: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
080E: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
080F: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
0811: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  TX_TIMEOUT_Start:
                                   (0256) _TX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    TX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: TX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
0812: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0814: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
0815: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
0817: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  TX_TIMEOUT_Stop:
                                   (0284) _TX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    TX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  TX_TIMEOUT_WritePeriod:
                                   (0313) _TX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[TX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[TX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: TX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call TX_TIMEOUT_Stop to disable).
0818: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
0819: 38 03    ADD   SP,3          (0334) ;
081B: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
081D: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
081E: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
0820: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
0821: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
0823: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0824: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
0826: 5D 26    MOV   A,REG[38]     (0343) ;
0828: 54 01    MOV   [X+1],A       (0344)  TX_TIMEOUT_WriteCompareValue:
082A: 5D 22    MOV   A,REG[34]     (0345) _TX_TIMEOUT_WriteCompareValue:
082C: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
082E: 50 00    MOV   A,0           (0347)    mov   reg[TX_TIMEOUT_COMPARE_LSB_REG], A
0830: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
0833: A0 03    JZ    0x0837        (0349)    mov   reg[TX_TIMEOUT_COMPARE_MSB_REG], A
0835: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
0837: 54 00    MOV   [X+0],A       (0352) 
0839: 70 FE    AND   F,254         (0353) .ENDSECTION
083B: 41 23 FE AND   REG[35],254   (0354) 
083E: 18       POP   A             (0355) 
083F: 60 26    MOV   REG[38],A     (0356) .SECTION
0841: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
0842: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: TX_TIMEOUT_wReadCompareValue
0844: 18       POP   A             (0359) ;
0845: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
0847: 18       POP   A             (0361) ;     Reads the Compare registers.
0848: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
0849: 70 3F    AND   F,63
084B: 71 C0    OR    F,192         (0363) ;
084D: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  TX_TIMEOUT_wReadCompareValue:
                                   (0374) _TX_TIMEOUT_wReadCompareValue:
                                   (0375)  wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wTX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[TX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[TX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: TX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
084E: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
0850: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
0852: 5C       MOV   X,A           (0409) ;
0853: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
0857: 43 E1 04 OR    REG[225],4    (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\tx_repeater.asm
                                   (0109) ;;*****************************************************************************
085A: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TX_REPEATER.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TX_REPEATER.inc"
085B: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
085E: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TX_REPEATER_SetTxIntMode
                                   (0143) export  _TX_REPEATER_SetTxIntMode
                                   (0144) export   TX_REPEATER_EnableInt
                                   (0145) export  _TX_REPEATER_EnableInt
                                   (0146) export   TX_REPEATER_DisableInt
                                   (0147) export  _TX_REPEATER_DisableInt
                                   (0148) export   TX_REPEATER_Start
                                   (0149) export  _TX_REPEATER_Start
                                   (0150) export   TX_REPEATER_Stop
                                   (0151) export  _TX_REPEATER_Stop
                                   (0152) export   TX_REPEATER_SendData
                                   (0153) export  _TX_REPEATER_SendData
                                   (0154) export   TX_REPEATER_bReadTxStatus
                                   (0155) export  _TX_REPEATER_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTX_REPEATER_ReadTxStatus
                                   (0160) export  _bTX_REPEATER_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TX_REPEATER_PutSHexByte
                                   (0166) export _TX_REPEATER_PutSHexByte
                                   (0167) export  TX_REPEATER_PutSHexInt
                                   (0168) export _TX_REPEATER_PutSHexInt
                                   (0169) 
085F: 71 10    OR    F,16          (0170) export  TX_REPEATER_CPutString
0861: 21 01    AND   A,1           (0171) export _TX_REPEATER_CPutString
0863: A0 07    JZ    0x086B        (0172) export  TX_REPEATER_PutString
0865: 43 28 10 OR    REG[40],16    (0173) export _TX_REPEATER_PutString
0868: 70 EF    AND   F,239         (0174) export  TX_REPEATER_PutChar
                                   (0175) export _TX_REPEATER_PutChar
086A: 7F       RET                 (0176) export  TX_REPEATER_Write
                                   (0177) export _TX_REPEATER_Write
                                   (0178) export  TX_REPEATER_CWrite
086B: 41 28 EF AND   REG[40],239   (0179) export _TX_REPEATER_CWrite
086E: 70 EF    AND   F,239         (0180) export  TX_REPEATER_PutCRLF
                                   (0181) export _TX_REPEATER_PutCRLF 
0870: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TX_REPEATER_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
0871: 29 01    OR    A,1           (0211) ;    functions.
0873: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TX_REPEATER_EnableInt:
0875: 7F       RET                 (0214) _TX_REPEATER_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TX_REPEATER_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
0876: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
0879: 7F       RET                 (0242)  TX_REPEATER_DisableInt:
                                   (0243) _TX_REPEATER_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TX_REPEATER_INT_REG, TX_REPEATER_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TX_REPEATER_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
087A: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
087C: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TX_REPEATER_SetTxIntMode:
                                   (0276) _TX_REPEATER_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TX_REPEATER_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TX_REPEATER_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TX_REPEATER_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TX_REPEATER_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
087D: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
087F: 7F       RET                 (0303) ;
0880: 30       HALT  
0881: 31 32    XOR   A,50
0883: 33 34    XOR   A,[X+52]
0885: 35 36    XOR   [X+54],A
0887: 37 38 39 XOR   [X+56],57
088A: 41 42 43 AND   REG[66],67
088D: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TX_REPEATER_Start:
                                   (0317) _TX_REPEATER_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TX_REPEATER_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TX_REPEATER_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
0890: 08       PUSH  A             (0335) ;
0891: 67       ASR   A             (0336) ;  RETURNS:  none
0892: 67       ASR   A             (0337) ;
0893: 67       ASR   A             (0338) ;  SIDE EFFECTS:
0894: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
0895: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
0897: FF E7    INDEX 0x0880        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
0899: 90 0F    CALL  0x08AA        (0342) ;    responsibility to perserve their values across calls to fastcall16 
089B: 18       POP   A             (0343) ;    functions.
089C: 21 0F    AND   A,15          (0344) ;
089E: FF E0    INDEX 0x0880        (0345)  TX_REPEATER_Stop:
08A0: 90 08    CALL  0x08AA        (0346) _TX_REPEATER_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
08A2: 7F       RET                 (0348)    and   REG[TX_REPEATER_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TX_REPEATER_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TX_REPEATER_SendData:
                                   (0375) _TX_REPEATER_SendData:
08A3: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
08A4: 9F EA    CALL  0x0890        (0377)    mov REG[TX_REPEATER_TX_BUFFER_REG], A
08A6: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
08A7: 9F E7    CALL  0x0890        (0379)    ret
                                   (0380) .ENDSECTION
08A9: 7F       RET                 (0381) 
08AA: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TX_REPEATER_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TX_REPEATER_bReadTxStatus:
                                   (0405) _TX_REPEATER_bReadTxStatus:
                                   (0406)  bTX_REPEATER_ReadTxStatus:
                                   (0407) _bTX_REPEATER_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TX_REPEATER_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
08AD: AF FC    JZ    0x08AA        (0416) ;  FUNCTION NAME: TX_REPEATER_PutSHexByte
08AF: 60 29    MOV   REG[41],A
                                   (0417) ;
08B1: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TX_REPEATER_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TX_REPEATER_PutSHexByte:
                                   (0441) _TX_REPEATER_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0450)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TX_REPEATER_HEX_STR          ; Get Hex value
                                   (0454)     call  TX_REPEATER_PutChar          ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
08B2: 70 BF    AND   F,191         (0456)     ret
08B4: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
08B6: 52 00    MOV   A,[X+0]       (0459) .SECTION
08B8: A0 06    JZ    0x08BF        (0460) ;-----------------------------------------------------------------------------
08BA: 9F EE    CALL  0x08AA        (0461) ;  FUNCTION NAME: TX_REPEATER_PutSHexInt
08BC: 75       INC   X             (0462) ;
08BD: 8F F8    JMP   0x08B6        (0463) ;  DESCRIPTION:
08BF: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
08C1: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
08C3: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TX_REPEATER_PutSHexInt:
                                   (0482) _TX_REPEATER_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TX_REPEATER_PutSHexByte      ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TX_REPEATER_PutSHexByte      ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TX_REPEATER_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
08C4: 70 BF    AND   F,191         (0503) ;  RETURNS:
08C6: 62 D3 07 MOV   REG[211],7    (0504) ;     none
08C9: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
08CA: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
08CC: A0 1A    JZ    0x08E7        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
08CE: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
08D0: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TX_REPEATER_CONTROL_REG], TX_REPEATER_TX_BUFFER_EMPTY    ; Check Tx Status
08D2: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
08D4: 60 D3    MOV   REG[211],A    (0517)    mov REG[TX_REPEATER_TX_BUFFER_REG], @Source    ; Write data to Tx Port
08D6: 52 00    MOV   A,[X+0]       (0518)    endm
08D8: 49 2B 10 TST   REG[43],16
08DB: AF FC    JZ    0x08D8        (0519) 
08DD: 60 29    MOV   REG[41],A
08DF: 4F       MOV   X,SP          (0520) 
08E0: 62 D3 07 MOV   REG[211],7    (0521)  TX_REPEATER_PutChar:
08E3: 77 FD    INC   [X-3]         (0522) _TX_REPEATER_PutChar:
08E5: 8F E4    JMP   0x08CA        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
08E7: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
08E9: 71 C0    OR    F,192         (0526)    ret
08EB: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TX_REPEATER_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TX_REPEATER_PutString:
                                   (0563) _TX_REPEATER_PutString:
08EC: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
08ED: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
08F0: B0 06    JNZ   0x08F7        (0569)    call  TX_REPEATER_PutChar                ; Send character to Tx port
08F2: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
08F5: A0 1D    JZ    0x0913        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
08F7: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
08F8: 52 FC    MOV   A,[X-4]       (0575)    ret
08FA: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
08FC: 28       ROMX                (0577) 
08FD: 49 2B 10 TST   REG[43],16
0900: AF FC    JZ    0x08FD        (0578) .SECTION
0902: 60 29    MOV   REG[41],A
0904: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TX_REPEATER_Write
0905: 07 FD 01 ADD   [X-3],1       (0581) ;
0908: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
090B: 17 FB 01 SUB   [X-5],1       (0585) ;
090E: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
0911: 8F DB    JMP   0x08ED        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
0913: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TX_REPEATER_Write:
                                   (0610) _TX_REPEATER_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
0914: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
0915: 10       PUSH  X             (0622)    ENDIF
0916: 28       ROMX                (0623) 
0917: A0 0B    JZ    0x0923        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
0919: 9F 8F    CALL  0x08AA        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
091B: 20       POP   X             (0626)    mov   A,[X]
091C: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
091D: 75       INC   X             (0628)    mov   X, SP
091E: DF F5    JNC   0x0914        (0629)    RAM_SETPAGE_IDX2STK
0920: 74       INC   A             (0630)    inc   [X+STR_LSB]
0921: 8F F2    JMP   0x0914        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
0923: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
0925: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TX_REPEATER_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
0926: 50 0D    MOV   A,13          (0663) ;
0928: 9F 80    CALL  0x08AA        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
092A: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
092C: 9F 7C    CALL  0x08AA        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
0930: 43 E1 04 OR    REG[225],4    (0668) 

FILE: lib\transmit.asm
                                   (0109) ;;*****************************************************************************
0933: 7F       RET                 (0110) ;;*****************************************************************************
                                   (0111) ;;  FILENAME: TRANSMIT.asm
                                   (0112) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:51
                                   (0113) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0114) ;;
                                   (0115) ;;  DESCRIPTION: TX8 User Module software implementation file
                                   (0116) ;;               for 22/24/25/26/27xxx PSoc family of devices.
                                   (0117) ;;
                                   (0118) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0119) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0120) ;;        This means it is the caller's responsibility to preserve any values
                                   (0121) ;;        in the X and A registers that are still needed after the API functions
                                   (0122) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0123) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0124) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0125) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0126) ;;-----------------------------------------------------------------------------
                                   (0127) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0128) ;;*****************************************************************************
                                   (0129) ;;*****************************************************************************
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ; include instance specific register definitions
                                   (0133) ;-----------------------------------------------
                                   (0134) include "m8c.inc"
                                   (0135) include "memory.inc"
                                   (0136) include "TRANSMIT.inc"
0934: 41 E1 FB AND   REG[225],251  (0137) 
                                   (0138) area UserModules (ROM, REL)
0937: 7F       RET                 (0139) ;-----------------------------------------------
                                   (0140) ;  Global Symbols
                                   (0141) ;-----------------------------------------------
                                   (0142) export   TRANSMIT_SetTxIntMode
                                   (0143) export  _TRANSMIT_SetTxIntMode
                                   (0144) export   TRANSMIT_EnableInt
                                   (0145) export  _TRANSMIT_EnableInt
                                   (0146) export   TRANSMIT_DisableInt
                                   (0147) export  _TRANSMIT_DisableInt
                                   (0148) export   TRANSMIT_Start
                                   (0149) export  _TRANSMIT_Start
                                   (0150) export   TRANSMIT_Stop
                                   (0151) export  _TRANSMIT_Stop
                                   (0152) export   TRANSMIT_SendData
                                   (0153) export  _TRANSMIT_SendData
                                   (0154) export   TRANSMIT_bReadTxStatus
                                   (0155) export  _TRANSMIT_bReadTxStatus
                                   (0156) 
                                   (0157) // Old labels, will be removed in future release
                                   (0158) // Do Not Use.
                                   (0159) export   bTRANSMIT_ReadTxStatus
                                   (0160) export  _bTRANSMIT_ReadTxStatus
                                   (0161) 
                                   (0162) ;-----------------------------------------------
                                   (0163) ;  High Level TX functions
                                   (0164) ;-----------------------------------------------
                                   (0165) export  TRANSMIT_PutSHexByte
                                   (0166) export _TRANSMIT_PutSHexByte
                                   (0167) export  TRANSMIT_PutSHexInt
                                   (0168) export _TRANSMIT_PutSHexInt
                                   (0169) 
0938: 71 10    OR    F,16          (0170) export  TRANSMIT_CPutString
093A: 21 01    AND   A,1           (0171) export _TRANSMIT_CPutString
093C: A0 07    JZ    0x0944        (0172) export  TRANSMIT_PutString
093E: 43 28 10 OR    REG[40],16    (0173) export _TRANSMIT_PutString
0941: 70 EF    AND   F,239         (0174) export  TRANSMIT_PutChar
                                   (0175) export _TRANSMIT_PutChar
0943: 7F       RET                 (0176) export  TRANSMIT_Write
                                   (0177) export _TRANSMIT_Write
                                   (0178) export  TRANSMIT_CWrite
0944: 41 28 EF AND   REG[40],239   (0179) export _TRANSMIT_CWrite
0947: 70 EF    AND   F,239         (0180) export  TRANSMIT_PutCRLF
                                   (0181) export _TRANSMIT_PutCRLF 
0949: 7F       RET                 (0182) 
                                   (0183) ;-----------------------------------------------
                                   (0184) ;  EQUATES
                                   (0185) ;-----------------------------------------------
                                   (0186) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0187) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                   (0188) 
                                   (0189) AREA UserModules (ROM, REL)
                                   (0190) 
                                   (0191) .SECTION
                                   (0192) ;-----------------------------------------------------------------------------
                                   (0193) ;  FUNCTION NAME: TRANSMIT_EnableInt
                                   (0194) ;
                                   (0195) ;  DESCRIPTION:
                                   (0196) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                   (0197) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0198) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0199) ;
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: none
                                   (0203) ;
                                   (0204) ;  RETURNS: none
                                   (0205) ;
                                   (0206) ;  SIDE EFFECTS:
                                   (0207) ;    The A and X registers may be modified by this or future implementations
                                   (0208) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0209) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0210) ;    responsibility to perserve their values across calls to fastcall16 
094A: 29 01    OR    A,1           (0211) ;    functions.
094C: 60 2B    MOV   REG[43],A     (0212) ;
                                   (0213)  TRANSMIT_EnableInt:
094E: 7F       RET                 (0214) _TRANSMIT_EnableInt:
                                   (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0216)    M8C_EnableIntMask  TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0217)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0218)    ret
                                   (0219) .ENDSECTION
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: TRANSMIT_DisableInt
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                   (0227) ;     associated with this User Module.
                                   (0228) ;
                                   (0229) ;-----------------------------------------------------------------------------
                                   (0230) ;
                                   (0231) ;  ARGUMENTS:  none
                                   (0232) ;
                                   (0233) ;  RETURNS:  none
                                   (0234) ;
                                   (0235) ;  SIDE EFFECTS:
                                   (0236) ;    The A and X registers may be modified by this or future implementations
                                   (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0239) ;    responsibility to perserve their values across calls to fastcall16 
094F: 41 2B FE AND   REG[43],254   (0240) ;    functions.
                                   (0241) ;
0952: 7F       RET                 (0242)  TRANSMIT_DisableInt:
                                   (0243) _TRANSMIT_DisableInt:
                                   (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0245)    M8C_DisableIntMask TRANSMIT_INT_REG, TRANSMIT_bINT_MASK
                                   (0246)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0247)    ret
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) .SECTION
                                   (0251) ;-----------------------------------------------------------------------------
                                   (0252) ;  FUNCTION NAME: TRANSMIT_SetTxIntMode(BYTE bTxIntMode)
                                   (0253) ;
                                   (0254) ;  DESCRIPTION:
                                   (0255) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0256) ;
                                   (0257) ;  ARGUMENTS:
                                   (0258) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0259) ;        Passed in the A register
                                   (0260) ;
                                   (0261) ;  RETURNS:
                                   (0262) ;     none.
                                   (0263) ;
                                   (0264) ;  SIDE EFFECTS:
                                   (0265) ;    The A and X registers may be modified by this or future implementations
                                   (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0268) ;    responsibility to perserve their values across calls to fastcall16 
0953: 60 29    MOV   REG[41],A     (0269) ;    functions.
                                   (0270) ;
0955: 7F       RET                 (0271) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0272) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0273) ;     on TX register empty or TX transmit complete
                                   (0274) ;
                                   (0275)  TRANSMIT_SetTxIntMode:
                                   (0276) _TRANSMIT_SetTxIntMode:
                                   (0277)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0278)    M8C_SetBank1
                                   (0279)    and   A, TRANSMIT_INT_MODE_TX_COMPLETE
                                   (0280)    jz    .SetModeRegEmpty
                                   (0281)    or    REG[TRANSMIT_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0282)    M8C_SetBank0
                                   (0283)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0284)    ret
                                   (0285) 
                                   (0286) .SetModeRegEmpty:
                                   (0287)    and   REG[TRANSMIT_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0288)    M8C_SetBank0
                                   (0289)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0290)    ret
                                   (0291) .ENDSECTION
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: TRANSMIT_Start(BYTE bParity)
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0299) ;     The transmitter will begin transmitting if a byte has been written into the
                                   (0300) ;     transmit buffer.
0956: 5D 2B    MOV   A,REG[43]     (0301) ;
                                   (0302) ;-----------------------------------------------------------------------------
0958: 7F       RET                 (0303) ;
0959: 30       HALT  
095A: 31 32    XOR   A,50
095C: 33 34    XOR   A,[X+52]
095E: 35 36    XOR   [X+54],A
0960: 37 38 39 XOR   [X+56],57
0963: 41 42 43 AND   REG[66],67
0966: 44 45 46 OR    REG[X+69],70
                                   (0304) ;  ARGUMENTS:
                                   (0305) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                   (0306) ;
                                   (0307) ;  RETURNS:  none
                                   (0308) ;
                                   (0309) ;  SIDE EFFECTS:
                                   (0310) ;    The A and X registers may be modified by this or future implementations
                                   (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0314) ;    functions.
                                   (0315) ;
                                   (0316)  TRANSMIT_Start:
                                   (0317) _TRANSMIT_Start:
                                   (0318)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0319)    or    A, bfCONTROL_REG_START_BIT
                                   (0320)    mov   REG[TRANSMIT_CONTROL_REG], A
                                   (0321)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0322)    ret
                                   (0323) .ENDSECTION
                                   (0324) 
                                   (0325) .SECTION
                                   (0326) ;-----------------------------------------------------------------------------
                                   (0327) ;  FUNCTION NAME: TRANSMIT_Stop
                                   (0328) ;
                                   (0329) ;  DESCRIPTION:
                                   (0330) ;     Disables TX8 operation.
                                   (0331) ;
                                   (0332) ;-----------------------------------------------------------------------------
                                   (0333) ;
                                   (0334) ;  ARGUMENTS:  none
0969: 08       PUSH  A             (0335) ;
096A: 67       ASR   A             (0336) ;  RETURNS:  none
096B: 67       ASR   A             (0337) ;
096C: 67       ASR   A             (0338) ;  SIDE EFFECTS:
096D: 67       ASR   A             (0339) ;    The A and X registers may be modified by this or future implementations
096E: 21 0F    AND   A,15          (0340) ;    of this function.  The same is true for all RAM page pointer registers in
0970: FF E7    INDEX 0x0959        (0341) ;    the Large Memory Model.  When necessary, it is the calling function's
0972: 90 0F    CALL  0x0983        (0342) ;    responsibility to perserve their values across calls to fastcall16 
0974: 18       POP   A             (0343) ;    functions.
0975: 21 0F    AND   A,15          (0344) ;
0977: FF E0    INDEX 0x0959        (0345)  TRANSMIT_Stop:
0979: 90 08    CALL  0x0983        (0346) _TRANSMIT_Stop:
                                   (0347)    RAM_PROLOGUE RAM_USE_CLASS_1
097B: 7F       RET                 (0348)    and   REG[TRANSMIT_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0349)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0350)    ret
                                   (0351) .ENDSECTION
                                   (0352) 
                                   (0353) .SECTION
                                   (0354) ;-----------------------------------------------------------------------------
                                   (0355) ;  FUNCTION NAME: TRANSMIT_SendData
                                   (0356) ;
                                   (0357) ;  DESCRIPTION:
                                   (0358) ;     Sends one byte through serial port.
                                   (0359) ;
                                   (0360) ;-----------------------------------------------------------------------------
                                   (0361) ;
                                   (0362) ;  ARGUMENTS:
                                   (0363) ;     BYTE  TxData - data to transmit.
                                   (0364) ;
                                   (0365) ;  RETURNS:
                                   (0366) ;
                                   (0367) ;  SIDE EFFECTS:
                                   (0368) ;    The A and X registers may be modified by this or future implementations
                                   (0369) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0370) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0371) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0372) ;    functions.
                                   (0373) ;
                                   (0374)  TRANSMIT_SendData:
                                   (0375) _TRANSMIT_SendData:
097C: 4B       SWAP  A,X           (0376)    RAM_PROLOGUE RAM_USE_CLASS_1
097D: 9F EA    CALL  0x0969        (0377)    mov REG[TRANSMIT_TX_BUFFER_REG], A
097F: 5B       MOV   A,X           (0378)    RAM_EPILOGUE RAM_USE_CLASS_1
0980: 9F E7    CALL  0x0969        (0379)    ret
                                   (0380) .ENDSECTION
0982: 7F       RET                 (0381) 
0983: 49 2B 10 TST   REG[43],16
                                   (0382) .SECTION
                                   (0383) ;-----------------------------------------------------------------------------
                                   (0384) ;  FUNCTION NAME: TRANSMIT_bReadTxStatus
                                   (0385) ;
                                   (0386) ;  DESCRIPTION:
                                   (0387) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0388) ;
                                   (0389) ;-----------------------------------------------------------------------------
                                   (0390) ;
                                   (0391) ;  ARGUMENTS:
                                   (0392) ;
                                   (0393) ;  RETURNS:
                                   (0394) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                   (0395) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;
                                   (0404)  TRANSMIT_bReadTxStatus:
                                   (0405) _TRANSMIT_bReadTxStatus:
                                   (0406)  bTRANSMIT_ReadTxStatus:
                                   (0407) _bTRANSMIT_ReadTxStatus:
                                   (0408)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0409)    mov A,  REG[TRANSMIT_CONTROL_REG]
                                   (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0411)    ret
                                   (0412) 
                                   (0413) .ENDSECTION
                                   (0414) 
                                   (0415) ;-----------------------------------------------------------------------------
0986: AF FC    JZ    0x0983        (0416) ;  FUNCTION NAME: TRANSMIT_PutSHexByte
0988: 60 29    MOV   REG[41],A
                                   (0417) ;
098A: 7F       RET                 (0418) ;  DESCRIPTION:
                                   (0419) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0420) ;
                                   (0421) ;  ARGUMENTS:
                                   (0422) ;     A  => (BYTE) Data/char to be printed
                                   (0423) ;
                                   (0424) ;  RETURNS:
                                   (0425) ;     none.
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;
                                   (0434) .LITERAL
                                   (0435) TRANSMIT_HEX_STR:
                                   (0436)      DS    "0123456789ABCDEF"
                                   (0437) .ENDLITERAL
                                   (0438) 
                                   (0439) .SECTION
                                   (0440)  TRANSMIT_PutSHexByte:
                                   (0441) _TRANSMIT_PutSHexByte:
                                   (0442)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0443)     push  A                            ; Save lower nibble
                                   (0444)     asr   A                            ; Shift high nibble to right
                                   (0445)     asr   A
                                   (0446)     asr   A
                                   (0447)     asr   A
                                   (0448)     and   A,0Fh                        ; Mask off nibble
                                   (0449)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0450)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0451)     pop   A                            ; Restore value
                                   (0452)     and   A,0Fh                        ; Mask off lower nibble
                                   (0453)     index TRANSMIT_HEX_STR             ; Get Hex value
                                   (0454)     call  TRANSMIT_PutChar             ; Write data to screen
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
098B: 70 BF    AND   F,191         (0456)     ret
098D: 60 D3    MOV   REG[211],A    (0457) .ENDSECTION
                                   (0458) 
098F: 52 00    MOV   A,[X+0]       (0459) .SECTION
0991: A0 06    JZ    0x0998        (0460) ;-----------------------------------------------------------------------------
0993: 9F EE    CALL  0x0983        (0461) ;  FUNCTION NAME: TRANSMIT_PutSHexInt
0995: 75       INC   X             (0462) ;
0996: 8F F8    JMP   0x098F        (0463) ;  DESCRIPTION:
0998: 70 3F    AND   F,63
                                   (0464) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0465) ;
099A: 71 C0    OR    F,192         (0466) ;  ARGUMENTS:
099C: 7F       RET                 (0467) ;     Pointer to string
                                   (0468) ;     A  => ASB of Int
                                   (0469) ;     X  => MSB of Int
                                   (0470) ;
                                   (0471) ;  RETURNS:
                                   (0472) ;     none.
                                   (0473) ;
                                   (0474) ;  SIDE EFFECTS:
                                   (0475) ;    The A and X registers may be modified by this or future implementations
                                   (0476) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0477) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0478) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0479) ;    functions.
                                   (0480) ;
                                   (0481)  TRANSMIT_PutSHexInt:
                                   (0482) _TRANSMIT_PutSHexInt:
                                   (0483)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0484)     swap  A,X
                                   (0485)     call  TRANSMIT_PutSHexByte         ; Print MSB
                                   (0486)     mov   A,X                          ; Move LSB into position
                                   (0487)     call  TRANSMIT_PutSHexByte         ; Print LSB
                                   (0488)     RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)     ret
                                   (0490) .ENDSECTION
                                   (0491) 
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: TRANSMIT_PutChar
                                   (0495) ;
                                   (0496) ;  DESCRIPTION:
                                   (0497) ;     Send character out through UART TX port.
                                   (0498) ;
                                   (0499) ;
                                   (0500) ;  ARGUMENTS:
                                   (0501) ;     A has Character to send to UART Tx Port
                                   (0502) ;
099D: 70 BF    AND   F,191         (0503) ;  RETURNS:
099F: 62 D3 07 MOV   REG[211],7    (0504) ;     none
09A2: 4F       MOV   X,SP          (0505) ;
                                   (0506) ;  SIDE EFFECTS:
                                   (0507) ;    The A and X registers may be modified by this or future implementations
09A3: 52 FB    MOV   A,[X-5]       (0508) ;    of this function.  The same is true for all RAM page pointer registers in
09A5: A0 1A    JZ    0x09C0        (0509) ;    the Large Memory Model.  When necessary, it is the calling function's
09A7: 7B FB    DEC   [X-5]         (0510) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0511) ;    functions.
                                   (0512) ;
09A9: 52 FC    MOV   A,[X-4]       (0513)    macro InLinePutChar( Source )
                                   (0514) .BufEmptyWaitLoop:
                                   (0515)    tst REG[TRANSMIT_CONTROL_REG], TRANSMIT_TX_BUFFER_EMPTY    ; Check Tx Status
09AB: 59 FD    MOV   X,[X-3]       (0516)    jz  .BufEmptyWaitLoop
09AD: 60 D3    MOV   REG[211],A    (0517)    mov REG[TRANSMIT_TX_BUFFER_REG], @Source    ; Write data to Tx Port
09AF: 52 00    MOV   A,[X+0]       (0518)    endm
09B1: 49 2B 10 TST   REG[43],16
09B4: AF FC    JZ    0x09B1        (0519) 
09B6: 60 29    MOV   REG[41],A
09B8: 4F       MOV   X,SP          (0520) 
09B9: 62 D3 07 MOV   REG[211],7    (0521)  TRANSMIT_PutChar:
09BC: 77 FD    INC   [X-3]         (0522) _TRANSMIT_PutChar:
09BE: 8F E4    JMP   0x09A3        (0523)    RAM_PROLOGUE RAM_USE_CLASS_1
09C0: 70 3F    AND   F,63
                                   (0524)    InLinePutChar A
                                   (0525)    RAM_EPILOGUE RAM_USE_CLASS_1
09C2: 71 C0    OR    F,192         (0526)    ret
09C4: 7F       RET                 (0527) 
                                   (0528) .ENDSECTION
                                   (0529) 
                                   (0530) 
                                   (0531) ;-----------------------------------------------
                                   (0532) ;  High Level TX functions
                                   (0533) ;-----------------------------------------------
                                   (0534) 
                                   (0535) 
                                   (0536) .SECTION
                                   (0537) ;-----------------------------------------------------------------------------
                                   (0538) ;  FUNCTION NAME: TRANSMIT_PutString
                                   (0539) ;
                                   (0540) ;  DESCRIPTION:
                                   (0541) ;     Send String out through UART TX port.
                                   (0542) ;
                                   (0543) ;
                                   (0544) ;  ARGUMENTS:
                                   (0545) ;     Pointer to String
                                   (0546) ;     A has MSB of string address
                                   (0547) ;     X has LSB of string address
                                   (0548) ;
                                   (0549) ;  RETURNS:
                                   (0550) ;     none
                                   (0551) ;
                                   (0552) ;  SIDE EFFECTS:
                                   (0553) ;    The A and X registers may be modified by this or future implementations
                                   (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0556) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0557) ;    functions.
                                   (0558) ;          
                                   (0559) ;    Currently only the page pointer registers listed below are modified: 
                                   (0560) ;          IDX_PP
                                   (0561) ;
                                   (0562)  TRANSMIT_PutString:
                                   (0563) _TRANSMIT_PutString:
09C5: 4F       MOV   X,SP          (0564)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0565)    RAM_SETPAGE_IDX A
                                   (0566) .PutStringLoop:
                                   (0567)    mov   A,[X]                             ; Get value pointed to by X
09C6: 3D FA 00 CMP   [X-6],0       (0568)    jz    End_PutString                     ; Check for end of string
09C9: B0 06    JNZ   0x09D0        (0569)    call  TRANSMIT_PutChar                   ; Send character to Tx port
09CB: 3D FB 00 CMP   [X-5],0       (0570)    inc   X                                 ; Advance pointer to next character
09CE: A0 1D    JZ    0x09EC        (0571)    jmp   .PutStringLoop                     ; Get next character
                                   (0572) 
                                   (0573) End_PutString:
09D0: 10       PUSH  X             (0574)    RAM_EPILOGUE RAM_USE_CLASS_3
09D1: 52 FC    MOV   A,[X-4]       (0575)    ret
09D3: 59 FD    MOV   X,[X-3]       (0576) .ENDSECTION
09D5: 28       ROMX                (0577) 
09D6: 49 2B 10 TST   REG[43],16
09D9: AF FC    JZ    0x09D6        (0578) .SECTION
09DB: 60 29    MOV   REG[41],A
09DD: 20       POP   X             (0579) ;-----------------------------------------------------------------------------
                                   (0580) ;  FUNCTION NAME: TRANSMIT_Write
09DE: 07 FD 01 ADD   [X-3],1       (0581) ;
09E1: 0F FC 00 ADC   [X-4],0       (0582) ;  DESCRIPTION:
                                   (0583) ;     Send String of length X to serial port
                                   (0584) ;
09E4: 17 FB 01 SUB   [X-5],1       (0585) ;
09E7: 1F FA 00 SBB   [X-6],0       (0586) ;  ARGUMENTS:
                                   (0587) ;     Pointer to String
09EA: 8F DB    JMP   0x09C6        (0588) ;     [SP-5] Count of characters to send
                                   (0589) ;     [SP-4] has MSB of string address
                                   (0590) ;     [SP-3] has LSB of string address
                                   (0591) ;
09EC: 7F       RET                 (0592) ;  RETURNS:
                                   (0593) ;     none
                                   (0594) ;
                                   (0595) ;  SIDE EFFECTS:
                                   (0596) ;    The A and X registers may be modified by this or future implementations
                                   (0597) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0598) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0599) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0600) ;    functions.
                                   (0601) ;          
                                   (0602) ;    Currently only the page pointer registers listed below are modified: 
                                   (0603) ;          IDX_PP
                                   (0604) ;
                                   (0605) CNT_LEN:    equ -5           ; Length of data to send
                                   (0606) STR_MSB:    equ -4           ; MSB pointer of string
                                   (0607) STR_LSB:    equ -3           ; LSB pointer of string
                                   (0608) 
                                   (0609)  TRANSMIT_Write:
                                   (0610) _TRANSMIT_Write:
                                   (0611)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (0612)    RAM_SETPAGE_IDX2STK
                                   (0613)    mov   X, SP
                                   (0614) 
                                   (0615) .NextByteLoop:
                                   (0616)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                   (0617)    jz    .End_Write
                                   (0618)    dec   [X+CNT_LEN]                       ; Decrement counter
                                   (0619) 
                                   (0620)    IF SYSTEM_LARGE_MEMORY_MODEL
09ED: 08       PUSH  A             (0621)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
09EE: 10       PUSH  X             (0622)    ENDIF
09EF: 28       ROMX                (0623) 
09F0: A0 0B    JZ    0x09FC        (0624)    mov   X,[X+STR_LSB]                     ; Get character to send
09F2: 9F 8F    CALL  0x0983        (0625)    RAM_SETPAGE_IDX A                        ; switch index pages
09F4: 20       POP   X             (0626)    mov   A,[X]
09F5: 18       POP   A             (0627)    InLinePutChar A                          ; Send character to UART
09F6: 75       INC   X             (0628)    mov   X, SP
09F7: DF F5    JNC   0x09ED        (0629)    RAM_SETPAGE_IDX2STK
09F9: 74       INC   A             (0630)    inc   [X+STR_LSB]
09FA: 8F F2    JMP   0x09ED        (0631)    jmp   .NextByteLoop
                                   (0632) 
                                   (0633) .End_Write:
                                   (0634)    RAM_EPILOGUE RAM_USE_CLASS_3
09FC: 38 FE    ADD   SP,254        (0635)    ret
                                   (0636) .ENDSECTION
09FE: 7F       RET                 (0637) 
                                   (0638) .SECTION
                                   (0639) ;-----------------------------------------------------------------------------
                                   (0640) ;  FUNCTION NAME: TRANSMIT_CWrite
                                   (0641) ;
                                   (0642) ;             WARNING WARNING NOT COMPLETE
                                   (0643) ;
                                   (0644) ;  DESCRIPTION:
                                   (0645) ;     Send String of length X to serial port
                                   (0646) ;
                                   (0647) ;  ARGUMENTS:
                                   (0648) ;     Pointer to String
                                   (0649) ;     [SP-6] MSB of Count of character to send
                                   (0650) ;     [SP-5] LSB of Count of character to send
                                   (0651) ;     [SP-4] has MSB of string address
                                   (0652) ;     [SP-3] has LSB of string address
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
09FF: 50 0D    MOV   A,13          (0663) ;
0A01: 9F 80    CALL  0x0983        (0664) CLEN_MSB:   equ -6           ; MSB Length of data to send
0A03: 50 0A    MOV   A,10          (0665) CLEN_LSB:   equ -5           ; LSB Length of data to send
0A05: 9F 7C    CALL  0x0983        (0666) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0667) CSTR_LSB:   equ -3           ; LSB pointer of string
0A08: 43 E1 02 OR    REG[225],2    (0668) 

FILE: lib\rx_timeout.asm
                                   (0102) ;;*****************************************************************************
0A0B: 7F       RET                 (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME: RX_TIMEOUT.asm
                                   (0105) ;;   Version: 2.6, Updated on 2009/7/10 at 10:46:29
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                   (0109) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0110) ;;
                                   (0111) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0112) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0113) ;;        This means it is the caller's responsibility to preserve any values
                                   (0114) ;;        in the X and A registers that are still needed after the API functions
                                   (0115) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0116) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0117) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0118) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0119) ;;-----------------------------------------------------------------------------
                                   (0120) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0121) ;;*****************************************************************************
                                   (0122) ;;*****************************************************************************
                                   (0123) 
                                   (0124) include "m8c.inc"
                                   (0125) include "memory.inc"
                                   (0126) include "RX_TIMEOUT.inc"
                                   (0127) 
                                   (0128) ;-----------------------------------------------
0A0C: 41 E1 FD AND   REG[225],253  (0129) ;  Global Symbols
                                   (0130) ;-----------------------------------------------
0A0F: 7F       RET                 (0131) export  RX_TIMEOUT_EnableInt
                                   (0132) export _RX_TIMEOUT_EnableInt
                                   (0133) export  RX_TIMEOUT_DisableInt
                                   (0134) export _RX_TIMEOUT_DisableInt
                                   (0135) export  RX_TIMEOUT_Start
                                   (0136) export _RX_TIMEOUT_Start
                                   (0137) export  RX_TIMEOUT_Stop
                                   (0138) export _RX_TIMEOUT_Stop
                                   (0139) export  RX_TIMEOUT_WritePeriod
                                   (0140) export _RX_TIMEOUT_WritePeriod
                                   (0141) export  RX_TIMEOUT_WriteCompareValue
                                   (0142) export _RX_TIMEOUT_WriteCompareValue
                                   (0143) export  RX_TIMEOUT_wReadCompareValue
                                   (0144) export _RX_TIMEOUT_wReadCompareValue
                                   (0145) export  RX_TIMEOUT_wReadTimer
                                   (0146) export _RX_TIMEOUT_wReadTimer
                                   (0147) export  RX_TIMEOUT_wReadTimerSaveCV
                                   (0148) export _RX_TIMEOUT_wReadTimerSaveCV
                                   (0149) 
                                   (0150) ; The following functions are deprecated and subject to omission in future releases
                                   (0151) ;
                                   (0152) export  wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0153) export _wRX_TIMEOUT_ReadCompareValue  ; deprecated
                                   (0154) export  wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0155) export _wRX_TIMEOUT_ReadTimer         ; deprecated
                                   (0156) export  wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
0A10: 43 23 01 OR    REG[35],1     (0157) export _wRX_TIMEOUT_ReadTimerSaveCV   ; deprecated
                                   (0158) 
0A13: 7F       RET                 (0159) export  wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0160) export _wRX_TIMEOUT_ReadCounter       ; obsolete
                                   (0161) export  wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0162) export _wRX_TIMEOUT_CaptureCounter    ; obsolete
                                   (0163) 
                                   (0164) 
                                   (0165) AREA receiver_config_RAM (RAM,REL)
                                   (0166) 
                                   (0167) ;-----------------------------------------------
                                   (0168) ;  Constant Definitions
                                   (0169) ;-----------------------------------------------
                                   (0170) 
                                   (0171) 
                                   (0172) ;-----------------------------------------------
                                   (0173) ; Variable Allocation
                                   (0174) ;-----------------------------------------------
                                   (0175) 
                                   (0176) 
                                   (0177) AREA UserModules (ROM, REL)
                                   (0178) 
                                   (0179) .SECTION
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: RX_TIMEOUT_EnableInt
                                   (0182) ;
                                   (0183) ;  DESCRIPTION:
                                   (0184) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
0A14: 41 23 FE AND   REG[35],254   (0185) ;     associated with this User Module. This function has no effect until and
                                   (0186) ;     unless the global interrupts are enabled (for example by using the
0A17: 7F       RET                 (0187) ;     macro M8C_EnableGInt).
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) ;  ARGUMENTS:    None.
                                   (0191) ;  RETURNS:      Nothing.
                                   (0192) ;  SIDE EFFECTS: 
                                   (0193) ;    The A and X registers may be modified by this or future implementations
                                   (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0197) ;    functions.
                                   (0198) ;
                                   (0199)  RX_TIMEOUT_EnableInt:
                                   (0200) _RX_TIMEOUT_EnableInt:
                                   (0201)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0202)    RX_TIMEOUT_EnableInt_M
                                   (0203)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0204)    ret
                                   (0205) 
                                   (0206) .ENDSECTION
                                   (0207) 
                                   (0208) 
                                   (0209) .SECTION
                                   (0210) ;-----------------------------------------------------------------------------
                                   (0211) ;  FUNCTION NAME: RX_TIMEOUT_DisableInt
                                   (0212) ;
                                   (0213) ;  DESCRIPTION:
0A18: 60 21    MOV   REG[33],A     (0214) ;     Disables this timer's interrupt by clearing the interrupt enable
0A1A: 5B       MOV   A,X           (0215) ;     mask bit associated with this User Module.
0A1B: 60 25    MOV   REG[37],A     (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;
0A1D: 7F       RET                 (0218) ;  ARGUMENTS:    None
                                   (0219) ;  RETURNS:      Nothing
                                   (0220) ;  SIDE EFFECTS: 
                                   (0221) ;    The A and X registers may be modified by this or future implementations
                                   (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0225) ;    functions.
                                   (0226) ;
                                   (0227)  RX_TIMEOUT_DisableInt:
                                   (0228) _RX_TIMEOUT_DisableInt:
                                   (0229)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0230)    RX_TIMEOUT_DisableInt_M
                                   (0231)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0232)    ret
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) 
                                   (0237) .SECTION
                                   (0238) ;-----------------------------------------------------------------------------
                                   (0239) ;  FUNCTION NAME: RX_TIMEOUT_Start
                                   (0240) ;
                                   (0241) ;  DESCRIPTION:
                                   (0242) ;     Sets the start bit in the Control register of this user module.  The
                                   (0243) ;     timer will begin counting on the next input clock.
                                   (0244) ;-----------------------------------------------------------------------------
                                   (0245) ;
0A1E: 60 22    MOV   REG[34],A     (0246) ;  ARGUMENTS:    None
0A20: 5B       MOV   A,X           (0247) ;  RETURNS:      Nothing
0A21: 60 26    MOV   REG[38],A     (0248) ;  SIDE EFFECTS: 
                                   (0249) ;    The A and X registers may be modified by this or future implementations
0A23: 7F       RET                 (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0253) ;    functions.
                                   (0254) ;
                                   (0255)  RX_TIMEOUT_Start:
                                   (0256) _RX_TIMEOUT_Start:
                                   (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0258)    RX_TIMEOUT_Start_M
                                   (0259)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0260)    ret
                                   (0261) 
                                   (0262) .ENDSECTION
                                   (0263) 
                                   (0264) 
                                   (0265) .SECTION
                                   (0266) ;-----------------------------------------------------------------------------
                                   (0267) ;  FUNCTION NAME: RX_TIMEOUT_Stop
                                   (0268) ;
                                   (0269) ;  DESCRIPTION:
                                   (0270) ;     Disables timer operation by clearing the start bit in the Control
                                   (0271) ;     register of the LSB block.
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;
                                   (0274) ;  ARGUMENTS:    None
                                   (0275) ;  RETURNS:      Nothing
                                   (0276) ;  SIDE EFFECTS: 
0A24: 5D 26    MOV   A,REG[38]     (0277) ;    The A and X registers may be modified by this or future implementations
0A26: 5C       MOV   X,A           (0278) ;    of this function.  The same is true for all RAM page pointer registers in
0A27: 5D 22    MOV   A,REG[34]     (0279) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0280) ;    responsibility to perserve their values across calls to fastcall16 
0A29: 7F       RET                 (0281) ;    functions.
                                   (0282) ;
                                   (0283)  RX_TIMEOUT_Stop:
                                   (0284) _RX_TIMEOUT_Stop:
                                   (0285)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0286)    RX_TIMEOUT_Stop_M
                                   (0287)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0288)    ret
                                   (0289) 
                                   (0290) .ENDSECTION
                                   (0291) 
                                   (0292) 
                                   (0293) .SECTION
                                   (0294) ;-----------------------------------------------------------------------------
                                   (0295) ;  FUNCTION NAME: RX_TIMEOUT_WritePeriod
                                   (0296) ;
                                   (0297) ;  DESCRIPTION:
                                   (0298) ;     Write the 16-bit period value into the Period register (DR1). If the
                                   (0299) ;     Timer user module is stopped, then this value will also be latched
                                   (0300) ;     into the Count register (DR0).
                                   (0301) ;-----------------------------------------------------------------------------
                                   (0302) ;
                                   (0303) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                   (0304) ;  RETURNS:   Nothing
                                   (0305) ;  SIDE EFFECTS:
                                   (0306) ;    The A and X registers may be modified by this or future implementations
                                   (0307) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0308) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0309) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0310) ;    functions.
                                   (0311) ;
                                   (0312)  RX_TIMEOUT_WritePeriod:
                                   (0313) _RX_TIMEOUT_WritePeriod:
                                   (0314)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0315)    mov   reg[RX_TIMEOUT_PERIOD_LSB_REG], A
                                   (0316)    mov   A, X
                                   (0317)    mov   reg[RX_TIMEOUT_PERIOD_MSB_REG], A
                                   (0318)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0319)    ret
                                   (0320) 
                                   (0321) .ENDSECTION
                                   (0322) 
                                   (0323) 
                                   (0324) .SECTION
                                   (0325) ;-----------------------------------------------------------------------------
                                   (0326) ;  FUNCTION NAME: RX_TIMEOUT_WriteCompareValue
                                   (0327) ;
                                   (0328) ;  DESCRIPTION:
                                   (0329) ;     Writes compare value into the Compare register (DR2).
                                   (0330) ;
                                   (0331) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0332) ;           Compare register. (Call RX_TIMEOUT_Stop to disable).
0A2A: 4F       MOV   X,SP          (0333) ;-----------------------------------------------------------------------------
0A2B: 38 03    ADD   SP,3          (0334) ;
0A2D: 5D 23    MOV   A,REG[35]     (0335) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
0A2F: 08       PUSH  A             (0336) ;  RETURNS:      Nothing
0A30: 5D 22    MOV   A,REG[34]     (0337) ;  SIDE EFFECTS: 
0A32: 08       PUSH  A             (0338) ;    The A and X registers may be modified by this or future implementations
0A33: 5D 26    MOV   A,REG[38]     (0339) ;    of this function.  The same is true for all RAM page pointer registers in
0A35: 08       PUSH  A             (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
0A36: 5D 20    MOV   A,REG[32]     (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
0A38: 5D 26    MOV   A,REG[38]     (0343) ;
0A3A: 54 01    MOV   [X+1],A       (0344)  RX_TIMEOUT_WriteCompareValue:
0A3C: 5D 22    MOV   A,REG[34]     (0345) _RX_TIMEOUT_WriteCompareValue:
0A3E: 54 02    MOV   [X+2],A       (0346)    RAM_PROLOGUE RAM_USE_CLASS_1
0A40: 50 00    MOV   A,0           (0347)    mov   reg[RX_TIMEOUT_COMPARE_LSB_REG], A
0A42: 49 F7 01 TST   REG[247],1    (0348)    mov   A, X
0A45: A0 03    JZ    0x0A49        (0349)    mov   reg[RX_TIMEOUT_COMPARE_MSB_REG], A
0A47: 50 01    MOV   A,1           (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0351)    ret
0A49: 54 00    MOV   [X+0],A       (0352) 
0A4B: 70 FE    AND   F,254         (0353) .ENDSECTION
0A4D: 41 23 FE AND   REG[35],254   (0354) 
0A50: 18       POP   A             (0355) 
0A51: 60 26    MOV   REG[38],A     (0356) .SECTION
0A53: 18       POP   A             (0357) ;-----------------------------------------------------------------------------
0A54: 60 22    MOV   REG[34],A     (0358) ;  FUNCTION NAME: RX_TIMEOUT_wReadCompareValue
0A56: 18       POP   A             (0359) ;
0A57: 60 23    MOV   REG[35],A     (0360) ;  DESCRIPTION:
0A59: 18       POP   A             (0361) ;     Reads the Compare registers.
0A5A: 20       POP   X             (0362) ;-----------------------------------------------------------------------------
0A5B: 70 3F    AND   F,63
0A5D: 71 C0    OR    F,192         (0363) ;
0A5F: 7E       RETI                (0364) ;  ARGUMENTS:    None
                                   (0365) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                   (0366) ;  SIDE EFFECTS: 
                                   (0367) ;    The A and X registers may be modified by this or future implementations
                                   (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0371) ;    functions.
                                   (0372) ;
                                   (0373)  RX_TIMEOUT_wReadCompareValue:
                                   (0374) _RX_TIMEOUT_wReadCompareValue:
                                   (0375)  wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0376) _wRX_TIMEOUT_ReadCompareValue:                   ; this name deprecated
                                   (0377)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0378)    mov   A, reg[RX_TIMEOUT_COMPARE_MSB_REG]
                                   (0379)    mov   X, A
                                   (0380)    mov   A, reg[RX_TIMEOUT_COMPARE_LSB_REG]
                                   (0381)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0382)    ret
                                   (0383) 
                                   (0384) .ENDSECTION
                                   (0385) 
                                   (0386) 
                                   (0387) .SECTION
                                   (0388) ;-----------------------------------------------------------------------------
                                   (0389) ;  FUNCTION NAME: RX_TIMEOUT_wReadTimerSaveCV
                                   (0390) ;
                                   (0391) ;  DESCRIPTION:
                                   (0392) ;     Returns the value in the Count register (DR0), preserving the
                                   (0393) ;     value in the compare register (DR2).
                                   (0394) ;-----------------------------------------------------------------------------
                                   (0395) ;
                                   (0396) ;  ARGUMENTS: None
                                   (0397) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                   (0398) ;  SIDE EFFECTS:
                                   (0399) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0400) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0401) ;     3) The user module is stopped momentarily while the compare value is
                                   (0402) ;        restored.  This may cause the Count register to miss one or more
                                   (0403) ;        counts depending on the input clock speed.
                                   (0404) ;     4) The A and X registers may be modified by this or future implementations
0A60: 5D 20    MOV   A,REG[32]     (0405) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0406) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0407) ;        responsibility to perserve their values across calls to fastcall16 
0A62: 5D 26    MOV   A,REG[38]     (0408) ;        functions.
0A64: 5C       MOV   X,A           (0409) ;
0A65: 5D 22    MOV   A,REG[34]     (0410) ;  THEORY of OPERATION:
                                   (0411) ;     1) Read and save the Compare register.
0A68: 08       PUSH  A             (0412) ;     2) Read the Count register, causing its data to be latched into

FILE: lib\receiveint.asm
0A69: 10       PUSH  X             (0104) ;;*****************************************************************************
0A6A: 5D D3    MOV   A,REG[211]
                                   (0105) ;;*****************************************************************************
                                   (0106) ;;  FILENAME: RECEIVEINT.asm
0A6C: 08       PUSH  A             (0107) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0108) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0109) ;;
0A6D: 58 01    MOV   X,[1]         (0110) ;;  DESCRIPTION: RX8 Interrupt Service Routine.
0A6F: 5D 2B    MOV   A,REG[43]     (0111) ;;-----------------------------------------------------------------------------
0A71: 08       PUSH  A             (0112) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0113) ;;*****************************************************************************
0A72: 21 08    AND   A,8           (0114) ;;*****************************************************************************
0A74: B0 04    JNZ   0x0A79        (0115) 
0A76: 18       POP   A             (0116) include "m8c.inc"
0A77: 80 62    JMP   0x0ADA        (0117) include "memory.inc"
                                   (0118) include "RECEIVE.inc"
                                   (0119) 
                                   (0120) 
0A79: 18       POP   A             (0121) ;-----------------------------------------------
                                   (0122) ;  Global Symbols
                                   (0123) ;-----------------------------------------------
0A7A: 21 E0    AND   A,224         (0124) export  _RECEIVE_ISR
0A7C: A0 12    JZ    0x0A8F        (0125) 
                                   (0126) 
0A7E: 2C 00    OR    [0],A         (0127) IF (RECEIVE_RXBUF_ENABLE)
                                   (0128) export  RECEIVE_aRxBuffer
0A80: 49 2A 00 TST   REG[42],0     (0129) export _RECEIVE_aRxBuffer
                                   (0130) export  RECEIVE_bRxCnt
0A83: 21 20    AND   A,32          (0131) export _RECEIVE_bRxCnt
0A85: A0 54    JZ    0x0ADA        (0132) export  RECEIVE_fStatus
                                   (0133) export _RECEIVE_fStatus
                                   (0134) ENDIF
                                   (0135) 
0A87: 41 2B FE AND   REG[43],254   (0136) 
0A8A: 43 2B 01 OR    REG[43],1     (0137) ;-----------------------------------------------
0A8D: 80 4C    JMP   0x0ADA        (0138) ; Variable Allocation
                                   (0139) ;-----------------------------------------------
                                   (0140) 
                                   (0141) IF (RECEIVE_RXBUF_ENABLE)
0A8F: 5D 2A    MOV   A,REG[42]     (0142) AREA InterruptRAM(RAM,REL,CON)
                                   (0143)  RECEIVE_fStatus:
                                   (0144) _RECEIVE_fStatus:      BLK  1
0A91: 47 00 01 TST   [0],1         (0145)  RECEIVE_bRxCnt:
0A94: B0 45    JNZ   0x0ADA        (0146) _RECEIVE_bRxCnt:       BLK  1
                                   (0147) AREA RECEIVE_RAM(RAM,REL,CON)
0A96: 39 00    CMP   A,0           (0148)  RECEIVE_aRxBuffer:    
0A98: B0 14    JNZ   0x0AAD        (0149) _RECEIVE_aRxBuffer:    BLK RECEIVE_RX_BUFFER_SIZE
0A9A: 2E 00 01 OR    [0],1         (0150) ENDIF
                                   (0151) 
0A9D: 62 D3 00 MOV   REG[211],0    (0152) 
0AA0: 70 3F    AND   F,63
0AA2: 71 80    OR    F,128         (0153) AREA InterruptRAM(RAM,REL,CON)
0AA4: 56 45 00 MOV   [X+69],0      (0154) 
0AA7: 70 3F    AND   F,63
0AA9: 71 00    OR    F,0           (0155) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0AAB: 80 2E    JMP   0x0ADA        (0156) ;---------------------------------------------------
                                   (0157) ; Insert your custom declarations below this banner
                                   (0158) ;---------------------------------------------------
                                   (0159) 
                                   (0160) ;------------------------
                                   (0161) ; Includes
0AAD: 39 01    CMP   A,1           (0162) ;------------------------
0AAF: C0 2A    JC    0x0ADA        (0163) 
                                   (0164) 	
                                   (0165) ;------------------------
                                   (0166) ;  Constant Definitions
0AB1: 3C 01 3F CMP   [1],63        (0167) ;------------------------
0AB4: C0 14    JC    0x0AC9        (0168) 
0AB6: 2E 00 10 OR    [0],16        (0169) 
                                   (0170) ;------------------------
0AB9: 62 D3 00 MOV   REG[211],0    (0171) ; Variable Allocation
0ABC: 70 3F    AND   F,63
0ABE: 71 80    OR    F,128         (0172) ;------------------------
0AC0: 56 45 00 MOV   [X+69],0      (0173) 
0AC3: 70 3F    AND   F,63
0AC5: 71 00    OR    F,0           (0174) 
0AC7: 80 12    JMP   0x0ADA        (0175) ;---------------------------------------------------
                                   (0176) ; Insert your custom declarations above this banner
                                   (0177) ;---------------------------------------------------
                                   (0178) ;@PSoC_UserCode_END@ (Do not change this line.)
0AC9: 75       INC   X             (0179) 
0ACA: 5A 01    MOV   [1],X         (0180) 
0ACC: 79       DEC   X             (0181) AREA UserModules (ROM, REL)
                                   (0182) 
0ACD: 62 D3 00 MOV   REG[211],0    (0183) ;-----------------------------------------------------------------------------
0AD0: 70 3F    AND   F,63
0AD2: 71 80    OR    F,128         (0184) ;  FUNCTION NAME: _RECEIVE_ISR
0AD4: 54 45    MOV   [X+69],A      (0185) ;
0AD6: 70 3F    AND   F,63
0AD8: 71 00    OR    F,0           (0186) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
0ADA: 18       POP   A
                                   (0187) ;
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;
                                   (0190) 
0ADB: 60 D3    MOV   REG[211],A    (0191) _RECEIVE_ISR:
                                   (0192) 
                                   (0193)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                   (0194)    ;---------------------------------------------------
0ADD: 20       POP   X             (0195)    ; Insert your custom code below this banner
0ADE: 18       POP   A             (0196)    ;---------------------------------------------------
                                   (0197)    ;   NOTE: interrupt service routines must preserve
                                   (0198)    ;   the values of the A and X CPU registers.
                                   (0199) 
                                   (0200)    ;---------------------------------------------------
0AE0: 43 E1 04 OR    REG[225],4    (0201)    ; Insert your custom code above this banner

FILE: lib\receive.asm
                                   (0121) ;;*****************************************************************************
0AE3: 7F       RET                 (0122) ;;*****************************************************************************
                                   (0123) ;;  FILENAME: RECEIVE.asm
                                   (0124) ;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
                                   (0125) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0126) ;;
                                   (0127) ;;  DESCRIPTION: RX8 User Module software implementation file
                                   (0128) ;;               for 22/24/25/26/27xxx PSoC family of devices.
                                   (0129) ;;
                                   (0130) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0131) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0132) ;;        This means it is the caller's responsibility to preserve any values
                                   (0133) ;;        in the X and A registers that are still needed after the API functions
                                   (0134) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0135) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0136) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0137) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0138) ;;-----------------------------------------------------------------------------
                                   (0139) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0140) ;;*****************************************************************************
                                   (0141) ;;*****************************************************************************
                                   (0142) 
                                   (0143) ;-----------------------------------------------
                                   (0144) ; include instance specific register definitions
                                   (0145) ;-----------------------------------------------
                                   (0146) include "m8c.inc"
                                   (0147) include "memory.inc"
                                   (0148) include "RECEIVE.inc"
0AE4: 41 E1 FB AND   REG[225],251  (0149) 
                                   (0150) 
0AE7: 7F       RET                 (0151) ;-----------------------------------------------
                                   (0152) ;  Global Symbols
                                   (0153) ;-----------------------------------------------
                                   (0154) export   RECEIVE_EnableInt
                                   (0155) export  _RECEIVE_EnableInt
                                   (0156) export   RECEIVE_DisableInt
                                   (0157) export  _RECEIVE_DisableInt
                                   (0158) export   RECEIVE_Start
                                   (0159) export  _RECEIVE_Start
                                   (0160) export   RECEIVE_Stop
                                   (0161) export  _RECEIVE_Stop
                                   (0162) export   RECEIVE_bReadRxData
                                   (0163) export  _RECEIVE_bReadRxData
                                   (0164) export   RECEIVE_bReadRxStatus
                                   (0165) export  _RECEIVE_bReadRxStatus
                                   (0166) 
                                   (0167) ; Old function name convension, do not use.
                                   (0168) ; These will be removed in a future release.
                                   (0169) export  bRECEIVE_ReadRxData
                                   (0170) export _bRECEIVE_ReadRxData
                                   (0171) export  bRECEIVE_ReadRxStatus
                                   (0172) export _bRECEIVE_ReadRxStatus
                                   (0173) 
                                   (0174) ;-----------------------------------------------
                                   (0175) ; High Level RX functions
                                   (0176) ;-----------------------------------------------
                                   (0177) 
                                   (0178) export  RECEIVE_cGetChar
0AE8: 29 01    OR    A,1           (0179) export _RECEIVE_cGetChar
0AEA: 60 2B    MOV   REG[43],A     (0180) export  RECEIVE_cReadChar
                                   (0181) export _RECEIVE_cReadChar
0AEC: 7F       RET                 (0182) export  RECEIVE_iReadChar
                                   (0183) export _RECEIVE_iReadChar
                                   (0184) 
                                   (0185) IF (RECEIVE_RXBUF_ENABLE)
                                   (0186) export  RECEIVE_CmdReset
                                   (0187) export _RECEIVE_CmdReset
                                   (0188) export  RECEIVE_bCmdCheck
                                   (0189) export _RECEIVE_bCmdCheck
                                   (0190) export  RECEIVE_bCmdLength
                                   (0191) export _RECEIVE_bCmdLength
                                   (0192) export  RECEIVE_bErrCheck
                                   (0193) export _RECEIVE_bErrCheck
                                   (0194) 
                                   (0195) export  RECEIVE_szGetParam
                                   (0196) export _RECEIVE_szGetParam
                                   (0197) export  RECEIVE_szGetRestOfParams
                                   (0198) export _RECEIVE_szGetRestOfParams
                                   (0199) 
                                   (0200) ;-----------------------------------------------
                                   (0201) ;  Variables
                                   (0202) ;-----------------------------------------------
                                   (0203) 
                                   (0204) AREA RECEIVE_RAM(RAM,REL,CON)
                                   (0205)  ptrParam:   			BLK  1
                                   (0206) 
                                   (0207) ENDIF
0AED: 41 2B FE AND   REG[43],254   (0208) ;-----------------------------------------------
                                   (0209) ;  EQUATES
0AF0: 7F       RET                 (0210) ;-----------------------------------------------
                                   (0211) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                   (0212) 
                                   (0213) area UserModules (ROM, REL)
                                   (0214) 
                                   (0215) .SECTION
                                   (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;  FUNCTION NAME: RECEIVE_EnableInt
                                   (0218) ;
                                   (0219) ;  DESCRIPTION:
                                   (0220) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                   (0221) ;     bit associated with this User Module. Remember to call the global interrupt
                                   (0222) ;     enable function by using the macro: M8C_EnableGInt.
                                   (0223) ;
                                   (0224) ;-----------------------------------------------------------------------------
                                   (0225) ;
                                   (0226) ;  ARGUMENTS: none
                                   (0227) ;
                                   (0228) ;  RETURNS: none
                                   (0229) ;
                                   (0230) ;  SIDE EFFECTS:
                                   (0231) ;    The A and X registers may be modified by this or future implementations
                                   (0232) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0235) ;    functions.
                                   (0236) ;
                                   (0237)  RECEIVE_EnableInt:
                                   (0238) _RECEIVE_EnableInt:
                                   (0239)    RAM_PROLOGUE RAM_USE_CLASS_1
0AF1: 5D 2A    MOV   A,REG[42]     (0240)    M8C_EnableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0241)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF3: 7F       RET                 (0242)    ret
                                   (0243) .ENDSECTION
                                   (0244) 
                                   (0245) .SECTION
                                   (0246) ;-----------------------------------------------------------------------------
                                   (0247) ;  FUNCTION NAME: RECEIVE_DisableInt
                                   (0248) ;
                                   (0249) ;  DESCRIPTION:
                                   (0250) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                   (0251) ;     associated with this User Module.
                                   (0252) ;
                                   (0253) ;-----------------------------------------------------------------------------
                                   (0254) ;
                                   (0255) ;  ARGUMENTS:  none
                                   (0256) ;
                                   (0257) ;  RETURNS:  none
                                   (0258) ;
                                   (0259) ;  SIDE EFFECTS:
                                   (0260) ;    The A and X registers may be modified by this or future implementations
                                   (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0264) ;    functions.
                                   (0265) ;
                                   (0266)  RECEIVE_DisableInt:
                                   (0267) _RECEIVE_DisableInt:
                                   (0268)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0269)    M8C_DisableIntMask RECEIVE_INT_REG, RECEIVE_bINT_MASK
                                   (0270)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0271)    ret
0AF4: 5D 2B    MOV   A,REG[43]     (0272) .ENDSECTION
                                   (0273) 
0AF6: 7F       RET                 (0274) .SECTION
                                   (0275) ;-----------------------------------------------------------------------------
                                   (0276) ;  FUNCTION NAME: RECEIVE_Start(BYTE bParity)
                                   (0277) ;
                                   (0278) ;  DESCRIPTION:
                                   (0279) ;    Sets the start bit and parity in the Control register of this user module.
                                   (0280) ;
                                   (0281) ;-----------------------------------------------------------------------------
                                   (0282) ;
                                   (0283) ;  ARGUMENTS:
                                   (0284) ;    BYTE bParity - parity of received data.  Use defined masks.
                                   (0285) ;    passed in A register.
                                   (0286) ;
                                   (0287) ;  RETURNS: none
                                   (0288) ;
                                   (0289) ;  SIDE EFFECTS:
                                   (0290) ;    The A and X registers may be modified by this or future implementations
                                   (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0294) ;    functions.
                                   (0295) ;
                                   (0296)  RECEIVE_Start:
                                   (0297) _RECEIVE_Start:
                                   (0298)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0299)    or    A, bfCONTROL_REG_START_BIT
                                   (0300)    mov   REG[RECEIVE_CONTROL_REG], A
                                   (0301)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0302)    ret
                                   (0303) .ENDSECTION
                                   (0304) 
                                   (0305) .SECTION
                                   (0306) ;-----------------------------------------------------------------------------
                                   (0307) ;  FUNCTION NAME: RECEIVE_Stop
                                   (0308) ;
                                   (0309) ;  DESCRIPTION:
                                   (0310) ;     Disables RX8 operation.
0AF7: 49 2B 08 TST   REG[43],8     (0311) ;
0AFA: AF FC    JZ    0x0AF7        (0312) ;-----------------------------------------------------------------------------
                                   (0313) ;
0AFC: 5D 2A    MOV   A,REG[42]     (0314) ;  ARGUMENTS: none
                                   (0315) ;
0AFE: 7F       RET                 (0316) ;  RETURNS: none
                                   (0317) ;
                                   (0318) ;  SIDE EFFECTS:
                                   (0319) ;    The A and X registers may be modified by this or future implementations
                                   (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0323) ;    functions.
                                   (0324) ;
                                   (0325)  RECEIVE_Stop:
                                   (0326) _RECEIVE_Stop:
                                   (0327)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0328)    and   REG[RECEIVE_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0329)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0330)    ret
                                   (0331) .ENDSECTION
                                   (0332) 
                                   (0333) .SECTION
                                   (0334) ;-----------------------------------------------------------------------------
                                   (0335) ;  FUNCTION NAME: RECEIVE_bReadRxData
                                   (0336) ;
                                   (0337) ;  DESCRIPTION:
                                   (0338) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0339) ;     sure data is valid.
                                   (0340) ;
                                   (0341) ;-----------------------------------------------------------------------------
                                   (0342) ;
                                   (0343) ;  ARGUMENTS:  none
                                   (0344) ;
                                   (0345) ;  RETURNS:
0AFF: 5D 2B    MOV   A,REG[43]     (0346) ;    bRxData - returned in A.
0B01: 08       PUSH  A             (0347) ;
0B02: 21 08    AND   A,8           (0348) ;  SIDE EFFECTS:
0B04: B0 04    JNZ   0x0B09        (0349) ;    The A and X registers may be modified by this or future implementations
0B06: 18       POP   A             (0350) ;    of this function.  The same is true for all RAM page pointer registers in
0B07: 80 0B    JMP   0x0B13        (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
0B09: 5D 2A    MOV   A,REG[42]     (0354) ;
0B0B: 4B       SWAP  A,X           (0355)  RECEIVE_bReadRxData:
                                   (0356) _RECEIVE_bReadRxData:
0B0C: 18       POP   A             (0357)  bRECEIVE_ReadRxData:
0B0D: 21 A0    AND   A,160         (0358) _bRECEIVE_ReadRxData:
0B0F: B0 03    JNZ   0x0B13        (0359)    RAM_PROLOGUE RAM_USE_CLASS_1
0B11: 4B       SWAP  A,X           (0360)    mov A, REG[RECEIVE_RX_BUFFER_REG]
                                   (0361)    RAM_EPILOGUE RAM_USE_CLASS_1
0B12: 7F       RET                 (0362)    ret
                                   (0363) .ENDSECTION
                                   (0364) 
0B13: 50 00    MOV   A,0           (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: RECEIVE_bReadRxStatus
                                   (0368) ;
0B15: 7F       RET                 (0369) ;  DESCRIPTION:
                                   (0370) ;    Reads the RX Status bits in the Control/Status register.
                                   (0371) ;
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:  none
                                   (0375) ;
                                   (0376) ;  RETURNS:
                                   (0377) ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
                                   (0378) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  RECEIVE_bReadRxStatus:
                                   (0388) _RECEIVE_bReadRxStatus:
                                   (0389)  bRECEIVE_ReadRxStatus:
                                   (0390) _bRECEIVE_ReadRxStatus:
                                   (0391)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0392)    mov A,  REG[RECEIVE_CONTROL_REG]
                                   (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0394)    ret
                                   (0395) .ENDSECTION
                                   (0396) 
                                   (0397) ;-----------------------------------------------
                                   (0398) ; High Level RX functions
                                   (0399) ;-----------------------------------------------
                                   (0400) 
                                   (0401) .SECTION
                                   (0402) ;-----------------------------------------------------------------------------
                                   (0403) ;  FUNCTION NAME: RECEIVE_cGetChar
                                   (0404) ;
                                   (0405) ;  DESCRIPTION:
0B16: 5D 2B    MOV   A,REG[43]     (0406) ;     Read character from UART RX port.
                                   (0407) ;
0B18: 21 E8    AND   A,232         (0408) ;
0B1A: 08       PUSH  A             (0409) ;  ARGUMENTS:
0B1B: 21 08    AND   A,8           (0410) ;      none
0B1D: B0 07    JNZ   0x0B25        (0411) ;
0B1F: 18       POP   A             (0412) ;  RETURNS:
0B20: 29 01    OR    A,1           (0413) ;     char that is returned from UART
0B22: 4B       SWAP  A,X           (0414) ;
0B23: 80 07    JMP   0x0B2B        (0415) ;  SIDE EFFECTS:
                                   (0416) ;    The A and X registers may be modified by this or future implementations
                                   (0417) ;    of this function.  The same is true for all RAM page pointer registers in
0B25: 18       POP   A             (0418) ;    the Large Memory Model.  When necessary, it is the calling function's
0B26: 21 E0    AND   A,224         (0419) ;    responsibility to perserve their values across calls to fastcall16 
0B28: 4B       SWAP  A,X           (0420) ;    functions.
0B29: 5D 2A    MOV   A,REG[42]     (0421) ;    
                                   (0422) ;    Program flow will stay in this function until a character is received.
                                   (0423) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0424) ;    the delay between characters is less than the watchdog timeout.
                                   (0425) ;
0B2B: 7F       RET                 (0426)  RECEIVE_cGetChar:
                                   (0427) _RECEIVE_cGetChar:
                                   (0428)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0429) 
                                   (0430) .getChar_Loop:
                                   (0431)    tst REG[RECEIVE_CONTROL_REG],RECEIVE_RX_REG_FULL   ; Check if a character is ready
                                   (0432)    jz  .getChar_Loop                                        ; If not loop
                                   (0433) 
                                   (0434)    mov A, REG[RECEIVE_RX_BUFFER_REG]             ; Get character
                                   (0435)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0436)    ret
                                   (0437) .ENDSECTION
                                   (0438) 
                                   (0439) .SECTION
                                   (0440) ;-----------------------------------------------------------------------------
                                   (0441) ;  FUNCTION NAME: RECEIVE_cReadChar
                                   (0442) ;
                                   (0443) ;  DESCRIPTION:
                                   (0444) ;     Read character from UART RX port.
                                   (0445) ;
                                   (0446) ;  ARGUMENTS:
                                   (0447) ;      none
                                   (0448) ;
                                   (0449) ;  RETURNS:
                                   (0450) ;     char that is returned from UART
                                   (0451) ;
                                   (0452) ;  SIDE EFFECTS:
                                   (0453) ;    The A and X registers may be modified by this or future implementations
                                   (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0457) ;    functions.
                                   (0458) ;
                                   (0459) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                   (0460) ;    implies a valid character or an error condition occured.
                                   (0461) ;
                                   (0462)  RECEIVE_cReadChar:
                                   (0463) _RECEIVE_cReadChar:
                                   (0464)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0465) 
                                   (0466)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0467)    push A
                                   (0468)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
0B2C: 62 D0 00 MOV   REG[208],0    (0469)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0B2F: 55 45 00 MOV   [69],0        (0470)    pop  A
0B32: 62 D0 00 MOV   REG[208],0    (0471)    jmp  .RX_NO_VALID_CHAR
0B35: 55 9F 00 MOV   [TIMEOUT+3],0 (0472) 
0B38: 62 D0 00 MOV   REG[208],0    (0473) .RX_DATA_RDY:
0B3B: 55 01 00 MOV   [1],0         (0474)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
0B3E: 26 00 00 AND   [0],0         (0475)    swap A,X                                                ; determine if data is valid
                                   (0476) 
0B41: 7F       RET                 (0477)    pop  A                                                  ; Check for errors
                                   (0478)    and  A,(RECEIVE_RX_PARITY_ERROR | RECEIVE_RX_FRAMING_ERROR)
                                   (0479)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0480)    swap A,X                                                ; Put data in A and exit
                                   (0481)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0482)    ret
                                   (0483) 
                                   (0484) .RX_NO_VALID_CHAR:
                                   (0485)    mov A,0x00                                              ; Zero out character
                                   (0486) 
                                   (0487)  End_RECEIVE_cReadChar:
                                   (0488)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0489)    ret
                                   (0490) .ENDSECTION
                                   (0491) 																			
                                   (0492) .SECTION
                                   (0493) ;-----------------------------------------------------------------------------
                                   (0494) ;  FUNCTION NAME: RECEIVE_iReadChar
                                   (0495) ;
                                   (0496) ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0497) ; to just set a value in the upper byte if error conditions exists.
                                   (0498) ;
                                   (0499) ;  DESCRIPTION:
                                   (0500) ;     Read character from UART RX port.
                                   (0501) ;
                                   (0502) ;  ARGUMENTS:
                                   (0503) ;      none
                                   (0504) ;
                                   (0505) ;  RETURNS:
                                   (0506) ;     An integer value is returned.  A negative value inplies and error
                                   (0507) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0508) ;
                                   (0509) ;     Error Codes:
0B42: 62 D0 00 MOV   REG[208],0    (0510) ;        0x80CC    Parity Error
0B45: 51 00    MOV   A,[0]         (0511) ;        0x40CC    Overrun Error
0B47: 21 01    AND   A,1           (0512) ;        0x20CC    Framing Error
                                   (0513) ;        0x01CC    No Data available
0B49: 7F       RET                 (0514) ;
                                   (0515) ;  SIDE EFFECTS:
                                   (0516) ;    The A and X registers may be modified by this or future implementations
                                   (0517) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0518) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0519) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0520) ;    functions.
                                   (0521) ;
                                   (0522)  RECEIVE_iReadChar:
                                   (0523) _RECEIVE_iReadChar:
                                   (0524)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0525) 
                                   (0526)    mov  A,REG[RECEIVE_CONTROL_REG]                         ; Get Status of RX
                                   (0527)                                                            ; Mask only errors and data ready
                                   (0528)    and  A,(RECEIVE_RX_ERROR|RECEIVE_RX_REG_FULL)
                                   (0529)    push A
                                   (0530)    and  A,RECEIVE_RX_COMPLETE                              ; Check if a character is ready
                                   (0531)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (0532)    pop  A
                                   (0533)    or   A,RECEIVE_RX_NO_DATA                               ; Add no data flag
                                   (0534)    swap A,X
                                   (0535)    jmp  End_RECEIVE_iReadChar
                                   (0536) 
                                   (0537) .RX_GET_DATA:
                                   (0538)    pop  A
                                   (0539)    and  A,RECEIVE_RX_ERROR
                                   (0540)    swap A,X
                                   (0541)    mov  A,REG[RECEIVE_RX_BUFFER_REG]                       ; Read data first, then
                                   (0542)                                                            ; determine if data is valid
                                   (0543) 
                                   (0544)  End_RECEIVE_iReadChar:
                                   (0545)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0546)    ret
                                   (0547) .ENDSECTION
                                   (0548) 
                                   (0549) 
                                   (0550) 
                                   (0551) IF (RECEIVE_RXBUF_ENABLE)
                                   (0552) .SECTION
0B4A: 62 D0 00 MOV   REG[208],0    (0553) ;-----------------------------------------------------------------------------
0B4D: 51 00    MOV   A,[0]         (0554) ;-----------------------------------------------------------------------------
0B4F: 21 F0    AND   A,240         (0555) ;
0B51: 26 00 0F AND   [0],15        (0556) ;     Command Buffer commands
                                   (0557) ;
0B54: 7F       RET                 (0558) ;-----------------------------------------------------------------------------
                                   (0559) ;-----------------------------------------------------------------------------
                                   (0560) 
                                   (0561) ;-----------------------------------------------------------------------------
                                   (0562) ;  FUNCTION NAME: RECEIVE_CmdReset
                                   (0563) ;
                                   (0564) ;  DESCRIPTION:
                                   (0565) ;     Reset command string and status flags
                                   (0566) ;
                                   (0567) ;  ARGUMENTS:
                                   (0568) ;     none.
                                   (0569) ;
                                   (0570) ;  RETURNS:
                                   (0571) ;     none.
                                   (0572) ;
                                   (0573) ;  SIDE EFFECTS:
                                   (0574) ;    The A and X registers may be modified by this or future implementations
                                   (0575) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0576) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0577) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0578) ;    functions.
                                   (0579) ;          
                                   (0580) ;    Currently only the page pointer registers listed below are modified: 
                                   (0581) ;          CUR_PP
                                   (0582) ;
                                   (0583) ;  THEORY of OPERATION or PROCEDURE:
                                   (0584) ;     Clear the command buffer, command counter, and flag.
                                   (0585) ;
                                   (0586)  RECEIVE_CmdReset:
0B55: 62 D0 00 MOV   REG[208],0    (0587) _RECEIVE_CmdReset:
0B58: 51 01    MOV   A,[1]         (0588)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0589)    RAM_SETPAGE_CUR >RECEIVE_aRxBuffer
0B5A: 7F       RET                 (0590)    mov [RECEIVE_aRxBuffer], 0x00
                                   (0591)    RAM_SETPAGE_CUR >ptrParam
                                   (0592)    mov [ptrParam],0x00
                                   (0593)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
                                   (0594)    mov [RECEIVE_bRxCnt], 0x00
                                   (0595)    and [RECEIVE_fStatus], 0x00
                                   (0596)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0597)    ret
                                   (0598) .ENDSECTION
                                   (0599) 
                                   (0600) .SECTION
                                   (0601) ;-----------------------------------------------------------------------------
                                   (0602) ;  FUNCTION NAME: RECEIVE_bCmdCheck
                                   (0603) ;
                                   (0604) ;  DESCRIPTION:
                                   (0605) ;     Check to see if valid command in buffer.
                                   (0606) ;
                                   (0607) ;  ARGUMENTS:
                                   (0608) ;     none.
                                   (0609) ;
                                   (0610) ;  RETURNS:
                                   (0611) ;     BYTE  fStatus - Status of command receive buffer.
                                   (0612) ;                     Returns non-zero value in A if command is valid.
                                   (0613) ;
                                   (0614) ;  SIDE EFFECTS:
                                   (0615) ;    The A and X registers may be modified by this or future implementations
                                   (0616) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0617) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0618) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0619) ;    functions.
                                   (0620) ;          
                                   (0621) ;    Currently only the page pointer registers listed below are modified: 
                                   (0622) ;          CUR_PP
                                   (0623) ;
                                   (0624) ;  THEORY of OPERATION or PROCEDURE:
                                   (0625) ;     Read the status and control register.
                                   (0626) ;
                                   (0627)  RECEIVE_bCmdCheck:
                                   (0628) _RECEIVE_bCmdCheck:
                                   (0629)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0630)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0631)    mov A,  [RECEIVE_fStatus]
                                   (0632)    and A, RECEIVE_RX_BUF_CMDTERM                 ; Mask off Command status
                                   (0633)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0634)    ret
                                   (0635) .ENDSECTION
                                   (0636) 
                                   (0637) .SECTION
                                   (0638) ;-----------------------------------------------------------------------------
                                   (0639) ;  FUNCTION NAME: RECEIVE_bErrCheck
                                   (0640) ;
                                   (0641) ;  DESCRIPTION:
                                   (0642) ;     Check to see if an error has occured since last CmdReset
                                   (0643) ;
0B5B: 70 BF    AND   F,191         (0644) ;  ARGUMENTS:
0B5D: 62 D0 00 MOV   REG[208],0    (0645) ;     none.
0B60: 62 D3 00 MOV   REG[211],0    (0646) ;
                                   (0647) ;  RETURNS:
0B63: 50 45    MOV   A,69          (0648) ;     BYTE  fStatus - Status of command receive buffer.
0B65: 02 9F    ADD   A,[TIMEOUT+3] (0649) ;                     Returns non-zero value in A if command is valid.
0B67: 5C       MOV   X,A           (0650) ;           0x80 => Parity Error
                                   (0651) ;           0x40 => OverRun Error
0B68: 52 00    MOV   A,[X+0]       (0652) ;           0x20 => Framing Error
0B6A: B0 04    JNZ   0x0B6F        (0653) ;           0x10 => Software Buffer OverRun
0B6C: 10       PUSH  X             (0654) ;
0B6D: 80 33    JMP   0x0BA1        (0655) ;  SIDE EFFECTS:
                                   (0656) ;    The A and X registers may be modified by this or future implementations
                                   (0657) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0658) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0659) ;    responsibility to perserve their values across calls to fastcall16 
0B6F: 39 00    CMP   A,0           (0660) ;    functions.
0B71: B0 11    JNZ   0x0B83        (0661) ;          
0B73: 75       INC   X             (0662) ;    Currently only the page pointer registers listed below are modified: 
0B74: 76 9F    INC   [TIMEOUT+3]   (0663) ;          CUR_PP
0B76: 52 00    MOV   A,[X+0]       (0664) ;
0B78: 3C 9F 3F CMP   [TIMEOUT+3],63(0665) ;     Error Status is clear when read.
0B7B: BF F3    JNZ   0x0B6F        (0666) ;
                                   (0667) ;  THEORY of OPERATION or PROCEDURE:
                                   (0668) ;     Read RX buffer error status and clear status
0B7D: 10       PUSH  X             (0669) ;
                                   (0670)  RECEIVE_bErrCheck:
0B7E: 56 00 00 MOV   [X+0],0       (0671) _RECEIVE_bErrCheck:
0B81: 80 1F    JMP   0x0BA1        (0672)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0673)    RAM_SETPAGE_CUR >RECEIVE_fStatus
                                   (0674)    mov A,  [RECEIVE_fStatus]
0B83: 10       PUSH  X             (0675)    and A, RECEIVE_RX_BUF_ERROR                   ; Mask off Error status
                                   (0676)    and [RECEIVE_fStatus], ~RECEIVE_RX_BUF_ERROR
                                   (0677)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0678)    ret
0B84: 75       INC   X             (0679) .ENDSECTION
0B85: 76 9F    INC   [TIMEOUT+3]   (0680) 
0B87: 3C 9F 3F CMP   [TIMEOUT+3],63(0681) .SECTION
0B8A: AF F3    JZ    0x0B7E        (0682) ;-----------------------------------------------------------------------------
0B8C: 52 00    MOV   A,[X+0]       (0683) ;  FUNCTION NAME: RECEIVE_bCmdLength
0B8E: A0 12    JZ    0x0BA1        (0684) ;
0B90: 39 00    CMP   A,0           (0685) ;  DESCRIPTION:
0B92: BF F1    JNZ   0x0B84        (0686) ;     Get length of command string
                                   (0687) ;
0B94: 56 00 00 MOV   [X+0],0       (0688) ;  ARGUMENTS:
0B97: 76 9F    INC   [TIMEOUT+3]   (0689) ;     none.
0B99: 3C 9F 3F CMP   [TIMEOUT+3],63(0690) ;
0B9C: B0 04    JNZ   0x0BA1        (0691) ;  RETURNS:
0B9E: 55 9F 3F MOV   [TIMEOUT+3],63(0692) ;     BYTE  bRxCnt    Returns the command length in A.
                                   (0693) ;
                                   (0694) ;  SIDE EFFECTS:
                                   (0695) ;    The A and X registers may be modified by this or future implementations
0BA1: 20       POP   X             (0696) ;    of this function.  The same is true for all RAM page pointer registers in
0BA2: 10       PUSH  X             (0697) ;    the Large Memory Model.  When necessary, it is the calling function's
0BA3: 3D 00 00 CMP   [X+0],0       (0698) ;    responsibility to perserve their values across calls to fastcall16 
0BA6: B0 0B    JNZ   0x0BB2        (0699) ;    functions.
0BA8: 20       POP   X             (0700) ;          
0BA9: 57 00    MOV   X,0           (0701) ;    Currently only the page pointer registers listed below are modified: 
0BAB: 50 00    MOV   A,0           (0702) ;          CUR_PP
0BAD: 70 3F    AND   F,63
0BAF: 71 C0    OR    F,192         (0703) ;
                                   (0704)  RECEIVE_bCmdLength:
0BB1: 7F       RET                 (0705) _RECEIVE_bCmdLength:
                                   (0706)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0707)    RAM_SETPAGE_CUR >RECEIVE_bRxCnt
0BB2: 20       POP   X             (0708)    mov A,  [RECEIVE_bRxCnt]
0BB3: 50 00    MOV   A,0           (0709)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB5: 70 3F    AND   F,63
0BB7: 71 C0    OR    F,192         (0710)    ret
                                   (0711) .ENDSECTION
0BB9: 7F       RET                 (0712) 
                                   (0713) .SECTION
                                   (0714) ;-----------------------------------------------------------------------------
                                   (0715) ;  FUNCTION NAME: RECEIVE_szGetParam
                                   (0716) ;
                                   (0717) ;  DESCRIPTION:
                                   (0718) ;      Return next parameter from UART Rx buffer
                                   (0719) ;
                                   (0720) ;
                                   (0721) ;  ARGUMENTS:  none
                                   (0722) ;
                                   (0723) ;  RETURNS:
                                   (0724) ;     A => MSB of parameter address
                                   (0725) ;     X => LSB of parameter address
                                   (0726) ;
                                   (0727) ;  SIDE EFFECTS:
                                   (0728) ;    The A and X registers may be modified by this or future implementations
                                   (0729) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0730) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0731) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0732) ;    functions.
                                   (0733) ;          
                                   (0734) ;    Currently only the page pointer registers listed below are modified:
                                   (0735) ;          CUR_PP
                                   (0736) ;          IDX_PP
                                   (0737) ;
                                   (0738) ;     The receive string is modified by placing Null characters at the end
                                   (0739) ;     of each parameter as they are recovered.
                                   (0740) ;
                                   (0741) ;  THEORY OF OPERATION:
0BBA: 62 D0 00 MOV   REG[208],0    (0742) ;     This function is a stateful generator of addresses to the "parameters"
                                   (0743) ;     of an input "Command". It scans the (optional) input buffer and breaks
0BBD: 50 45    MOV   A,69          (0744) ;     each lexically distinct element into a null-terminated string by replacing
0BBF: 02 9F    ADD   A,[TIMEOUT+3] (0745) ;     delimiters with nulls, as appropriate. The state of the generator is 
0BC1: 5C       MOV   X,A           (0746) ;     maintained by the private variable ptrParam, which is a buffer-relative
0BC2: 50 00    MOV   A,0           (0747) ;     offset. The generator is initialized by a call to the function
                                   (0748) ;     RECEIVE_CmdReset which resets the entire buffer to the 'empty'
                                   (0749) ;     state. Typically this function, RECEIVE_szGetParam, is
0BC5: 7E       RETI                (0750) ;     not called until the buffer has been loaded with an entire command

FILE: lib\comp_serialint.asm
                                   (0102) ;;*****************************************************************************
                                   (0103) ;;*****************************************************************************
                                   (0104) ;;  FILENAME:   COMP_SERIALINT.asm
                                   (0105) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0106) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0107) ;;
                                   (0108) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                   (0109) ;;-----------------------------------------------------------------------------
                                   (0110) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0111) ;;*****************************************************************************
                                   (0112) ;;*****************************************************************************
                                   (0113) 
                                   (0114) 
                                   (0115) include "COMP_SERIAL.inc"
                                   (0116) include "memory.inc"
                                   (0117) include "m8c.inc"
                                   (0118) 
                                   (0119) ;-----------------------------------------------
                                   (0120) ;  Global Symbols
                                   (0121) ;-----------------------------------------------
                                   (0122) export  _COMP_SERIAL_TX_ISR
                                   (0123) export  _COMP_SERIAL_RX_ISR
                                   (0124) 
                                   (0125) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0126) export  COMP_SERIAL_aRxBuffer
                                   (0127) export _COMP_SERIAL_aRxBuffer
                                   (0128) export  COMP_SERIAL_bRxCnt
                                   (0129) export _COMP_SERIAL_bRxCnt
                                   (0130) export  COMP_SERIAL_fStatus
                                   (0131) export _COMP_SERIAL_fStatus
                                   (0132) ENDIF
                                   (0133) 
                                   (0134) 
                                   (0135) ;-----------------------------------------------
                                   (0136) ; Variable Allocation
                                   (0137) ;-----------------------------------------------
                                   (0138) AREA InterruptRAM (RAM, REL, CON)
                                   (0139) 
                                   (0140) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0141)  COMP_SERIAL_fStatus:
                                   (0142) _COMP_SERIAL_fStatus:      BLK  1
                                   (0143)  COMP_SERIAL_bRxCnt:
                                   (0144) _COMP_SERIAL_bRxCnt:       BLK  1
                                   (0145) AREA COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0146)  COMP_SERIAL_aRxBuffer:
                                   (0147) _COMP_SERIAL_aRxBuffer:    BLK COMP_SERIAL_RX_BUFFER_SIZE
                                   (0148) ENDIF
                                   (0149) 
                                   (0150) AREA InterruptRAM (RAM, REL, CON)
                                   (0151) 
0BC6: 08       PUSH  A             (0152) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0BC7: 10       PUSH  X             (0153) ;---------------------------------------------------
0BC8: 5D D3    MOV   A,REG[211]
                                   (0154) ; Insert your custom declarations below this banner
                                   (0155) ;---------------------------------------------------
0BCA: 08       PUSH  A             (0156) 
                                   (0157) ;------------------------
                                   (0158) ;  Includes
0BCB: 58 04    MOV   X,[4]         (0159) ;------------------------
0BCD: 5D 3F    MOV   A,REG[63]     (0160) 
0BCF: 08       PUSH  A             (0161) 
                                   (0162) ;------------------------
0BD0: 21 08    AND   A,8           (0163) ;  Constant Definitions
0BD2: B0 04    JNZ   0x0BD7        (0164) ;------------------------
0BD4: 18       POP   A             (0165) 
0BD5: 80 5E    JMP   0x0C34        (0166) 
                                   (0167) ;------------------------
                                   (0168) ; Variable Allocation
0BD7: 18       POP   A             (0169) ;------------------------
                                   (0170) 
                                   (0171) 
0BD8: 21 E0    AND   A,224         (0172) ;---------------------------------------------------
0BDA: A0 12    JZ    0x0BED        (0173) ; Insert your custom declarations above this banner
                                   (0174) ;---------------------------------------------------
0BDC: 2C 03    OR    [3],A         (0175) ;@PSoC_UserCode_END@ (Do not change this line.)
0BDE: 49 3E 00 TST   REG[62],0     (0176) 
0BE1: 21 20    AND   A,32          (0177) 
0BE3: A0 50    JZ    0x0C34        (0178) AREA UserModules (ROM, REL, CON)
                                   (0179) 
                                   (0180) ;-----------------------------------------------------------------------------
                                   (0181) ;  FUNCTION NAME: _COMP_SERIAL_TX_ISR
0BE5: 41 3F FE AND   REG[63],254   (0182) ;
0BE8: 43 3F 01 OR    REG[63],1     (0183) ;  DESCRIPTION:
0BEB: 80 48    JMP   0x0C34        (0184) ;     UART TX interrupt handler for instance COMP_SERIAL.
                                   (0185) ;
                                   (0186) ;     This is a place holder function.  If the user requires use of an interrupt
                                   (0187) ;     handler for this function, then place code where specified.
0BED: 5D 3E    MOV   A,REG[62]     (0188) ;-----------------------------------------------------------------------------
                                   (0189) 
                                   (0190) _COMP_SERIAL_TX_ISR:
0BEF: 47 03 01 TST   [3],1         (0191)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
0BF2: B0 41    JNZ   0x0C34        (0192)    ;---------------------------------------------------
                                   (0193)    ; Insert your custom code below this banner
0BF4: 39 3B    CMP   A,59          (0194)    ;---------------------------------------------------
0BF6: B0 14    JNZ   0x0C0B        (0195)    ;   NOTE: interrupt service routines must preserve
0BF8: 2E 03 01 OR    [3],1         (0196)    ;   the values of the A and X CPU registers.
                                   (0197)    
                                   (0198)    ;---------------------------------------------------
                                   (0199)    ; Insert your custom code above this banner
0BFB: 62 D3 00 MOV   REG[211],0    (0200)    ;---------------------------------------------------
0BFE: 70 3F    AND   F,63
0C00: 71 80    OR    F,128         (0201)    ;@PSoC_UserCode_END@ (Do not change this line.)
0C02: 56 05 00 MOV   [X+5],0       (0202)    reti
0C05: 70 3F    AND   F,63
0C07: 71 00    OR    F,0           (0203) 
0C09: 80 2A    JMP   0x0C34        (0204) 
                                   (0205) ;-----------------------------------------------------------------------------
                                   (0206) ;  FUNCTION NAME: _COMP_SERIAL_RX_ISR
                                   (0207) ;
                                   (0208) ;  DESCRIPTION:
                                   (0209) ;     UART RX interrupt handler for instance COMP_SERIAL.
                                   (0210) ;     This ISR handles the background processing of received characters if
                                   (0211) ;     the buffer is enabled.
                                   (0212) ;
                                   (0213) ;
                                   (0214) ;  The following assumes that the RX buffer feature has been enabled.
                                   (0215) ;
                                   (0216) ;  SIDE EFFECTS:
                                   (0217) ;     There are 3 posible errors that may occur with the serial port.
0C0B: 39 20    CMP   A,32          (0218) ;      1) Parity Error
0C0D: C0 26    JC    0x0C34        (0219) ;      2) Framing Error
                                   (0220) ;      3) OverRun Error
                                   (0221) ;
                                   (0222) ;  This user module check for parity and framing error.  If either of these
                                   (0223) ;  two errors are detected, the data is read and ignored.  When an overRun
0C0F: 62 D3 00 MOV   REG[211],0    (0224) ;  error occurs, the last byte was lost, but the current byte is valid.  For
0C12: 3C 04 3F CMP   [4],63        (0225) ;  this reason this error is ignored at this time.  Code could be added to
0C15: C0 11    JC    0x0C27        (0226) ;  this ISR to set a flag if an error condition occurs.
0C17: 70 3F    AND   F,63
0C19: 71 80    OR    F,128         (0227) ;
0C1B: 56 05 00 MOV   [X+5],0       (0228) ;  THEORY of OPERATION:
0C1E: 70 3F    AND   F,63
0C20: 71 00    OR    F,0           (0229) ;     When using the RX buffer feature, the ISR collects received characters
0C22: 2E 03 10 OR    [3],16        (0230) ;     in a buffer until the user defined command terminator is detected.  After
0C25: 80 0E    JMP   0x0C34        (0231) ;     the command terminator is detected, the command bit is set and all other
0C27: 70 3F    AND   F,63
                                   (0232) ;     characters will be ignored until the command bit is reset.  Up to
                                   (0233) ;     buffer_size - 1 characters will be collected waiting for a command
                                   (0234) ;     terminator.  After that, the characters will be discarded, although
0C29: 71 80    OR    F,128         (0235) ;     a command determinator will still cause the command bit to be set.
0C2B: 54 05    MOV   [X+5],A       (0236) ;
0C2D: 70 3F    AND   F,63
0C2F: 71 00    OR    F,0           (0237) ;-----------------------------------------------------------------------------
0C31: 75       INC   X             (0238) _COMP_SERIAL_RX_ISR:
0C32: 5A 04    MOV   [4],X         (0239) 
0C34: 18       POP   A
                                   (0240)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0241)    ;---------------------------------------------------
                                   (0242)    ; Insert your custom code below this banner
0C35: 60 D3    MOV   REG[211],A    (0243)    ;---------------------------------------------------
                                   (0244)    ;   NOTE: interrupt service routines must preserve
                                   (0245)    ;   the values of the A and X CPU registers.
                                   (0246) 
0C37: 20       POP   X             (0247)    ;---------------------------------------------------
0C38: 18       POP   A             (0248)    ; Insert your custom code above this banner
                                   (0249)    ;---------------------------------------------------
                                   (0250)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0251) 
                                   (0252) IF (COMP_SERIAL_RXBUF_ENABLE)
0C3A: 43 E1 40 OR    REG[225],64   (0253)    push A

FILE: lib\comp_serial.asm
0C3D: 43 E1 80 OR    REG[225],128  (0180) ;;*****************************************************************************
                                   (0181) ;;*****************************************************************************
0C40: 7F       RET                 (0182) ;;  Filename:   COMP_SERIAL.asm
                                   (0183) ;;  Version: 5.2, Updated on 2009/7/10 at 10:46:57
                                   (0184) ;;  Generated by PSoC Designer 5.0.985.0
                                   (0185) ;;
                                   (0186) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                   (0187) ;;                22/24/25/26/27xxx families.
                                   (0188) ;;
                                   (0189) ;;
                                   (0190) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0191) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0192) ;;        This means it is the caller's responsibility to preserve any values
                                   (0193) ;;        in the X and A registers that are still needed after the API functions
                                   (0194) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0195) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0196) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0197) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0198) ;;-----------------------------------------------------------------------------
                                   (0199) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0200) ;;*****************************************************************************
                                   (0201) ;;*****************************************************************************
                                   (0202) 
                                   (0203) 
                                   (0204) include "m8c.inc"
                                   (0205) include "memory.inc"
                                   (0206) include "COMP_SERIAL.inc"
                                   (0207) 
                                   (0208) ;-----------------------------------------------
                                   (0209) ;  Global Symbols
                                   (0210) ;-----------------------------------------------
0C41: 41 E1 BF AND   REG[225],191  (0211) ;-------------------------------------------------------------------
0C44: 41 E1 7F AND   REG[225],127  (0212) ;  Declare the functions global for both assembler and C compiler.
                                   (0213) ;
0C47: 7F       RET                 (0214) ;  Note that there are two names for each API. First name is
                                   (0215) ;  assembler reference. Name with underscore is name refence for
                                   (0216) ;  C compiler.  Calling function in C source code does not require
                                   (0217) ;  the underscore.
                                   (0218) ;-------------------------------------------------------------------
                                   (0219) export  COMP_SERIAL_SetTxIntMode
                                   (0220) export _COMP_SERIAL_SetTxIntMode
                                   (0221) export  COMP_SERIAL_EnableInt
                                   (0222) export _COMP_SERIAL_EnableInt
                                   (0223) export  COMP_SERIAL_DisableInt
                                   (0224) export _COMP_SERIAL_DisableInt
                                   (0225) 
                                   (0226) export  COMP_SERIAL_Start
                                   (0227) export _COMP_SERIAL_Start
                                   (0228) export  COMP_SERIAL_Stop
                                   (0229) export _COMP_SERIAL_Stop
                                   (0230) export  COMP_SERIAL_SendData
                                   (0231) export _COMP_SERIAL_SendData
                                   (0232) export  COMP_SERIAL_bReadTxStatus
                                   (0233) export _COMP_SERIAL_bReadTxStatus
                                   (0234) export  COMP_SERIAL_bReadRxData
                                   (0235) export _COMP_SERIAL_bReadRxData
                                   (0236) export  COMP_SERIAL_bReadRxStatus
                                   (0237) export _COMP_SERIAL_bReadRxStatus
                                   (0238) 
                                   (0239) export  COMP_SERIAL_IntCntl
                                   (0240) export _COMP_SERIAL_IntCntl
                                   (0241) 
                                   (0242) export  COMP_SERIAL_TxIntMode
                                   (0243) export _COMP_SERIAL_TxIntMode
                                   (0244) 
                                   (0245) export  COMP_SERIAL_PutSHexByte
                                   (0246) export _COMP_SERIAL_PutSHexByte
0C48: 71 10    OR    F,16          (0247) export  COMP_SERIAL_PutSHexInt
0C4A: 21 01    AND   A,1           (0248) export _COMP_SERIAL_PutSHexInt
0C4C: A0 07    JZ    0x0C54        (0249) 
0C4E: 43 38 10 OR    REG[56],16    (0250) export  COMP_SERIAL_CPutString
0C51: 70 EF    AND   F,239         (0251) export _COMP_SERIAL_CPutString
                                   (0252) export  COMP_SERIAL_PutString
0C53: 7F       RET                 (0253) export _COMP_SERIAL_PutString
                                   (0254) export  COMP_SERIAL_PutChar
                                   (0255) export _COMP_SERIAL_PutChar
0C54: 41 38 EF AND   REG[56],239   (0256) export  COMP_SERIAL_Write
0C57: 70 EF    AND   F,239         (0257) export _COMP_SERIAL_Write
                                   (0258) export  COMP_SERIAL_CWrite
0C59: 7F       RET                 (0259) export _COMP_SERIAL_CWrite
                                   (0260) 
                                   (0261) export  COMP_SERIAL_cGetChar
                                   (0262) export _COMP_SERIAL_cGetChar
                                   (0263) export  COMP_SERIAL_cReadChar
                                   (0264) export _COMP_SERIAL_cReadChar
                                   (0265) export  COMP_SERIAL_iReadChar
                                   (0266) export _COMP_SERIAL_iReadChar
                                   (0267) export  COMP_SERIAL_PutCRLF
                                   (0268) export _COMP_SERIAL_PutCRLF
                                   (0269) 
                                   (0270) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0271) export  COMP_SERIAL_CmdReset
                                   (0272) export _COMP_SERIAL_CmdReset
                                   (0273) export  COMP_SERIAL_bCmdCheck
                                   (0274) export _COMP_SERIAL_bCmdCheck
                                   (0275) export  COMP_SERIAL_bCmdLength
                                   (0276) export _COMP_SERIAL_bCmdLength
                                   (0277) export  COMP_SERIAL_bErrCheck
                                   (0278) export _COMP_SERIAL_bErrCheck
                                   (0279) 
                                   (0280) export  COMP_SERIAL_szGetParam
                                   (0281) export _COMP_SERIAL_szGetParam
                                   (0282) export  COMP_SERIAL_szGetRestOfParams
                                   (0283) export _COMP_SERIAL_szGetRestOfParams
                                   (0284) ENDIF
                                   (0285) 
                                   (0286) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0287) ; WARNING WARNING WARNING
                                   (0288) ; The following exports are for backwards compatibility only and should
                                   (0289) ; not be used for new designs. They may be eliminated in a future release.
0C5A: 29 01    OR    A,1           (0290) ; Their status is "NO FURTHER MAINTENANCE". 
0C5C: 60 3B    MOV   REG[59],A     (0291) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5E: 60 3F    MOV   REG[63],A     (0292) export  bCOMP_SERIAL_ReadTxStatus
                                   (0293) export _bCOMP_SERIAL_ReadTxStatus
0C60: 91 2A    CALL  0x0D8C        (0294) export  bCOMP_SERIAL_ReadRxData
                                   (0295) export _bCOMP_SERIAL_ReadRxData
                                   (0296) export  bCOMP_SERIAL_ReadRxStatus
0C62: 7F       RET                 (0297) export _bCOMP_SERIAL_ReadRxStatus
                                   (0298) 	
                                   (0299) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0300) ;             END WARNING
                                   (0301) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0302) 
                                   (0303) ;-----------------------------------------------
                                   (0304) ; Variable Allocation
                                   (0305) ;-----------------------------------------------
                                   (0306) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (0307)     
                                   (0308) area COMP_SERIAL_RAM (RAM, REL, CON)
                                   (0309)     
                                   (0310)  ptrParam:   BLK  1
                                   (0311) 
                                   (0312) ENDIF
                                   (0313) 
                                   (0314) area text (ROM,REL)
                                   (0315) 
                                   (0316) ;-----------------------------------------------
                                   (0317) ;  EQUATES
                                   (0318) ;-----------------------------------------------
                                   (0319) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                   (0320) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                   (0321) 
                                   (0322) area UserModules (ROM, REL, CON)
                                   (0323) 
                                   (0324) ;=============================================================================
0C63: 41 3B FE AND   REG[59],254   (0325) ;=============================================================================
0C66: 41 3F FE AND   REG[63],254   (0326) ;
                                   (0327) ;     Low-Level Commands
0C69: 7F       RET                 (0328) ;
                                   (0329) ;=============================================================================
                                   (0330) ;=============================================================================
                                   (0331) 
                                   (0332) .SECTION
                                   (0333) ;-----------------------------------------------------------------------------
                                   (0334) ;  FUNCTION NAME: COMP_SERIAL_EnableInt
                                   (0335) ;
                                   (0336) ;  DESCRIPTION:
                                   (0337) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                   (0338) ;     bit associated with this User Module. Remember to call the global
                                   (0339) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0340) ;-----------------------------------------------------------------------------
                                   (0341) ;
                                   (0342) ;  ARGUMENTS:
                                   (0343) ;     none.
                                   (0344) ;
                                   (0345) ;  RETURNS:
                                   (0346) ;     none.
                                   (0347) ;
                                   (0348) ;  SIDE EFFECTS:
                                   (0349) ;    The A and X registers may be modified by this or future implementations
                                   (0350) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0351) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0352) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0353) ;    functions.
                                   (0354) ;
                                   (0355)  COMP_SERIAL_EnableInt:
0C6A: 60 39    MOV   REG[57],A     (0356) _COMP_SERIAL_EnableInt:
                                   (0357)    RAM_PROLOGUE RAM_USE_CLASS_1
0C6C: 7F       RET                 (0358)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0359)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0360)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0361)    ret
                                   (0362) .ENDSECTION
                                   (0363) 
                                   (0364)     
                                   (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: COMP_SERIAL_DisableInt
                                   (0368) ;
                                   (0369) ;  DESCRIPTION:
                                   (0370) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                   (0371) ;     associated with this User Module.
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:
                                   (0375) ;     none.
                                   (0376) ;
                                   (0377) ;  RETURNS:
                                   (0378) ;     none.
                                   (0379) ;
                                   (0380) ;  SIDE EFFECTS:
                                   (0381) ;    The A and X registers may be modified by this or future implementations
                                   (0382) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0383) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0384) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0385) ;    functions.
                                   (0386) ;
                                   (0387)  COMP_SERIAL_DisableInt:
                                   (0388) _COMP_SERIAL_DisableInt:
0C6D: 5D 3B    MOV   A,REG[59]     (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0390)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
0C6F: 7F       RET                 (0391)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
                                   (0392)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0393)    ret
                                   (0394) .ENDSECTION
                                   (0395) 
                                   (0396) 
                                   (0397) .SECTION
                                   (0398) ;-----------------------------------------------------------------------------
                                   (0399) ;  FUNCTION NAME: COMP_SERIAL_SetTxIntMode(BYTE bTxIntMode)
                                   (0400) ;
                                   (0401) ;  DESCRIPTION:
                                   (0402) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0403) ;-----------------------------------------------------------------------------
                                   (0404) ;
                                   (0405) ;  ARGUMENTS:
                                   (0406) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0407) ;        Passed in the A register
                                   (0408) ;
                                   (0409) ;  RETURNS:
                                   (0410) ;     none.
                                   (0411) ;
                                   (0412) ;  SIDE EFFECTS:
                                   (0413) ;    The A and X registers may be modified by this or future implementations
                                   (0414) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0415) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0416) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0417) ;    functions.
                                   (0418) ;
                                   (0419) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0420) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0421) ;     on TX register empty or TX transmit complete
0C70: 5D 3E    MOV   A,REG[62]     (0422) ;
                                   (0423)  COMP_SERIAL_SetTxIntMode:
0C72: 7F       RET                 (0424) _COMP_SERIAL_SetTxIntMode:
                                   (0425)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0426)    M8C_SetBank1
                                   (0427)    and   A, COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0428)    jz    .SetModeRegEmpty
                                   (0429)    or    REG[COMP_SERIAL_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0430)    M8C_SetBank0
                                   (0431)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0432)    ret
                                   (0433) 
                                   (0434) .SetModeRegEmpty:
                                   (0435)    and   REG[COMP_SERIAL_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
                                   (0436)    M8C_SetBank0
                                   (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0438)    ret
                                   (0439) .ENDSECTION
                                   (0440) 
                                   (0441) 
                                   (0442) .SECTION
                                   (0443) ;-----------------------------------------------------------------------------
                                   (0444) ;  FUNCTION NAME: COMP_SERIAL_Start(BYTE bParity)
                                   (0445) ;
                                   (0446) ;  DESCRIPTION:
                                   (0447) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0448) ;-----------------------------------------------------------------------------
                                   (0449) ;
                                   (0450) ;  ARGUMENTS:
                                   (0451) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                   (0452) ;        Passed in the A register.
                                   (0453) ;
                                   (0454) ;  RETURNS:
                                   (0455) ;     none.
0C73: 5D 3F    MOV   A,REG[63]     (0456) ;
                                   (0457) ;  SIDE EFFECTS:
0C75: 7F       RET                 (0458) ;    The A and X registers may be modified by this or future implementations
                                   (0459) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0460) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0461) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0462) ;    functions.
                                   (0463) ;
                                   (0464)  COMP_SERIAL_Start:
                                   (0465) _COMP_SERIAL_Start:
                                   (0466)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0467)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                   (0468) 
                                   (0469)    or    A, bfCONTROL_REG_START_BIT
                                   (0470)    mov   REG[COMP_SERIAL_TX_CONTROL_REG], A
                                   (0471)    mov   REG[COMP_SERIAL_RX_CONTROL_REG], A
                                   (0472) IF ( COMP_SERIAL_RXBUF_ENABLE )
                                   (0473)    call  _COMP_SERIAL_CmdReset
                                   (0474) ENDIF
                                   (0475)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0476)    ret
                                   (0477) .ENDSECTION
                                   (0478) 
                                   (0479) 
                                   (0480) .SECTION
                                   (0481) ;-----------------------------------------------------------------------------
                                   (0482) ;  FUNCTION NAME: COMP_SERIAL_Stop
                                   (0483) ;
                                   (0484) ;  DESCRIPTION:
                                   (0485) ;     Disables UART operation.
                                   (0486) ;-----------------------------------------------------------------------------
                                   (0487) ;
                                   (0488) ;  ARGUMENTS:
0C76: 21 01    AND   A,1           (0489) ;     none.
0C78: 71 10    OR    F,16          (0490) ;
0C7A: 39 01    CMP   A,1           (0491) ;  RETURNS:
0C7C: A0 06    JZ    0x0C83        (0492) ;     none.
                                   (0493) ;
0C7E: 41 38 EF AND   REG[56],239   (0494) ;  SIDE EFFECTS:
0C81: 80 04    JMP   0x0C86        (0495) ;    The A and X registers may be modified by this or future implementations
                                   (0496) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0497) ;    the Large Memory Model.  When necessary, it is the calling function's
0C83: 43 38 10 OR    REG[56],16    (0498) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0499) ;    functions.
                                   (0500) ;
0C86: 70 EF    AND   F,239         (0501)  COMP_SERIAL_Stop:
                                   (0502) _COMP_SERIAL_Stop:
0C88: 7F       RET                 (0503)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0504)    and   REG[COMP_SERIAL_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0505)    and   REG[COMP_SERIAL_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0506)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0507)    ret
                                   (0508) .ENDSECTION
                                   (0509) 
                                   (0510) 
                                   (0511) .SECTION
                                   (0512) ;-----------------------------------------------------------------------------
                                   (0513) ;  FUNCTION NAME: COMP_SERIAL_SendData
                                   (0514) ;
                                   (0515) ;  DESCRIPTION:
                                   (0516) ;     Initiates a transmission of data.
                                   (0517) ;-----------------------------------------------------------------------------
                                   (0518) ;
                                   (0519) ;  ARGUMENTS:
                                   (0520) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                   (0521) ;
                                   (0522) ;  RETURNS:
                                   (0523) ;     none.
                                   (0524) ;
                                   (0525) ;  SIDE EFFECTS:
                                   (0526) ;    The A and X registers may be modified by this or future implementations
                                   (0527) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0528) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0529) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0530) ;    functions.
                                   (0531) ;
                                   (0532)  COMP_SERIAL_SendData:
                                   (0533) _COMP_SERIAL_SendData:
                                   (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0535)    mov REG[COMP_SERIAL_TX_BUFFER_REG], A
0C89: 08       PUSH  A             (0536)    RAM_EPILOGUE RAM_USE_CLASS_1
0C8A: 21 01    AND   A,1           (0537)    ret
0C8C: A0 06    JZ    0x0C93        (0538) .ENDSECTION
                                   (0539) 
0C8E: 43 E1 80 OR    REG[225],128  (0540) 
0C91: 80 04    JMP   0x0C96        (0541) .SECTION
                                   (0542) ;-----------------------------------------------------------------------------
                                   (0543) ;  FUNCTION NAME: COMP_SERIAL_bReadTxStatus
0C93: 41 E1 7F AND   REG[225],127  (0544) ;
                                   (0545) ;  DESCRIPTION:
                                   (0546) ;     Reads the Tx Status bits in the Control/Status register.
0C96: 18       POP   A             (0547) ;-----------------------------------------------------------------------------
0C97: 21 02    AND   A,2           (0548) ;
0C99: A0 06    JZ    0x0CA0        (0549) ;  ARGUMENTS:
                                   (0550) ;     none.
0C9B: 43 E1 40 OR    REG[225],64   (0551) ;
0C9E: 80 04    JMP   0x0CA3        (0552) ;  RETURNS:
                                   (0553) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                   (0554) ;           status bits (returned in A)
0CA0: 41 E1 BF AND   REG[225],191  (0555) ;
                                   (0556) ;  SIDE EFFECTS:
                                   (0557) ;    The A and X registers may be modified by this or future implementations
                                   (0558) ;    of this function.  The same is true for all RAM page pointer registers in
0CA3: 7F       RET                 (0559) ;    the Large Memory Model.  When necessary, it is the calling function's
0CA4: 30       HALT  
0CA5: 31 32    XOR   A,50
0CA7: 33 34    XOR   A,[X+52]
0CA9: 35 36    XOR   [X+54],A
0CAB: 37 38 39 XOR   [X+56],57
0CAE: 41 42 43 AND   REG[66],67
0CB1: 44 45 46 OR    REG[X+69],70
                                   (0560) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0561) ;    functions.
                                   (0562) ;
                                   (0563)  COMP_SERIAL_bReadTxStatus:
                                   (0564) _COMP_SERIAL_bReadTxStatus:
                                   (0565)  bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0566) _bCOMP_SERIAL_ReadTxStatus:                      ; For backwards compatibility only
                                   (0567)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0568)    mov A,  REG[COMP_SERIAL_TX_CONTROL_REG]
                                   (0569)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0570)    ret
                                   (0571) .ENDSECTION
                                   (0572) 
                                   (0573) 
                                   (0574) .SECTION
                                   (0575) ;-----------------------------------------------------------------------------
                                   (0576) ;  FUNCTION NAME: COMP_SERIAL_bReadRxData
                                   (0577) ;
                                   (0578) ;  DESCRIPTION:
                                   (0579) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0580) ;     sure data is valid.
                                   (0581) ;-----------------------------------------------------------------------------
                                   (0582) ;
                                   (0583) ;  ARGUMENTS:
                                   (0584) ;     none.
                                   (0585) ;
                                   (0586) ;  RETURNS:
                                   (0587) ;     bRxData - returned in A.
                                   (0588) ;
                                   (0589) ;  SIDE EFFECTS:
                                   (0590) ;    The A and X registers may be modified by this or future implementations
                                   (0591) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0592) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0593) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0594) ;    functions.
                                   (0595) ;
                                   (0596)  COMP_SERIAL_bReadRxData:
                                   (0597) _COMP_SERIAL_bReadRxData:
                                   (0598)  bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0599) _bCOMP_SERIAL_ReadRxData:                        ; For backwards compatibility only
                                   (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0CB4: 08       PUSH  A             (0601)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]
0CB5: 67       ASR   A             (0602)    RAM_EPILOGUE RAM_USE_CLASS_1
0CB6: 67       ASR   A             (0603)    ret
0CB7: 67       ASR   A             (0604) .ENDSECTION
0CB8: 67       ASR   A             (0605) 
0CB9: 21 0F    AND   A,15          (0606) 
0CBB: FF E7    INDEX 0x0CA4        (0607) .SECTION
0CBD: 90 0F    CALL  0x0CCE        (0608) ;-----------------------------------------------------------------------------
0CBF: 18       POP   A             (0609) ;  FUNCTION NAME: COMP_SERIAL_bReadRxStatus
0CC0: 21 0F    AND   A,15          (0610) ;
0CC2: FF E0    INDEX 0x0CA4        (0611) ;  DESCRIPTION:
0CC4: 90 08    CALL  0x0CCE        (0612) ;     Reads the RX Status bits in the Control/Status register.
                                   (0613) ;-----------------------------------------------------------------------------
0CC6: 7F       RET                 (0614) ;
                                   (0615) ;  ARGUMENTS:
                                   (0616) ;     none.
                                   (0617) ;
                                   (0618) ;  RETURNS:
                                   (0619) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                   (0620) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0621) ;           returned in A.
                                   (0622) ;
                                   (0623) ;  SIDE EFFECTS:
                                   (0624) ;    The A and X registers may be modified by this or future implementations
                                   (0625) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0626) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0627) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0628) ;    functions.
                                   (0629) ;
                                   (0630)  COMP_SERIAL_bReadRxStatus:
                                   (0631) _COMP_SERIAL_bReadRxStatus:
                                   (0632)  bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0633) _bCOMP_SERIAL_ReadRxStatus:                      ; For backwards compatibility only
                                   (0634)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0635)    mov A,  REG[COMP_SERIAL_RX_CONTROL_REG]
                                   (0636)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0637)    ret
                                   (0638) .ENDSECTION
                                   (0639) 
                                   (0640) 
                                   (0641) .SECTION
                                   (0642) ;-----------------------------------------------------------------------------
                                   (0643) ;  FUNCTION NAME: COMP_SERIAL_TxIntMode
                                   (0644) ;
0CC7: 4B       SWAP  A,X           (0645) ;  DESCRIPTION:
0CC8: 9F EA    CALL  0x0CB4        (0646) ;     This function is used to change the TX Interrupt mode.
0CCA: 5B       MOV   A,X           (0647) ;-----------------------------------------------------------------------------
0CCB: 9F E7    CALL  0x0CB4        (0648) ;
                                   (0649) ;  ARGUMENTS:
0CCD: 7F       RET                 (0650) ;     A => Tx Interrupt mode
0CCE: 49 3B 10 TST   REG[59],16
                                   (0651) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                   (0652) ;             1 => Interrupt on TX Complete
                                   (0653) ;
                                   (0654) ;  RETURNS:
                                   (0655) ;     none.
                                   (0656) ;
                                   (0657) ;  SIDE EFFECTS:
                                   (0658) ;    The A and X registers may be modified by this or future implementations
                                   (0659) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0660) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0661) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0662) ;    functions.
                                   (0663) ;
                                   (0664)  COMP_SERIAL_TxIntMode:
                                   (0665) _COMP_SERIAL_TxIntMode:
                                   (0666)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0667) 
                                   (0668)    and  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0669)    M8C_SetBank1
                                   (0670)    cmp  A,COMP_SERIAL_INT_MODE_TX_COMPLETE
                                   (0671)    jz   .SetTxCmpMode
                                   (0672) 
                                   (0673)    and  reg[COMP_SERIAL_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
                                   (0674)    jmp  .TxIntMode_End
                                   (0675) 
                                   (0676) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
                                   (0677)    or   reg[COMP_SERIAL_TX_FUNC_REG],0x10
                                   (0678) 
                                   (0679) .TxIntMode_End:
                                   (0680)    M8C_SetBank0
                                   (0681)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0682)    ret
                                   (0683) .ENDSECTION
                                   (0684) 
                                   (0685)     
0CD1: AF FC    JZ    0x0CCE        (0686) .SECTION
0CD3: 60 39    MOV   REG[57],A
                                   (0687) ;-----------------------------------------------------------------------------
0CD5: 7F       RET                 (0688) ;  FUNCTION NAME: COMP_SERIAL_IntCntl
                                   (0689) ;
                                   (0690) ;  DESCRIPTION:
                                   (0691) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                   (0692) ;-----------------------------------------------------------------------------
                                   (0693) ;
                                   (0694) ;  ARGUMENTS:
                                   (0695) ;     A => Interrupt mask
                                   (0696) ;
                                   (0697) ;  RETURNS:
                                   (0698) ;     none.
                                   (0699) ;
                                   (0700) ;  SIDE EFFECTS:
                                   (0701) ;    The A and X registers may be modified by this or future implementations
                                   (0702) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0703) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0704) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0705) ;    functions.
                                   (0706) ;
                                   (0707) ;  THEORY of OPERATION or PROCEDURE:
                                   (0708) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                   (0709) ;     and RX block.
                                   (0710) ;
                                   (0711)  COMP_SERIAL_IntCntl:
                                   (0712) _COMP_SERIAL_IntCntl:
                                   (0713)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0714) 
                                   (0715)    push A
                                   (0716)    and  A,COMP_SERIAL_ENABLE_RX_INT
                                   (0717)    jz   .DisRxInt
                                   (0718)      ; Enable Rx Interrupt
                                   (0719)    M8C_EnableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0CD6: 49 3F 08 TST   REG[63],8     (0720)    jmp  .CheckTxInt
0CD9: AF FC    JZ    0x0CD6        (0721) .DisRxInt:
0CDB: 5D 3E    MOV   A,REG[62]     (0722)      ; Disable Rx Interrupt
                                   (0723)    M8C_DisableIntMask COMP_SERIAL_RX_INT_REG, COMP_SERIAL_RX_INT_MASK
0CDD: 7F       RET                 (0724) 
                                   (0725) .CheckTxInt:
                                   (0726)    pop  A
                                   (0727)    and  A,COMP_SERIAL_ENABLE_TX_INT
                                   (0728)    jz   .DisTxInt
                                   (0729)      ; Enable Tx Interrupt
                                   (0730)    M8C_EnableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0731)    jmp  .End_IntCntl
                                   (0732) .DisTxInt:
                                   (0733)      ; Disable Tx Interrupt
                                   (0734)    M8C_DisableIntMask COMP_SERIAL_TX_INT_REG, COMP_SERIAL_TX_INT_MASK
                                   (0735) 
                                   (0736) .End_IntCntl:
                                   (0737)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0738)    ret
                                   (0739) .ENDSECTION
                                   (0740) 
                                   (0741) 
                                   (0742) ;=============================================================================
                                   (0743) ;=============================================================================
                                   (0744) ;
                                   (0745) ;     High-Level Commands
                                   (0746) ;
                                   (0747) ;=============================================================================
                                   (0748) ;=============================================================================
                                   (0749) 
                                   (0750) 
                                   (0751) ;-----------------------------------------------------------------------------
                                   (0752) ;  FUNCTION NAME: COMP_SERIAL_PutSHexByte
                                   (0753) ;
                                   (0754) ;  DESCRIPTION:
0CDE: 5D 3F    MOV   A,REG[63]     (0755) ;     Print a byte in Hex (two characters) to the UART Tx
0CE0: 08       PUSH  A             (0756) ;-----------------------------------------------------------------------------
0CE1: 21 08    AND   A,8           (0757) ;
0CE3: B0 04    JNZ   0x0CE8        (0758) ;  ARGUMENTS:
0CE5: 18       POP   A             (0759) ;     A  => (BYTE) Data/char to be printed
0CE6: 80 0B    JMP   0x0CF2        (0760) ;
                                   (0761) ;  RETURNS:
                                   (0762) ;     none.
0CE8: 5D 3E    MOV   A,REG[62]     (0763) ;
0CEA: 4B       SWAP  A,X           (0764) ;  SIDE EFFECTS:
                                   (0765) ;    The A and X registers may be modified by this or future implementations
0CEB: 18       POP   A             (0766) ;    of this function.  The same is true for all RAM page pointer registers in
0CEC: 21 A0    AND   A,160         (0767) ;    the Large Memory Model.  When necessary, it is the calling function's
0CEE: B0 03    JNZ   0x0CF2        (0768) ;    responsibility to perserve their values across calls to fastcall16 
0CF0: 4B       SWAP  A,X           (0769) ;    functions.
                                   (0770) ;
0CF1: 7F       RET                 (0771) .LITERAL
                                   (0772) COMP_SERIAL_HEX_STR:
                                   (0773)      DS    "0123456789ABCDEF"
0CF2: 50 00    MOV   A,0           (0774) .ENDLITERAL
                                   (0775) 
                                   (0776) .SECTION
                                   (0777)  COMP_SERIAL_PutSHexByte:
0CF4: 7F       RET                 (0778) _COMP_SERIAL_PutSHexByte:
                                   (0779)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0780)    push  A                             ; Save lower nibble
                                   (0781)    asr   A                             ; Shift high nibble to right
                                   (0782)    asr   A
                                   (0783)    asr   A
                                   (0784)    asr   A
                                   (0785)    and   A,0Fh                         ; Mask off nibble
                                   (0786)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0787)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0788)    pop   A                             ; Restore value
                                   (0789)    and   A,0Fh                         ; Mask off lower nibble
                                   (0790)    index COMP_SERIAL_HEX_STR           ; Get Hex value
                                   (0791)    call  COMP_SERIAL_PutChar           ; Write data to screen
                                   (0792)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0793)    ret
                                   (0794) .ENDSECTION
                                   (0795) 
                                   (0796) 
                                   (0797) .SECTION
                                   (0798) ;-----------------------------------------------------------------------------
                                   (0799) ;  FUNCTION NAME: COMP_SERIAL_PutSHexInt
                                   (0800) ;
                                   (0801) ;  DESCRIPTION:
                                   (0802) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0803) ;-----------------------------------------------------------------------------
                                   (0804) ;
                                   (0805) ;  ARGUMENTS:
                                   (0806) ;     Pointer to string
                                   (0807) ;     A  => ASB of Int
                                   (0808) ;     X  => MSB of Int
                                   (0809) ;
                                   (0810) ;  RETURNS:
                                   (0811) ;     none.
                                   (0812) ;
                                   (0813) ;  SIDE EFFECTS:
                                   (0814) ;    The A and X registers may be modified by this or future implementations
                                   (0815) ;    of this function.  The same is true for all RAM page pointer registers in
0CF5: 5D 3F    MOV   A,REG[63]     (0816) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0817) ;    responsibility to perserve their values across calls to fastcall16 
0CF7: 21 E8    AND   A,232         (0818) ;    functions.
0CF9: 08       PUSH  A             (0819) ;
0CFA: 21 08    AND   A,8           (0820) 
0CFC: B0 07    JNZ   0x0D04        (0821)  COMP_SERIAL_PutSHexInt:
0CFE: 18       POP   A             (0822) _COMP_SERIAL_PutSHexInt:
0CFF: 29 01    OR    A,1           (0823)    RAM_PROLOGUE RAM_USE_CLASS_1
0D01: 4B       SWAP  A,X           (0824)    swap  A,X
0D02: 80 07    JMP   0x0D0A        (0825)    call  COMP_SERIAL_PutSHexByte       ; Print MSB
                                   (0826)    mov   A,X                           ; Move LSB into position
                                   (0827)    call  COMP_SERIAL_PutSHexByte       ; Print LSB
0D04: 18       POP   A             (0828)    RAM_EPILOGUE RAM_USE_CLASS_1
0D05: 21 E0    AND   A,224         (0829)    ret
0D07: 4B       SWAP  A,X           (0830) .ENDSECTION
0D08: 5D 3E    MOV   A,REG[62]     (0831) 
                                   (0832) 
                                   (0833) .SECTION
                                   (0834) ;-----------------------------------------------------------------------------
                                   (0835) ;  FUNCTION NAME: COMP_SERIAL_PutChar
0D0A: 7F       RET                 (0836) ;
                                   (0837) ;  DESCRIPTION:
                                   (0838) ;     Send character out through UART TX port.
                                   (0839) ;-----------------------------------------------------------------------------
                                   (0840) ;
                                   (0841) ;  ARGUMENTS:
                                   (0842) ;     A has Character to send to UART Tx Port
                                   (0843) ;
                                   (0844) ;  RETURNS:
                                   (0845) ;     none
                                   (0846) ;
                                   (0847) ;  SIDE EFFECTS:
                                   (0848) ;    The A and X registers may be modified by this or future implementations
                                   (0849) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0850) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0851) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0852) ;    functions.
                                   (0853) ;
                                   (0854) 
                                   (0855)    macro InLinePutChar( Source )
                                   (0856) .BufEmptyWaitLoop:
                                   (0857)    tst REG[COMP_SERIAL_TX_CONTROL_REG], COMP_SERIAL_TX_BUFFER_EMPTY     ; Check Tx Status
                                   (0858)    jz  .BufEmptyWaitLoop
                                   (0859)    mov REG[COMP_SERIAL_TX_BUFFER_REG], @Source     ; Write data to Tx Port
                                   (0860)    endm
                                   (0861) 
                                   (0862)  COMP_SERIAL_PutChar:
                                   (0863) _COMP_SERIAL_PutChar:
                                   (0864)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0865)    InLinePutChar A
                                   (0866)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0867)    ret
0D0B: 70 BF    AND   F,191         (0868) .ENDSECTION
0D0D: 60 D3    MOV   REG[211],A    (0869) 
                                   (0870) 
0D0F: 52 00    MOV   A,[X+0]       (0871) .SECTION
0D11: A0 06    JZ    0x0D18        (0872) ;-----------------------------------------------------------------------------
0D13: 9F B9    CALL  0x0CCE        (0873) ;  FUNCTION NAME: COMP_SERIAL_cGetChar
0D15: 75       INC   X             (0874) ;
0D16: 8F F8    JMP   0x0D0F        (0875) ;  DESCRIPTION:
0D18: 70 3F    AND   F,63
                                   (0876) ;     Read character from UART RX port.
                                   (0877) ;-----------------------------------------------------------------------------
0D1A: 71 C0    OR    F,192         (0878) ;
0D1C: 7F       RET                 (0879) ;  ARGUMENTS:
                                   (0880) ;      none
                                   (0881) ;
                                   (0882) ;  RETURNS:
                                   (0883) ;     char that is returned from UART
                                   (0884) ;
                                   (0885) ;  SIDE EFFECTS:
                                   (0886) ;    The A and X registers may be modified by this or future implementations
                                   (0887) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0888) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0889) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0890) ;    functions.
                                   (0891) ;
                                   (0892) ;    Program flow will stay in this function until a character is received.
                                   (0893) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0894) ;    the delay between characters is less than the watchdog timeout.
                                   (0895) ;
                                   (0896)  COMP_SERIAL_cGetChar:
                                   (0897) _COMP_SERIAL_cGetChar:
                                   (0898)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0899)    tst REG[COMP_SERIAL_RX_CONTROL_REG],COMP_SERIAL_RX_REG_FULL    ; Check if a character is ready
                                   (0900)    jz  COMP_SERIAL_cGetChar                              ; If not loop
                                   (0901)    mov A, REG[COMP_SERIAL_RX_BUFFER_REG]                 ; Get character
                                   (0902)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0903)    ret
                                   (0904) .ENDSECTION
                                   (0905) 
                                   (0906) 
                                   (0907) .SECTION
                                   (0908) ;-----------------------------------------------------------------------------
                                   (0909) ;  FUNCTION NAME: COMP_SERIAL_cReadChar
                                   (0910) ;
                                   (0911) ;  DESCRIPTION:
                                   (0912) ;     Read character from UART RX port.
                                   (0913) ;-----------------------------------------------------------------------------
                                   (0914) ;
0D1D: 70 BF    AND   F,191         (0915) ;  ARGUMENTS:
0D1F: 62 D3 07 MOV   REG[211],7    (0916) ;      none
0D22: 4F       MOV   X,SP          (0917) ;
                                   (0918) ;  RETURNS:
                                   (0919) ;     char that is returned from UART
0D23: 52 FB    MOV   A,[X-5]       (0920) ;
0D25: A0 1A    JZ    0x0D40        (0921) ;  SIDE EFFECTS:
0D27: 7B FB    DEC   [X-5]         (0922) ;    The A and X registers may be modified by this or future implementations
                                   (0923) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0924) ;    the Large Memory Model.  When necessary, it is the calling function's
0D29: 52 FC    MOV   A,[X-4]       (0925) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0926) ;    functions.
                                   (0927) ;
0D2B: 59 FD    MOV   X,[X-3]       (0928) ;    A valid 0x00 character will be ignored, since a 0x00 return value
0D2D: 60 D3    MOV   REG[211],A    (0929) ;    implies a valid character or an error condition occured.
0D2F: 52 00    MOV   A,[X+0]       (0930) ;
0D31: 49 3B 10 TST   REG[59],16
0D34: AF FC    JZ    0x0D31        (0931)  COMP_SERIAL_cReadChar:
0D36: 60 39    MOV   REG[57],A
0D38: 4F       MOV   X,SP          (0932) _COMP_SERIAL_cReadChar:
0D39: 62 D3 07 MOV   REG[211],7    (0933)    RAM_PROLOGUE RAM_USE_CLASS_1
0D3C: 77 FD    INC   [X-3]         (0934)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
0D3E: 8F E4    JMP   0x0D23        (0935)    push A
0D40: 70 3F    AND   F,63
                                   (0936)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (0937)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0D42: 71 C0    OR    F,192         (0938)    pop  A
0D44: 7F       RET                 (0939)    jmp  .RX_NO_VALID_CHAR
                                   (0940) 
                                   (0941) .RX_DATA_RDY:
                                   (0942)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]          
                                   (0943)    swap A,X                                                ; determine if data is valid
                                   (0944) 
                                   (0945)    pop  A                                                  ; Check for errors
                                   (0946)    and  A,(COMP_SERIAL_RX_PARITY_ERROR | COMP_SERIAL_RX_FRAMING_ERROR)
                                   (0947)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                   (0948)    swap A,X                                                ; Put data in A and exit
                                   (0949)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0950)    ret
                                   (0951) 
                                   (0952) .RX_NO_VALID_CHAR:
                                   (0953)    mov A,0x00                                              ; Zero out character
                                   (0954) 
                                   (0955)  End_COMP_SERIAL_cReadChar:
                                   (0956)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (0957)    ret
                                   (0958) .ENDSECTION
                                   (0959) 
                                   (0960) 
                                   (0961) .SECTION
                                   (0962) ;-----------------------------------------------------------------------------
                                   (0963) ;  FUNCTION NAME: COMP_SERIAL_iReadChar
                                   (0964) ;
                                   (0965) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0966) ;  to just set a value in the upper byte if error conditions exists.
                                   (0967) ;
                                   (0968) ;  DESCRIPTION:
                                   (0969) ;     Read character from UART RX port.
                                   (0970) ;-----------------------------------------------------------------------------
                                   (0971) ;
                                   (0972) ;  ARGUMENTS:
                                   (0973) ;      none
                                   (0974) ;
                                   (0975) ;  RETURNS:
                                   (0976) ;     An integer value is returned.  A negative value inplies and error
0D45: 4F       MOV   X,SP          (0977) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0978) ;
0D46: 3D FA 00 CMP   [X-6],0       (0979) ;     Error Codes:
0D49: B0 06    JNZ   0x0D50        (0980) ;        0x80CC    Parity Error
0D4B: 3D FB 00 CMP   [X-5],0       (0981) ;        0x40CC    Overrun Error
0D4E: A0 1D    JZ    0x0D6C        (0982) ;        0x20CC    Framing Error
                                   (0983) ;        0x01CC    No Data available
                                   (0984) ;
0D50: 10       PUSH  X             (0985) ;  SIDE EFFECTS:
0D51: 52 FC    MOV   A,[X-4]       (0986) ;    The A and X registers may be modified by this or future implementations
0D53: 59 FD    MOV   X,[X-3]       (0987) ;    of this function.  The same is true for all RAM page pointer registers in
0D55: 28       ROMX                (0988) ;    the Large Memory Model.  When necessary, it is the calling function's
0D56: 49 3B 10 TST   REG[59],16
0D59: AF FC    JZ    0x0D56        (0989) ;    responsibility to perserve their values across calls to fastcall16 
0D5B: 60 39    MOV   REG[57],A
0D5D: 20       POP   X             (0990) ;    functions.
0D5E: 07 FD 01 ADD   [X-3],1       (0991) ;
0D61: 0F FC 00 ADC   [X-4],0       (0992)  COMP_SERIAL_iReadChar:
0D64: 17 FB 01 SUB   [X-5],1       (0993) _COMP_SERIAL_iReadChar:
0D67: 1F FA 00 SBB   [X-6],0       (0994)    RAM_PROLOGUE RAM_USE_CLASS_1
0D6A: 8F DB    JMP   0x0D46        (0995)    mov  A,REG[COMP_SERIAL_RX_CONTROL_REG]                  ; Get Status of RX
0D6C: 70 3F    AND   F,63
                                   (0996)                                                            ; Mask only errors and data ready
                                   (0997)    and  A,(COMP_SERIAL_RX_ERROR|COMP_SERIAL_RX_REG_FULL)
0D6E: 71 C0    OR    F,192         (0998)    push A
0D70: 7F       RET                 (0999)    and  A,COMP_SERIAL_RX_COMPLETE                          ; Check if a character is ready
                                   (1000)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                   (1001)    pop  A
                                   (1002)    or   A,COMP_SERIAL_RX_NO_DATA                           ; Add no data flag
                                   (1003)    swap A,X
                                   (1004)    jmp  End_COMP_SERIAL_iReadChar
                                   (1005) 
                                   (1006) .RX_GET_DATA:
                                   (1007)    pop  A
                                   (1008)    and  A,COMP_SERIAL_RX_ERROR
                                   (1009)    swap A,X
                                   (1010)    mov  A,REG[COMP_SERIAL_RX_BUFFER_REG ]                  ; Read data first, then
                                   (1011)                                                            ; determine if data is valid
                                   (1012) 
                                   (1013)  End_COMP_SERIAL_iReadChar:
                                   (1014)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1015)    ret
                                   (1016) .ENDSECTION
                                   (1017) 
                                   (1018) 
                                   (1019) .SECTION
                                   (1020) ;-----------------------------------------------------------------------------
                                   (1021) ;  FUNCTION NAME: COMP_SERIAL_PutString
                                   (1022) ;
                                   (1023) ;  DESCRIPTION:
                                   (1024) ;     Send String out through UART TX port.
                                   (1025) ;-----------------------------------------------------------------------------
                                   (1026) ;
                                   (1027) ;  ARGUMENTS:
                                   (1028) ;     Pointer to String
0D71: 08       PUSH  A             (1029) ;     A has MSB of string address
0D72: 10       PUSH  X             (1030) ;     X has LSB of string address
0D73: 28       ROMX                (1031) ;
0D74: A0 0B    JZ    0x0D80        (1032) ;  RETURNS:
0D76: 9F 56    CALL  0x0CCE        (1033) ;     none
0D78: 20       POP   X             (1034) ;
0D79: 18       POP   A             (1035) ;  SIDE EFFECTS:
0D7A: 75       INC   X             (1036) ;    The A and X registers may be modified by this or future implementations
0D7B: DF F5    JNC   0x0D71        (1037) ;    of this function.  The same is true for all RAM page pointer registers in
0D7D: 74       INC   A             (1038) ;    the Large Memory Model.  When necessary, it is the calling function's
0D7E: 8F F2    JMP   0x0D71        (1039) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1040) ;    functions.
                                   (1041) ;          
                                   (1042) ;    Currently only the page pointer registers listed below are modified: 
0D80: 38 FE    ADD   SP,254        (1043) ;          IDX_PP
                                   (1044) ;
0D82: 7F       RET                 (1045)  COMP_SERIAL_PutString:
                                   (1046) _COMP_SERIAL_PutString:
                                   (1047)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1048)    RAM_SETPAGE_IDX A
                                   (1049) .PutStringLoop:
                                   (1050)    mov   A,[X]                                   ; Get value pointed to by X
                                   (1051)    jz    End_PutString                           ; Check for end of string
                                   (1052)    call  COMP_SERIAL_PutChar                     ; Send character to Tx port
                                   (1053)    inc   X                                       ; Advance pointer to next character
                                   (1054)    jmp   .PutStringLoop                          ; Get next character
                                   (1055) 
                                   (1056) End_PutString:
                                   (1057)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1058)    ret
                                   (1059) .ENDSECTION
                                   (1060)     
                                   (1061) .SECTION
                                   (1062) ;-----------------------------------------------------------------------------
                                   (1063) ;  FUNCTION NAME: COMP_SERIAL_Write
                                   (1064) ;
                                   (1065) ;  DESCRIPTION:
                                   (1066) ;     Send String of length X to serial port
                                   (1067) ;-----------------------------------------------------------------------------
                                   (1068) ;
                                   (1069) ;  ARGUMENTS:
                                   (1070) ;     Pointer to String
                                   (1071) ;     [SP-5] Count of characters to send
                                   (1072) ;     [SP-4] has MSB of string address
0D83: 50 0D    MOV   A,13          (1073) ;     [SP-3] has LSB of string address
0D85: 9F 47    CALL  0x0CCE        (1074) ;
0D87: 50 0A    MOV   A,10          (1075) ;  RETURNS:
0D89: 9F 43    CALL  0x0CCE        (1076) ;     none
                                   (1077) ;
0D8B: 7F       RET                 (1078) ;  SIDE EFFECTS:
                                   (1079) ;    The A and X registers may be modified by this or future implementations
                                   (1080) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1082) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1083) ;    functions.
                                   (1084) ;          
                                   (1085) ;    Currently only the page pointer registers listed below are modified: 
                                   (1086) ;          IDX_PP
                                   (1087) ;
                                   (1088) CNT_LEN:    equ -5                               ; Length of data to send
                                   (1089) STR_MSB:    equ -4                               ; MSB pointer of string 
                                   (1090) STR_LSB:    equ -3                               ; LSB pointer of string 
                                   (1091) 
                                   (1092)  COMP_SERIAL_Write:
                                   (1093) _COMP_SERIAL_Write:
                                   (1094)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1095)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
                                   (1096)    mov   X, SP                                   ; Establish the frame pointer 
                                   (1097) 
                                   (1098) .NextByteLoop:
                                   (1099)    mov   A, [X+CNT_LEN]                          ; End of the string?
                                   (1100)    jz    .End_Write                              ;   Yes, prepare to exit
                                   (1101)    dec   [X+CNT_LEN]                             ; Decrement counter
                                   (1102) 
                                   (1103)    IF SYSTEM_LARGE_MEMORY_MODEL
                                   (1104)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                   (1105)    ENDIF
                                   (1106) 
                                   (1107)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                   (1108)    RAM_SETPAGE_IDX A                             ; switch index pages
                                   (1109)    mov   A, [X]                                  ; Grab the data
                                   (1110)    InLinePutChar A                               ; Put data in empty TX buf reg
                                   (1111)    mov   X, SP                                   ; Recover frame pointer
                                   (1112)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
                                   (1113)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
                                   (1114)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                   (1115) 
                                   (1116) .End_Write:
                                   (1117)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1118)    ret
                                   (1119) .ENDSECTION
                                   (1120)     
0D8C: 62 D0 00 MOV   REG[208],0    (1121) 
0D8F: 55 05 00 MOV   [5],0         (1122) .SECTION
0D92: 62 D0 00 MOV   REG[208],0    (1123) ;-----------------------------------------------------------------------------
0D95: 55 04 00 MOV   [4],0         (1124) ;  FUNCTION NAME: COMP_SERIAL_CWrite
0D98: 26 03 00 AND   [3],0         (1125) ;
0D9B: 62 D0 00 MOV   REG[208],0    (1126) ;             WARNING WARNING NOT COMPLETE
0D9E: 55 9E 00 MOV   [TIMEOUT+2],0 (1127) ;
                                   (1128) ;  DESCRIPTION:
0DA1: 7F       RET                 (1129) ;     Send String of length X to serial port
                                   (1130) ;-----------------------------------------------------------------------------
                                   (1131) ;
                                   (1132) ;  ARGUMENTS:
                                   (1133) ;     [SP-4] MSB of Count of character to send
                                   (1134) ;     [SP-3] LSB of Count of character to send
                                   (1135) ;     [SP-2] has MSB of string address
                                   (1136) ;     [SP-1] has LSB of string address
                                   (1137) ;
                                   (1138) ;  RETURNS:
                                   (1139) ;     none
                                   (1140) ;
                                   (1141) ;  SIDE EFFECTS:
                                   (1142) ;    The A and X registers may be modified by this or future implementations
                                   (1143) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1144) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1145) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1146) ;    functions.
                                   (1147) ;
                                   (1148) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                   (1149) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                   (1150) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (1151) CSTR_LSB:   equ -3           ; LSB pointer of string
                                   (1152) 
                                   (1153)  COMP_SERIAL_CWrite:
                                   (1154) _COMP_SERIAL_CWrite:
                                   (1155)    RAM_PROLOGUE RAM_USE_CLASS_2
                                   (1156)    mov   X,SP
                                   (1157) .CW_Loop:
                                   (1158)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
                                   (1159)    jnz   .CW_WRITEIT
                                   (1160)    cmp   [X+CLEN_LSB],0x00
                                   (1161)    jz    .End_CWrite                        ; Leave if done
                                   (1162) 
                                   (1163) .CW_WRITEIT:                                
0DA2: 62 D0 00 MOV   REG[208],0    (1164)    push  X                                  ; Save frame pointer
0DA5: 51 03    MOV   A,[3]         (1165)    mov   A,[X+CSTR_MSB]
0DA7: 21 01    AND   A,1           (1166)    mov   X,[X+CSTR_LSB]
                                   (1167)    romx                                     ; Get character from ROM
0DA9: 7F       RET                 (1168)    InLinePutChar A                          ; Put data in empty TX buf reg
                                   (1169)    pop   X                                  ; Restore frame pointer
                                   (1170)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
                                   (1171)    adc   [X+CSTR_MSB],0
                                   (1172)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
                                   (1173)    sbb   [X+CLEN_MSB],0x00
                                   (1174)    jmp   .CW_Loop
                                   (1175) 
                                   (1176) .End_CWrite:
                                   (1177)    RAM_EPILOGUE RAM_USE_CLASS_2
                                   (1178)    ret
                                   (1179) .ENDSECTION
                                   (1180) 
                                   (1181) 
                                   (1182) .SECTION
                                   (1183) ;-----------------------------------------------------------------------------
                                   (1184) ;  FUNCTION NAME: COMP_SERIAL_CPutString
                                   (1185) ;
                                   (1186) ;  DESCRIPTION:
                                   (1187) ;     Send String out through UART TX port.
                                   (1188) ;-----------------------------------------------------------------------------
                                   (1189) ;
                                   (1190) ;  ARGUMENTS:
                                   (1191) ;     Pointer to String
                                   (1192) ;     A has MSB of string address
                                   (1193) ;     X has LSB of string address
                                   (1194) ;
                                   (1195) ;  RETURNS:
                                   (1196) ;     none
                                   (1197) ;
                                   (1198) ;  SIDE EFFECTS:
                                   (1199) ;    The A and X registers may be modified by this or future implementations
                                   (1200) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1202) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1203) ;    functions.
                                   (1204) ;
                                   (1205)  COMP_SERIAL_CPutString:
                                   (1206) _COMP_SERIAL_CPutString:
                                   (1207)    RAM_PROLOGUE RAM_USE_CLASS_1
0DAA: 62 D0 00 MOV   REG[208],0    (1208)    push  A                                       ; Store ROM pointer
0DAD: 51 03    MOV   A,[3]         (1209)    push  X
0DAF: 21 F0    AND   A,240         (1210)    romx                                          ; Get character from ROM
0DB1: 26 03 0F AND   [3],15        (1211)    jz    .End_CPutString
                                   (1212)    call  COMP_SERIAL_PutChar                     ; Print character
0DB4: 7F       RET                 (1213)    pop   X
                                   (1214)    pop   A
                                   (1215)    inc   X                                       ; Inc LSB of pointer
                                   (1216)    jnc   COMP_SERIAL_CPutString                  ; Check for carry
                                   (1217)    inc   A                                       ; Inc MSB of pointer
                                   (1218)    jmp   COMP_SERIAL_CPutString
                                   (1219) 
                                   (1220) 
                                   (1221) .End_CPutString:
                                   (1222)    add   SP, -2
                                   (1223)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1224)    ret
                                   (1225) .ENDSECTION
                                   (1226) 
                                   (1227) 
                                   (1228) .SECTION
                                   (1229) ;-----------------------------------------------------------------------------
                                   (1230) ;  FUNCTION NAME: COMP_SERIAL_PutCRLF
                                   (1231) ;
                                   (1232) ;  DESCRIPTION:
                                   (1233) ;     Send a CR and LF
                                   (1234) ;-----------------------------------------------------------------------------
                                   (1235) ;
                                   (1236) ;  ARGUMENTS:
                                   (1237) ;     none.
                                   (1238) ;
                                   (1239) ;  RETURNS:
                                   (1240) ;     none.
                                   (1241) ;
                                   (1242) ;  SIDE EFFECTS:
0DB5: 62 D0 00 MOV   REG[208],0    (1243) ;    The A and X registers may be modified by this or future implementations
0DB8: 51 04    MOV   A,[4]         (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
0DBA: 7F       RET                 (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1247) ;    functions.
                                   (1248) ;
                                   (1249)  COMP_SERIAL_PutCRLF:
                                   (1250) _COMP_SERIAL_PutCRLF:
                                   (1251)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (1252)    mov  A,0x0D                        ; Send CR
                                   (1253)    call COMP_SERIAL_PutChar
                                   (1254)    mov  A,0x0A                        ; Send LF
                                   (1255)    call COMP_SERIAL_PutChar
                                   (1256)    RAM_EPILOGUE RAM_USE_CLASS_1
                                   (1257)    ret
                                   (1258) .ENDSECTION
                                   (1259) 
                                   (1260) 
                                   (1261) IF (COMP_SERIAL_RXBUF_ENABLE)
                                   (1262) ;=============================================================================
                                   (1263) ;=============================================================================
                                   (1264) ;
                                   (1265) ;     Command Buffer commands
                                   (1266) ;
                                   (1267) ;=============================================================================
                                   (1268) ;=============================================================================
                                   (1269) 
                                   (1270) .SECTION
                                   (1271) ;-----------------------------------------------------------------------------
                                   (1272) ;  FUNCTION NAME: COMP_SERIAL_CmdReset
                                   (1273) ;
                                   (1274) ;  DESCRIPTION:
                                   (1275) ;     Reset command string and status flags
                                   (1276) ;-----------------------------------------------------------------------------
                                   (1277) ;
                                   (1278) ;  ARGUMENTS:
                                   (1279) ;     none.
                                   (1280) ;
                                   (1281) ;  RETURNS:
                                   (1282) ;     none.
                                   (1283) ;
                                   (1284) ;  SIDE EFFECTS:
                                   (1285) ;    The A and X registers may be modified by this or future implementations
                                   (1286) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1287) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1288) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1289) ;    functions.
                                   (1290) ;          
                                   (1291) ;    Currently only the page pointer registers listed below are modified: 
                                   (1292) ;          CUR_PP
                                   (1293) ;
                                   (1294) ;  THEORY of OPERATION or PROCEDURE:
                                   (1295) ;     Clear the command buffer, command counter, and flag.
                                   (1296) ;
                                   (1297)  COMP_SERIAL_CmdReset:
                                   (1298) _COMP_SERIAL_CmdReset:
                                   (1299)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1300)    RAM_SETPAGE_CUR >COMP_SERIAL_aRxBuffer
0DBB: 70 BF    AND   F,191         (1301)    mov [COMP_SERIAL_aRxBuffer], 0x00
                                   (1302)    RAM_SETPAGE_CUR >COMP_SERIAL_bRxCnt
0DBD: 62 D0 00 MOV   REG[208],0    (1303)    mov [COMP_SERIAL_bRxCnt], 0x00
0DC0: 50 05    MOV   A,5           (1304)    and [COMP_SERIAL_fStatus], 0x00
0DC2: 02 9E    ADD   A,[TIMEOUT+2] (1305)    RAM_SETPAGE_CUR >ptrParam
0DC4: 5C       MOV   X,A           (1306)    mov [ptrParam],0x00
0DC5: 62 D3 00 MOV   REG[211],0    (1307)    RAM_EPILOGUE RAM_USE_CLASS_4
0DC8: 52 00    MOV   A,[X+0]       (1308)    ret
0DCA: B0 04    JNZ   0x0DCF        (1309) .ENDSECTION
0DCC: 10       PUSH  X             (1310) 
0DCD: 80 33    JMP   0x0E01        (1311) 
                                   (1312) .SECTION
                                   (1313) ;-----------------------------------------------------------------------------
                                   (1314) ;  FUNCTION NAME: COMP_SERIAL_bCmdCheck
0DCF: 39 2C    CMP   A,44          (1315) ;
0DD1: B0 11    JNZ   0x0DE3        (1316) ;  DESCRIPTION:
0DD3: 75       INC   X             (1317) ;     Check to see if valid command in buffer.
0DD4: 76 9E    INC   [TIMEOUT+2]   (1318) ;-----------------------------------------------------------------------------
0DD6: 52 00    MOV   A,[X+0]       (1319) ;
0DD8: 3C 9E 3F CMP   [TIMEOUT+2],63(1320) ;  ARGUMENTS:
0DDB: BF F3    JNZ   0x0DCF        (1321) ;     none.
                                   (1322) ;
                                   (1323) ;  RETURNS:
0DDD: 10       PUSH  X             (1324) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1325) ;                     Returns non-zero value in A if command is valid.
0DDE: 56 00 00 MOV   [X+0],0       (1326) ;
0DE1: 80 1F    JMP   0x0E01        (1327) ;  SIDE EFFECTS:
                                   (1328) ;    The A and X registers may be modified by this or future implementations
                                   (1329) ;    of this function.  The same is true for all RAM page pointer registers in
0DE3: 10       PUSH  X             (1330) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1331) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1332) ;    functions.
0DE4: 75       INC   X             (1333) ;          
0DE5: 76 9E    INC   [TIMEOUT+2]   (1334) ;    Currently only the page pointer registers listed below are modified: 
0DE7: 3C 9E 3F CMP   [TIMEOUT+2],63(1335) ;          CUR_PP
0DEA: AF F3    JZ    0x0DDE        (1336) ;
0DEC: 52 00    MOV   A,[X+0]       (1337) ;  THEORY of OPERATION or PROCEDURE:
0DEE: A0 12    JZ    0x0E01        (1338) ;     Read the status and control register.
0DF0: 39 2C    CMP   A,44          (1339) ;
0DF2: BF F1    JNZ   0x0DE4        (1340)  COMP_SERIAL_bCmdCheck:
0DF4: 56 00 00 MOV   [X+0],0       (1341) _COMP_SERIAL_bCmdCheck:
0DF7: 76 9E    INC   [TIMEOUT+2]   (1342)    RAM_PROLOGUE RAM_USE_CLASS_4
0DF9: 3C 9E 3F CMP   [TIMEOUT+2],63(1343)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
0DFC: B0 04    JNZ   0x0E01        (1344)    mov A,  [COMP_SERIAL_fStatus]
0DFE: 55 9E 3F MOV   [TIMEOUT+2],63(1345)    and A, COMP_SERIAL_RX_BUF_CMDTERM             ; Mask off Command status
                                   (1346)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1347)    ret
0E01: 20       POP   X             (1348) .ENDSECTION
0E02: 10       PUSH  X             (1349)     
0E03: 3D 00 00 CMP   [X+0],0       (1350) 
0E06: B0 0B    JNZ   0x0E12        (1351) .SECTION
0E08: 20       POP   X             (1352) ;-----------------------------------------------------------------------------
0E09: 57 00    MOV   X,0           (1353) ;  FUNCTION NAME: COMP_SERIAL_bErrCheck
0E0B: 50 00    MOV   A,0           (1354) ;
0E0D: 70 3F    AND   F,63
0E0F: 71 C0    OR    F,192         (1355) ;  DESCRIPTION:
                                   (1356) ;     Check to see if an error has occured since last CmdReset
0E11: 7F       RET                 (1357) ;-----------------------------------------------------------------------------
                                   (1358) ;
                                   (1359) ;  ARGUMENTS:
0E12: 20       POP   X             (1360) ;     none.
0E13: 50 00    MOV   A,0           (1361) ;
0E15: 70 3F    AND   F,63
0E17: 71 C0    OR    F,192         (1362) ;  RETURNS:
                                   (1363) ;     BYTE  fStatus - Status of command receive buffer.
0E19: 7F       RET                 (1364) ;                     Returns non-zero value in A if command is valid.
                                   (1365) ;           0x80 => Parity Error
                                   (1366) ;           0x40 => OverRun Error
                                   (1367) ;           0x20 => Framing Error
                                   (1368) ;           0x10 => Software Buffer OverRun
                                   (1369) ;
                                   (1370) ;  SIDE EFFECTS:
                                   (1371) ;    The A and X registers may be modified by this or future implementations
                                   (1372) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1373) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1374) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1375) ;    functions.
                                   (1376) ;          
                                   (1377) ;    Currently only the page pointer registers listed below are modified: 
                                   (1378) ;          CUR_PP
                                   (1379) ;     Error Status is clear when read.
                                   (1380) ;
                                   (1381) ;  THEORY of OPERATION or PROCEDURE:
                                   (1382) ;     Read RX buffer error status and clear status
                                   (1383) ;
                                   (1384)  COMP_SERIAL_bErrCheck:
                                   (1385) _COMP_SERIAL_bErrCheck:
                                   (1386)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (1387)    RAM_SETPAGE_CUR >COMP_SERIAL_fStatus
                                   (1388)    mov A,  [COMP_SERIAL_fStatus]
                                   (1389)    and A, COMP_SERIAL_RX_BUF_ERROR               ; Mask off Error status
                                   (1390)    and [COMP_SERIAL_fStatus], ~COMP_SERIAL_RX_BUF_ERROR
                                   (1391)    RAM_EPILOGUE RAM_USE_CLASS_4
                                   (1392)    ret
                                   (1393) .ENDSECTION
                                   (1394) 
0E1A: 62 D0 00 MOV   REG[208],0    (1395) .SECTION
0E1D: 50 05    MOV   A,5           (1396) ;-----------------------------------------------------------------------------
0E1F: 02 9E    ADD   A,[TIMEOUT+2] (1397) ;  FUNCTION NAME: COMP_SERIAL_bCmdLength
0E21: 5C       MOV   X,A           (1398) ;
0E22: 50 00    MOV   A,0           (1399) ;  DESCRIPTION:
                                   (1400) ;     Get length of command string
__text_start:
_main:
  angle                --> X+4
  softwareReset        --> X+2
  tempValue            --> X+0
0E25: 10       PUSH  X             (1401) ;-----------------------------------------------------------------------------
0E26: 4F       MOV   X,SP
0E27: 38 08    ADD   SP,8

FILE: C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
(0104) //----------------------------------------------------------------------------
0E29: 56 01 00 MOV   [X+1],0
0E2C: 56 00 00 MOV   [X+0],0
(0105) // C main line
0E2F: 56 03 00 MOV   [X+3],0
0E32: 56 02 00 MOV   [X+2],0
(0106) //----------------------------------------------------------------------------
0E35: 56 04 00 MOV   [X+4],0
0E38: 56 05 00 MOV   [X+5],0
0E3B: 56 06 00 MOV   [X+6],0
0E3E: 56 07 00 MOV   [X+7],0
(0107) 
(0108) #include <m8c.h>        	// part specific constants and macros
0E41: 62 D0 00 MOV   REG[208],0
0E44: 55 99 00 MOV   [NUM_MODULES+1],0
0E47: 55 98 00 MOV   [NUM_MODULES],0
(0109) #include "PSoCAPI.h"    	// PSoC API definitions for all User Modules
(0110) #include "psocdynamic.h"
0E4A: 71 01    OR    F,1
(0111) #include <stdlib.h>
0E4C: 43 E0 20 OR    REG[224],32
(0112) #include <string.h>
(0113) #pragma interrupt_handler TX_TIMEOUT_ISR
(0114) #pragma interrupt_handler RX_TIMEOUT_ISR
(0115) 
(0116) // These defines are used as parameters of the configToggle function.
(0117) // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
0E4F: 7C 1A BA LCALL _initializeSlaves
0E52: 80 0F    JMP   0x0E62
(0118) #define		PC_MODE						(2)
(0119) #define		RX_MODE						(1)
(0120) #define		TX_MODE						(0)
(0121) 
0E54: 10       PUSH  X
0E55: 7C 0D A2 LCALL 0x0DA2
0E58: 62 D0 00 MOV   REG[208],0
0E5B: 20       POP   X
0E5C: 39 00    CMP   A,0
0E5E: A0 03    JZ    0x0E62
(0122) // These defines are used as comparisons to find what port the newest module is connected to.
(0123) #define		PORT_1						('1')
0E60: 94 2F    CALL  _decodeTransmission
0E62: 8F F1    JMP   0x0E54
0E64: 38 F8    ADD   SP,248
0E66: 20       POP   X
0E67: 8F FF    JMP   0x0E67
(0124) #define		PORT_2						('2')
(0125) #define		PORT_3						('3')
(0126) #define		PORT_4						('4')
(0127) 
(0128) // These defines are used as transmission indicators.
(0129) #define		START_TRANSMIT				(252)	// Indicates the beginning of a transmission.
_pingModule:
  response             --> X+0
  module_id            --> X-5
0E69: 10       PUSH  X
0E6A: 4F       MOV   X,SP
0E6B: 38 02    ADD   SP,2
(0130) #define		END_TRANSMIT				(253)	// Indicates the end of a transmission.
0E6D: 56 01 00 MOV   [X+1],0
0E70: 56 00 00 MOV   [X+0],0
(0131) #define		HELLO_BYTE					(200)	// Indicates master is ready to talk.
(0132) #define		ID_ASSIGNMENT				(201)	// Indicates an ID assignment from the master.
0E73: 50 00    MOV   A,0
0E75: 08       PUSH  A
0E76: 08       PUSH  A
0E77: 7C 19 38 LCALL _configToggle
0E7A: 38 FE    ADD   SP,254
(0133) #define		ID_ASSIGN_OK				(202)	// Indicates an ID assignment is acknowledged.
(0134) #define		PING						(203)	// Indicates that someone is pinging someone else.
(0135) #define		CLEAR_CONFIG				(204)	// Indicates that the master is asking for a config clear.
0E7C: 10       PUSH  X
0E7D: 50 FC    MOV   A,252
0E7F: 7C 09 83 LCALL 0x0983
0E82: 20       POP   X
(0136) #define		CONFIG_CLEARED				(205)	// Indicates that a module has cleared its own config.
0E83: 10       PUSH  X
0E84: 50 FC    MOV   A,252
0E86: 7C 09 83 LCALL 0x0983
0E89: 20       POP   X
(0137) #define		MASTER_ID					(0)		// The master node's ID.
0E8A: 10       PUSH  X
0E8B: 50 00    MOV   A,0
0E8D: 7C 09 83 LCALL 0x0983
0E90: 20       POP   X
(0138) #define		BROADCAST					(254)	// The broadcast ID for talking to all nodes.
0E91: 62 D0 00 MOV   REG[208],0
0E94: 52 FC    MOV   A,[X-4]
0E96: 10       PUSH  X
0E97: 7C 09 83 LCALL 0x0983
0E9A: 20       POP   X
(0139) #define		BLANK_MODULE_ID				(251)	// This is the ID of an unconfigured module.
0E9B: 10       PUSH  X
0E9C: 50 CB    MOV   A,203
0E9E: 7C 09 83 LCALL 0x0983
0EA1: 20       POP   X
(0140) 
0EA2: 10       PUSH  X
0EA3: 50 FD    MOV   A,253
0EA5: 7C 09 83 LCALL 0x0983
0EA8: 20       POP   X
(0141) // These defines are used to fill in the instruction we are using on the servo.
0EA9: 10       PUSH  X
0EAA: 50 FD    MOV   A,253
0EAC: 7C 09 83 LCALL 0x0983
0EAF: 20       POP   X
(0142) #define		PING_SERVO					(1)		// This is the instruction number for ping.
(0143) #define		READ_SERVO					(2)		// This is the instruction number for a read.
(0144) #define		WRITE_SERVO					(3)		// This is the instruction number for a write.
0EB0: 10       PUSH  X
0EB1: 7C 09 56 LCALL 0x0956
0EB4: 62 D0 00 MOV   REG[208],0
0EB7: 20       POP   X
0EB8: 53 97    MOV   [__r0],A
0EBA: 47 97 20 TST   [__r0],32
0EBD: AF F2    JZ    0x0EB0
(0145) #define		RESET_SERVO					(6)		// This is the instruction to reset the servo EEPROM.
(0146) 
0EBF: 7C 1B EF LCALL _xmitWait
(0147) // These defines are used for transmission timing.
(0148) #define 	RX_TIMEOUT_DURATION			(5)		// This is receive wait time in 1 ms units.
0EC2: 50 00    MOV   A,0
0EC4: 08       PUSH  A
0EC5: 50 01    MOV   A,1
0EC7: 08       PUSH  A
0EC8: 7C 19 38 LCALL _configToggle
0ECB: 38 FE    ADD   SP,254
(0149) 
(0150) // These defines are used for the initial probing stage. This module first waits until it hears
0ECD: 10       PUSH  X
0ECE: 7C 0A 14 LCALL 0x0A14
0ED1: 20       POP   X
(0151) // a byte on the bus. Once this happens, this module waits until there is a BUS_CLEAR_TIME
0ED2: 62 D0 00 MOV   REG[208],0
0ED5: 55 9D 00 MOV   [TIMEOUT+1],0
0ED8: 55 9C 00 MOV   [TIMEOUT],0
(0152) // period of no communication before attempting to probe for modules and assign ID numbers.
0EDB: 10       PUSH  X
0EDC: 7C 0A 10 LCALL 0x0A10
0EDF: 20       POP   X
0EE0: 80 3C    JMP   0x0F1D
(0153) // MAX_TIMEOUTS is the number of failed attempts allowed to find an unconfigured module after
(0154) // the first module is found. After all of this, this module goes into a PC listening mode.
(0155) #define		BUS_CLEAR_TIME				(100)	// Min time after a byte to assume bus is clear at boot.
(0156) #define		BOOT_TIMEOUT				(300)	// If nothing is heard by this time, we start the init anyway.
0EE2: 92 B9    CALL  _validTransmission
0EE4: 62 D0 00 MOV   REG[208],0
0EE7: 3C 97 00 CMP   [__r0],0
0EEA: B0 06    JNZ   0x0EF1
0EEC: 3C 96 00 CMP   [__r1],0
0EEF: A0 2D    JZ    0x0F1D
(0157) #define		MAX_TIMEOUTS				(10)	// Number of timeouts allowed before hello mode exit.
(0158) 
0EF1: 62 D0 00 MOV   REG[208],0
0EF4: 3C A2 CB CMP   [COMMAND_TYPE],203
0EF7: B0 25    JNZ   0x0F1D
(0159) // This is the maximum number of allowable modules per branch out from the master
(0160) #define		MAX_MODULES					(250)
(0161) 
0EF9: 62 D0 00 MOV   REG[208],0
0EFC: 3C A0 00 CMP   [COMMAND_DESTINATION],0
0EFF: B0 1D    JNZ   0x0F1D
(0162) #define		SERVO_START					(255)
(0163) 
0F01: 62 D0 00 MOV   REG[208],0
0F04: 51 A1    MOV   A,[COMMAND_SOURCE]
0F06: 62 D0 00 MOV   REG[208],0
0F09: 53 96    MOV   [__r1],A
0F0B: 50 00    MOV   A,0
0F0D: 3B FB    CMP   A,[X-5]
0F0F: B0 0D    JNZ   0x0F1D
0F11: 51 96    MOV   A,[__r1]
0F13: 3B FC    CMP   A,[X-4]
0F15: B0 07    JNZ   0x0F1D
(0164) // This function receives a mode identifier as a parameter and toggles the
(0165) // system configuration between receive and transmit modes for half duplex UART.
0F17: 56 01 01 MOV   [X+1],1
0F1A: 56 00 00 MOV   [X+0],0
0F1D: 62 D0 00 MOV   REG[208],0
0F20: 51 9D    MOV   A,[TIMEOUT+1]
0F22: 11 05    SUB   A,5
0F24: 51 9C    MOV   A,[TIMEOUT]
0F26: 31 80    XOR   A,128
0F28: 19 80    SBB   A,128
0F2A: D0 0B    JNC   0x0F36
0F2C: 3D 00 00 CMP   [X+0],0
0F2F: B0 06    JNZ   0x0F36
0F31: 3D 01 00 CMP   [X+1],0
0F34: AF AD    JZ    0x0EE2
(0166) void configToggle(int mode);
(0167) 
(0168) // This function pings the index passed to it. Returns 1 on success, 0 on fail.
(0169) int pingModule(int module_id);
(0170) 
(0171) // This function assigns an ID to a module.
(0172) int assignID(int assigned_ID);
0F36: 10       PUSH  X
0F37: 7C 0A 14 LCALL 0x0A14
0F3A: 20       POP   X
(0173) 
0F3B: 62 D0 00 MOV   REG[208],0
0F3E: 55 9D 00 MOV   [TIMEOUT+1],0
0F41: 55 9C 00 MOV   [TIMEOUT],0
(0174) int validTransmission(void);
0F44: 10       PUSH  X
0F45: 7C 0A 10 LCALL 0x0A10
0F48: 20       POP   X
(0175) 
(0176) void decodeTransmission(void);
0F49: 62 D0 00 MOV   REG[208],0
0F4C: 52 01    MOV   A,[X+1]
0F4E: 53 96    MOV   [__r1],A
0F50: 52 00    MOV   A,[X+0]
0F52: 53 97    MOV   [__r0],A
0F54: 38 FE    ADD   SP,254
0F56: 20       POP   X
0F57: 7F       RET   
(0177) 
(0178) void busListen(void);
(0179) 
(0180) void sayHello(void);
_assignID:
  success              --> X+0
  assigned_ID          --> X-5
0F58: 10       PUSH  X
0F59: 4F       MOV   X,SP
0F5A: 38 02    ADD   SP,2
(0181) 
0F5C: 56 01 00 MOV   [X+1],0
0F5F: 56 00 00 MOV   [X+0],0
(0182) void servoInstruction(char id, char length, char instruction, char address, char value);
(0183) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
0F62: 50 00    MOV   A,0
0F64: 08       PUSH  A
0F65: 08       PUSH  A
0F66: 7C 19 38 LCALL _configToggle
0F69: 38 FE    ADD   SP,254
(0184) 
(0185) int clearConfig(int module_id);
(0186) // This function checks the current mode and unloads the configuration for that mode.
0F6B: 10       PUSH  X
0F6C: 50 FC    MOV   A,252
0F6E: 7C 09 83 LCALL 0x0983
0F71: 20       POP   X
(0187) void unloadAllConfigs(void);
0F72: 10       PUSH  X
0F73: 50 FC    MOV   A,252
0F75: 7C 09 83 LCALL 0x0983
0F78: 20       POP   X
(0188) // This function unloads the configuration corresponding to the number passed to it.
0F79: 10       PUSH  X
0F7A: 50 00    MOV   A,0
0F7C: 7C 09 83 LCALL 0x0983
0F7F: 20       POP   X
(0189) void unloadConfig(int config_num);
0F80: 10       PUSH  X
0F81: 50 FB    MOV   A,251
0F83: 7C 09 83 LCALL 0x0983
0F86: 20       POP   X
(0190) // Initialization function for the slave module controllers.
0F87: 10       PUSH  X
0F88: 50 C9    MOV   A,201
0F8A: 7C 09 83 LCALL 0x0983
0F8D: 20       POP   X
(0191) void initializeSlaves(void);
0F8E: 62 D0 00 MOV   REG[208],0
0F91: 52 FC    MOV   A,[X-4]
0F93: 10       PUSH  X
0F94: 7C 09 83 LCALL 0x0983
0F97: 20       POP   X
(0192) // Static wait time of approximately 50 microseconds for use after starting a transmission.
0F98: 10       PUSH  X
0F99: 50 FD    MOV   A,253
0F9B: 7C 09 83 LCALL 0x0983
0F9E: 20       POP   X
(0193) void xmitWait(void);
0F9F: 10       PUSH  X
0FA0: 50 FD    MOV   A,253
0FA2: 7C 09 83 LCALL 0x0983
0FA5: 20       POP   X
(0194) 
(0195) // This flag is set if there is a timeout.
(0196) int TIMEOUT;
0FA6: 10       PUSH  X
0FA7: 7C 09 56 LCALL 0x0956
0FAA: 62 D0 00 MOV   REG[208],0
0FAD: 20       POP   X
0FAE: 53 97    MOV   [__r0],A
0FB0: 47 97 20 TST   [__r0],32
0FB3: AF F2    JZ    0x0FA6
(0197) 
(0198) int NUM_MODULES;			// Stores the number of modules that have been discovered.
0FB5: 7C 1B EF LCALL _xmitWait
(0199) char COMMAND_SOURCE;		// Stores who the current command is from.
(0200) char COMMAND_DESTINATION;	// Stores who the current command is for.
0FB8: 50 00    MOV   A,0
0FBA: 08       PUSH  A
0FBB: 50 01    MOV   A,1
0FBD: 08       PUSH  A
0FBE: 7C 19 38 LCALL _configToggle
0FC1: 38 FE    ADD   SP,254
(0201) char COMMAND_TYPE;			// Stores the type of command that was just read.
(0202) char PARAM[10];				// Stores a parameters that accompanies the command (if any).
0FC3: 10       PUSH  X
0FC4: 7C 0A 14 LCALL 0x0A14
0FC7: 20       POP   X
(0203) int STATE;					// Stores the current configuration state of the system.
0FC8: 62 D0 00 MOV   REG[208],0
0FCB: 55 9D 00 MOV   [TIMEOUT+1],0
0FCE: 55 9C 00 MOV   [TIMEOUT],0
(0204) 
0FD1: 10       PUSH  X
0FD2: 7C 0A 10 LCALL 0x0A10
0FD5: 20       POP   X
0FD6: 80 3C    JMP   0x1013
(0205) void main()
(0206) {	
(0207) 	int tempValue = 0;
(0208) 	int softwareReset = 0;
0FD8: 91 C3    CALL  _validTransmission
0FDA: 62 D0 00 MOV   REG[208],0
0FDD: 3C 97 00 CMP   [__r0],0
0FE0: B0 06    JNZ   0x0FE7
0FE2: 3C 96 00 CMP   [__r1],0
0FE5: A0 2D    JZ    0x1013
(0209) 	float angle = 0;
(0210) 	
0FE7: 62 D0 00 MOV   REG[208],0
0FEA: 3C A2 CA CMP   [COMMAND_TYPE],202
0FED: B0 25    JNZ   0x1013
(0211) 	NUM_MODULES = 0;
(0212) 	
(0213) 	M8C_EnableGInt;			// Turn on global interrupts for the transmission timeout timer.
0FEF: 62 D0 00 MOV   REG[208],0
0FF2: 3C A0 00 CMP   [COMMAND_DESTINATION],0
0FF5: B0 1D    JNZ   0x1013
(0214) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); //activate GPIO ISR
(0215) 	
0FF7: 62 D0 00 MOV   REG[208],0
0FFA: 51 A1    MOV   A,[COMMAND_SOURCE]
0FFC: 62 D0 00 MOV   REG[208],0
0FFF: 53 96    MOV   [__r1],A
1001: 50 00    MOV   A,0
1003: 3B FB    CMP   A,[X-5]
1005: B0 0D    JNZ   0x1013
1007: 51 96    MOV   A,[__r1]
1009: 3B FC    CMP   A,[X-4]
100B: B0 07    JNZ   0x1013
(0216) 	// Sit and wait for the worst case setup time to occur.
(0217) 	// while(TIMEOUT < BOOT_TIMEOUT) { }
100D: 56 01 01 MOV   [X+1],1
1010: 56 00 00 MOV   [X+0],0
1013: 62 D0 00 MOV   REG[208],0
1016: 51 9D    MOV   A,[TIMEOUT+1]
1018: 11 05    SUB   A,5
101A: 51 9C    MOV   A,[TIMEOUT]
101C: 31 80    XOR   A,128
101E: 19 80    SBB   A,128
1020: D0 0B    JNC   0x102C
1022: 3D 00 00 CMP   [X+0],0
1025: B0 06    JNZ   0x102C
1027: 3D 01 00 CMP   [X+1],0
102A: AF AD    JZ    0x0FD8
(0218) 		
(0219) 	// Initialize all of the slave modules.
(0220) 	initializeSlaves();
(0221) 	
(0222) 	while(1)
(0223) 	{	
(0224) 		if(COMP_SERIAL_bCmdCheck())
(0225) 		{
(0226) 			decodeTransmission();
(0227) 		}
(0228) 	}
(0229) }
(0230) 
102C: 10       PUSH  X
102D: 7C 0A 14 LCALL 0x0A14
1030: 20       POP   X
(0231) int pingModule(int module_id)
1031: 62 D0 00 MOV   REG[208],0
1034: 55 9D 00 MOV   [TIMEOUT+1],0
1037: 55 9C 00 MOV   [TIMEOUT],0
(0232) {
103A: 10       PUSH  X
103B: 7C 0A 10 LCALL 0x0A10
103E: 20       POP   X
(0233) 	int response = 0;
(0234) 	
103F: 62 D0 00 MOV   REG[208],0
1042: 52 01    MOV   A,[X+1]
1044: 53 96    MOV   [__r1],A
1046: 52 00    MOV   A,[X+0]
1048: 53 97    MOV   [__r0],A
104A: 38 FE    ADD   SP,254
104C: 20       POP   X
104D: 7F       RET   
(0235) 	configToggle(TX_MODE);	// Toggle into TX mode.
(0236) 			
(0237) 	// Transmit a hello.
(0238) 	TRANSMIT_PutChar(START_TRANSMIT);
_clearConfig:
  response             --> X+0
  module_id            --> X-5
104E: 10       PUSH  X
104F: 4F       MOV   X,SP
1050: 38 02    ADD   SP,2
(0239) 	TRANSMIT_PutChar(START_TRANSMIT);
1052: 56 01 00 MOV   [X+1],0
1055: 56 00 00 MOV   [X+0],0
(0240) 	TRANSMIT_PutChar(MASTER_ID);
(0241) 	TRANSMIT_PutChar(module_id);
1058: 50 00    MOV   A,0
105A: 08       PUSH  A
105B: 08       PUSH  A
105C: 7C 19 38 LCALL _configToggle
105F: 38 FE    ADD   SP,254
(0242) 	TRANSMIT_PutChar(PING);
(0243) 	TRANSMIT_PutChar(END_TRANSMIT);
(0244) 	TRANSMIT_PutChar(END_TRANSMIT);
1061: 10       PUSH  X
1062: 50 FC    MOV   A,252
1064: 7C 09 83 LCALL 0x0983
1067: 20       POP   X
(0245) 	
1068: 10       PUSH  X
1069: 50 FC    MOV   A,252
106B: 7C 09 83 LCALL 0x0983
106E: 20       POP   X
(0246) 	// Wait for the transmission to finish.
106F: 10       PUSH  X
1070: 50 00    MOV   A,0
1072: 7C 09 83 LCALL 0x0983
1075: 20       POP   X
(0247) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
1076: 62 D0 00 MOV   REG[208],0
1079: 52 FC    MOV   A,[X-4]
107B: 10       PUSH  X
107C: 7C 09 83 LCALL 0x0983
107F: 20       POP   X
(0248) 	
1080: 10       PUSH  X
1081: 50 CC    MOV   A,204
1083: 7C 09 83 LCALL 0x0983
1086: 20       POP   X
(0249) 	xmitWait();
1087: 10       PUSH  X
1088: 50 FD    MOV   A,253
108A: 7C 09 83 LCALL 0x0983
108D: 20       POP   X
(0250) 	
108E: 10       PUSH  X
108F: 50 FD    MOV   A,253
1091: 7C 09 83 LCALL 0x0983
1094: 20       POP   X
(0251) 	configToggle(RX_MODE);	// Listen for the response.
(0252) 	
(0253) 	RX_TIMEOUT_Stop();
1095: 10       PUSH  X
1096: 7C 09 56 LCALL 0x0956
1099: 62 D0 00 MOV   REG[208],0
109C: 20       POP   X
109D: 53 97    MOV   [__r0],A
109F: 47 97 20 TST   [__r0],32
10A2: AF F2    JZ    0x1095
(0254) 	TIMEOUT = 0;
(0255) 	RX_TIMEOUT_Start();
10A4: 7C 1B EF LCALL _xmitWait
(0256) 	
(0257) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
10A7: 50 00    MOV   A,0
10A9: 08       PUSH  A
10AA: 50 01    MOV   A,1
10AC: 08       PUSH  A
10AD: 7C 19 38 LCALL _configToggle
10B0: 38 FE    ADD   SP,254
(0258) 	{
(0259) 		if(validTransmission())
10B2: 3D FB 00 CMP   [X-5],0
10B5: B0 06    JNZ   0x10BC
10B7: 3D FC FE CMP   [X-4],254
10BA: A0 7D    JZ    0x1138
(0260) 		{
(0261) 			if(COMMAND_TYPE == PING)	// This is the response we are looking for.
10BC: 10       PUSH  X
10BD: 7C 0A 14 LCALL 0x0A14
10C0: 20       POP   X
(0262) 			{
10C1: 62 D0 00 MOV   REG[208],0
10C4: 55 9D 00 MOV   [TIMEOUT+1],0
10C7: 55 9C 00 MOV   [TIMEOUT],0
(0263) 				// If this is for me, check who it was from.
10CA: 10       PUSH  X
10CB: 7C 0A 10 LCALL 0x0A10
10CE: 20       POP   X
10CF: 80 3C    JMP   0x110C
(0264) 				if(COMMAND_DESTINATION == MASTER_ID)
(0265) 				{
(0266) 					if(COMMAND_SOURCE == module_id)
(0267) 					{
10D1: 90 CA    CALL  _validTransmission
10D3: 62 D0 00 MOV   REG[208],0
10D6: 3C 97 00 CMP   [__r0],0
10D9: B0 06    JNZ   0x10E0
10DB: 3C 96 00 CMP   [__r1],0
10DE: A0 2D    JZ    0x110C
(0268) 						response = 1;
(0269) 					}
10E0: 62 D0 00 MOV   REG[208],0
10E3: 3C A2 CD CMP   [COMMAND_TYPE],205
10E6: B0 25    JNZ   0x110C
(0270) 				}
(0271) 			}
(0272) 		}
10E8: 62 D0 00 MOV   REG[208],0
10EB: 3C A0 00 CMP   [COMMAND_DESTINATION],0
10EE: B0 1D    JNZ   0x110C
(0273) 	}
(0274) 	
10F0: 62 D0 00 MOV   REG[208],0
10F3: 51 A1    MOV   A,[COMMAND_SOURCE]
10F5: 62 D0 00 MOV   REG[208],0
10F8: 53 96    MOV   [__r1],A
10FA: 50 00    MOV   A,0
10FC: 3B FB    CMP   A,[X-5]
10FE: B0 0D    JNZ   0x110C
1100: 51 96    MOV   A,[__r1]
1102: 3B FC    CMP   A,[X-4]
1104: B0 07    JNZ   0x110C
(0275) 	RX_TIMEOUT_Stop();
(0276) 	TIMEOUT = 0;
1106: 56 01 01 MOV   [X+1],1
1109: 56 00 00 MOV   [X+0],0
110C: 62 D0 00 MOV   REG[208],0
110F: 51 9D    MOV   A,[TIMEOUT+1]
1111: 11 05    SUB   A,5
1113: 51 9C    MOV   A,[TIMEOUT]
1115: 31 80    XOR   A,128
1117: 19 80    SBB   A,128
1119: D0 0B    JNC   0x1125
111B: 3D 00 00 CMP   [X+0],0
111E: B0 06    JNZ   0x1125
1120: 3D 01 00 CMP   [X+1],0
1123: AF AD    JZ    0x10D1
(0277) 	RX_TIMEOUT_Start();
(0278) 	
(0279) 	return response;
(0280) }
(0281) 
(0282) int assignID(int assigned_ID)
(0283) {
1125: 10       PUSH  X
1126: 7C 0A 14 LCALL 0x0A14
1129: 20       POP   X
(0284) 	int success = 0;		// Stores 0 on fail, 1 on success.
112A: 62 D0 00 MOV   REG[208],0
112D: 55 9D 00 MOV   [TIMEOUT+1],0
1130: 55 9C 00 MOV   [TIMEOUT],0
(0285) 	
1133: 10       PUSH  X
1134: 7C 0A 10 LCALL 0x0A10
1137: 20       POP   X
(0286) 	configToggle(TX_MODE);	// Switch to TX mode.
(0287) 
(0288) 	// Transmit the assignment.
1138: 62 D0 00 MOV   REG[208],0
113B: 52 01    MOV   A,[X+1]
113D: 53 96    MOV   [__r1],A
113F: 52 00    MOV   A,[X+0]
1141: 53 97    MOV   [__r0],A
1143: 38 FE    ADD   SP,254
1145: 20       POP   X
1146: 7F       RET   
(0289) 	TRANSMIT_PutChar(START_TRANSMIT);
(0290) 	TRANSMIT_PutChar(START_TRANSMIT);
(0291) 	TRANSMIT_PutChar(MASTER_ID);
(0292) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
(0293) 	TRANSMIT_PutChar(ID_ASSIGNMENT);
(0294) 	TRANSMIT_PutChar(assigned_ID);
_sayHello:
1147: 50 00    MOV   A,0
1149: 08       PUSH  A
114A: 08       PUSH  A
114B: 97 EB    CALL  _configToggle
114D: 38 FE    ADD   SP,254
(0295) 	TRANSMIT_PutChar(END_TRANSMIT);
(0296) 	TRANSMIT_PutChar(END_TRANSMIT);
(0297) 	
114F: 10       PUSH  X
1150: 50 FC    MOV   A,252
1152: 7C 09 83 LCALL 0x0983
1155: 20       POP   X
(0298) 	// Wait for the transmission to finish.
1156: 10       PUSH  X
1157: 50 FC    MOV   A,252
1159: 7C 09 83 LCALL 0x0983
115C: 20       POP   X
(0299) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
115D: 10       PUSH  X
115E: 50 00    MOV   A,0
1160: 7C 09 83 LCALL 0x0983
1163: 20       POP   X
(0300) 	
1164: 10       PUSH  X
1165: 50 FB    MOV   A,251
1167: 7C 09 83 LCALL 0x0983
116A: 20       POP   X
(0301) 	xmitWait();
116B: 10       PUSH  X
116C: 50 C8    MOV   A,200
116E: 7C 09 83 LCALL 0x0983
1171: 20       POP   X
(0302) 	
1172: 10       PUSH  X
1173: 50 FD    MOV   A,253
1175: 7C 09 83 LCALL 0x0983
1178: 20       POP   X
(0303) 	configToggle(RX_MODE);	// Switch back to receive mode.
1179: 10       PUSH  X
117A: 50 FD    MOV   A,253
117C: 7C 09 83 LCALL 0x0983
117F: 20       POP   X
(0304) 	
(0305) 	RX_TIMEOUT_Stop();
(0306) 	TIMEOUT = 0;
1180: 10       PUSH  X
1181: 7C 09 56 LCALL 0x0956
1184: 62 D0 00 MOV   REG[208],0
1187: 20       POP   X
1188: 53 97    MOV   [__r0],A
118A: 47 97 20 TST   [__r0],32
118D: AF F2    JZ    0x1180
(0307) 	RX_TIMEOUT_Start();
(0308) 	
118F: 7C 1B EF LCALL _xmitWait
(0309) 	while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
(0310) 	{
1192: 50 00    MOV   A,0
1194: 08       PUSH  A
1195: 50 01    MOV   A,1
1197: 08       PUSH  A
1198: 97 9E    CALL  _configToggle
119A: 38 FE    ADD   SP,254
119C: 7F       RET   
(0311) 		if(validTransmission())
(0312) 		{
(0313) 			if(COMMAND_TYPE == ID_ASSIGN_OK)	// This is the response we are looking for.
(0314) 			{
(0315) 				// If this is for me, check who it was from.
_validTransmission:
  valid_transmit       --> X+3
  i                    --> X+1
  tempByte             --> X+0
119D: 10       PUSH  X
119E: 4F       MOV   X,SP
119F: 38 05    ADD   SP,5
(0316) 				if(COMMAND_DESTINATION == MASTER_ID)
11A1: 56 04 00 MOV   [X+4],0
11A4: 56 03 00 MOV   [X+3],0
(0317) 				{
11A7: 56 02 00 MOV   [X+2],0
11AA: 56 01 00 MOV   [X+1],0
(0318) 					if(COMMAND_SOURCE == assigned_ID)
11AD: 56 00 00 MOV   [X+0],0
11B0: 80 C2    JMP   0x1273
(0319) 					{
(0320) 						success = 1;
(0321) 					}
(0322) 				}
11B2: 10       PUSH  X
11B3: 7C 0A FF LCALL 0x0AFF
11B6: 62 D0 00 MOV   REG[208],0
11B9: 20       POP   X
11BA: 39 FC    CMP   A,252
11BC: B0 B6    JNZ   0x1273
(0323) 			}
11BE: 80 A5    JMP   0x1264
(0324) 		}
(0325) 	}
(0326) 	
11C0: 10       PUSH  X
11C1: 7C 0A FF LCALL 0x0AFF
11C4: 62 D0 00 MOV   REG[208],0
11C7: 20       POP   X
11C8: 39 FC    CMP   A,252
11CA: B0 99    JNZ   0x1264
(0327) //	LCD_1_Start();
11CC: 80 88    JMP   0x1255
(0328) //	LCD_1_Position(0,0);
(0329) //	LCD_1_PrHexInt(NUM_MODULES);
(0330) //	LCD_1_Position(0,5);
11CE: 10       PUSH  X
11CF: 7C 0A FF LCALL 0x0AFF
11D2: 20       POP   X
11D3: 54 00    MOV   [X+0],A
11D5: 39 00    CMP   A,0
11D7: A0 7D    JZ    0x1255
(0331) //	LCD_1_PrCString("Modules!");
(0332) 	
11D9: 52 00    MOV   A,[X+0]
11DB: 62 D0 00 MOV   REG[208],0
11DE: 53 A1    MOV   [COMMAND_SOURCE],A
11E0: 80 65    JMP   0x1246
(0333) 	RX_TIMEOUT_Stop();
(0334) 	TIMEOUT = 0;
(0335) 	RX_TIMEOUT_Start();
(0336) 	
11E2: 10       PUSH  X
11E3: 7C 0A FF LCALL 0x0AFF
11E6: 62 D0 00 MOV   REG[208],0
11E9: 20       POP   X
11EA: 54 00    MOV   [X+0],A
11EC: 39 00    CMP   A,0
11EE: A0 57    JZ    0x1246
(0337) 	return success;
(0338) }
11F0: 3D 00 C8 CMP   [X+0],200
11F3: C0 52    JC    0x1246
(0339) 
(0340) int clearConfig(int module_id)
11F5: 52 00    MOV   A,[X+0]
11F7: 62 D0 00 MOV   REG[208],0
11FA: 53 A2    MOV   [COMMAND_TYPE],A
11FC: 80 3A    JMP   0x1237
(0341) {
(0342) 	int response = 0;
(0343) 	
(0344) 	configToggle(TX_MODE);	// Toggle into TX mode.
11FE: 10       PUSH  X
11FF: 7C 0A FF LCALL 0x0AFF
1202: 62 D0 00 MOV   REG[208],0
1205: 20       POP   X
1206: 54 00    MOV   [X+0],A
1208: 39 00    CMP   A,0
120A: A0 2C    JZ    0x1237
(0345) 			
(0346) 	// Transmit a hello.
120C: 3D 00 FD CMP   [X+0],253
120F: A0 18    JZ    0x1228
(0347) 	TRANSMIT_PutChar(START_TRANSMIT);
(0348) 	TRANSMIT_PutChar(START_TRANSMIT);
1211: 52 02    MOV   A,[X+2]
1213: 01 85    ADD   A,133
1215: 53 96    MOV   [__r1],A
1217: 52 01    MOV   A,[X+1]
1219: 09 00    ADC   A,0
121B: 60 D5    MOV   REG[213],A
121D: 52 00    MOV   A,[X+0]
121F: 3F 96    MVI   [__r1],A
(0349) 	TRANSMIT_PutChar(MASTER_ID);
1221: 77 02    INC   [X+2]
1223: 0F 01 00 ADC   [X+1],0
(0350) 	TRANSMIT_PutChar(module_id);
1226: 80 10    JMP   0x1237
(0351) 	TRANSMIT_PutChar(CLEAR_CONFIG);
(0352) 	TRANSMIT_PutChar(END_TRANSMIT);
(0353) 	TRANSMIT_PutChar(END_TRANSMIT);
1228: 56 04 01 MOV   [X+4],1
122B: 56 03 00 MOV   [X+3],0
(0354) 	
122E: 62 D0 00 MOV   REG[208],0
1231: 55 9D 05 MOV   [TIMEOUT+1],5
1234: 55 9C 00 MOV   [TIMEOUT],0
1237: 62 D0 00 MOV   REG[208],0
123A: 51 9D    MOV   A,[TIMEOUT+1]
123C: 11 05    SUB   A,5
123E: 51 9C    MOV   A,[TIMEOUT]
1240: 31 80    XOR   A,128
1242: 19 80    SBB   A,128
1244: CF B9    JC    0x11FE
1246: 62 D0 00 MOV   REG[208],0
1249: 51 9D    MOV   A,[TIMEOUT+1]
124B: 11 05    SUB   A,5
124D: 51 9C    MOV   A,[TIMEOUT]
124F: 31 80    XOR   A,128
1251: 19 80    SBB   A,128
1253: CF 8E    JC    0x11E2
1255: 62 D0 00 MOV   REG[208],0
1258: 51 9D    MOV   A,[TIMEOUT+1]
125A: 11 05    SUB   A,5
125C: 51 9C    MOV   A,[TIMEOUT]
125E: 31 80    XOR   A,128
1260: 19 80    SBB   A,128
1262: CF 6B    JC    0x11CE
1264: 62 D0 00 MOV   REG[208],0
1267: 51 9D    MOV   A,[TIMEOUT+1]
1269: 11 05    SUB   A,5
126B: 51 9C    MOV   A,[TIMEOUT]
126D: 31 80    XOR   A,128
126F: 19 80    SBB   A,128
1271: CF 4E    JC    0x11C0
1273: 62 D0 00 MOV   REG[208],0
1276: 51 9D    MOV   A,[TIMEOUT+1]
1278: 11 05    SUB   A,5
127A: 51 9C    MOV   A,[TIMEOUT]
127C: 31 80    XOR   A,128
127E: 19 80    SBB   A,128
1280: CF 31    JC    0x11B2
(0355) 	// Wait for the transmission to finish.
(0356) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
(0357) 	
(0358) 	xmitWait();
(0359) 	
(0360) 	configToggle(RX_MODE);	// Listen for the response.
(0361) 	
(0362) 	if(module_id != BROADCAST)
(0363) 	{
(0364) 		RX_TIMEOUT_Stop();
(0365) 		TIMEOUT = 0;
(0366) 		RX_TIMEOUT_Start();
(0367) 		
(0368) 		while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
1282: 62 D0 00 MOV   REG[208],0
1285: 52 04    MOV   A,[X+4]
1287: 53 96    MOV   [__r1],A
1289: 52 03    MOV   A,[X+3]
128B: 53 97    MOV   [__r0],A
128D: 38 FB    ADD   SP,251
128F: 20       POP   X
1290: 7F       RET   
(0369) 		{
(0370) 			if(validTransmission())
(0371) 			{
(0372) 				if(COMMAND_TYPE == CONFIG_CLEARED)	// This is the response we are looking for.
(0373) 				{
_decodeTransmission:
  tempByte             --> X+7
  angle                --> X+5
  ID                   --> X+4
  total                --> X+2
  param                --> X+0
1291: 10       PUSH  X
1292: 4F       MOV   X,SP
1293: 38 08    ADD   SP,8
(0374) 					// If this is for me, check who it was from.
(0375) 					if(COMMAND_DESTINATION == MASTER_ID)
(0376) 					{
(0377) 						if(COMMAND_SOURCE == module_id)
(0378) 						{
1295: 56 03 00 MOV   [X+3],0
1298: 56 02 00 MOV   [X+2],0
(0379) 							response = 1;
(0380) 						}
129B: 10       PUSH  X
129C: 7C 0D BB LCALL 0x0DBB
129F: 62 D0 00 MOV   REG[208],0
12A2: 53 97    MOV   [__r0],A
12A4: 5A 96    MOV   [__r1],X
12A6: 20       POP   X
12A7: 51 96    MOV   A,[__r1]
12A9: 54 01    MOV   [X+1],A
12AB: 51 97    MOV   A,[__r0]
12AD: 54 00    MOV   [X+0],A
12AF: 3C 97 00 CMP   [__r0],0
12B2: B0 06    JNZ   0x12B9
12B4: 3C 96 00 CMP   [__r1],0
12B7: A5 06    JZ    0x17BE
(0381) 					}
(0382) 				}
12B9: 62 D0 00 MOV   REG[208],0
12BC: 52 01    MOV   A,[X+1]
12BE: 53 96    MOV   [__r1],A
12C0: 52 00    MOV   A,[X+0]
12C2: 60 D4    MOV   REG[212],A
12C4: 3E 96    MVI   A,[__r1]
12C6: 53 96    MOV   [__r1],A
12C8: 55 97 00 MOV   [__r0],0
12CB: 3C 97 00 CMP   [__r0],0
12CE: B0 05    JNZ   0x12D4
12D0: 39 6E    CMP   A,110
12D2: A0 0E    JZ    0x12E1
12D4: 62 D0 00 MOV   REG[208],0
12D7: 3C 97 00 CMP   [__r0],0
12DA: B0 3A    JNZ   0x1315
12DC: 3C 96 4E CMP   [__r1],78
12DF: B0 35    JNZ   0x1315
(0383) 			}
(0384) 		}
12E1: 10       PUSH  X
12E2: 7C 0D 8C LCALL 0x0D8C
12E5: 20       POP   X
(0385) 		
12E6: 50 00    MOV   A,0
12E8: 08       PUSH  A
12E9: 50 0A    MOV   A,10
12EB: 08       PUSH  A
12EC: 62 D0 00 MOV   REG[208],0
12EF: 51 98    MOV   A,[NUM_MODULES]
12F1: 08       PUSH  A
12F2: 51 99    MOV   A,[NUM_MODULES+1]
12F4: 08       PUSH  A
12F5: 52 00    MOV   A,[X+0]
12F7: 08       PUSH  A
12F8: 52 01    MOV   A,[X+1]
12FA: 08       PUSH  A
12FB: 7C 1E 56 LCALL _itoa
12FE: 38 FA    ADD   SP,250
(0386) 		RX_TIMEOUT_Stop();
1300: 10       PUSH  X
1301: 52 00    MOV   A,[X+0]
1303: 08       PUSH  A
1304: 52 01    MOV   A,[X+1]
1306: 5C       MOV   X,A
1307: 18       POP   A
1308: 7C 0D 0B LCALL 0x0D0B
130B: 20       POP   X
(0387) 		TIMEOUT = 0;
130C: 10       PUSH  X
130D: 50 0A    MOV   A,10
130F: 7C 0C CE LCALL 0x0CCE
1312: 20       POP   X
(0388) 		RX_TIMEOUT_Start();
1313: 84 AA    JMP   0x17BE
(0389) 	}
1315: 62 D0 00 MOV   REG[208],0
1318: 52 01    MOV   A,[X+1]
131A: 53 96    MOV   [__r1],A
131C: 52 00    MOV   A,[X+0]
131E: 60 D4    MOV   REG[212],A
1320: 3E 96    MVI   A,[__r1]
1322: 53 96    MOV   [__r1],A
1324: 55 97 00 MOV   [__r0],0
1327: 3C 97 00 CMP   [__r0],0
132A: B0 05    JNZ   0x1330
132C: 39 77    CMP   A,119
132E: A0 0E    JZ    0x133D
1330: 62 D0 00 MOV   REG[208],0
1333: 3C 97 00 CMP   [__r0],0
1336: B1 6B    JNZ   0x14A2
1338: 3C 96 57 CMP   [__r1],87
133B: B1 66    JNZ   0x14A2
(0390) 	
(0391) 	return response;
133D: 10       PUSH  X
133E: 7C 0D BB LCALL 0x0DBB
1341: 62 D0 00 MOV   REG[208],0
1344: 53 97    MOV   [__r0],A
1346: 5A 96    MOV   [__r1],X
1348: 20       POP   X
1349: 51 96    MOV   A,[__r1]
134B: 54 01    MOV   [X+1],A
134D: 51 97    MOV   A,[__r0]
134F: 54 00    MOV   [X+0],A
1351: 3C 97 00 CMP   [__r0],0
1354: B0 06    JNZ   0x135B
1356: 3C 96 00 CMP   [__r1],0
1359: A4 64    JZ    0x17BE
(0392) }
(0393) 
135B: 52 00    MOV   A,[X+0]
135D: 08       PUSH  A
135E: 52 01    MOV   A,[X+1]
1360: 08       PUSH  A
1361: 7C 1D 15 LCALL _atoi
1364: 38 FE    ADD   SP,254
1366: 62 D0 00 MOV   REG[208],0
1369: 51 96    MOV   A,[__r1]
136B: 54 04    MOV   [X+4],A
(0394) // This function transmits a hello message.
136D: 10       PUSH  X
136E: 7C 0D BB LCALL 0x0DBB
1371: 62 D0 00 MOV   REG[208],0
1374: 53 97    MOV   [__r0],A
1376: 5A 96    MOV   [__r1],X
1378: 20       POP   X
1379: 51 96    MOV   A,[__r1]
137B: 54 01    MOV   [X+1],A
137D: 51 97    MOV   A,[__r0]
137F: 54 00    MOV   [X+0],A
1381: 3C 97 00 CMP   [__r0],0
1384: B0 06    JNZ   0x138B
1386: 3C 96 00 CMP   [__r1],0
1389: A4 34    JZ    0x17BE
(0395) void sayHello(void)
(0396) {
138B: 62 D0 00 MOV   REG[208],0
138E: 52 01    MOV   A,[X+1]
1390: 53 96    MOV   [__r1],A
1392: 52 00    MOV   A,[X+0]
1394: 60 D4    MOV   REG[212],A
1396: 3E 96    MVI   A,[__r1]
1398: 53 96    MOV   [__r1],A
139A: 55 97 00 MOV   [__r0],0
139D: 3C 97 00 CMP   [__r0],0
13A0: B0 05    JNZ   0x13A6
13A2: 39 61    CMP   A,97
13A4: A0 0E    JZ    0x13B3
13A6: 62 D0 00 MOV   REG[208],0
13A9: 3C 97 00 CMP   [__r0],0
13AC: B0 89    JNZ   0x1436
13AE: 3C 96 41 CMP   [__r1],65
13B1: B0 84    JNZ   0x1436
(0397) 	configToggle(TX_MODE);				// Toggle into TX mode.
(0398) 			
13B3: 10       PUSH  X
13B4: 7C 0D BB LCALL 0x0DBB
13B7: 62 D0 00 MOV   REG[208],0
13BA: 53 97    MOV   [__r0],A
13BC: 5A 96    MOV   [__r1],X
13BE: 20       POP   X
13BF: 51 96    MOV   A,[__r1]
13C1: 54 01    MOV   [X+1],A
13C3: 51 97    MOV   A,[__r0]
13C5: 54 00    MOV   [X+0],A
13C7: 3C 97 00 CMP   [__r0],0
13CA: B0 06    JNZ   0x13D1
13CC: 3C 96 00 CMP   [__r1],0
13CF: A3 EE    JZ    0x17BE
(0399) 	// Transmit a hello.
(0400) 	TRANSMIT_PutChar(START_TRANSMIT);
13D1: 10       PUSH  X
13D2: 7C 0D 8C LCALL 0x0D8C
13D5: 20       POP   X
(0401) 	TRANSMIT_PutChar(START_TRANSMIT);
13D6: 52 00    MOV   A,[X+0]
13D8: 08       PUSH  A
13D9: 52 01    MOV   A,[X+1]
13DB: 08       PUSH  A
13DC: 7C 1D 15 LCALL _atoi
13DF: 38 FE    ADD   SP,254
13E1: 62 D0 00 MOV   REG[208],0
13E4: 51 96    MOV   A,[__r1]
13E6: 54 03    MOV   [X+3],A
13E8: 51 97    MOV   A,[__r0]
13EA: 54 02    MOV   [X+2],A
(0402) 	TRANSMIT_PutChar(MASTER_ID);
13EC: 50 01    MOV   A,1
13EE: 08       PUSH  A
13EF: 50 00    MOV   A,0
13F1: 08       PUSH  A
13F2: 52 02    MOV   A,[X+2]
13F4: 08       PUSH  A
13F5: 52 03    MOV   A,[X+3]
13F7: 08       PUSH  A
13F8: 7C 1C 83 LCALL __divmod_16X16_16
13FB: 38 FE    ADD   SP,254
13FD: 18       POP   A
13FE: 53 96    MOV   [__r1],A
1400: 18       POP   A
1401: 51 96    MOV   A,[__r1]
1403: 54 05    MOV   [X+5],A
(0403) 	TRANSMIT_PutChar(BLANK_MODULE_ID);
1405: 50 01    MOV   A,1
1407: 08       PUSH  A
1408: 50 00    MOV   A,0
140A: 08       PUSH  A
140B: 52 02    MOV   A,[X+2]
140D: 08       PUSH  A
140E: 52 03    MOV   A,[X+3]
1410: 08       PUSH  A
1411: 7C 1C 83 LCALL __divmod_16X16_16
1414: 18       POP   A
1415: 53 96    MOV   [__r1],A
1417: 18       POP   A
1418: 38 FE    ADD   SP,254
141A: 51 96    MOV   A,[__r1]
141C: 54 06    MOV   [X+6],A
(0404) 	TRANSMIT_PutChar(HELLO_BYTE);
141E: 52 06    MOV   A,[X+6]
1420: 08       PUSH  A
1421: 52 05    MOV   A,[X+5]
1423: 08       PUSH  A
1424: 50 1E    MOV   A,30
1426: 08       PUSH  A
1427: 50 03    MOV   A,3
1429: 08       PUSH  A
142A: 50 05    MOV   A,5
142C: 08       PUSH  A
142D: 52 04    MOV   A,[X+4]
142F: 08       PUSH  A
1430: 94 55    CALL  _longServoInstruction
1432: 38 FA    ADD   SP,250
(0405) 	TRANSMIT_PutChar(END_TRANSMIT);
(0406) 	TRANSMIT_PutChar(END_TRANSMIT);
1434: 83 89    JMP   0x17BE
(0407) 	
1436: 62 D0 00 MOV   REG[208],0
1439: 52 01    MOV   A,[X+1]
143B: 53 96    MOV   [__r1],A
143D: 52 00    MOV   A,[X+0]
143F: 60 D4    MOV   REG[212],A
1441: 3E 96    MVI   A,[__r1]
1443: 53 96    MOV   [__r1],A
1445: 55 97 00 MOV   [__r0],0
1448: 3C 97 00 CMP   [__r0],0
144B: B0 05    JNZ   0x1451
144D: 39 70    CMP   A,112
144F: A0 0E    JZ    0x145E
1451: 62 D0 00 MOV   REG[208],0
1454: 3C 97 00 CMP   [__r0],0
1457: B3 66    JNZ   0x17BE
1459: 3C 96 50 CMP   [__r1],80
145C: B3 61    JNZ   0x17BE
(0408) 	// Wait for the transmission to finish.
(0409) 	while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
145E: 10       PUSH  X
145F: 7C 0D BB LCALL 0x0DBB
1462: 62 D0 00 MOV   REG[208],0
1465: 53 97    MOV   [__r0],A
1467: 5A 96    MOV   [__r1],X
1469: 20       POP   X
146A: 51 96    MOV   A,[__r1]
146C: 54 01    MOV   [X+1],A
146E: 51 97    MOV   A,[__r0]
1470: 54 00    MOV   [X+0],A
1472: 3C 97 00 CMP   [__r0],0
1475: B0 06    JNZ   0x147C
1477: 3C 96 00 CMP   [__r1],0
147A: A3 43    JZ    0x17BE
(0410) 	
(0411) 	xmitWait();
147C: 10       PUSH  X
147D: 7C 0D 8C LCALL 0x0D8C
1480: 20       POP   X
(0412) 	
1481: 52 00    MOV   A,[X+0]
1483: 08       PUSH  A
1484: 52 01    MOV   A,[X+1]
1486: 08       PUSH  A
1487: 7C 1D 15 LCALL _atoi
148A: 62 D0 00 MOV   REG[208],0
148D: 51 96    MOV   A,[__r1]
148F: 08       PUSH  A
1490: 50 18    MOV   A,24
1492: 08       PUSH  A
1493: 50 03    MOV   A,3
1495: 08       PUSH  A
1496: 50 04    MOV   A,4
1498: 08       PUSH  A
1499: 52 04    MOV   A,[X+4]
149B: 08       PUSH  A
149C: 93 46    CALL  _servoInstruction
149E: 38 F9    ADD   SP,249
(0413) 	configToggle(RX_MODE);				// Listen for the response.
(0414) }
(0415) 
(0416) // This function returns whether or not a valid transmission has been received.
(0417) int validTransmission(void)
14A0: 83 1D    JMP   0x17BE
(0418) {
14A2: 62 D0 00 MOV   REG[208],0
14A5: 52 01    MOV   A,[X+1]
14A7: 53 96    MOV   [__r1],A
14A9: 52 00    MOV   A,[X+0]
14AB: 60 D4    MOV   REG[212],A
14AD: 3E 96    MVI   A,[__r1]
14AF: 53 96    MOV   [__r1],A
14B1: 55 97 00 MOV   [__r0],0
14B4: 3C 97 00 CMP   [__r0],0
14B7: B0 05    JNZ   0x14BD
14B9: 39 72    CMP   A,114
14BB: A0 0E    JZ    0x14CA
14BD: 62 D0 00 MOV   REG[208],0
14C0: 3C 97 00 CMP   [__r0],0
14C3: B2 FA    JNZ   0x17BE
14C5: 3C 96 52 CMP   [__r1],82
14C8: B2 F5    JNZ   0x17BE
(0419) 	int valid_transmit = 0;
(0420) 	int i = 0;
14CA: 10       PUSH  X
14CB: 7C 0D BB LCALL 0x0DBB
14CE: 62 D0 00 MOV   REG[208],0
14D1: 53 97    MOV   [__r0],A
14D3: 5A 96    MOV   [__r1],X
14D5: 20       POP   X
14D6: 51 96    MOV   A,[__r1]
14D8: 54 01    MOV   [X+1],A
14DA: 51 97    MOV   A,[__r0]
14DC: 54 00    MOV   [X+0],A
14DE: 3C 97 00 CMP   [__r0],0
14E1: B0 06    JNZ   0x14E8
14E3: 3C 96 00 CMP   [__r1],0
14E6: A2 D7    JZ    0x17BE
(0421) 	char tempByte = 0;
(0422) 	
14E8: 52 00    MOV   A,[X+0]
14EA: 08       PUSH  A
14EB: 52 01    MOV   A,[X+1]
14ED: 08       PUSH  A
14EE: 7C 1D 15 LCALL _atoi
14F1: 38 FE    ADD   SP,254
14F3: 62 D0 00 MOV   REG[208],0
14F6: 51 96    MOV   A,[__r1]
14F8: 54 04    MOV   [X+4],A
(0423) 	while(TIMEOUT < RX_TIMEOUT_DURATION)
14FA: 10       PUSH  X
14FB: 7C 0D BB LCALL 0x0DBB
14FE: 62 D0 00 MOV   REG[208],0
1501: 53 97    MOV   [__r0],A
1503: 5A 96    MOV   [__r1],X
1505: 20       POP   X
1506: 51 96    MOV   A,[__r1]
1508: 54 01    MOV   [X+1],A
150A: 51 97    MOV   A,[__r0]
150C: 54 00    MOV   [X+0],A
150E: 3C 97 00 CMP   [__r0],0
1511: B0 06    JNZ   0x1518
1513: 3C 96 00 CMP   [__r1],0
1516: A2 A7    JZ    0x17BE
(0424) 	{
(0425) 		if(RECEIVE_cReadChar() == START_TRANSMIT)
1518: 62 D0 00 MOV   REG[208],0
151B: 52 01    MOV   A,[X+1]
151D: 53 96    MOV   [__r1],A
151F: 52 00    MOV   A,[X+0]
1521: 60 D4    MOV   REG[212],A
1523: 3E 96    MVI   A,[__r1]
1525: 53 96    MOV   [__r1],A
1527: 55 97 00 MOV   [__r0],0
152A: 3C 97 00 CMP   [__r0],0
152D: B0 05    JNZ   0x1533
152F: 39 61    CMP   A,97
1531: A0 0E    JZ    0x1540
1533: 62 D0 00 MOV   REG[208],0
1536: 3C 97 00 CMP   [__r0],0
1539: B0 CC    JNZ   0x1606
153B: 3C 96 41 CMP   [__r1],65
153E: B0 C7    JNZ   0x1606
(0426) 		{
(0427) 			while(TIMEOUT < RX_TIMEOUT_DURATION)
1540: 10       PUSH  X
1541: 7C 0D 8C LCALL 0x0D8C
1544: 20       POP   X
(0428) 			{
1545: 50 02    MOV   A,2
1547: 08       PUSH  A
1548: 50 24    MOV   A,36
154A: 08       PUSH  A
154B: 50 02    MOV   A,2
154D: 08       PUSH  A
154E: 50 04    MOV   A,4
1550: 08       PUSH  A
1551: 52 04    MOV   A,[X+4]
1553: 08       PUSH  A
1554: 92 8E    CALL  _servoInstruction
(0429) 				if(RECEIVE_cReadChar() == START_TRANSMIT)
1556: 50 00    MOV   A,0
1558: 08       PUSH  A
1559: 50 01    MOV   A,1
155B: 08       PUSH  A
155C: 93 DA    CALL  _configToggle
155E: 38 F9    ADD   SP,249
1560: 80 94    JMP   0x15F5
(0430) 				{
(0431) 					while(TIMEOUT < RX_TIMEOUT_DURATION)
(0432) 					{
(0433) 						if(tempByte = RECEIVE_cReadChar())
(0434) 						{
1562: 10       PUSH  X
1563: 7C 0A FF LCALL 0x0AFF
1566: 62 D0 00 MOV   REG[208],0
1569: 20       POP   X
156A: 39 FF    CMP   A,255
156C: B0 88    JNZ   0x15F5
(0435) 							COMMAND_SOURCE = tempByte;
(0436) 							
156E: 10       PUSH  X
156F: 7C 0A F7 LCALL 0x0AF7
1572: 62 D0 00 MOV   REG[208],0
1575: 20       POP   X
1576: 39 FF    CMP   A,255
1578: B0 7C    JNZ   0x15F5
(0437) 							while(TIMEOUT < RX_TIMEOUT_DURATION)
(0438) 							{
157A: 10       PUSH  X
157B: 7C 0A F7 LCALL 0x0AF7
157E: 62 D0 00 MOV   REG[208],0
1581: 20       POP   X
1582: 3B 04    CMP   A,[X+4]
1584: B0 70    JNZ   0x15F5
(0439) 								if(tempByte = RECEIVE_cReadChar())
(0440) 								{
1586: 10       PUSH  X
1587: 7C 0A F7 LCALL 0x0AF7
158A: 62 D0 00 MOV   REG[208],0
158D: 20       POP   X
158E: 39 04    CMP   A,4
1590: B0 64    JNZ   0x15F5
(0441) 									if(tempByte >= HELLO_BYTE)
(0442) 									{
1592: 10       PUSH  X
1593: 7C 0A F7 LCALL 0x0AF7
1596: 62 D0 00 MOV   REG[208],0
1599: 20       POP   X
159A: 39 00    CMP   A,0
159C: B0 58    JNZ   0x15F5
(0443) 										COMMAND_TYPE = tempByte;
(0444) 										
159E: 10       PUSH  X
159F: 7C 0A F7 LCALL 0x0AF7
15A2: 62 D0 00 MOV   REG[208],0
15A5: 20       POP   X
15A6: 54 05    MOV   [X+5],A
(0445) 										while(TIMEOUT < RX_TIMEOUT_DURATION)
15A8: 10       PUSH  X
15A9: 7C 0A F7 LCALL 0x0AF7
15AC: 62 D0 00 MOV   REG[208],0
15AF: 20       POP   X
15B0: 54 06    MOV   [X+6],A
(0446) 										{
(0447) 											if(tempByte = RECEIVE_cReadChar())
15B2: 50 00    MOV   A,0
15B4: 08       PUSH  A
15B5: 50 02    MOV   A,2
15B7: 08       PUSH  A
15B8: 93 7E    CALL  _configToggle
(0448) 											{
(0449) 												if(tempByte != END_TRANSMIT)
15BA: 52 05    MOV   A,[X+5]
15BC: 54 03    MOV   [X+3],A
15BE: 52 06    MOV   A,[X+6]
15C0: 54 02    MOV   [X+2],A
(0450) 												{
15C2: 50 00    MOV   A,0
15C4: 08       PUSH  A
15C5: 50 0A    MOV   A,10
15C7: 08       PUSH  A
15C8: 52 02    MOV   A,[X+2]
15CA: 08       PUSH  A
15CB: 52 03    MOV   A,[X+3]
15CD: 08       PUSH  A
15CE: 52 00    MOV   A,[X+0]
15D0: 08       PUSH  A
15D1: 52 01    MOV   A,[X+1]
15D3: 08       PUSH  A
15D4: 7C 1E 56 LCALL _itoa
15D7: 38 F8    ADD   SP,248
(0451) 													PARAM[i] = tempByte;
15D9: 10       PUSH  X
15DA: 52 00    MOV   A,[X+0]
15DC: 08       PUSH  A
15DD: 52 01    MOV   A,[X+1]
15DF: 5C       MOV   X,A
15E0: 18       POP   A
15E1: 7C 0D 0B LCALL 0x0D0B
15E4: 20       POP   X
(0452) 													i++;
15E5: 10       PUSH  X
15E6: 50 0A    MOV   A,10
15E8: 7C 0C CE LCALL 0x0CCE
15EB: 20       POP   X
(0453) 												}
(0454) 												else
15EC: 62 D0 00 MOV   REG[208],0
15EF: 55 9D 05 MOV   [TIMEOUT+1],5
15F2: 55 9C 00 MOV   [TIMEOUT],0
15F5: 62 D0 00 MOV   REG[208],0
15F8: 51 9D    MOV   A,[TIMEOUT+1]
15FA: 11 05    SUB   A,5
15FC: 51 9C    MOV   A,[TIMEOUT]
15FE: 31 80    XOR   A,128
1600: 19 80    SBB   A,128
1602: CF 5F    JC    0x1562
(0455) 												{
(0456) 													valid_transmit = 1;
(0457) 													TIMEOUT = RX_TIMEOUT_DURATION;
(0458) 												}
(0459) 											}
(0460) 										}
(0461) 									}
1604: 81 B9    JMP   0x17BE
(0462) 								}
1606: 62 D0 00 MOV   REG[208],0
1609: 52 01    MOV   A,[X+1]
160B: 53 96    MOV   [__r1],A
160D: 52 00    MOV   A,[X+0]
160F: 60 D4    MOV   REG[212],A
1611: 3E 96    MVI   A,[__r1]
1613: 53 96    MOV   [__r1],A
1615: 55 97 00 MOV   [__r0],0
1618: 3C 97 00 CMP   [__r0],0
161B: B0 05    JNZ   0x1621
161D: 39 70    CMP   A,112
161F: A0 0E    JZ    0x162E
1621: 62 D0 00 MOV   REG[208],0
1624: 3C 97 00 CMP   [__r0],0
1627: B0 A5    JNZ   0x16CD
1629: 3C 96 50 CMP   [__r1],80
162C: B0 A0    JNZ   0x16CD
(0463) 							}
(0464) 						}
162E: 10       PUSH  X
162F: 7C 0D 8C LCALL 0x0D8C
1632: 20       POP   X
(0465) 					}
1633: 50 01    MOV   A,1
1635: 08       PUSH  A
1636: 50 18    MOV   A,24
1638: 08       PUSH  A
1639: 50 02    MOV   A,2
163B: 08       PUSH  A
163C: 50 04    MOV   A,4
163E: 08       PUSH  A
163F: 52 04    MOV   A,[X+4]
1641: 08       PUSH  A
1642: 91 A0    CALL  _servoInstruction
(0466) 				}
1644: 50 00    MOV   A,0
1646: 08       PUSH  A
1647: 50 01    MOV   A,1
1649: 08       PUSH  A
164A: 92 EC    CALL  _configToggle
164C: 38 F9    ADD   SP,249
164E: 80 6D    JMP   0x16BC
(0467) 			}
(0468) 		}
(0469) 	}
(0470) 	
(0471) 	return valid_transmit;
1650: 10       PUSH  X
1651: 7C 0A FF LCALL 0x0AFF
1654: 62 D0 00 MOV   REG[208],0
1657: 20       POP   X
1658: 39 FF    CMP   A,255
165A: B0 61    JNZ   0x16BC
(0472) }
(0473) 
165C: 10       PUSH  X
165D: 7C 0A F7 LCALL 0x0AF7
1660: 62 D0 00 MOV   REG[208],0
1663: 20       POP   X
1664: 39 FF    CMP   A,255
1666: B0 55    JNZ   0x16BC
(0474) // This function decodes the transmission and takes the correct action.
(0475) void decodeTransmission(void)
1668: 10       PUSH  X
1669: 7C 0A F7 LCALL 0x0AF7
166C: 62 D0 00 MOV   REG[208],0
166F: 20       POP   X
1670: 3B 04    CMP   A,[X+4]
1672: B0 49    JNZ   0x16BC
(0476) {
(0477) 	char* param;
1674: 10       PUSH  X
1675: 7C 0A F7 LCALL 0x0AF7
1678: 62 D0 00 MOV   REG[208],0
167B: 20       POP   X
167C: 39 03    CMP   A,3
167E: B0 3D    JNZ   0x16BC
(0478) 	char ID;
(0479) 	char tempByte;
1680: 10       PUSH  X
1681: 7C 0A F7 LCALL 0x0AF7
1684: 62 D0 00 MOV   REG[208],0
1687: 20       POP   X
1688: 39 00    CMP   A,0
168A: B0 31    JNZ   0x16BC
(0480) 	char angle[2];
(0481) 	int total = 0;
168C: 10       PUSH  X
168D: 7C 0A F7 LCALL 0x0AF7
1690: 62 D0 00 MOV   REG[208],0
1693: 20       POP   X
1694: 54 07    MOV   [X+7],A
(0482) 	
(0483) 	if(param = COMP_SERIAL_szGetParam())
1696: 50 00    MOV   A,0
1698: 08       PUSH  A
1699: 50 02    MOV   A,2
169B: 08       PUSH  A
169C: 92 9A    CALL  _configToggle
169E: 38 FE    ADD   SP,254
(0484) 	{
(0485) 		if((param[0] == 'n') || (param[0] == 'N'))
(0486) 		{
16A0: 62 D0 00 MOV   REG[208],0
16A3: 52 07    MOV   A,[X+7]
16A5: 01 30    ADD   A,48
16A7: 10       PUSH  X
16A8: 7C 0C CE LCALL 0x0CCE
16AB: 20       POP   X
(0487) 			COMP_SERIAL_CmdReset();
16AC: 10       PUSH  X
16AD: 50 0A    MOV   A,10
16AF: 7C 0C CE LCALL 0x0CCE
16B2: 20       POP   X
(0488) 			itoa(param,NUM_MODULES,10);
(0489) 			COMP_SERIAL_PutString(param);
16B3: 62 D0 00 MOV   REG[208],0
16B6: 55 9D 05 MOV   [TIMEOUT+1],5
16B9: 55 9C 00 MOV   [TIMEOUT],0
16BC: 62 D0 00 MOV   REG[208],0
16BF: 51 9D    MOV   A,[TIMEOUT+1]
16C1: 11 05    SUB   A,5
16C3: 51 9C    MOV   A,[TIMEOUT]
16C5: 31 80    XOR   A,128
16C7: 19 80    SBB   A,128
16C9: CF 86    JC    0x1650
(0490) 			COMP_SERIAL_PutChar('\n');
(0491) 		}
(0492) 		else if((param[0] == 'w') || (param[0] == 'W'))
(0493) 		{
(0494) 			if(param = COMP_SERIAL_szGetParam())
(0495) 			{
(0496) 				ID = atoi(param);
16CB: 80 F2    JMP   0x17BE
(0497) 				if(param = COMP_SERIAL_szGetParam())
16CD: 62 D0 00 MOV   REG[208],0
16D0: 52 01    MOV   A,[X+1]
16D2: 53 96    MOV   [__r1],A
16D4: 52 00    MOV   A,[X+0]
16D6: 60 D4    MOV   REG[212],A
16D8: 3E 96    MVI   A,[__r1]
16DA: 53 96    MOV   [__r1],A
16DC: 55 97 00 MOV   [__r0],0
16DF: 3C 97 00 CMP   [__r0],0
16E2: B0 05    JNZ   0x16E8
16E4: 39 74    CMP   A,116
16E6: A0 0E    JZ    0x16F5
16E8: 62 D0 00 MOV   REG[208],0
16EB: 3C 97 00 CMP   [__r0],0
16EE: B0 68    JNZ   0x1757
16F0: 3C 96 54 CMP   [__r1],84
16F3: B0 63    JNZ   0x1757
(0498) 				{
(0499) 					if((param[0] == 'a') || (param[0] == 'A'))
16F5: 10       PUSH  X
16F6: 7C 0D 8C LCALL 0x0D8C
16F9: 20       POP   X
(0500) 					{
16FA: 62 D0 00 MOV   REG[208],0
16FD: 52 04    MOV   A,[X+4]
16FF: 53 96    MOV   [__r1],A
1701: 50 00    MOV   A,0
1703: 08       PUSH  A
1704: 51 96    MOV   A,[__r1]
1706: 08       PUSH  A
1707: 7C 0E 69 LCALL _pingModule
170A: 38 FE    ADD   SP,254
170C: 62 D0 00 MOV   REG[208],0
170F: 3C 97 00 CMP   [__r0],0
1712: B0 06    JNZ   0x1719
1714: 3C 96 00 CMP   [__r1],0
1717: A0 A6    JZ    0x17BE
(0501) 						if(param = COMP_SERIAL_szGetParam())
(0502) 						{
1719: 50 00    MOV   A,0
171B: 08       PUSH  A
171C: 50 02    MOV   A,2
171E: 08       PUSH  A
171F: 92 17    CALL  _configToggle
(0503) 							COMP_SERIAL_CmdReset();
(0504) 							total = atoi(param);
1721: 62 D0 00 MOV   REG[208],0
1724: 51 85    MOV   A,[PARAM]
1726: 54 03    MOV   [X+3],A
1728: 56 02 00 MOV   [X+2],0
(0505) 							angle[0] = total%256;
172B: 50 00    MOV   A,0
172D: 08       PUSH  A
172E: 50 0A    MOV   A,10
1730: 08       PUSH  A
1731: 52 02    MOV   A,[X+2]
1733: 08       PUSH  A
1734: 52 03    MOV   A,[X+3]
1736: 08       PUSH  A
1737: 52 00    MOV   A,[X+0]
1739: 08       PUSH  A
173A: 52 01    MOV   A,[X+1]
173C: 08       PUSH  A
173D: 7C 1E 56 LCALL _itoa
1740: 38 F8    ADD   SP,248
(0506) 							angle[1] = total/256;
1742: 10       PUSH  X
1743: 52 00    MOV   A,[X+0]
1745: 08       PUSH  A
1746: 52 01    MOV   A,[X+1]
1748: 5C       MOV   X,A
1749: 18       POP   A
174A: 7C 0D 0B LCALL 0x0D0B
174D: 20       POP   X
(0507) 							longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
174E: 10       PUSH  X
174F: 50 0A    MOV   A,10
1751: 7C 0C CE LCALL 0x0CCE
1754: 20       POP   X
(0508) 						}
(0509) 					}
1755: 80 68    JMP   0x17BE
(0510) 					else if((param[0] == 'p') || (param[0] == 'P'))
1757: 62 D0 00 MOV   REG[208],0
175A: 52 01    MOV   A,[X+1]
175C: 53 96    MOV   [__r1],A
175E: 52 00    MOV   A,[X+0]
1760: 60 D4    MOV   REG[212],A
1762: 3E 96    MVI   A,[__r1]
1764: 53 96    MOV   [__r1],A
1766: 55 97 00 MOV   [__r0],0
1769: 3C 97 00 CMP   [__r0],0
176C: B0 05    JNZ   0x1772
176E: 39 63    CMP   A,99
1770: A0 0E    JZ    0x177F
1772: 62 D0 00 MOV   REG[208],0
1775: 3C 97 00 CMP   [__r0],0
1778: B0 45    JNZ   0x17BE
177A: 3C 96 43 CMP   [__r1],67
177D: B0 40    JNZ   0x17BE
(0511) 					{
(0512) 						if(param = COMP_SERIAL_szGetParam())
177F: 10       PUSH  X
1780: 7C 0D 8C LCALL 0x0D8C
1783: 20       POP   X
(0513) 						{
1784: 62 D0 00 MOV   REG[208],0
1787: 52 04    MOV   A,[X+4]
1789: 53 96    MOV   [__r1],A
178B: 50 00    MOV   A,0
178D: 08       PUSH  A
178E: 51 96    MOV   A,[__r1]
1790: 08       PUSH  A
1791: 7C 0E 69 LCALL _pingModule
1794: 38 FE    ADD   SP,254
1796: 62 D0 00 MOV   REG[208],0
1799: 3C 97 00 CMP   [__r0],0
179C: B0 06    JNZ   0x17A3
179E: 3C 96 00 CMP   [__r1],0
17A1: A0 1C    JZ    0x17BE
(0514) 							COMP_SERIAL_CmdReset();
(0515) 							servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
17A3: 50 00    MOV   A,0
17A5: 08       PUSH  A
17A6: 50 02    MOV   A,2
17A8: 08       PUSH  A
17A9: 91 8D    CALL  _configToggle
17AB: 38 FE    ADD   SP,254
(0516) 						}
(0517) 					}
17AD: 10       PUSH  X
17AE: 62 D0 00 MOV   REG[208],0
17B1: 51 86    MOV   A,[PARAM+1]
17B3: 7C 0C CE LCALL 0x0CCE
17B6: 20       POP   X
(0518) 				}
17B7: 10       PUSH  X
17B8: 50 0A    MOV   A,10
17BA: 7C 0C CE LCALL 0x0CCE
17BD: 20       POP   X
(0519) 			}
(0520) 		}
(0521) 		else if((param[0] == 'r') || (param[0] == 'R'))
(0522) 		{			
(0523) 			if(param = COMP_SERIAL_szGetParam())
(0524) 			{
(0525) 				ID = atoi(param);
(0526) 				if(param = COMP_SERIAL_szGetParam())
17BE: 62 D0 00 MOV   REG[208],0
17C1: 3C 9A 00 CMP   [STATE],0
17C4: B0 06    JNZ   0x17CB
17C6: 3C 9B 02 CMP   [STATE+1],2
17C9: A0 0D    JZ    0x17D7
(0527) 				{
(0528) 					if((param[0] == 'a') || (param[0] == 'A'))
17CB: 50 00    MOV   A,0
17CD: 08       PUSH  A
17CE: 50 02    MOV   A,2
17D0: 08       PUSH  A
17D1: 91 65    CALL  _configToggle
17D3: 38 FE    ADD   SP,254
(0529) 					{
17D5: 80 0A    JMP   0x17E0
(0530) 						COMP_SERIAL_CmdReset();
(0531) 						servoInstruction(ID,4,READ_SERVO,36,2);
(0532) 						configToggle(RX_MODE);
17D7: 62 D0 00 MOV   REG[208],0
17DA: 55 9D 00 MOV   [TIMEOUT+1],0
17DD: 55 9C 00 MOV   [TIMEOUT],0
(0533) 							
17E0: 38 F8    ADD   SP,248
17E2: 20       POP   X
17E3: 7F       RET   
(0534) 						// Loop until we read a response or time out.
(0535) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
(0536) 						{
(0537) 							if(RECEIVE_cReadChar() == SERVO_START)
(0538) 							{
(0539) 								if(RECEIVE_cGetChar() == SERVO_START)
_servoInstruction:
  total                --> X+1
  checksum             --> X+0
  value                --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
17E4: 10       PUSH  X
17E5: 4F       MOV   X,SP
17E6: 38 03    ADD   SP,3
(0540) 								{
(0541) 									if(RECEIVE_cGetChar() == ID)
(0542) 									{
(0543) 										if(RECEIVE_cGetChar() == 4)
17E8: 62 D0 00 MOV   REG[208],0
17EB: 52 FB    MOV   A,[X-5]
17ED: 53 96    MOV   [__r1],A
17EF: 55 97 00 MOV   [__r0],0
17F2: 52 FC    MOV   A,[X-4]
17F4: 02 96    ADD   A,[__r1]
17F6: 53 96    MOV   [__r1],A
17F8: 50 00    MOV   A,0
17FA: 0A 97    ADC   A,[__r0]
17FC: 53 97    MOV   [__r0],A
17FE: 52 FA    MOV   A,[X-6]
1800: 04 96    ADD   [__r1],A
1802: 0E 97 00 ADC   [__r0],0
1805: 52 F9    MOV   A,[X-7]
1807: 04 96    ADD   [__r1],A
1809: 0E 97 00 ADC   [__r0],0
180C: 52 F8    MOV   A,[X-8]
180E: 53 94    MOV   [__r3],A
1810: 55 95 00 MOV   [__r2],0
1813: 51 96    MOV   A,[__r1]
1815: 02 94    ADD   A,[__r3]
1817: 54 02    MOV   [X+2],A
1819: 51 97    MOV   A,[__r0]
181B: 0A 95    ADC   A,[__r2]
181D: 54 01    MOV   [X+1],A
(0544) 										{
(0545) 											if(RECEIVE_cGetChar() == 0)
(0546) 											{
181F: 50 01    MOV   A,1
1821: 08       PUSH  A
1822: 50 00    MOV   A,0
1824: 08       PUSH  A
1825: 52 01    MOV   A,[X+1]
1827: 08       PUSH  A
1828: 52 02    MOV   A,[X+2]
182A: 08       PUSH  A
182B: 7C 1C 83 LCALL __divmod_16X16_16
182E: 38 FE    ADD   SP,254
1830: 18       POP   A
1831: 53 96    MOV   [__r1],A
1833: 18       POP   A
1834: 50 FF    MOV   A,255
1836: 12 96    SUB   A,[__r1]
1838: 54 00    MOV   [X+0],A
(0547) 												angle[0] = RECEIVE_cGetChar();
(0548) 												angle[1] = RECEIVE_cGetChar();
(0549) 												
183A: 10       PUSH  X
183B: 50 FF    MOV   A,255
183D: 7C 08 AA LCALL 0x08AA
1840: 20       POP   X
(0550) 												configToggle(PC_MODE);
1841: 10       PUSH  X
1842: 50 FF    MOV   A,255
1844: 7C 08 AA LCALL 0x08AA
1847: 20       POP   X
(0551) 												
1848: 10       PUSH  X
1849: 52 FC    MOV   A,[X-4]
184B: 7C 08 AA LCALL 0x08AA
184E: 20       POP   X
(0552) 												total = ((angle[1])*256) + angle[0];
184F: 10       PUSH  X
1850: 52 FB    MOV   A,[X-5]
1852: 7C 08 AA LCALL 0x08AA
1855: 20       POP   X
(0553) 												itoa(param,total,10);
1856: 10       PUSH  X
1857: 52 FA    MOV   A,[X-6]
1859: 7C 08 AA LCALL 0x08AA
185C: 20       POP   X
(0554) 												COMP_SERIAL_PutString(param);
185D: 10       PUSH  X
185E: 52 F9    MOV   A,[X-7]
1860: 7C 08 AA LCALL 0x08AA
1863: 20       POP   X
(0555) 												COMP_SERIAL_PutChar('\n');
1864: 10       PUSH  X
1865: 52 F8    MOV   A,[X-8]
1867: 7C 08 AA LCALL 0x08AA
186A: 20       POP   X
(0556) 
186B: 10       PUSH  X
186C: 52 00    MOV   A,[X+0]
186E: 7C 08 AA LCALL 0x08AA
1871: 20       POP   X
(0557) 												TIMEOUT = RX_TIMEOUT_DURATION;
(0558) 											}
(0559) 										}
1872: 10       PUSH  X
1873: 7C 08 7D LCALL 0x087D
1876: 62 D0 00 MOV   REG[208],0
1879: 20       POP   X
187A: 53 97    MOV   [__r0],A
187C: 47 97 20 TST   [__r0],32
187F: AF F2    JZ    0x1872
(0560) 									}
(0561) 								}
(0562) 							}
1881: 93 6C    CALL  _xmitWait
1883: 38 FD    ADD   SP,253
1885: 20       POP   X
1886: 7F       RET   
(0563) 						}
(0564) 					}
(0565) 					else if ((param[0] == 'p') || (param[0] == 'P'))
(0566) 					{
(0567) 						COMP_SERIAL_CmdReset();
_longServoInstruction:
  total                --> X+1
  checksum             --> X+0
  value2               --> X-9
  value1               --> X-8
  address              --> X-7
  instruction          --> X-6
  length               --> X-5
  id                   --> X-4
1887: 10       PUSH  X
1888: 4F       MOV   X,SP
1889: 38 03    ADD   SP,3
(0568) 						servoInstruction(ID,4,READ_SERVO,24,1);
(0569) 						configToggle(RX_MODE);
(0570) 							
(0571) 						// Loop until we read a response or time out.
188B: 62 D0 00 MOV   REG[208],0
188E: 52 FB    MOV   A,[X-5]
1890: 53 96    MOV   [__r1],A
1892: 55 97 00 MOV   [__r0],0
1895: 52 FC    MOV   A,[X-4]
1897: 02 96    ADD   A,[__r1]
1899: 53 96    MOV   [__r1],A
189B: 50 00    MOV   A,0
189D: 0A 97    ADC   A,[__r0]
189F: 53 97    MOV   [__r0],A
18A1: 52 FA    MOV   A,[X-6]
18A3: 04 96    ADD   [__r1],A
18A5: 0E 97 00 ADC   [__r0],0
18A8: 52 F9    MOV   A,[X-7]
18AA: 04 96    ADD   [__r1],A
18AC: 0E 97 00 ADC   [__r0],0
18AF: 52 F8    MOV   A,[X-8]
18B1: 04 96    ADD   [__r1],A
18B3: 0E 97 00 ADC   [__r0],0
18B6: 52 F7    MOV   A,[X-9]
18B8: 53 94    MOV   [__r3],A
18BA: 55 95 00 MOV   [__r2],0
18BD: 51 96    MOV   A,[__r1]
18BF: 02 94    ADD   A,[__r3]
18C1: 54 02    MOV   [X+2],A
18C3: 51 97    MOV   A,[__r0]
18C5: 0A 95    ADC   A,[__r2]
18C7: 54 01    MOV   [X+1],A
(0572) 						while(TIMEOUT < RX_TIMEOUT_DURATION)
(0573) 						{
(0574) 							if(RECEIVE_cReadChar() == SERVO_START)
18C9: 50 01    MOV   A,1
18CB: 08       PUSH  A
18CC: 50 00    MOV   A,0
18CE: 08       PUSH  A
18CF: 52 01    MOV   A,[X+1]
18D1: 08       PUSH  A
18D2: 52 02    MOV   A,[X+2]
18D4: 08       PUSH  A
18D5: 7C 1C 83 LCALL __divmod_16X16_16
18D8: 38 FE    ADD   SP,254
18DA: 18       POP   A
18DB: 53 96    MOV   [__r1],A
18DD: 18       POP   A
18DE: 50 FF    MOV   A,255
18E0: 12 96    SUB   A,[__r1]
18E2: 54 00    MOV   [X+0],A
(0575) 							{
(0576) 								if(RECEIVE_cGetChar() == SERVO_START)
(0577) 								{
18E4: 10       PUSH  X
18E5: 50 FF    MOV   A,255
18E7: 7C 08 AA LCALL 0x08AA
18EA: 20       POP   X
(0578) 									if(RECEIVE_cGetChar() == ID)
18EB: 10       PUSH  X
18EC: 50 FF    MOV   A,255
18EE: 7C 08 AA LCALL 0x08AA
18F1: 20       POP   X
(0579) 									{
18F2: 10       PUSH  X
18F3: 52 FC    MOV   A,[X-4]
18F5: 7C 08 AA LCALL 0x08AA
18F8: 20       POP   X
(0580) 										if(RECEIVE_cGetChar() == 3)
18F9: 10       PUSH  X
18FA: 52 FB    MOV   A,[X-5]
18FC: 7C 08 AA LCALL 0x08AA
18FF: 20       POP   X
(0581) 										{
1900: 10       PUSH  X
1901: 52 FA    MOV   A,[X-6]
1903: 7C 08 AA LCALL 0x08AA
1906: 20       POP   X
(0582) 											if(RECEIVE_cGetChar() == 0)
1907: 10       PUSH  X
1908: 52 F9    MOV   A,[X-7]
190A: 7C 08 AA LCALL 0x08AA
190D: 20       POP   X
(0583) 											{
190E: 10       PUSH  X
190F: 52 F8    MOV   A,[X-8]
1911: 7C 08 AA LCALL 0x08AA
1914: 20       POP   X
(0584) 												tempByte = RECEIVE_cGetChar();
1915: 10       PUSH  X
1916: 52 F7    MOV   A,[X-9]
1918: 7C 08 AA LCALL 0x08AA
191B: 20       POP   X
(0585) 												
191C: 10       PUSH  X
191D: 52 00    MOV   A,[X+0]
191F: 7C 08 AA LCALL 0x08AA
1922: 20       POP   X
(0586) 												configToggle(PC_MODE);
(0587) 												
(0588) 												// Convert tempByte to an ascii value and send.
1923: 10       PUSH  X
1924: 7C 08 7D LCALL 0x087D
1927: 62 D0 00 MOV   REG[208],0
192A: 20       POP   X
192B: 53 97    MOV   [__r0],A
192D: 47 97 20 TST   [__r0],32
1930: AF F2    JZ    0x1923
(0589) 												COMP_SERIAL_PutChar(tempByte + 48);
(0590) 												COMP_SERIAL_PutChar('\n');
(0591) 
1932: 92 BB    CALL  _xmitWait
1934: 38 FD    ADD   SP,253
1936: 20       POP   X
1937: 7F       RET   
(0592) 												TIMEOUT = RX_TIMEOUT_DURATION;
(0593) 											}
(0594) 										}
(0595) 									}
(0596) 								}
(0597) 							}
_configToggle:
  mode                 --> X-5
1938: 10       PUSH  X
1939: 4F       MOV   X,SP
(0598) 						}
(0599) 					}
193A: 43 00 80 OR    REG[0],128
(0600) 					else if ((param[0] == 't') || (param[0] == 'T'))
193D: 41 02 7F AND   REG[2],127
(0601) 					{
(0602) 						COMP_SERIAL_CmdReset();
(0603) 						if(pingModule(ID))
(0604) 						{
1940: 62 D0 00 MOV   REG[208],0
1943: 3C 9A 00 CMP   [STATE],0
1946: B0 06    JNZ   0x194D
1948: 3C 9B 00 CMP   [STATE+1],0
194B: A0 10    JZ    0x195C
(0605) 							configToggle(PC_MODE);
(0606) 												
194D: 62 D0 00 MOV   REG[208],0
1950: 51 9A    MOV   A,[STATE]
1952: 08       PUSH  A
1953: 51 9B    MOV   A,[STATE+1]
1955: 08       PUSH  A
1956: 90 D9    CALL  _unloadConfig
1958: 38 FE    ADD   SP,254
(0607) 							total = PARAM[0];
195A: 80 03    JMP   0x195E
(0608) 							itoa(param,total,10);
(0609) 							COMP_SERIAL_PutString(param);
(0610) 							COMP_SERIAL_PutChar('\n');
195C: 90 C9    CALL  _unloadAllConfigs
(0611) 						}
(0612) 					}
(0613) 					else if ((param[0] == 'c') || (param[0] == 'C'))
195E: 3D FB 00 CMP   [X-5],0
1961: B0 32    JNZ   0x1994
1963: 3D FC 02 CMP   [X-4],2
1966: B0 2D    JNZ   0x1994
(0614) 					{
(0615) 						COMP_SERIAL_CmdReset();
1968: 7C 06 3F LCALL 0x063F
(0616) 						if(pingModule(ID))
(0617) 						{	
(0618) 							configToggle(PC_MODE);
196B: 10       PUSH  X
196C: 50 01    MOV   A,1
196E: 7C 0C 89 LCALL 0x0C89
1971: 20       POP   X
(0619) 												
1972: 10       PUSH  X
1973: 50 00    MOV   A,0
1975: 7C 0C 5A LCALL 0x0C5A
1978: 20       POP   X
(0620) 							COMP_SERIAL_PutChar(PARAM[1]);
(0621) 							COMP_SERIAL_PutChar('\n');
1979: 10       PUSH  X
197A: 50 00    MOV   A,0
197C: 7C 08 71 LCALL 0x0871
197F: 20       POP   X
(0622) 						}
(0623) 					}
1980: 62 D0 00 MOV   REG[208],0
1983: 55 9D 00 MOV   [TIMEOUT+1],0
1986: 55 9C 00 MOV   [TIMEOUT],0
(0624) 				}
1989: 62 D0 00 MOV   REG[208],0
198C: 55 9B 02 MOV   [STATE+1],2
198F: 55 9A 00 MOV   [STATE],0
(0625) 			}
1992: 80 7A    JMP   0x1A0D
(0626) 		}
1994: 3D FB 00 CMP   [X-5],0
1997: B0 2C    JNZ   0x19C4
1999: 3D FC 01 CMP   [X-4],1
199C: B0 27    JNZ   0x19C4
(0627) 	}
(0628) 	
199E: 7C 06 D6 LCALL 0x06D6
(0629) 	if(STATE != PC_MODE)
(0630) 	{
(0631) 		configToggle(PC_MODE);
(0632) 	}
(0633) 	else
19A1: 10       PUSH  X
19A2: 50 00    MOV   A,0
19A4: 7C 0A E8 LCALL 0x0AE8
19A7: 20       POP   X
(0634) 	{
(0635) 		TIMEOUT = 0;
(0636) 	}
19A8: 62 D0 00 MOV   REG[208],0
19AB: 55 9D 00 MOV   [TIMEOUT+1],0
19AE: 55 9C 00 MOV   [TIMEOUT],0
(0637) }
19B1: 10       PUSH  X
19B2: 7C 0A 08 LCALL 0x0A08
(0638) 
19B5: 7C 0A 10 LCALL 0x0A10
19B8: 20       POP   X
(0639) // This function receives a destination, command length, instruction type, address, and value.
(0640) // With these parameters, the function sends a packet to the communication bus.
19B9: 62 D0 00 MOV   REG[208],0
19BC: 55 9B 01 MOV   [STATE+1],1
19BF: 55 9A 00 MOV   [STATE],0
(0641) void servoInstruction(char id, char length, char instruction, char address, char value)
19C2: 80 4A    JMP   0x1A0D
(0642) {
19C4: 3D FB 00 CMP   [X-5],0
19C7: B0 45    JNZ   0x1A0D
19C9: 3D FC 00 CMP   [X-4],0
19CC: B0 40    JNZ   0x1A0D
(0643) 	char checksum;
(0644) 	int total;
19CE: 7C 05 D6 LCALL 0x05D6
(0645) 	
(0646) 	total = id + length + instruction + address + value;
19D1: 10       PUSH  X
19D2: 50 00    MOV   A,0
19D4: 7C 09 4A LCALL 0x094A
19D7: 20       POP   X
(0647) 	
(0648) 	// Calculate the checksum value for our servo communication.
19D8: 62 D0 00 MOV   REG[208],0
19DB: 55 9D 00 MOV   [TIMEOUT+1],0
19DE: 55 9C 00 MOV   [TIMEOUT],0
(0649) 	checksum = 255-(total%256);
19E1: 10       PUSH  X
19E2: 7C 07 F6 LCALL 0x07F6
(0650) 	
19E5: 7C 07 FE LCALL 0x07FE
19E8: 20       POP   X
(0651) 	// Talk to the servo.
(0652) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
19E9: 62 D0 00 MOV   REG[208],0
19EC: 3C 9C 00 CMP   [TIMEOUT],0
19EF: B0 06    JNZ   0x19F6
19F1: 3C 9D 00 CMP   [TIMEOUT+1],0
19F4: AF F4    JZ    0x19E9
(0653) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
(0654) 	TX_REPEATER_PutChar(id);			// Servo ID
(0655) 	TX_REPEATER_PutChar(length);		// The instruction length.
(0656) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
(0657) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
(0658) 	TX_REPEATER_PutChar(value);			// The value to write or number of bytes to read.
19F6: 10       PUSH  X
19F7: 7C 08 02 LCALL 0x0802
19FA: 20       POP   X
(0659) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
19FB: 62 D0 00 MOV   REG[208],0
19FE: 55 9D 00 MOV   [TIMEOUT+1],0
1A01: 55 9C 00 MOV   [TIMEOUT],0
(0660) 	
(0661) 	// Wait for the transmission to finish.
1A04: 62 D0 00 MOV   REG[208],0
1A07: 55 9B 00 MOV   [STATE+1],0
1A0A: 55 9A 00 MOV   [STATE],0
(0662) 	while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
(0663) 	
(0664) 	// Make completely sure we're done.
(0665) 	xmitWait();
(0666) }
(0667) 
1A0D: 62 D0 00 MOV   REG[208],0
1A10: 3C 9A 00 CMP   [STATE],0
1A13: B0 0B    JNZ   0x1A1F
1A15: 3C 9B 00 CMP   [STATE+1],0
1A18: B0 06    JNZ   0x1A1F
(0668) // This function receives a destination, command length, instruction type, address, and two values.
(0669) void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
1A1A: 43 04 01 OR    REG[4],1
(0670) {
1A1D: 80 04    JMP   0x1A22
(0671) 	char checksum;
(0672) 	int total;
(0673) 	
1A1F: 41 04 FE AND   REG[4],254
(0674) 	total = id + length + instruction + address + value1 + value2;
(0675) 	
(0676) 	// Calculate the checksum value for our servo communication.
(0677) 	checksum = 255-(total%256);
(0678) 	
1A22: 43 02 80 OR    REG[2],128
1A25: 20       POP   X
1A26: 7F       RET   
(0679) 	// Talk to the servo.
(0680) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte one
(0681) 	TX_REPEATER_PutChar(SERVO_START);	// Start byte two
(0682) 	TX_REPEATER_PutChar(id);			// Servo ID
(0683) 	TX_REPEATER_PutChar(length);		// The instruction length.
(0684) 	TX_REPEATER_PutChar(instruction);	// The instruction to carry out.
(0685) 	TX_REPEATER_PutChar(address);		// The address to read/write from/to.
_unloadAllConfigs:
1A27: 7C 06 89 LCALL 0x0689
(0686) 	TX_REPEATER_PutChar(value1);		// The first value to write.
1A2A: 7C 07 32 LCALL 0x0732
(0687) 	TX_REPEATER_PutChar(value2);		// The first value to write.
1A2D: 7C 06 1A LCALL 0x061A
1A30: 7F       RET   
(0688) 	TX_REPEATER_PutChar(checksum);		// This is the checksum.
(0689) 	
(0690) 	// Wait for the transmission to finish.
(0691) 	while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
(0692) 	
(0693) 	// Make completely sure we're done.
_unloadConfig:
  config_num           --> X-5
1A31: 10       PUSH  X
1A32: 4F       MOV   X,SP
(0694) 	xmitWait();
1A33: 3D FB 00 CMP   [X-5],0
1A36: B0 0B    JNZ   0x1A42
1A38: 3D FC 02 CMP   [X-4],2
1A3B: B0 06    JNZ   0x1A42
(0695) }
(0696) 
1A3D: 7C 06 89 LCALL 0x0689
(0697) // This function allows the program to pass an RX or TX mode flag for switching between modes on the
1A40: 80 1D    JMP   0x1A5E
(0698) // half duplex UART serial communication line.
1A42: 3D FB 00 CMP   [X-5],0
1A45: B0 0B    JNZ   0x1A51
1A47: 3D FC 01 CMP   [X-4],1
1A4A: B0 06    JNZ   0x1A51
(0699) void configToggle(int mode)
(0700) {
1A4C: 7C 07 32 LCALL 0x0732
(0701) 	// Disconnect from the global bus and leave the pin high.
1A4F: 80 0E    JMP   0x1A5E
(0702) 	PRT0DR |= 0b10000000;
1A51: 3D FB 00 CMP   [X-5],0
1A54: B0 09    JNZ   0x1A5E
1A56: 3D FC 00 CMP   [X-4],0
1A59: B0 04    JNZ   0x1A5E
(0703) 	PRT0GS &= 0b01111111;
(0704) 
1A5B: 7C 06 1A LCALL 0x061A
(0705) 	// Unload the configuration of the current state.
1A5E: 20       POP   X
1A5F: 7F       RET   
(0706) 	// If there is no state, blindly wipe all configurations.
(0707) 	if(STATE)
(0708) 	{
(0709) 		unloadConfig(STATE);
(0710) 	}
_busListen:
1A60: 50 00    MOV   A,0
1A62: 08       PUSH  A
1A63: 50 01    MOV   A,1
1A65: 08       PUSH  A
1A66: 9E D0    CALL  _configToggle
1A68: 38 FE    ADD   SP,254
1A6A: 80 13    JMP   0x1A7E
(0711) 	else
(0712) 	{
(0713) 		unloadAllConfigs();
(0714) 	}
(0715) 	
1A6C: 10       PUSH  X
1A6D: 7C 0A F7 LCALL 0x0AF7
1A70: 20       POP   X
1A71: 39 00    CMP   A,0
1A73: A0 0A    JZ    0x1A7E
(0716) 	if(mode == PC_MODE)
(0717) 	{
1A75: 62 D0 00 MOV   REG[208],0
1A78: 55 9D 2C MOV   [TIMEOUT+1],44
1A7B: 55 9C 01 MOV   [TIMEOUT],1
1A7E: 62 D0 00 MOV   REG[208],0
1A81: 51 9D    MOV   A,[TIMEOUT+1]
1A83: 11 2C    SUB   A,44
1A85: 51 9C    MOV   A,[TIMEOUT]
1A87: 31 80    XOR   A,128
1A89: 19 81    SBB   A,129
1A8B: CF E0    JC    0x1A6C
(0718) 		LoadConfig_pc_listener();
(0719) 		
(0720) 		//COMP_SERIAL_CmdReset(); 						// Initializes the RX buffer
(0721) 		COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
(0722) 		COMP_SERIAL_Start(UART_PARITY_NONE);			// Starts the UART.
1A8D: 62 D0 00 MOV   REG[208],0
1A90: 55 9D 00 MOV   [TIMEOUT+1],0
1A93: 55 9C 00 MOV   [TIMEOUT],0
1A96: 80 13    JMP   0x1AAA
(0723) 		
(0724) 		TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);		// Start the TX repeater.
(0725) 		
(0726) 		TIMEOUT = 0;
(0727) 		STATE = PC_MODE;
1A98: 10       PUSH  X
1A99: 7C 0A FF LCALL 0x0AFF
1A9C: 20       POP   X
1A9D: 39 00    CMP   A,0
1A9F: A0 0A    JZ    0x1AAA
(0728) 	}
(0729) 	else if(mode == RX_MODE)
1AA1: 62 D0 00 MOV   REG[208],0
1AA4: 55 9D 00 MOV   [TIMEOUT+1],0
1AA7: 55 9C 00 MOV   [TIMEOUT],0
1AAA: 62 D0 00 MOV   REG[208],0
1AAD: 51 9D    MOV   A,[TIMEOUT+1]
1AAF: 11 64    SUB   A,100
1AB1: 51 9C    MOV   A,[TIMEOUT]
1AB3: 31 80    XOR   A,128
1AB5: 19 80    SBB   A,128
1AB7: CF E0    JC    0x1A98
1AB9: 7F       RET   
(0730) 	{
(0731) 		LoadConfig_receiver_config();
(0732) 		
(0733) 		// Clear the buffer.
(0734) 		//RECEIVE_CmdReset();
(0735) 		// Start the receiver.
_initializeSlaves:
  num_timeouts         --> X+0
1ABA: 10       PUSH  X
1ABB: 4F       MOV   X,SP
1ABC: 38 02    ADD   SP,2
(0736) 		RECEIVE_Start(RECEIVE_PARITY_NONE);
1ABE: 56 01 00 MOV   [X+1],0
1AC1: 56 00 00 MOV   [X+0],0
(0737) 		
(0738) 		// Start response timeout timer and enable its interrupt routine.
(0739) 		TIMEOUT = 0;
1AC4: 9F 9A    CALL  _busListen
(0740) 		RX_TIMEOUT_EnableInt();
(0741) 		RX_TIMEOUT_Start();
1AC6: 7C 11 47 LCALL _sayHello
1AC9: 81 0B    JMP   0x1BD5
(0742) 		
(0743) 		STATE = RX_MODE;
(0744) 	}
(0745) 	else if(mode == TX_MODE)
(0746) 	{
(0747) 		LoadConfig_transmitter_config();
1ACB: 7C 11 9D LCALL _validTransmission
1ACE: 62 D0 00 MOV   REG[208],0
1AD1: 3C 97 00 CMP   [__r0],0
1AD4: B0 06    JNZ   0x1ADB
1AD6: 3C 96 00 CMP   [__r1],0
1AD9: A0 C8    JZ    0x1BA2
(0748) 		// Start the transmitter.
(0749) 		TRANSMIT_Start(TRANSMIT_PARITY_NONE);
1ADB: 62 D0 00 MOV   REG[208],0
1ADE: 3C A2 C8 CMP   [COMMAND_TYPE],200
1AE1: B0 F3    JNZ   0x1BD5
(0750) 		
(0751) 		TIMEOUT = 0;
(0752) 		TX_TIMEOUT_EnableInt();	// Make sure interrupts are enabled.
1AE3: 62 D0 00 MOV   REG[208],0
1AE6: 3C A0 00 CMP   [COMMAND_DESTINATION],0
1AE9: B0 EB    JNZ   0x1BD5
(0753) 		TX_TIMEOUT_Start();		// Start the timer.
(0754) 		
1AEB: 62 D0 00 MOV   REG[208],0
1AEE: 76 99    INC   [NUM_MODULES+1]
1AF0: 0E 98 00 ADC   [NUM_MODULES],0
(0755) 		while(!TIMEOUT)
1AF3: 56 01 00 MOV   [X+1],0
1AF6: 56 00 00 MOV   [X+0],0
(0756) 		{
(0757) 			// Do nothing while we wait for one timeout period.
1AF9: 51 98    MOV   A,[NUM_MODULES]
1AFB: 08       PUSH  A
1AFC: 51 99    MOV   A,[NUM_MODULES+1]
1AFE: 08       PUSH  A
1AFF: 7C 0F 58 LCALL _assignID
1B02: 38 FE    ADD   SP,254
1B04: 62 D0 00 MOV   REG[208],0
1B07: 3C 97 00 CMP   [__r0],0
1B0A: B0 CA    JNZ   0x1BD5
1B0C: 3C 96 00 CMP   [__r1],0
1B0F: B0 C5    JNZ   0x1BD5
(0758) 			// This is to allow everyone to get in the right configuration.
(0759) 		}
(0760) 		
(0761) 		TX_TIMEOUT_Stop();		// Stop the timer.
(0762) 		TIMEOUT = 0;			// Reset the timeout flag.
1B11: 62 D0 00 MOV   REG[208],0
1B14: 51 98    MOV   A,[NUM_MODULES]
1B16: 08       PUSH  A
1B17: 51 99    MOV   A,[NUM_MODULES+1]
1B19: 08       PUSH  A
1B1A: 7C 0E 69 LCALL _pingModule
1B1D: 38 FE    ADD   SP,254
1B1F: 62 D0 00 MOV   REG[208],0
1B22: 3C 97 00 CMP   [__r0],0
1B25: B0 AF    JNZ   0x1BD5
1B27: 3C 96 00 CMP   [__r1],0
1B2A: B0 AA    JNZ   0x1BD5
(0763) 		
(0764) 		STATE = TX_MODE;
1B2C: 62 D0 00 MOV   REG[208],0
1B2F: 51 98    MOV   A,[NUM_MODULES]
1B31: 08       PUSH  A
1B32: 51 99    MOV   A,[NUM_MODULES+1]
1B34: 08       PUSH  A
1B35: 7C 0E 69 LCALL _pingModule
1B38: 38 FE    ADD   SP,254
1B3A: 62 D0 00 MOV   REG[208],0
1B3D: 3C 97 00 CMP   [__r0],0
1B40: B0 94    JNZ   0x1BD5
1B42: 3C 96 00 CMP   [__r1],0
1B45: B0 8F    JNZ   0x1BD5
(0765) 	}
(0766) 	
1B47: 62 D0 00 MOV   REG[208],0
1B4A: 51 98    MOV   A,[NUM_MODULES]
1B4C: 08       PUSH  A
1B4D: 51 99    MOV   A,[NUM_MODULES+1]
1B4F: 08       PUSH  A
1B50: 7C 0E 69 LCALL _pingModule
1B53: 38 FE    ADD   SP,254
1B55: 62 D0 00 MOV   REG[208],0
1B58: 3C 97 00 CMP   [__r0],0
1B5B: B0 79    JNZ   0x1BD5
1B5D: 3C 96 00 CMP   [__r1],0
1B60: B0 74    JNZ   0x1BD5
(0767) 	// Make sure to keep the LED on (active low).
(0768) 	//PRT2DR &= 0b11111110;
1B62: 62 D0 00 MOV   REG[208],0
1B65: 51 98    MOV   A,[NUM_MODULES]
1B67: 08       PUSH  A
1B68: 51 99    MOV   A,[NUM_MODULES+1]
1B6A: 08       PUSH  A
1B6B: 7C 0E 69 LCALL _pingModule
1B6E: 38 FE    ADD   SP,254
1B70: 62 D0 00 MOV   REG[208],0
1B73: 3C 97 00 CMP   [__r0],0
1B76: B0 5E    JNZ   0x1BD5
1B78: 3C 96 00 CMP   [__r1],0
1B7B: B0 59    JNZ   0x1BD5
(0769) 	
(0770) 	if(STATE == TX_MODE)
1B7D: 62 D0 00 MOV   REG[208],0
1B80: 51 98    MOV   A,[NUM_MODULES]
1B82: 08       PUSH  A
1B83: 51 99    MOV   A,[NUM_MODULES+1]
1B85: 08       PUSH  A
1B86: 7C 0E 69 LCALL _pingModule
1B89: 38 FE    ADD   SP,254
1B8B: 62 D0 00 MOV   REG[208],0
1B8E: 3C 97 00 CMP   [__r0],0
1B91: B0 43    JNZ   0x1BD5
1B93: 3C 96 00 CMP   [__r1],0
1B96: B0 3E    JNZ   0x1BD5
(0771) 	{
(0772) 		PRT1DR |= 0b00000001;
1B98: 62 D0 00 MOV   REG[208],0
1B9B: 7A 99    DEC   [NUM_MODULES+1]
1B9D: 1E 98 00 SBB   [NUM_MODULES],0
(0773) 	}
(0774) 	else
(0775) 	{
(0776) 		PRT1DR &= 0b11111110;
(0777) 		
(0778) 	}
(0779) 	
(0780) 	// Reconnect to the global bus.
(0781) 	PRT0GS |= 0b10000000;
1BA0: 80 34    JMP   0x1BD5
(0782) }
1BA2: 62 D0 00 MOV   REG[208],0
1BA5: 51 9D    MOV   A,[TIMEOUT+1]
1BA7: 11 05    SUB   A,5
1BA9: 51 9C    MOV   A,[TIMEOUT]
1BAB: 31 80    XOR   A,128
1BAD: 19 80    SBB   A,128
1BAF: C0 25    JC    0x1BD5
(0783) 
(0784) // This function blindly unloads all user configurations. This will be called once,
(0785) // when the system initially has no known state.
1BB1: 62 D0 00 MOV   REG[208],0
1BB4: 3C 98 00 CMP   [NUM_MODULES],0
1BB7: B0 06    JNZ   0x1BBE
1BB9: 3C 99 00 CMP   [NUM_MODULES+1],0
1BBC: A0 06    JZ    0x1BC3
(0786) void unloadAllConfigs(void)
(0787) {
1BBE: 77 01    INC   [X+1]
1BC0: 0F 00 00 ADC   [X+0],0
(0788) 	UnloadConfig_pc_listener();
(0789) 	UnloadConfig_receiver_config();
(0790) 	UnloadConfig_transmitter_config();
(0791) }
1BC3: 62 D0 00 MOV   REG[208],0
1BC6: 51 99    MOV   A,[NUM_MODULES+1]
1BC8: 11 FA    SUB   A,250
1BCA: 51 98    MOV   A,[NUM_MODULES]
1BCC: 31 80    XOR   A,128
1BCE: 19 80    SBB   A,128
1BD0: D0 04    JNC   0x1BD5
(0792) 
(0793) // This function unloads the configuration corresponding to the config number passed to it.
1BD2: 7C 11 47 LCALL _sayHello
1BD5: 52 01    MOV   A,[X+1]
1BD7: 11 0A    SUB   A,10
1BD9: 52 00    MOV   A,[X+0]
1BDB: 31 80    XOR   A,128
1BDD: 19 80    SBB   A,128
1BDF: CE EB    JC    0x1ACB
(0794) // We do this instead of unloadAllConfigs to cut down on set up time.
(0795) void unloadConfig(int config_num)
(0796) {
(0797) 	if(config_num == PC_MODE)
(0798) 	{
(0799) 		UnloadConfig_pc_listener();
1BE1: 50 00    MOV   A,0
1BE3: 08       PUSH  A
1BE4: 50 02    MOV   A,2
1BE6: 08       PUSH  A
1BE7: 9D 4F    CALL  _configToggle
1BE9: 38 FE    ADD   SP,254
1BEB: 38 FE    ADD   SP,254
1BED: 20       POP   X
1BEE: 7F       RET   
(0800) 	}
(0801) 	else if(config_num == RX_MODE)
(0802) 	{
(0803) 		UnloadConfig_receiver_config();
_xmitWait:
  i                    --> X+0
1BEF: 10       PUSH  X
1BF0: 4F       MOV   X,SP
1BF1: 38 02    ADD   SP,2
(0804) 	}
(0805) 	else if(config_num == TX_MODE)
(0806) 	{
1BF3: 56 01 00 MOV   [X+1],0
1BF6: 56 00 00 MOV   [X+0],0
1BF9: 77 01    INC   [X+1]
1BFB: 0F 00 00 ADC   [X+0],0
1BFE: 52 01    MOV   A,[X+1]
1C00: 11 19    SUB   A,25
1C02: 52 00    MOV   A,[X+0]
1C04: 31 80    XOR   A,128
1C06: 19 80    SBB   A,128
1C08: CF F0    JC    0x1BF9
1C0A: 38 FE    ADD   SP,254
1C0C: 20       POP   X
1C0D: 7F       RET   
(0807) 		UnloadConfig_transmitter_config();
(0808) 	}
(0809) }
(0810) 
(0811) void busListen(void)
(0812) {
(0813) 	configToggle(RX_MODE);
_TX_TIMEOUT_ISR:
1C0E: 71 C0    OR    F,192
1C10: 08       PUSH  A
1C11: 5D D0    MOV   A,REG[208]
1C13: 08       PUSH  A
(0814) 
1C14: 62 D0 00 MOV   REG[208],0
1C17: 76 9D    INC   [TIMEOUT+1]
1C19: 0E 9C 00 ADC   [TIMEOUT],0
(0815) 	// Wait for the first byte.
(0816) 	while(TIMEOUT < BOOT_TIMEOUT)
1C1C: 62 DA FD MOV   REG[218],253
1C1F: 18       POP   A
1C20: 60 D0    MOV   REG[208],A
1C22: 18       POP   A
1C23: 7E       RETI  
(0817) 	{
(0818) 		if(RECEIVE_cGetChar())
(0819) 		{
(0820) 			TIMEOUT = BOOT_TIMEOUT;
_RX_TIMEOUT_ISR:
1C24: 71 C0    OR    F,192
1C26: 08       PUSH  A
1C27: 5D D0    MOV   A,REG[208]
1C29: 08       PUSH  A
(0821) 		}
1C2A: 62 D0 00 MOV   REG[208],0
1C2D: 76 9D    INC   [TIMEOUT+1]
1C2F: 0E 9C 00 ADC   [TIMEOUT],0
(0822) 	}
(0823) 	
1C32: 62 DA FD MOV   REG[218],253
1C35: 18       POP   A
1C36: 60 D0    MOV   REG[208],A
1C38: 18       POP   A
1C39: 7E       RETI  

FILE: lib\psocdynamicint.asm
                                   (0001) ; Generated by PSoC Designer 5.0.985.0
                                   (0002) ;
                                   (0003) ;
                                   (0004) ;  fakemasterINT.asm
                                   (0005) ;
                                   (0006) ;  Data: 29 October, 2001
                                   (0007) ;  Copyright Cypress MicroSystems 2001
                                   (0008) ;
                                   (0009) ;  This file is generated by the Device Editor on Application Generation.
                                   (0010) ;  It contains dispatch code that ensures that interrupt vectors are 
                                   (0011) ;  serviced by the appropriate ISR depending on the currently active
                                   (0012) ;  configuration.
                                   (0013) ;  
                                   (0014) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0015) ;  Edits to this file will not be preserved.
                                   (0016) ;
                                   (0017) include "PSoCDynamic.inc"
                                   (0018) include "m8c.inc"
                                   (0019) export	Dispatch_INTERRUPT_10
                                   (0020) export	Dispatch_INTERRUPT_9
                                   (0021) 
                                   (0022) 
                                   (0023) Dispatch_INTERRUPT_10:
1C3A: 08       PUSH  A             (0024) 	push	a
1C3B: 50 00    MOV   A,0           (0025) 	mov		a,0
1C3D: 47 02 02 TST   [2],2         (0026) 	tst		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
1C40: B0 13    JNZ   0x1C54        (0027) 	jnz		Dispatch_INTERRUPT_10_END
1C42: 50 04    MOV   A,4           (0028) 	mov		a,4
1C44: 47 02 04 TST   [2],4         (0029) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1C47: B0 0C    JNZ   0x1C54        (0030) 	jnz		Dispatch_INTERRUPT_10_END
1C49: 50 08    MOV   A,8           (0031) 	mov		a,8
1C4B: 47 02 01 TST   [2],1         (0032) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1C4E: B0 05    JNZ   0x1C54        (0033) 	jnz		Dispatch_INTERRUPT_10_END
1C50: 18       POP   A             (0034) 	pop		a
1C51: 7E       RETI                (0035) 	reti
                                   (0036) ; Stop Code Compressor from breaking table alignment
                                   (0037) ; The next instruction does not get executed.
1C52: 71 00    OR    F,0           (0038) 	Suspend_CodeCompressor
                                   (0039) Dispatch_INTERRUPT_10_END:
1C54: E0 01    JACC  0x1C56        (0040) 	jacc	Dispatch_INTERRUPT_10_TBL
                                   (0041) Dispatch_INTERRUPT_10_TBL:
1C56: 18       POP   A             (0042) 	pop		a
1C57: 7D 08 56 LJMP  0x0856        (0043) 	ljmp	_TX_REPEATER_ISR
1C5A: 18       POP   A             (0044) 	pop		a
1C5B: 7D 0A 68 LJMP  0x0A68        (0045) 	ljmp	_RECEIVE_ISR
1C5E: 18       POP   A             (0046) 	pop		a
1C5F: 7D 09 2F LJMP  0x092F        (0047) 	ljmp	_TRANSMIT_ISR
                                   (0048) ; Resume Code Compressor.
                                   (0049) ; The next instruction does not get executed.
1C62: 38 00    ADD   SP,0          (0050) 	Resume_CodeCompressor
                                   (0051) 
                                   (0052) Dispatch_INTERRUPT_9:
1C64: 08       PUSH  A             (0053) 	push	a
1C65: 50 00    MOV   A,0           (0054) 	mov		a,0
1C67: 47 02 04 TST   [2],4         (0055) 	tst		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
1C6A: B0 0C    JNZ   0x1C77        (0056) 	jnz		Dispatch_INTERRUPT_9_END
1C6C: 50 04    MOV   A,4           (0057) 	mov		a,4
1C6E: 47 02 01 TST   [2],1         (0058) 	tst		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
1C71: B0 05    JNZ   0x1C77        (0059) 	jnz		Dispatch_INTERRUPT_9_END
1C73: 18       POP   A             (0060) 	pop		a
1C74: 7E       RETI                (0061) 	reti
                                   (0062) ; Stop Code Compressor from breaking table alignment
                                   (0063) ; The next instruction does not get executed.
1C75: 71 00    OR    F,0           (0064) 	Suspend_CodeCompressor
                                   (0065) Dispatch_INTERRUPT_9_END:
1C77: E0 01    JACC  0x1C79        (0066) 	jacc	Dispatch_INTERRUPT_9_TBL
                                   (0067) Dispatch_INTERRUPT_9_TBL:
1C79: 18       POP   A             (0068) 	pop		a
1C7A: 7D 1C 24 LJMP  _RX_TIMEOUT_ISR(0069) 	ljmp	_RX_TIMEOUT_ISR
1C7D: 18       POP   A             (0070) 	pop		a
1C7E: 7D 1C 0E LJMP  _TX_TIMEOUT_ISR(0071) 	ljmp	_TX_TIMEOUT_ISR
                                   (0072) ; Resume Code Compressor.
                                   (0073) ; The next instruction does not get executed.
                                   (0074) 	Resume_CodeCompressor

FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.985.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.01
