 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;          angle -> X+4
 0000           ;  softwareReset -> X+2
 0000           ;      tempValue -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3808              add SP,8
 0004                   .dbline 97
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>              // part specific constants and macros
 0004           ; #include "PSoCAPI.h"          // PSoC API definitions for all User Modules
 0004           ; #include "psocdynamic.h"
 0004           ; #include <stdlib.h>
 0004           ; #include <string.h>
 0004           ; #pragma interrupt_handler TX_TIMEOUT_ISR
 0004           ; #pragma interrupt_handler RX_TIMEOUT_ISR
 0004           ; 
 0004           ; // These defines are used as parameters of the configToggle function.
 0004           ; // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
 0004           ; #define               PC_MODE                                         (2)
 0004           ; #define               RX_MODE                                         (1)
 0004           ; #define               TX_MODE                                         (0)
 0004           ; 
 0004           ; // These defines are used as comparisons to find what port the newest module is connected to.
 0004           ; #define               PORT_1                                          ('1')
 0004           ; #define               PORT_2                                          ('2')
 0004           ; #define               PORT_3                                          ('3')
 0004           ; #define               PORT_4                                          ('4')
 0004           ; 
 0004           ; // These defines are used as transmission indicators.
 0004           ; #define               START_TRANSMIT                          (252)   // Indicates the beginning of a transmission.
 0004           ; #define               END_TRANSMIT                            (253)   // Indicates the end of a transmission.
 0004           ; #define               HELLO_BYTE                                      (200)   // Indicates master is ready to talk.
 0004           ; #define               ID_ASSIGNMENT                           (201)   // Indicates an ID assignment from the master.
 0004           ; #define               ID_ASSIGN_OK                            (202)   // Indicates an ID assignment is acknowledged.
 0004           ; #define               PING                                            (203)   // Indicates that someone is pinging someone else.
 0004           ; #define               CLEAR_CONFIG                            (204)   // Indicates that the master is asking for a config clear.
 0004           ; #define               CONFIG_CLEARED                          (205)   // Indicates that a module has cleared its own config.
 0004           ; #define               MASTER_ID                                       (0)             // The master node's ID.
 0004           ; #define               BROADCAST                                       (254)   // The broadcast ID for talking to all nodes.
 0004           ; #define               BLANK_MODULE_ID                         (251)   // This is the ID of an unconfigured module.
 0004           ; 
 0004           ; // These defines are used to fill in the instruction we are using on the servo.
 0004           ; #define               PING_SERVO                                      (1)             // This is the instruction number for ping.
 0004           ; #define               READ_SERVO                                      (2)             // This is the instruction number for a read.
 0004           ; #define               WRITE_SERVO                                     (3)             // This is the instruction number for a write.
 0004           ; #define               RESET_SERVO                                     (6)             // This is the instruction to reset the servo EEPROM.
 0004           ; 
 0004           ; // These defines are used for transmission timing.
 0004           ; #define       RX_TIMEOUT_DURATION                     (5)             // This is receive wait time in 1 ms units.
 0004           ; 
 0004           ; // These defines are used for the initial probing stage, where receive waits are longer to make
 0004           ; // sure of transmission failure or success.
 0004           ; #define               BOOT_TIMEOUT                            (200)   // This is boot wait time in 1 ms units.
 0004           ; #define               MAX_TIMEOUTS                            (5)     // Number of timeouts allowed before hello mode exit.
 0004           ; 
 0004           ; // This is the maximum number of allowable modules per branch out from the master
 0004           ; #define               MAX_MODULES                                     (250)
 0004           ; 
 0004           ; #define               SERVO_START                                     (255)
 0004           ; 
 0004           ; // This function receives a mode identifier as a parameter and toggles the
 0004           ; // system configuration between receive and transmit modes for half duplex UART.
 0004           ; void configToggle(int mode);
 0004           ; 
 0004           ; // This function pings the index passed to it. Returns 1 on success, 0 on fail.
 0004           ; int pingModule(int module_id);
 0004           ; 
 0004           ; // This function assigns an ID to a module.
 0004           ; int assignID(int assigned_ID);
 0004           ; 
 0004           ; int validTransmission(void);
 0004           ; 
 0004           ; void decodeTransmission(void);
 0004           ; 
 0004           ; void sayHello(void);
 0004           ; 
 0004           ; void servoInstruction(char id, char length, char instruction, char address, char value);
 0004           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
 0004           ; 
 0004           ; int clearConfig(int module_id);
 0004           ; // This function checks the current mode and unloads the configuration for that mode.
 0004           ; void unloadAllConfigs(void);
 0004           ; // This function unloads the configuration corresponding to the number passed to it.
 0004           ; void unloadConfig(int config_num);
 0004           ; // Initialization function for the slave module controllers.
 0004           ; void initializeSlaves(void);
 0004           ; // Static wait time of approximately 50 microseconds for use after starting a transmission.
 0004           ; void xmitWait(void);
 0004           ; 
 0004           ; // This flag is set if there is a timeout.
 0004           ; int TIMEOUT;
 0004           ; 
 0004           ; int NUM_MODULES;                      // Stores the number of modules that have been discovered.
 0004           ; char COMMAND_SOURCE;          // Stores who the current command is from.
 0004           ; char COMMAND_DESTINATION;     // Stores who the current command is for.
 0004           ; char COMMAND_TYPE;                    // Stores the type of command that was just read.
 0004           ; char PARAM[10];                               // Stores a parameters that accompanies the command (if any).
 0004           ; int STATE;                                    // Stores the current configuration state of the system.
 0004           ; 
 0004           ; void main()
 0004           ; {     
 0004                   .dbline 98
 0004           ;       int tempValue = 0;
 0004 560100            mov [X+1],0
 0007 560000            mov [X+0],0
 000A                   .dbline 99
 000A           ;       int softwareReset = 0;
 000A 560300            mov [X+3],0
 000D 560200            mov [X+2],0
 0010                   .dbline 100
 0010           ;       float angle = 0;
 0010 560400            mov [X+4],0
 0013 560500            mov [X+5],0
 0016 560600            mov [X+6],0
 0019 560700            mov [X+7],0
 001C                   .dbline 102
 001C           ;       
 001C           ;       NUM_MODULES = 0;
 001C 62D000            mov REG[0xd0],>_NUM_MODULES
 001F 550100            mov [_NUM_MODULES+1],0
 0022 550000            mov [_NUM_MODULES],0
 0025                   .dbline 104
 0025           ;       
 0025           ;       M8C_EnableGInt;                 // Turn on global interrupts for the transmission timeout timer.
 0025 7101                      or  F, 01h
 0027           
 0027                   .dbline 105
 0027           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); //activate GPIO ISR
 0027 43E020            or REG[0xe0],32
 002A                   .dbline 107
 002A           ;       
 002A           ;       unloadAllConfigs();
 002A 7C0C4D            xcall _unloadAllConfigs
 002D                   .dbline 109
 002D           ; 
 002D           ;       configToggle(RX_MODE);
 002D 5000              mov A,0
 002F 08                push A
 0030 5001              mov A,1
 0032 08                push A
 0033 7C0B5E            xcall _configToggle
 0036 38FE              add SP,-2
 0038           L2:
 0038                   .dbline 112
 0038           ;               
 0038           ;       // Sit and wait for the worst case setup time to occur.
 0038           ;       while(TIMEOUT < BOOT_TIMEOUT) { }
 0038                   .dbline 112
 0038           L3:
 0038                   .dbline 112
 0038 62D000            mov REG[0xd0],>_TIMEOUT
 003B 5101              mov A,[_TIMEOUT+1]
 003D 11C8              sub A,-56
 003F 5100              mov A,[_TIMEOUT]
 0041 3180              xor A,-128
 0043 1980              sbb A,(0 ^ 0x80)
 0045 CFF2              jc L2
 0047           X1:
 0047                   .dbline 115
 0047           ;               
 0047           ;       // Initialize all of the slave modules.
 0047           ;       initializeSlaves();
 0047 7C0C86            xcall _initializeSlaves
 004A 800F              xjmp L6
 004C           L5:
 004C                   .dbline 118
 004C           ;       
 004C           ;       while(1)
 004C           ;       {       
 004C                   .dbline 119
 004C           ;               if(COMP_SERIAL_bCmdCheck())
 004C 10                push X
 004D 7C0000            xcall _COMP_SERIAL_bCmdCheck
 0050 62D000            mov REG[0xd0],>__r0
 0053 20                pop X
 0054 3900              cmp A,0
 0056 A003              jz L8
 0058                   .dbline 120
 0058           ;               {
 0058                   .dbline 121
 0058           ;                       decodeTransmission();
 0058 945D              xcall _decodeTransmission
 005A                   .dbline 122
 005A           ;               }
 005A           L8:
 005A                   .dbline 123
 005A           ;       }
 005A           L6:
 005A                   .dbline 117
 005A 8FF1              xjmp L5
 005C           X0:
 005C                   .dbline -2
 005C           L1:
 005C 38F8              add SP,-8
 005E 20                pop X
 005F                   .dbline 0 ; func end
 005F 8FFF              jmp .
 0061                   .dbsym l angle 4 D
 0061                   .dbsym l softwareReset 2 I
 0061                   .dbsym l tempValue 0 I
 0061                   .dbend
 0061                   .dbfunc e pingModule _pingModule fI
 0061           ;       response -> X+0
 0061           ;      module_id -> X-5
 0061           _pingModule::
 0061                   .dbline -1
 0061 10                push X
 0062 4F                mov X,SP
 0063 3802              add SP,2
 0065                   .dbline 127
 0065           ; }
 0065           ; 
 0065           ; int pingModule(int module_id)
 0065           ; {
 0065                   .dbline 128
 0065           ;       int response = 0;
 0065 560100            mov [X+1],0
 0068 560000            mov [X+0],0
 006B                   .dbline 130
 006B           ;       
 006B           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 006B 5000              mov A,0
 006D 08                push A
 006E 08                push A
 006F 7C0B5E            xcall _configToggle
 0072 38FE              add SP,-2
 0074                   .dbline 133
 0074           ;                       
 0074           ;       // Transmit a hello.
 0074           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0074 10                push X
 0075 50FC              mov A,-4
 0077 7C0000            xcall _TRANSMIT_PutChar
 007A 20                pop X
 007B                   .dbline 134
 007B           ;       TRANSMIT_PutChar(START_TRANSMIT);
 007B 10                push X
 007C 50FC              mov A,-4
 007E 7C0000            xcall _TRANSMIT_PutChar
 0081 20                pop X
 0082                   .dbline 135
 0082           ;       TRANSMIT_PutChar(MASTER_ID);
 0082 10                push X
 0083 5000              mov A,0
 0085 7C0000            xcall _TRANSMIT_PutChar
 0088 20                pop X
 0089                   .dbline 136
 0089           ;       TRANSMIT_PutChar(module_id);
 0089 62D000            mov REG[0xd0],>__r0
 008C 52FC              mov A,[X-4]
 008E 10                push X
 008F 7C0000            xcall _TRANSMIT_PutChar
 0092 20                pop X
 0093                   .dbline 137
 0093           ;       TRANSMIT_PutChar(PING);
 0093 10                push X
 0094 50CB              mov A,-53
 0096 7C0000            xcall _TRANSMIT_PutChar
 0099 20                pop X
 009A                   .dbline 138
 009A           ;       TRANSMIT_PutChar(END_TRANSMIT);
 009A 10                push X
 009B 50FD              mov A,-3
 009D 7C0000            xcall _TRANSMIT_PutChar
 00A0 20                pop X
 00A1                   .dbline 139
 00A1           ;       TRANSMIT_PutChar(END_TRANSMIT);
 00A1 10                push X
 00A2 50FD              mov A,-3
 00A4 7C0000            xcall _TRANSMIT_PutChar
 00A7 20                pop X
 00A8           L11:
 00A8                   .dbline 142
 00A8           ;       
 00A8           ;       // Wait for the transmission to finish.
 00A8           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 00A8           L12:
 00A8                   .dbline 142
 00A8 10                push X
 00A9 7C0000            xcall _TRANSMIT_bReadTxStatus
 00AC 62D000            mov REG[0xd0],>__r0
 00AF 20                pop X
 00B0 5300              mov [__r0],A
 00B2 470020            tst [__r0],32
 00B5 AFF2              jz L11
 00B7                   .dbline 144
 00B7           ;       
 00B7           ;       xmitWait();
 00B7 7C0DB4            xcall _xmitWait
 00BA                   .dbline 146
 00BA           ;       
 00BA           ;       configToggle(RX_MODE);  // Listen for the response.
 00BA 5000              mov A,0
 00BC 08                push A
 00BD 5001              mov A,1
 00BF 08                push A
 00C0 7C0B5E            xcall _configToggle
 00C3 38FE              add SP,-2
 00C5                   .dbline 148
 00C5           ;       
 00C5           ;       RX_TIMEOUT_Stop();
 00C5 10                push X
 00C6 7C0000            xcall _RX_TIMEOUT_Stop
 00C9 20                pop X
 00CA                   .dbline 149
 00CA           ;       TIMEOUT = 0;
 00CA 62D000            mov REG[0xd0],>_TIMEOUT
 00CD 550100            mov [_TIMEOUT+1],0
 00D0 550000            mov [_TIMEOUT],0
 00D3                   .dbline 150
 00D3           ;       RX_TIMEOUT_Start();
 00D3 10                push X
 00D4 7C0000            xcall _RX_TIMEOUT_Start
 00D7 20                pop X
 00D8 803C              xjmp L15
 00DA           L14:
 00DA                   .dbline 153
 00DA           ;       
 00DA           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 00DA           ;       {
 00DA                   .dbline 154
 00DA           ;               if(validTransmission())
 00DA 92E7              xcall _validTransmission
 00DC 62D000            mov REG[0xd0],>__r0
 00DF 3C0000            cmp [__r0],0
 00E2 B006              jnz X2
 00E4 3C0000            cmp [__r1],0
 00E7 A02D              jz L17
 00E9           X2:
 00E9                   .dbline 155
 00E9           ;               {
 00E9                   .dbline 156
 00E9           ;                       if(COMMAND_TYPE == PING)        // This is the response we are looking for.
 00E9 62D000            mov REG[0xd0],>_COMMAND_TYPE
 00EC 3C00CB            cmp [_COMMAND_TYPE],-53
 00EF B025              jnz L19
 00F1                   .dbline 157
 00F1           ;                       {
 00F1                   .dbline 159
 00F1           ;                               // If this is for me, check who it was from.
 00F1           ;                               if(COMMAND_DESTINATION == MASTER_ID)
 00F1 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 00F4 3C0000            cmp [_COMMAND_DESTINATION],0
 00F7 B01D              jnz L21
 00F9                   .dbline 160
 00F9           ;                               {
 00F9                   .dbline 161
 00F9           ;                                       if(COMMAND_SOURCE == module_id)
 00F9 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 00FC 5100              mov A,[_COMMAND_SOURCE]
 00FE 62D000            mov REG[0xd0],>__r0
 0101 5300              mov [__r1],A
 0103 5000              mov A,0
 0105 3BFB              cmp A,[X-5]
 0107 B00D              jnz L23
 0109 5100              mov A,[__r1]
 010B 3BFC              cmp A,[X-4]
 010D B007              jnz L23
 010F           X3:
 010F                   .dbline 162
 010F           ;                                       {
 010F                   .dbline 163
 010F           ;                                               response = 1;
 010F 560101            mov [X+1],1
 0112 560000            mov [X+0],0
 0115                   .dbline 164
 0115           ;                                       }
 0115           L23:
 0115                   .dbline 165
 0115           ;                               }
 0115           L21:
 0115                   .dbline 166
 0115           ;                       }
 0115           L19:
 0115                   .dbline 167
 0115           ;               }
 0115           L17:
 0115                   .dbline 168
 0115           ;       }
 0115           L15:
 0115                   .dbline 152
 0115 62D000            mov REG[0xd0],>_TIMEOUT
 0118 5101              mov A,[_TIMEOUT+1]
 011A 1105              sub A,5
 011C 5100              mov A,[_TIMEOUT]
 011E 3180              xor A,-128
 0120 1980              sbb A,(0 ^ 0x80)
 0122 D00B              jnc L25
 0124           X4:
 0124 3D0000            cmp [X+0],0
 0127 B006              jnz X5
 0129 3D0100            cmp [X+1],0
 012C AFAD              jz L14
 012E           X5:
 012E           L25:
 012E                   .dbline 170
 012E           ;       
 012E           ;       RX_TIMEOUT_Stop();
 012E 10                push X
 012F 7C0000            xcall _RX_TIMEOUT_Stop
 0132 20                pop X
 0133                   .dbline 171
 0133           ;       TIMEOUT = 0;
 0133 62D000            mov REG[0xd0],>_TIMEOUT
 0136 550100            mov [_TIMEOUT+1],0
 0139 550000            mov [_TIMEOUT],0
 013C                   .dbline 172
 013C           ;       RX_TIMEOUT_Start();
 013C 10                push X
 013D 7C0000            xcall _RX_TIMEOUT_Start
 0140 20                pop X
 0141                   .dbline 174
 0141           ;       
 0141           ;       return response;
 0141 62D000            mov REG[0xd0],>__r0
 0144 5201              mov A,[X+1]
 0146 5300              mov [__r1],A
 0148 5200              mov A,[X+0]
 014A 5300              mov [__r0],A
 014C                   .dbline -2
 014C           L10:
 014C 38FE              add SP,-2
 014E 20                pop X
 014F                   .dbline 0 ; func end
 014F 7F                ret
 0150                   .dbsym l response 0 I
 0150                   .dbsym l module_id -5 I
 0150                   .dbend
 0150                   .dbfunc e assignID _assignID fI
 0150           ;        success -> X+0
 0150           ;    assigned_ID -> X-5
 0150           _assignID::
 0150                   .dbline -1
 0150 10                push X
 0151 4F                mov X,SP
 0152 3802              add SP,2
 0154                   .dbline 178
 0154           ; }
 0154           ; 
 0154           ; int assignID(int assigned_ID)
 0154           ; {
 0154                   .dbline 179
 0154           ;       int success = 0;                // Stores 0 on fail, 1 on success.
 0154 560100            mov [X+1],0
 0157 560000            mov [X+0],0
 015A                   .dbline 181
 015A           ;       
 015A           ;       configToggle(TX_MODE);  // Switch to TX mode.
 015A 5000              mov A,0
 015C 08                push A
 015D 08                push A
 015E 7C0B5E            xcall _configToggle
 0161 38FE              add SP,-2
 0163                   .dbline 184
 0163           ; 
 0163           ;       // Transmit the assignment.
 0163           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0163 10                push X
 0164 50FC              mov A,-4
 0166 7C0000            xcall _TRANSMIT_PutChar
 0169 20                pop X
 016A                   .dbline 185
 016A           ;       TRANSMIT_PutChar(START_TRANSMIT);
 016A 10                push X
 016B 50FC              mov A,-4
 016D 7C0000            xcall _TRANSMIT_PutChar
 0170 20                pop X
 0171                   .dbline 186
 0171           ;       TRANSMIT_PutChar(MASTER_ID);
 0171 10                push X
 0172 5000              mov A,0
 0174 7C0000            xcall _TRANSMIT_PutChar
 0177 20                pop X
 0178                   .dbline 187
 0178           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 0178 10                push X
 0179 50FB              mov A,-5
 017B 7C0000            xcall _TRANSMIT_PutChar
 017E 20                pop X
 017F                   .dbline 188
 017F           ;       TRANSMIT_PutChar(ID_ASSIGNMENT);
 017F 10                push X
 0180 50C9              mov A,-55
 0182 7C0000            xcall _TRANSMIT_PutChar
 0185 20                pop X
 0186                   .dbline 189
 0186           ;       TRANSMIT_PutChar(assigned_ID);
 0186 62D000            mov REG[0xd0],>__r0
 0189 52FC              mov A,[X-4]
 018B 10                push X
 018C 7C0000            xcall _TRANSMIT_PutChar
 018F 20                pop X
 0190                   .dbline 190
 0190           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0190 10                push X
 0191 50FD              mov A,-3
 0193 7C0000            xcall _TRANSMIT_PutChar
 0196 20                pop X
 0197                   .dbline 191
 0197           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0197 10                push X
 0198 50FD              mov A,-3
 019A 7C0000            xcall _TRANSMIT_PutChar
 019D 20                pop X
 019E           L27:
 019E                   .dbline 194
 019E           ;       
 019E           ;       // Wait for the transmission to finish.
 019E           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 019E           L28:
 019E                   .dbline 194
 019E 10                push X
 019F 7C0000            xcall _TRANSMIT_bReadTxStatus
 01A2 62D000            mov REG[0xd0],>__r0
 01A5 20                pop X
 01A6 5300              mov [__r0],A
 01A8 470020            tst [__r0],32
 01AB AFF2              jz L27
 01AD                   .dbline 196
 01AD           ;       
 01AD           ;       xmitWait();
 01AD 7C0DB4            xcall _xmitWait
 01B0                   .dbline 198
 01B0           ;       
 01B0           ;       configToggle(RX_MODE);  // Switch back to receive mode.
 01B0 5000              mov A,0
 01B2 08                push A
 01B3 5001              mov A,1
 01B5 08                push A
 01B6 7C0B5E            xcall _configToggle
 01B9 38FE              add SP,-2
 01BB                   .dbline 200
 01BB           ;       
 01BB           ;       RX_TIMEOUT_Stop();
 01BB 10                push X
 01BC 7C0000            xcall _RX_TIMEOUT_Stop
 01BF 20                pop X
 01C0                   .dbline 201
 01C0           ;       TIMEOUT = 0;
 01C0 62D000            mov REG[0xd0],>_TIMEOUT
 01C3 550100            mov [_TIMEOUT+1],0
 01C6 550000            mov [_TIMEOUT],0
 01C9                   .dbline 202
 01C9           ;       RX_TIMEOUT_Start();
 01C9 10                push X
 01CA 7C0000            xcall _RX_TIMEOUT_Start
 01CD 20                pop X
 01CE 803C              xjmp L31
 01D0           L30:
 01D0                   .dbline 205
 01D0           ;       
 01D0           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
 01D0           ;       {
 01D0                   .dbline 206
 01D0           ;               if(validTransmission())
 01D0 91F1              xcall _validTransmission
 01D2 62D000            mov REG[0xd0],>__r0
 01D5 3C0000            cmp [__r0],0
 01D8 B006              jnz X6
 01DA 3C0000            cmp [__r1],0
 01DD A02D              jz L33
 01DF           X6:
 01DF                   .dbline 207
 01DF           ;               {
 01DF                   .dbline 208
 01DF           ;                       if(COMMAND_TYPE == ID_ASSIGN_OK)        // This is the response we are looking for.
 01DF 62D000            mov REG[0xd0],>_COMMAND_TYPE
 01E2 3C00CA            cmp [_COMMAND_TYPE],-54
 01E5 B025              jnz L35
 01E7                   .dbline 209
 01E7           ;                       {
 01E7                   .dbline 211
 01E7           ;                               // If this is for me, check who it was from.
 01E7           ;                               if(COMMAND_DESTINATION == MASTER_ID)
 01E7 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 01EA 3C0000            cmp [_COMMAND_DESTINATION],0
 01ED B01D              jnz L37
 01EF                   .dbline 212
 01EF           ;                               {
 01EF                   .dbline 213
 01EF           ;                                       if(COMMAND_SOURCE == assigned_ID)
 01EF 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 01F2 5100              mov A,[_COMMAND_SOURCE]
 01F4 62D000            mov REG[0xd0],>__r0
 01F7 5300              mov [__r1],A
 01F9 5000              mov A,0
 01FB 3BFB              cmp A,[X-5]
 01FD B00D              jnz L39
 01FF 5100              mov A,[__r1]
 0201 3BFC              cmp A,[X-4]
 0203 B007              jnz L39
 0205           X7:
 0205                   .dbline 214
 0205           ;                                       {
 0205                   .dbline 215
 0205           ;                                               success = 1;
 0205 560101            mov [X+1],1
 0208 560000            mov [X+0],0
 020B                   .dbline 216
 020B           ;                                       }
 020B           L39:
 020B                   .dbline 217
 020B           ;                               }
 020B           L37:
 020B                   .dbline 218
 020B           ;                       }
 020B           L35:
 020B                   .dbline 219
 020B           ;               }
 020B           L33:
 020B                   .dbline 220
 020B           ;       }
 020B           L31:
 020B                   .dbline 204
 020B 62D000            mov REG[0xd0],>_TIMEOUT
 020E 5101              mov A,[_TIMEOUT+1]
 0210 1105              sub A,5
 0212 5100              mov A,[_TIMEOUT]
 0214 3180              xor A,-128
 0216 1980              sbb A,(0 ^ 0x80)
 0218 D00B              jnc L41
 021A           X8:
 021A 3D0000            cmp [X+0],0
 021D B006              jnz X9
 021F 3D0100            cmp [X+1],0
 0222 AFAD              jz L30
 0224           X9:
 0224           L41:
 0224                   .dbline 222
 0224           ;       
 0224           ;       LCD_1_Start();
 0224 10                push X
 0225 7C0000            xcall _LCD_1_Start
 0228 20                pop X
 0229                   .dbline 223
 0229           ;       LCD_1_Position(0,0);
 0229 10                push X
 022A 5000              mov A,0
 022C 5C                mov X,A
 022D 7C0000            xcall _LCD_1_Position
 0230 20                pop X
 0231                   .dbline 224
 0231           ;       LCD_1_PrHexInt(NUM_MODULES);
 0231 10                push X
 0232 62D000            mov REG[0xd0],>_NUM_MODULES
 0235 5100              mov A,[_NUM_MODULES]
 0237 08                push A
 0238 5101              mov A,[_NUM_MODULES+1]
 023A 20                pop X
 023B 7C0000            xcall _LCD_1_PrHexInt
 023E 20                pop X
 023F                   .dbline 225
 023F           ;       LCD_1_Position(0,5);
 023F 10                push X
 0240 5705              mov X,5
 0242 5000              mov A,0
 0244 7C0000            xcall _LCD_1_Position
 0247 20                pop X
 0248                   .dbline 226
 0248           ;       LCD_1_PrCString("Modules!");
 0248 10                push X
 0249 5000              mov A,>L42
 024B 08                push A
 024C 5000              mov A,<L42
 024E 5C                mov X,A
 024F 18                pop A
 0250 7C0000            xcall _LCD_1_PrCString
 0253                   .dbline 228
 0253           ;       
 0253           ;       RX_TIMEOUT_Stop();
 0253 7C0000            xcall _RX_TIMEOUT_Stop
 0256 20                pop X
 0257                   .dbline 229
 0257           ;       TIMEOUT = 0;
 0257 62D000            mov REG[0xd0],>_TIMEOUT
 025A 550100            mov [_TIMEOUT+1],0
 025D 550000            mov [_TIMEOUT],0
 0260                   .dbline 230
 0260           ;       RX_TIMEOUT_Start();
 0260 10                push X
 0261 7C0000            xcall _RX_TIMEOUT_Start
 0264 20                pop X
 0265                   .dbline 232
 0265           ;       
 0265           ;       return success;
 0265 62D000            mov REG[0xd0],>__r0
 0268 5201              mov A,[X+1]
 026A 5300              mov [__r1],A
 026C 5200              mov A,[X+0]
 026E 5300              mov [__r0],A
 0270                   .dbline -2
 0270           L26:
 0270 38FE              add SP,-2
 0272 20                pop X
 0273                   .dbline 0 ; func end
 0273 7F                ret
 0274                   .dbsym l success 0 I
 0274                   .dbsym l assigned_ID -5 I
 0274                   .dbend
 0274                   .dbfunc e clearConfig _clearConfig fI
 0274           ;       response -> X+0
 0274           ;      module_id -> X-5
 0274           _clearConfig::
 0274                   .dbline -1
 0274 10                push X
 0275 4F                mov X,SP
 0276 3802              add SP,2
 0278                   .dbline 236
 0278           ; }
 0278           ; 
 0278           ; int clearConfig(int module_id)
 0278           ; {
 0278                   .dbline 237
 0278           ;       int response = 0;
 0278 560100            mov [X+1],0
 027B 560000            mov [X+0],0
 027E                   .dbline 239
 027E           ;       
 027E           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 027E 5000              mov A,0
 0280 08                push A
 0281 08                push A
 0282 7C0B5E            xcall _configToggle
 0285 38FE              add SP,-2
 0287                   .dbline 242
 0287           ;                       
 0287           ;       // Transmit a hello.
 0287           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0287 10                push X
 0288 50FC              mov A,-4
 028A 7C0000            xcall _TRANSMIT_PutChar
 028D 20                pop X
 028E                   .dbline 243
 028E           ;       TRANSMIT_PutChar(START_TRANSMIT);
 028E 10                push X
 028F 50FC              mov A,-4
 0291 7C0000            xcall _TRANSMIT_PutChar
 0294 20                pop X
 0295                   .dbline 244
 0295           ;       TRANSMIT_PutChar(MASTER_ID);
 0295 10                push X
 0296 5000              mov A,0
 0298 7C0000            xcall _TRANSMIT_PutChar
 029B 20                pop X
 029C                   .dbline 245
 029C           ;       TRANSMIT_PutChar(module_id);
 029C 62D000            mov REG[0xd0],>__r0
 029F 52FC              mov A,[X-4]
 02A1 10                push X
 02A2 7C0000            xcall _TRANSMIT_PutChar
 02A5 20                pop X
 02A6                   .dbline 246
 02A6           ;       TRANSMIT_PutChar(CLEAR_CONFIG);
 02A6 10                push X
 02A7 50CC              mov A,-52
 02A9 7C0000            xcall _TRANSMIT_PutChar
 02AC 20                pop X
 02AD                   .dbline 247
 02AD           ;       TRANSMIT_PutChar(END_TRANSMIT);
 02AD 10                push X
 02AE 50FD              mov A,-3
 02B0 7C0000            xcall _TRANSMIT_PutChar
 02B3 20                pop X
 02B4                   .dbline 248
 02B4           ;       TRANSMIT_PutChar(END_TRANSMIT);
 02B4 10                push X
 02B5 50FD              mov A,-3
 02B7 7C0000            xcall _TRANSMIT_PutChar
 02BA 20                pop X
 02BB           L44:
 02BB                   .dbline 251
 02BB           ;       
 02BB           ;       // Wait for the transmission to finish.
 02BB           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 02BB           L45:
 02BB                   .dbline 251
 02BB 10                push X
 02BC 7C0000            xcall _TRANSMIT_bReadTxStatus
 02BF 62D000            mov REG[0xd0],>__r0
 02C2 20                pop X
 02C3 5300              mov [__r0],A
 02C5 470020            tst [__r0],32
 02C8 AFF2              jz L44
 02CA                   .dbline 253
 02CA           ;       
 02CA           ;       xmitWait();
 02CA 7C0DB4            xcall _xmitWait
 02CD                   .dbline 255
 02CD           ;       
 02CD           ;       configToggle(RX_MODE);  // Listen for the response.
 02CD 5000              mov A,0
 02CF 08                push A
 02D0 5001              mov A,1
 02D2 08                push A
 02D3 7C0B5E            xcall _configToggle
 02D6 38FE              add SP,-2
 02D8                   .dbline 257
 02D8           ;       
 02D8           ;       if(module_id != BROADCAST)
 02D8 3DFB00            cmp [X-5],0
 02DB B006              jnz X10
 02DD 3DFCFE            cmp [X-4],-2
 02E0 A07D              jz L47
 02E2           X10:
 02E2                   .dbline 258
 02E2           ;       {
 02E2                   .dbline 259
 02E2           ;               RX_TIMEOUT_Stop();
 02E2 10                push X
 02E3 7C0000            xcall _RX_TIMEOUT_Stop
 02E6 20                pop X
 02E7                   .dbline 260
 02E7           ;               TIMEOUT = 0;
 02E7 62D000            mov REG[0xd0],>_TIMEOUT
 02EA 550100            mov [_TIMEOUT+1],0
 02ED 550000            mov [_TIMEOUT],0
 02F0                   .dbline 261
 02F0           ;               RX_TIMEOUT_Start();
 02F0 10                push X
 02F1 7C0000            xcall _RX_TIMEOUT_Start
 02F4 20                pop X
 02F5 803C              xjmp L50
 02F7           L49:
 02F7                   .dbline 264
 02F7           ;               
 02F7           ;               while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 02F7           ;               {
 02F7                   .dbline 265
 02F7           ;                       if(validTransmission())
 02F7 90CA              xcall _validTransmission
 02F9 62D000            mov REG[0xd0],>__r0
 02FC 3C0000            cmp [__r0],0
 02FF B006              jnz X11
 0301 3C0000            cmp [__r1],0
 0304 A02D              jz L52
 0306           X11:
 0306                   .dbline 266
 0306           ;                       {
 0306                   .dbline 267
 0306           ;                               if(COMMAND_TYPE == CONFIG_CLEARED)      // This is the response we are looking for.
 0306 62D000            mov REG[0xd0],>_COMMAND_TYPE
 0309 3C00CD            cmp [_COMMAND_TYPE],-51
 030C B025              jnz L54
 030E                   .dbline 268
 030E           ;                               {
 030E                   .dbline 270
 030E           ;                                       // If this is for me, check who it was from.
 030E           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 030E 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0311 3C0000            cmp [_COMMAND_DESTINATION],0
 0314 B01D              jnz L56
 0316                   .dbline 271
 0316           ;                                       {
 0316                   .dbline 272
 0316           ;                                               if(COMMAND_SOURCE == module_id)
 0316 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 0319 5100              mov A,[_COMMAND_SOURCE]
 031B 62D000            mov REG[0xd0],>__r0
 031E 5300              mov [__r1],A
 0320 5000              mov A,0
 0322 3BFB              cmp A,[X-5]
 0324 B00D              jnz L58
 0326 5100              mov A,[__r1]
 0328 3BFC              cmp A,[X-4]
 032A B007              jnz L58
 032C           X12:
 032C                   .dbline 273
 032C           ;                                               {
 032C                   .dbline 274
 032C           ;                                                       response = 1;
 032C 560101            mov [X+1],1
 032F 560000            mov [X+0],0
 0332                   .dbline 275
 0332           ;                                               }
 0332           L58:
 0332                   .dbline 276
 0332           ;                                       }
 0332           L56:
 0332                   .dbline 277
 0332           ;                               }
 0332           L54:
 0332                   .dbline 278
 0332           ;                       }
 0332           L52:
 0332                   .dbline 279
 0332           ;               }
 0332           L50:
 0332                   .dbline 263
 0332 62D000            mov REG[0xd0],>_TIMEOUT
 0335 5101              mov A,[_TIMEOUT+1]
 0337 1105              sub A,5
 0339 5100              mov A,[_TIMEOUT]
 033B 3180              xor A,-128
 033D 1980              sbb A,(0 ^ 0x80)
 033F D00B              jnc L60
 0341           X13:
 0341 3D0000            cmp [X+0],0
 0344 B006              jnz X14
 0346 3D0100            cmp [X+1],0
 0349 AFAD              jz L49
 034B           X14:
 034B           L60:
 034B                   .dbline 281
 034B           ;               
 034B           ;               RX_TIMEOUT_Stop();
 034B 10                push X
 034C 7C0000            xcall _RX_TIMEOUT_Stop
 034F 20                pop X
 0350                   .dbline 282
 0350           ;               TIMEOUT = 0;
 0350 62D000            mov REG[0xd0],>_TIMEOUT
 0353 550100            mov [_TIMEOUT+1],0
 0356 550000            mov [_TIMEOUT],0
 0359                   .dbline 283
 0359           ;               RX_TIMEOUT_Start();
 0359 10                push X
 035A 7C0000            xcall _RX_TIMEOUT_Start
 035D 20                pop X
 035E                   .dbline 284
 035E           ;       }
 035E           L47:
 035E                   .dbline 286
 035E           ;       
 035E           ;       return response;
 035E 62D000            mov REG[0xd0],>__r0
 0361 5201              mov A,[X+1]
 0363 5300              mov [__r1],A
 0365 5200              mov A,[X+0]
 0367 5300              mov [__r0],A
 0369                   .dbline -2
 0369           L43:
 0369 38FE              add SP,-2
 036B 20                pop X
 036C                   .dbline 0 ; func end
 036C 7F                ret
 036D                   .dbsym l response 0 I
 036D                   .dbsym l module_id -5 I
 036D                   .dbend
 036D                   .dbfunc e sayHello _sayHello fV
 036D           _sayHello::
 036D                   .dbline -1
 036D                   .dbline 291
 036D           ; }
 036D           ; 
 036D           ; // This function transmits a hello message.
 036D           ; void sayHello(void)
 036D           ; {
 036D                   .dbline 292
 036D           ;       configToggle(TX_MODE);                          // Toggle into TX mode.
 036D 5000              mov A,0
 036F 08                push A
 0370 08                push A
 0371 97EB              xcall _configToggle
 0373 38FE              add SP,-2
 0375                   .dbline 295
 0375           ;                       
 0375           ;       // Transmit a hello.
 0375           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0375 10                push X
 0376 50FC              mov A,-4
 0378 7C0000            xcall _TRANSMIT_PutChar
 037B 20                pop X
 037C                   .dbline 296
 037C           ;       TRANSMIT_PutChar(START_TRANSMIT);
 037C 10                push X
 037D 50FC              mov A,-4
 037F 7C0000            xcall _TRANSMIT_PutChar
 0382 20                pop X
 0383                   .dbline 297
 0383           ;       TRANSMIT_PutChar(MASTER_ID);
 0383 10                push X
 0384 5000              mov A,0
 0386 7C0000            xcall _TRANSMIT_PutChar
 0389 20                pop X
 038A                   .dbline 298
 038A           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 038A 10                push X
 038B 50FB              mov A,-5
 038D 7C0000            xcall _TRANSMIT_PutChar
 0390 20                pop X
 0391                   .dbline 299
 0391           ;       TRANSMIT_PutChar(HELLO_BYTE);
 0391 10                push X
 0392 50C8              mov A,-56
 0394 7C0000            xcall _TRANSMIT_PutChar
 0397 20                pop X
 0398                   .dbline 300
 0398           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0398 10                push X
 0399 50FD              mov A,-3
 039B 7C0000            xcall _TRANSMIT_PutChar
 039E 20                pop X
 039F                   .dbline 301
 039F           ;       TRANSMIT_PutChar(END_TRANSMIT);
 039F 10                push X
 03A0 50FD              mov A,-3
 03A2 7C0000            xcall _TRANSMIT_PutChar
 03A5 20                pop X
 03A6           L62:
 03A6                   .dbline 304
 03A6           ;       
 03A6           ;       // Wait for the transmission to finish.
 03A6           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 03A6           L63:
 03A6                   .dbline 304
 03A6 10                push X
 03A7 7C0000            xcall _TRANSMIT_bReadTxStatus
 03AA 62D000            mov REG[0xd0],>__r0
 03AD 20                pop X
 03AE 5300              mov [__r0],A
 03B0 470020            tst [__r0],32
 03B3 AFF2              jz L62
 03B5                   .dbline 306
 03B5           ;       
 03B5           ;       xmitWait();
 03B5 7C0DB4            xcall _xmitWait
 03B8                   .dbline 308
 03B8           ;       
 03B8           ;       configToggle(RX_MODE);                          // Listen for the response.
 03B8 5000              mov A,0
 03BA 08                push A
 03BB 5001              mov A,1
 03BD 08                push A
 03BE 979E              xcall _configToggle
 03C0 38FE              add SP,-2
 03C2                   .dbline -2
 03C2           L61:
 03C2                   .dbline 0 ; func end
 03C2 7F                ret
 03C3                   .dbend
 03C3                   .dbfunc e validTransmission _validTransmission fI
 03C3           ; valid_transmit -> X+3
 03C3           ;              i -> X+1
 03C3           ;       tempByte -> X+0
 03C3           _validTransmission::
 03C3                   .dbline -1
 03C3 10                push X
 03C4 4F                mov X,SP
 03C5 3805              add SP,5
 03C7                   .dbline 313
 03C7           ; }
 03C7           ; 
 03C7           ; // This function returns whether or not a valid transmission has been received.
 03C7           ; int validTransmission(void)
 03C7           ; {
 03C7                   .dbline 314
 03C7           ;       int valid_transmit = 0;
 03C7 560400            mov [X+4],0
 03CA 560300            mov [X+3],0
 03CD                   .dbline 315
 03CD           ;       int i = 0;
 03CD 560200            mov [X+2],0
 03D0 560100            mov [X+1],0
 03D3                   .dbline 316
 03D3           ;       char tempByte = 0;
 03D3 560000            mov [X+0],0
 03D6 80C2              xjmp L67
 03D8           L66:
 03D8                   .dbline 319
 03D8           ;       
 03D8           ;       while(TIMEOUT < RX_TIMEOUT_DURATION)
 03D8           ;       {
 03D8                   .dbline 320
 03D8           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 03D8 10                push X
 03D9 7C0000            xcall _RECEIVE_cReadChar
 03DC 62D000            mov REG[0xd0],>__r0
 03DF 20                pop X
 03E0 39FC              cmp A,-4
 03E2 B0B6              jnz L69
 03E4                   .dbline 321
 03E4           ;               {
 03E4 80A5              xjmp L72
 03E6           L71:
 03E6                   .dbline 323
 03E6           ;                       while(TIMEOUT < RX_TIMEOUT_DURATION)
 03E6           ;                       {
 03E6                   .dbline 324
 03E6           ;                               if(RECEIVE_cReadChar() == START_TRANSMIT)
 03E6 10                push X
 03E7 7C0000            xcall _RECEIVE_cReadChar
 03EA 62D000            mov REG[0xd0],>__r0
 03ED 20                pop X
 03EE 39FC              cmp A,-4
 03F0 B099              jnz L74
 03F2                   .dbline 325
 03F2           ;                               {
 03F2 8088              xjmp L77
 03F4           L76:
 03F4                   .dbline 327
 03F4           ;                                       while(TIMEOUT < RX_TIMEOUT_DURATION)
 03F4           ;                                       {
 03F4                   .dbline 328
 03F4           ;                                               if(tempByte = RECEIVE_cReadChar())
 03F4 10                push X
 03F5 7C0000            xcall _RECEIVE_cReadChar
 03F8 20                pop X
 03F9 5400              mov [X+0],A
 03FB 3900              cmp A,0
 03FD A07D              jz L79
 03FF                   .dbline 329
 03FF           ;                                               {
 03FF                   .dbline 330
 03FF           ;                                                       COMMAND_SOURCE = tempByte;
 03FF 5200              mov A,[X+0]
 0401 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 0404 5300              mov [_COMMAND_SOURCE],A
 0406 8065              xjmp L82
 0408           L81:
 0408                   .dbline 333
 0408           ;                                                       
 0408           ;                                                       while(TIMEOUT < RX_TIMEOUT_DURATION)
 0408           ;                                                       {
 0408                   .dbline 334
 0408           ;                                                               if(tempByte = RECEIVE_cReadChar())
 0408 10                push X
 0409 7C0000            xcall _RECEIVE_cReadChar
 040C 62D000            mov REG[0xd0],>__r0
 040F 20                pop X
 0410 5400              mov [X+0],A
 0412 3900              cmp A,0
 0414 A057              jz L84
 0416                   .dbline 335
 0416           ;                                                               {
 0416                   .dbline 336
 0416           ;                                                                       if(tempByte >= HELLO_BYTE)
 0416 3D00C8            cmp [X+0],-56
 0419 C052              jc L86
 041B           X15:
 041B                   .dbline 337
 041B           ;                                                                       {
 041B                   .dbline 338
 041B           ;                                                                               COMMAND_TYPE = tempByte;
 041B 5200              mov A,[X+0]
 041D 62D000            mov REG[0xd0],>_COMMAND_TYPE
 0420 5300              mov [_COMMAND_TYPE],A
 0422 803A              xjmp L89
 0424           L88:
 0424                   .dbline 341
 0424           ;                                                                               
 0424           ;                                                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0424           ;                                                                               {
 0424                   .dbline 342
 0424           ;                                                                                       if(tempByte = RECEIVE_cReadChar())
 0424 10                push X
 0425 7C0000            xcall _RECEIVE_cReadChar
 0428 62D000            mov REG[0xd0],>__r0
 042B 20                pop X
 042C 5400              mov [X+0],A
 042E 3900              cmp A,0
 0430 A02C              jz L91
 0432                   .dbline 343
 0432           ;                                                                                       {
 0432                   .dbline 344
 0432           ;                                                                                               if(tempByte != END_TRANSMIT)
 0432 3D00FD            cmp [X+0],-3
 0435 A018              jz L93
 0437                   .dbline 345
 0437           ;                                                                                               {
 0437                   .dbline 346
 0437           ;                                                                                                       PARAM[i] = tempByte;
 0437 5202              mov A,[X+2]
 0439 0100              add A,<_PARAM
 043B 5300              mov [__r1],A
 043D 5201              mov A,[X+1]
 043F 0900              adc A,>_PARAM
 0441 60D5              mov REG[0xd5],A
 0443 5200              mov A,[X+0]
 0445 3F00              mvi [__r1],A
 0447                   .dbline 347
 0447           ;                                                                                                       i++;
 0447 7702              inc [X+2]
 0449 0F0100            adc [X+1],0
 044C                   .dbline 348
 044C           ;                                                                                               }
 044C 8010              xjmp L94
 044E           L93:
 044E                   .dbline 350
 044E           ;                                                                                               else
 044E           ;                                                                                               {
 044E                   .dbline 351
 044E           ;                                                                                                       valid_transmit = 1;
 044E 560401            mov [X+4],1
 0451 560300            mov [X+3],0
 0454                   .dbline 352
 0454           ;                                                                                                       TIMEOUT = RX_TIMEOUT_DURATION;
 0454 62D000            mov REG[0xd0],>_TIMEOUT
 0457 550105            mov [_TIMEOUT+1],5
 045A 550000            mov [_TIMEOUT],0
 045D                   .dbline 353
 045D           ;                                                                                               }
 045D           L94:
 045D                   .dbline 354
 045D           ;                                                                                       }
 045D           L91:
 045D                   .dbline 355
 045D           ;                                                                               }
 045D           L89:
 045D                   .dbline 340
 045D 62D000            mov REG[0xd0],>_TIMEOUT
 0460 5101              mov A,[_TIMEOUT+1]
 0462 1105              sub A,5
 0464 5100              mov A,[_TIMEOUT]
 0466 3180              xor A,-128
 0468 1980              sbb A,(0 ^ 0x80)
 046A CFB9              jc L88
 046C           X16:
 046C                   .dbline 356
 046C           ;                                                                       }
 046C           L86:
 046C                   .dbline 357
 046C           ;                                                               }
 046C           L84:
 046C                   .dbline 358
 046C           ;                                                       }
 046C           L82:
 046C                   .dbline 332
 046C 62D000            mov REG[0xd0],>_TIMEOUT
 046F 5101              mov A,[_TIMEOUT+1]
 0471 1105              sub A,5
 0473 5100              mov A,[_TIMEOUT]
 0475 3180              xor A,-128
 0477 1980              sbb A,(0 ^ 0x80)
 0479 CF8E              jc L81
 047B           X17:
 047B                   .dbline 359
 047B           ;                                               }
 047B           L79:
 047B                   .dbline 360
 047B           ;                                       }
 047B           L77:
 047B                   .dbline 326
 047B 62D000            mov REG[0xd0],>_TIMEOUT
 047E 5101              mov A,[_TIMEOUT+1]
 0480 1105              sub A,5
 0482 5100              mov A,[_TIMEOUT]
 0484 3180              xor A,-128
 0486 1980              sbb A,(0 ^ 0x80)
 0488 CF6B              jc L76
 048A           X18:
 048A                   .dbline 361
 048A           ;                               }
 048A           L74:
 048A                   .dbline 362
 048A           ;                       }
 048A           L72:
 048A                   .dbline 322
 048A 62D000            mov REG[0xd0],>_TIMEOUT
 048D 5101              mov A,[_TIMEOUT+1]
 048F 1105              sub A,5
 0491 5100              mov A,[_TIMEOUT]
 0493 3180              xor A,-128
 0495 1980              sbb A,(0 ^ 0x80)
 0497 CF4E              jc L71
 0499           X19:
 0499                   .dbline 363
 0499           ;               }
 0499           L69:
 0499                   .dbline 364
 0499           ;       }
 0499           L67:
 0499                   .dbline 318
 0499 62D000            mov REG[0xd0],>_TIMEOUT
 049C 5101              mov A,[_TIMEOUT+1]
 049E 1105              sub A,5
 04A0 5100              mov A,[_TIMEOUT]
 04A2 3180              xor A,-128
 04A4 1980              sbb A,(0 ^ 0x80)
 04A6 CF31              jc L66
 04A8           X20:
 04A8                   .dbline 366
 04A8           ;       
 04A8           ;       return valid_transmit;
 04A8 62D000            mov REG[0xd0],>__r0
 04AB 5204              mov A,[X+4]
 04AD 5300              mov [__r1],A
 04AF 5203              mov A,[X+3]
 04B1 5300              mov [__r0],A
 04B3                   .dbline -2
 04B3           L65:
 04B3 38FB              add SP,-5
 04B5 20                pop X
 04B6                   .dbline 0 ; func end
 04B6 7F                ret
 04B7                   .dbsym l valid_transmit 3 I
 04B7                   .dbsym l i 1 I
 04B7                   .dbsym l tempByte 0 c
 04B7                   .dbend
 04B7                   .dbfunc e decodeTransmission _decodeTransmission fV
 04B7           ;       tempByte -> X+7
 04B7           ;          angle -> X+5
 04B7           ;             ID -> X+4
 04B7           ;          total -> X+2
 04B7           ;          param -> X+0
 04B7           _decodeTransmission::
 04B7                   .dbline -1
 04B7 10                push X
 04B8 4F                mov X,SP
 04B9 3808              add SP,8
 04BB                   .dbline 371
 04BB           ; }
 04BB           ; 
 04BB           ; // This function decodes the transmission and takes the correct action.
 04BB           ; void decodeTransmission(void)
 04BB           ; {
 04BB                   .dbline 376
 04BB           ;       char* param;
 04BB           ;       char ID;
 04BB           ;       char tempByte;
 04BB           ;       char angle[2];
 04BB           ;       int total = 0;
 04BB 560300            mov [X+3],0
 04BE 560200            mov [X+2],0
 04C1                   .dbline 378
 04C1           ;       
 04C1           ;       if(param = COMP_SERIAL_szGetParam())
 04C1 10                push X
 04C2 7C0000            xcall _COMP_SERIAL_szGetParam
 04C5 62D000            mov REG[0xd0],>__r0
 04C8 5300              mov [__r0],A
 04CA 5A00              mov [__r1],X
 04CC 20                pop X
 04CD 5100              mov A,[__r1]
 04CF 5401              mov [X+1],A
 04D1 5100              mov A,[__r0]
 04D3 5400              mov [X+0],A
 04D5 3C0000            cmp [__r0],0
 04D8 B006              jnz X21
 04DA 3C0000            cmp [__r1],0
 04DD A506              jz L96
 04DF           X21:
 04DF                   .dbline 379
 04DF           ;       {
 04DF                   .dbline 380
 04DF           ;               if((param[0] == 'n') || (param[0] == 'N'))
 04DF 62D000            mov REG[0xd0],>__r0
 04E2 5201              mov A,[X+1]
 04E4 5300              mov [__r1],A
 04E6 5200              mov A,[X+0]
 04E8 60D4              mov REG[0xd4],A
 04EA 3E00              mvi A,[__r1]
 04EC 5300              mov [__r1],A
 04EE 550000            mov [__r0],0
 04F1 3C0000            cmp [__r0],0
 04F4 B005              jnz X22
 04F6 396E              cmp A,110
 04F8 A00E              jz L100
 04FA           X22:
 04FA 62D000            mov REG[0xd0],>__r0
 04FD 3C0000            cmp [__r0],0
 0500 B03A              jnz L98
 0502 3C004E            cmp [__r1],78
 0505 B035              jnz L98
 0507           X23:
 0507           L100:
 0507                   .dbline 381
 0507           ;               {
 0507                   .dbline 382
 0507           ;                       COMP_SERIAL_CmdReset();
 0507 10                push X
 0508 7C0000            xcall _COMP_SERIAL_CmdReset
 050B 20                pop X
 050C                   .dbline 383
 050C           ;                       itoa(param,NUM_MODULES,10);
 050C 5000              mov A,0
 050E 08                push A
 050F 500A              mov A,10
 0511 08                push A
 0512 62D000            mov REG[0xd0],>_NUM_MODULES
 0515 5100              mov A,[_NUM_MODULES]
 0517 08                push A
 0518 5101              mov A,[_NUM_MODULES+1]
 051A 08                push A
 051B 5200              mov A,[X+0]
 051D 08                push A
 051E 5201              mov A,[X+1]
 0520 08                push A
 0521 7C0000            xcall _itoa
 0524 38FA              add SP,-6
 0526                   .dbline 384
 0526           ;                       COMP_SERIAL_PutString(param);
 0526 10                push X
 0527 5200              mov A,[X+0]
 0529 08                push A
 052A 5201              mov A,[X+1]
 052C 5C                mov X,A
 052D 18                pop A
 052E 7C0000            xcall _COMP_SERIAL_PutString
 0531 20                pop X
 0532                   .dbline 385
 0532           ;                       COMP_SERIAL_PutChar('\n');
 0532 10                push X
 0533 500A              mov A,10
 0535 7C0000            xcall _COMP_SERIAL_PutChar
 0538 20                pop X
 0539                   .dbline 386
 0539           ;               }
 0539 84AA              xjmp L99
 053B           L98:
 053B                   .dbline 387
 053B           ;               else if((param[0] == 'w') || (param[0] == 'W'))
 053B 62D000            mov REG[0xd0],>__r0
 053E 5201              mov A,[X+1]
 0540 5300              mov [__r1],A
 0542 5200              mov A,[X+0]
 0544 60D4              mov REG[0xd4],A
 0546 3E00              mvi A,[__r1]
 0548 5300              mov [__r1],A
 054A 550000            mov [__r0],0
 054D 3C0000            cmp [__r0],0
 0550 B005              jnz X24
 0552 3977              cmp A,119
 0554 A00E              jz L103
 0556           X24:
 0556 62D000            mov REG[0xd0],>__r0
 0559 3C0000            cmp [__r0],0
 055C B16B              jnz L101
 055E 3C0057            cmp [__r1],87
 0561 B166              jnz L101
 0563           X25:
 0563           L103:
 0563                   .dbline 388
 0563           ;               {
 0563                   .dbline 389
 0563           ;                       if(param = COMP_SERIAL_szGetParam())
 0563 10                push X
 0564 7C0000            xcall _COMP_SERIAL_szGetParam
 0567 62D000            mov REG[0xd0],>__r0
 056A 5300              mov [__r0],A
 056C 5A00              mov [__r1],X
 056E 20                pop X
 056F 5100              mov A,[__r1]
 0571 5401              mov [X+1],A
 0573 5100              mov A,[__r0]
 0575 5400              mov [X+0],A
 0577 3C0000            cmp [__r0],0
 057A B006              jnz X26
 057C 3C0000            cmp [__r1],0
 057F A464              jz L102
 0581           X26:
 0581                   .dbline 390
 0581           ;                       {
 0581                   .dbline 391
 0581           ;                               ID = atoi(param);
 0581 5200              mov A,[X+0]
 0583 08                push A
 0584 5201              mov A,[X+1]
 0586 08                push A
 0587 7C0000            xcall _atoi
 058A 38FE              add SP,-2
 058C 62D000            mov REG[0xd0],>__r0
 058F 5100              mov A,[__r1]
 0591 5404              mov [X+4],A
 0593                   .dbline 392
 0593           ;                               if(param = COMP_SERIAL_szGetParam())
 0593 10                push X
 0594 7C0000            xcall _COMP_SERIAL_szGetParam
 0597 62D000            mov REG[0xd0],>__r0
 059A 5300              mov [__r0],A
 059C 5A00              mov [__r1],X
 059E 20                pop X
 059F 5100              mov A,[__r1]
 05A1 5401              mov [X+1],A
 05A3 5100              mov A,[__r0]
 05A5 5400              mov [X+0],A
 05A7 3C0000            cmp [__r0],0
 05AA B006              jnz X27
 05AC 3C0000            cmp [__r1],0
 05AF A434              jz L102
 05B1           X27:
 05B1                   .dbline 393
 05B1           ;                               {
 05B1                   .dbline 394
 05B1           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 05B1 62D000            mov REG[0xd0],>__r0
 05B4 5201              mov A,[X+1]
 05B6 5300              mov [__r1],A
 05B8 5200              mov A,[X+0]
 05BA 60D4              mov REG[0xd4],A
 05BC 3E00              mvi A,[__r1]
 05BE 5300              mov [__r1],A
 05C0 550000            mov [__r0],0
 05C3 3C0000            cmp [__r0],0
 05C6 B005              jnz X28
 05C8 3961              cmp A,97
 05CA A00E              jz L110
 05CC           X28:
 05CC 62D000            mov REG[0xd0],>__r0
 05CF 3C0000            cmp [__r0],0
 05D2 B089              jnz L108
 05D4 3C0041            cmp [__r1],65
 05D7 B084              jnz L108
 05D9           X29:
 05D9           L110:
 05D9                   .dbline 395
 05D9           ;                                       {
 05D9                   .dbline 396
 05D9           ;                                               if(param = COMP_SERIAL_szGetParam())
 05D9 10                push X
 05DA 7C0000            xcall _COMP_SERIAL_szGetParam
 05DD 62D000            mov REG[0xd0],>__r0
 05E0 5300              mov [__r0],A
 05E2 5A00              mov [__r1],X
 05E4 20                pop X
 05E5 5100              mov A,[__r1]
 05E7 5401              mov [X+1],A
 05E9 5100              mov A,[__r0]
 05EB 5400              mov [X+0],A
 05ED 3C0000            cmp [__r0],0
 05F0 B006              jnz X30
 05F2 3C0000            cmp [__r1],0
 05F5 A3EE              jz L102
 05F7           X30:
 05F7                   .dbline 397
 05F7           ;                                               {
 05F7                   .dbline 398
 05F7           ;                                                       COMP_SERIAL_CmdReset();
 05F7 10                push X
 05F8 7C0000            xcall _COMP_SERIAL_CmdReset
 05FB 20                pop X
 05FC                   .dbline 399
 05FC           ;                                                       total = atoi(param);
 05FC 5200              mov A,[X+0]
 05FE 08                push A
 05FF 5201              mov A,[X+1]
 0601 08                push A
 0602 7C0000            xcall _atoi
 0605 38FE              add SP,-2
 0607 62D000            mov REG[0xd0],>__r0
 060A 5100              mov A,[__r1]
 060C 5403              mov [X+3],A
 060E 5100              mov A,[__r0]
 0610 5402              mov [X+2],A
 0612                   .dbline 400
 0612           ;                                                       angle[0] = total%256;
 0612 5001              mov A,1
 0614 08                push A
 0615 5000              mov A,0
 0617 08                push A
 0618 5202              mov A,[X+2]
 061A 08                push A
 061B 5203              mov A,[X+3]
 061D 08                push A
 061E 7C0000            xcall __divmod_16X16_16
 0621 38FE              add SP,-2
 0623 18                pop A
 0624 5300              mov [__r1],A
 0626 18                pop A
 0627 5100              mov A,[__r1]
 0629 5405              mov [X+5],A
 062B                   .dbline 401
 062B           ;                                                       angle[1] = total/256;
 062B 5001              mov A,1
 062D 08                push A
 062E 5000              mov A,0
 0630 08                push A
 0631 5202              mov A,[X+2]
 0633 08                push A
 0634 5203              mov A,[X+3]
 0636 08                push A
 0637 7C0000            xcall __divmod_16X16_16
 063A 18                pop A
 063B 5300              mov [__r1],A
 063D 18                pop A
 063E 38FE              add SP,-2
 0640 5100              mov A,[__r1]
 0642 5406              mov [X+6],A
 0644                   .dbline 402
 0644           ;                                                       longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
 0644 5206              mov A,[X+6]
 0646 08                push A
 0647 5205              mov A,[X+5]
 0649 08                push A
 064A 501E              mov A,30
 064C 08                push A
 064D 5003              mov A,3
 064F 08                push A
 0650 5005              mov A,5
 0652 08                push A
 0653 5204              mov A,[X+4]
 0655 08                push A
 0656 9455              xcall _longServoInstruction
 0658 38FA              add SP,-6
 065A                   .dbline 403
 065A           ;                                               }
 065A                   .dbline 404
 065A           ;                                       }
 065A 8389              xjmp L102
 065C           L108:
 065C                   .dbline 405
 065C           ;                                       else if((param[0] == 'p') || (param[0] == 'P'))
 065C 62D000            mov REG[0xd0],>__r0
 065F 5201              mov A,[X+1]
 0661 5300              mov [__r1],A
 0663 5200              mov A,[X+0]
 0665 60D4              mov REG[0xd4],A
 0667 3E00              mvi A,[__r1]
 0669 5300              mov [__r1],A
 066B 550000            mov [__r0],0
 066E 3C0000            cmp [__r0],0
 0671 B005              jnz X31
 0673 3970              cmp A,112
 0675 A00E              jz L117
 0677           X31:
 0677 62D000            mov REG[0xd0],>__r0
 067A 3C0000            cmp [__r0],0
 067D B366              jnz L102
 067F 3C0050            cmp [__r1],80
 0682 B361              jnz L102
 0684           X32:
 0684           L117:
 0684                   .dbline 406
 0684           ;                                       {
 0684                   .dbline 407
 0684           ;                                               if(param = COMP_SERIAL_szGetParam())
 0684 10                push X
 0685 7C0000            xcall _COMP_SERIAL_szGetParam
 0688 62D000            mov REG[0xd0],>__r0
 068B 5300              mov [__r0],A
 068D 5A00              mov [__r1],X
 068F 20                pop X
 0690 5100              mov A,[__r1]
 0692 5401              mov [X+1],A
 0694 5100              mov A,[__r0]
 0696 5400              mov [X+0],A
 0698 3C0000            cmp [__r0],0
 069B B006              jnz X33
 069D 3C0000            cmp [__r1],0
 06A0 A343              jz L102
 06A2           X33:
 06A2                   .dbline 408
 06A2           ;                                               {
 06A2                   .dbline 409
 06A2           ;                                                       COMP_SERIAL_CmdReset();
 06A2 10                push X
 06A3 7C0000            xcall _COMP_SERIAL_CmdReset
 06A6 20                pop X
 06A7                   .dbline 410
 06A7           ;                                                       servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
 06A7 5200              mov A,[X+0]
 06A9 08                push A
 06AA 5201              mov A,[X+1]
 06AC 08                push A
 06AD 7C0000            xcall _atoi
 06B0 62D000            mov REG[0xd0],>__r0
 06B3 5100              mov A,[__r1]
 06B5 08                push A
 06B6 5018              mov A,24
 06B8 08                push A
 06B9 5003              mov A,3
 06BB 08                push A
 06BC 5004              mov A,4
 06BE 08                push A
 06BF 5204              mov A,[X+4]
 06C1 08                push A
 06C2 9346              xcall _servoInstruction
 06C4 38F9              add SP,-7
 06C6                   .dbline 411
 06C6           ;                                               }
 06C6                   .dbline 412
 06C6           ;                                       }
 06C6                   .dbline 413
 06C6           ;                               }
 06C6                   .dbline 414
 06C6           ;                       }
 06C6                   .dbline 415
 06C6           ;               }
 06C6 831D              xjmp L102
 06C8           L101:
 06C8                   .dbline 416
 06C8           ;               else if((param[0] == 'r') || (param[0] == 'R'))
 06C8 62D000            mov REG[0xd0],>__r0
 06CB 5201              mov A,[X+1]
 06CD 5300              mov [__r1],A
 06CF 5200              mov A,[X+0]
 06D1 60D4              mov REG[0xd4],A
 06D3 3E00              mvi A,[__r1]
 06D5 5300              mov [__r1],A
 06D7 550000            mov [__r0],0
 06DA 3C0000            cmp [__r0],0
 06DD B005              jnz X34
 06DF 3972              cmp A,114
 06E1 A00E              jz L122
 06E3           X34:
 06E3 62D000            mov REG[0xd0],>__r0
 06E6 3C0000            cmp [__r0],0
 06E9 B2FA              jnz L120
 06EB 3C0052            cmp [__r1],82
 06EE B2F5              jnz L120
 06F0           X35:
 06F0           L122:
 06F0                   .dbline 417
 06F0           ;               {                       
 06F0                   .dbline 418
 06F0           ;                       if(param = COMP_SERIAL_szGetParam())
 06F0 10                push X
 06F1 7C0000            xcall _COMP_SERIAL_szGetParam
 06F4 62D000            mov REG[0xd0],>__r0
 06F7 5300              mov [__r0],A
 06F9 5A00              mov [__r1],X
 06FB 20                pop X
 06FC 5100              mov A,[__r1]
 06FE 5401              mov [X+1],A
 0700 5100              mov A,[__r0]
 0702 5400              mov [X+0],A
 0704 3C0000            cmp [__r0],0
 0707 B006              jnz X36
 0709 3C0000            cmp [__r1],0
 070C A2D7              jz L123
 070E           X36:
 070E                   .dbline 419
 070E           ;                       {
 070E                   .dbline 420
 070E           ;                               ID = atoi(param);
 070E 5200              mov A,[X+0]
 0710 08                push A
 0711 5201              mov A,[X+1]
 0713 08                push A
 0714 7C0000            xcall _atoi
 0717 38FE              add SP,-2
 0719 62D000            mov REG[0xd0],>__r0
 071C 5100              mov A,[__r1]
 071E 5404              mov [X+4],A
 0720                   .dbline 421
 0720           ;                               if(param = COMP_SERIAL_szGetParam())
 0720 10                push X
 0721 7C0000            xcall _COMP_SERIAL_szGetParam
 0724 62D000            mov REG[0xd0],>__r0
 0727 5300              mov [__r0],A
 0729 5A00              mov [__r1],X
 072B 20                pop X
 072C 5100              mov A,[__r1]
 072E 5401              mov [X+1],A
 0730 5100              mov A,[__r0]
 0732 5400              mov [X+0],A
 0734 3C0000            cmp [__r0],0
 0737 B006              jnz X37
 0739 3C0000            cmp [__r1],0
 073C A2A7              jz L125
 073E           X37:
 073E                   .dbline 422
 073E           ;                               {
 073E                   .dbline 423
 073E           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 073E 62D000            mov REG[0xd0],>__r0
 0741 5201              mov A,[X+1]
 0743 5300              mov [__r1],A
 0745 5200              mov A,[X+0]
 0747 60D4              mov REG[0xd4],A
 0749 3E00              mvi A,[__r1]
 074B 5300              mov [__r1],A
 074D 550000            mov [__r0],0
 0750 3C0000            cmp [__r0],0
 0753 B005              jnz X38
 0755 3961              cmp A,97
 0757 A00E              jz L129
 0759           X38:
 0759 62D000            mov REG[0xd0],>__r0
 075C 3C0000            cmp [__r0],0
 075F B0CC              jnz L127
 0761 3C0041            cmp [__r1],65
 0764 B0C7              jnz L127
 0766           X39:
 0766           L129:
 0766                   .dbline 424
 0766           ;                                       {
 0766                   .dbline 425
 0766           ;                                               COMP_SERIAL_CmdReset();
 0766 10                push X
 0767 7C0000            xcall _COMP_SERIAL_CmdReset
 076A 20                pop X
 076B                   .dbline 426
 076B           ;                                               servoInstruction(ID,4,READ_SERVO,36,2);
 076B 5002              mov A,2
 076D 08                push A
 076E 5024              mov A,36
 0770 08                push A
 0771 5002              mov A,2
 0773 08                push A
 0774 5004              mov A,4
 0776 08                push A
 0777 5204              mov A,[X+4]
 0779 08                push A
 077A 928E              xcall _servoInstruction
 077C                   .dbline 427
 077C           ;                                               configToggle(RX_MODE);
 077C 5000              mov A,0
 077E 08                push A
 077F 5001              mov A,1
 0781 08                push A
 0782 93DA              xcall _configToggle
 0784 38F9              add SP,-7
 0786 8094              xjmp L131
 0788           L130:
 0788                   .dbline 431
 0788           ;                                                       
 0788           ;                                               // Loop until we read a response or time out.
 0788           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0788           ;                                               {
 0788                   .dbline 432
 0788           ;                                                       if(RECEIVE_cReadChar() == SERVO_START)
 0788 10                push X
 0789 7C0000            xcall _RECEIVE_cReadChar
 078C 62D000            mov REG[0xd0],>__r0
 078F 20                pop X
 0790 39FF              cmp A,-1
 0792 B088              jnz L133
 0794                   .dbline 433
 0794           ;                                                       {
 0794                   .dbline 434
 0794           ;                                                               if(RECEIVE_cGetChar() == SERVO_START)
 0794 10                push X
 0795 7C0000            xcall _RECEIVE_cGetChar
 0798 62D000            mov REG[0xd0],>__r0
 079B 20                pop X
 079C 39FF              cmp A,-1
 079E B07C              jnz L135
 07A0                   .dbline 435
 07A0           ;                                                               {
 07A0                   .dbline 436
 07A0           ;                                                                       if(RECEIVE_cGetChar() == ID)
 07A0 10                push X
 07A1 7C0000            xcall _RECEIVE_cGetChar
 07A4 62D000            mov REG[0xd0],>__r0
 07A7 20                pop X
 07A8 3B04              cmp A,[X+4]
 07AA B070              jnz L137
 07AC                   .dbline 437
 07AC           ;                                                                       {
 07AC                   .dbline 438
 07AC           ;                                                                               if(RECEIVE_cGetChar() == 4)
 07AC 10                push X
 07AD 7C0000            xcall _RECEIVE_cGetChar
 07B0 62D000            mov REG[0xd0],>__r0
 07B3 20                pop X
 07B4 3904              cmp A,4
 07B6 B064              jnz L139
 07B8                   .dbline 439
 07B8           ;                                                                               {
 07B8                   .dbline 440
 07B8           ;                                                                                       if(RECEIVE_cGetChar() == 0)
 07B8 10                push X
 07B9 7C0000            xcall _RECEIVE_cGetChar
 07BC 62D000            mov REG[0xd0],>__r0
 07BF 20                pop X
 07C0 3900              cmp A,0
 07C2 B058              jnz L141
 07C4                   .dbline 441
 07C4           ;                                                                                       {
 07C4                   .dbline 442
 07C4           ;                                                                                               angle[0] = RECEIVE_cGetChar();
 07C4 10                push X
 07C5 7C0000            xcall _RECEIVE_cGetChar
 07C8 62D000            mov REG[0xd0],>__r0
 07CB 20                pop X
 07CC 5405              mov [X+5],A
 07CE                   .dbline 443
 07CE           ;                                                                                               angle[1] = RECEIVE_cGetChar();
 07CE 10                push X
 07CF 7C0000            xcall _RECEIVE_cGetChar
 07D2 62D000            mov REG[0xd0],>__r0
 07D5 20                pop X
 07D6 5406              mov [X+6],A
 07D8                   .dbline 445
 07D8           ;                                                                                               
 07D8           ;                                                                                               configToggle(PC_MODE);
 07D8 5000              mov A,0
 07DA 08                push A
 07DB 5002              mov A,2
 07DD 08                push A
 07DE 937E              xcall _configToggle
 07E0                   .dbline 447
 07E0           ;                                                                                               
 07E0           ;                                                                                               total = ((angle[1])*256) + angle[0];
 07E0 5205              mov A,[X+5]
 07E2 5403              mov [X+3],A
 07E4 5206              mov A,[X+6]
 07E6 5402              mov [X+2],A
 07E8                   .dbline 448
 07E8           ;                                                                                               itoa(param,total,10);
 07E8 5000              mov A,0
 07EA 08                push A
 07EB 500A              mov A,10
 07ED 08                push A
 07EE 5202              mov A,[X+2]
 07F0 08                push A
 07F1 5203              mov A,[X+3]
 07F3 08                push A
 07F4 5200              mov A,[X+0]
 07F6 08                push A
 07F7 5201              mov A,[X+1]
 07F9 08                push A
 07FA 7C0000            xcall _itoa
 07FD 38F8              add SP,-8
 07FF                   .dbline 449
 07FF           ;                                                                                               COMP_SERIAL_PutString(param);
 07FF 10                push X
 0800 5200              mov A,[X+0]
 0802 08                push A
 0803 5201              mov A,[X+1]
 0805 5C                mov X,A
 0806 18                pop A
 0807 7C0000            xcall _COMP_SERIAL_PutString
 080A 20                pop X
 080B                   .dbline 450
 080B           ;                                                                                               COMP_SERIAL_PutChar('\n');
 080B 10                push X
 080C 500A              mov A,10
 080E 7C0000            xcall _COMP_SERIAL_PutChar
 0811 20                pop X
 0812                   .dbline 452
 0812           ; 
 0812           ;                                                                                               TIMEOUT = RX_TIMEOUT_DURATION;
 0812 62D000            mov REG[0xd0],>_TIMEOUT
 0815 550105            mov [_TIMEOUT+1],5
 0818 550000            mov [_TIMEOUT],0
 081B                   .dbline 453
 081B           ;                                                                                       }
 081B           L141:
 081B                   .dbline 454
 081B           ;                                                                               }
 081B           L139:
 081B                   .dbline 455
 081B           ;                                                                       }
 081B           L137:
 081B                   .dbline 456
 081B           ;                                                               }
 081B           L135:
 081B                   .dbline 457
 081B           ;                                                       }
 081B           L133:
 081B                   .dbline 458
 081B           ;                                               }
 081B           L131:
 081B                   .dbline 430
 081B 62D000            mov REG[0xd0],>_TIMEOUT
 081E 5101              mov A,[_TIMEOUT+1]
 0820 1105              sub A,5
 0822 5100              mov A,[_TIMEOUT]
 0824 3180              xor A,-128
 0826 1980              sbb A,(0 ^ 0x80)
 0828 CF5F              jc L130
 082A           X40:
 082A                   .dbline 459
 082A           ;                                       }
 082A 81B9              xjmp L128
 082C           L127:
 082C                   .dbline 460
 082C           ;                                       else if ((param[0] == 'p') || (param[0] == 'P'))
 082C 62D000            mov REG[0xd0],>__r0
 082F 5201              mov A,[X+1]
 0831 5300              mov [__r1],A
 0833 5200              mov A,[X+0]
 0835 60D4              mov REG[0xd4],A
 0837 3E00              mvi A,[__r1]
 0839 5300              mov [__r1],A
 083B 550000            mov [__r0],0
 083E 3C0000            cmp [__r0],0
 0841 B005              jnz X41
 0843 3970              cmp A,112
 0845 A00E              jz L147
 0847           X41:
 0847 62D000            mov REG[0xd0],>__r0
 084A 3C0000            cmp [__r0],0
 084D B0A5              jnz L145
 084F 3C0050            cmp [__r1],80
 0852 B0A0              jnz L145
 0854           X42:
 0854           L147:
 0854                   .dbline 461
 0854           ;                                       {
 0854                   .dbline 462
 0854           ;                                               COMP_SERIAL_CmdReset();
 0854 10                push X
 0855 7C0000            xcall _COMP_SERIAL_CmdReset
 0858 20                pop X
 0859                   .dbline 463
 0859           ;                                               servoInstruction(ID,4,READ_SERVO,24,1);
 0859 5001              mov A,1
 085B 08                push A
 085C 5018              mov A,24
 085E 08                push A
 085F 5002              mov A,2
 0861 08                push A
 0862 5004              mov A,4
 0864 08                push A
 0865 5204              mov A,[X+4]
 0867 08                push A
 0868 91A0              xcall _servoInstruction
 086A                   .dbline 464
 086A           ;                                               configToggle(RX_MODE);
 086A 5000              mov A,0
 086C 08                push A
 086D 5001              mov A,1
 086F 08                push A
 0870 92EC              xcall _configToggle
 0872 38F9              add SP,-7
 0874 806D              xjmp L149
 0876           L148:
 0876                   .dbline 468
 0876           ;                                                       
 0876           ;                                               // Loop until we read a response or time out.
 0876           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0876           ;                                               {
 0876                   .dbline 469
 0876           ;                                                       if(RECEIVE_cReadChar() == SERVO_START)
 0876 10                push X
 0877 7C0000            xcall _RECEIVE_cReadChar
 087A 62D000            mov REG[0xd0],>__r0
 087D 20                pop X
 087E 39FF              cmp A,-1
 0880 B061              jnz L151
 0882                   .dbline 470
 0882           ;                                                       {
 0882                   .dbline 471
 0882           ;                                                               if(RECEIVE_cGetChar() == SERVO_START)
 0882 10                push X
 0883 7C0000            xcall _RECEIVE_cGetChar
 0886 62D000            mov REG[0xd0],>__r0
 0889 20                pop X
 088A 39FF              cmp A,-1
 088C B055              jnz L153
 088E                   .dbline 472
 088E           ;                                                               {
 088E                   .dbline 473
 088E           ;                                                                       if(RECEIVE_cGetChar() == ID)
 088E 10                push X
 088F 7C0000            xcall _RECEIVE_cGetChar
 0892 62D000            mov REG[0xd0],>__r0
 0895 20                pop X
 0896 3B04              cmp A,[X+4]
 0898 B049              jnz L155
 089A                   .dbline 474
 089A           ;                                                                       {
 089A                   .dbline 475
 089A           ;                                                                               if(RECEIVE_cGetChar() == 3)
 089A 10                push X
 089B 7C0000            xcall _RECEIVE_cGetChar
 089E 62D000            mov REG[0xd0],>__r0
 08A1 20                pop X
 08A2 3903              cmp A,3
 08A4 B03D              jnz L157
 08A6                   .dbline 476
 08A6           ;                                                                               {
 08A6                   .dbline 477
 08A6           ;                                                                                       if(RECEIVE_cGetChar() == 0)
 08A6 10                push X
 08A7 7C0000            xcall _RECEIVE_cGetChar
 08AA 62D000            mov REG[0xd0],>__r0
 08AD 20                pop X
 08AE 3900              cmp A,0
 08B0 B031              jnz L159
 08B2                   .dbline 478
 08B2           ;                                                                                       {
 08B2                   .dbline 479
 08B2           ;                                                                                               tempByte = RECEIVE_cGetChar();
 08B2 10                push X
 08B3 7C0000            xcall _RECEIVE_cGetChar
 08B6 62D000            mov REG[0xd0],>__r0
 08B9 20                pop X
 08BA 5407              mov [X+7],A
 08BC                   .dbline 481
 08BC           ;                                                                                               
 08BC           ;                                                                                               configToggle(PC_MODE);
 08BC 5000              mov A,0
 08BE 08                push A
 08BF 5002              mov A,2
 08C1 08                push A
 08C2 929A              xcall _configToggle
 08C4 38FE              add SP,-2
 08C6                   .dbline 484
 08C6           ;                                                                                               
 08C6           ;                                                                                               // Convert tempByte to an ascii value and send.
 08C6           ;                                                                                               COMP_SERIAL_PutChar(tempByte + 48);
 08C6 62D000            mov REG[0xd0],>__r0
 08C9 5207              mov A,[X+7]
 08CB 0130              add A,48
 08CD 10                push X
 08CE 7C0000            xcall _COMP_SERIAL_PutChar
 08D1 20                pop X
 08D2                   .dbline 485
 08D2           ;                                                                                               COMP_SERIAL_PutChar('\n');
 08D2 10                push X
 08D3 500A              mov A,10
 08D5 7C0000            xcall _COMP_SERIAL_PutChar
 08D8 20                pop X
 08D9                   .dbline 487
 08D9           ; 
 08D9           ;                                                                                               TIMEOUT = RX_TIMEOUT_DURATION;
 08D9 62D000            mov REG[0xd0],>_TIMEOUT
 08DC 550105            mov [_TIMEOUT+1],5
 08DF 550000            mov [_TIMEOUT],0
 08E2                   .dbline 488
 08E2           ;                                                                                       }
 08E2           L159:
 08E2                   .dbline 489
 08E2           ;                                                                               }
 08E2           L157:
 08E2                   .dbline 490
 08E2           ;                                                                       }
 08E2           L155:
 08E2                   .dbline 491
 08E2           ;                                                               }
 08E2           L153:
 08E2                   .dbline 492
 08E2           ;                                                       }
 08E2           L151:
 08E2                   .dbline 493
 08E2           ;                                               }
 08E2           L149:
 08E2                   .dbline 467
 08E2 62D000            mov REG[0xd0],>_TIMEOUT
 08E5 5101              mov A,[_TIMEOUT+1]
 08E7 1105              sub A,5
 08E9 5100              mov A,[_TIMEOUT]
 08EB 3180              xor A,-128
 08ED 1980              sbb A,(0 ^ 0x80)
 08EF CF86              jc L148
 08F1           X43:
 08F1                   .dbline 494
 08F1           ;                                       }
 08F1 80F2              xjmp L146
 08F3           L145:
 08F3                   .dbline 495
 08F3           ;                                       else if ((param[0] == 't') || (param[0] == 'T'))
 08F3 62D000            mov REG[0xd0],>__r0
 08F6 5201              mov A,[X+1]
 08F8 5300              mov [__r1],A
 08FA 5200              mov A,[X+0]
 08FC 60D4              mov REG[0xd4],A
 08FE 3E00              mvi A,[__r1]
 0900 5300              mov [__r1],A
 0902 550000            mov [__r0],0
 0905 3C0000            cmp [__r0],0
 0908 B005              jnz X44
 090A 3974              cmp A,116
 090C A00E              jz L163
 090E           X44:
 090E 62D000            mov REG[0xd0],>__r0
 0911 3C0000            cmp [__r0],0
 0914 B068              jnz L161
 0916 3C0054            cmp [__r1],84
 0919 B063              jnz L161
 091B           X45:
 091B           L163:
 091B                   .dbline 496
 091B           ;                                       {
 091B                   .dbline 497
 091B           ;                                               COMP_SERIAL_CmdReset();
 091B 10                push X
 091C 7C0000            xcall _COMP_SERIAL_CmdReset
 091F 20                pop X
 0920                   .dbline 498
 0920           ;                                               if(pingModule(ID))
 0920 62D000            mov REG[0xd0],>__r0
 0923 5204              mov A,[X+4]
 0925 5300              mov [__r1],A
 0927 5000              mov A,0
 0929 08                push A
 092A 5100              mov A,[__r1]
 092C 08                push A
 092D 7C0061            xcall _pingModule
 0930 38FE              add SP,-2
 0932 62D000            mov REG[0xd0],>__r0
 0935 3C0000            cmp [__r0],0
 0938 B006              jnz X46
 093A 3C0000            cmp [__r1],0
 093D A0A6              jz L162
 093F           X46:
 093F                   .dbline 499
 093F           ;                                               {
 093F                   .dbline 500
 093F           ;                                                       configToggle(PC_MODE);
 093F 5000              mov A,0
 0941 08                push A
 0942 5002              mov A,2
 0944 08                push A
 0945 9217              xcall _configToggle
 0947                   .dbline 502
 0947           ;                                                                                               
 0947           ;                                                       total = PARAM[0];
 0947 62D000            mov REG[0xd0],>_PARAM
 094A 5100              mov A,[_PARAM]
 094C 5403              mov [X+3],A
 094E 560200            mov [X+2],0
 0951                   .dbline 503
 0951           ;                                                       itoa(param,total,10);
 0951 5000              mov A,0
 0953 08                push A
 0954 500A              mov A,10
 0956 08                push A
 0957 5202              mov A,[X+2]
 0959 08                push A
 095A 5203              mov A,[X+3]
 095C 08                push A
 095D 5200              mov A,[X+0]
 095F 08                push A
 0960 5201              mov A,[X+1]
 0962 08                push A
 0963 7C0000            xcall _itoa
 0966 38F8              add SP,-8
 0968                   .dbline 504
 0968           ;                                                       COMP_SERIAL_PutString(param);
 0968 10                push X
 0969 5200              mov A,[X+0]
 096B 08                push A
 096C 5201              mov A,[X+1]
 096E 5C                mov X,A
 096F 18                pop A
 0970 7C0000            xcall _COMP_SERIAL_PutString
 0973 20                pop X
 0974                   .dbline 505
 0974           ;                                                       COMP_SERIAL_PutChar('\n');
 0974 10                push X
 0975 500A              mov A,10
 0977 7C0000            xcall _COMP_SERIAL_PutChar
 097A 20                pop X
 097B                   .dbline 506
 097B           ;                                               }
 097B                   .dbline 507
 097B           ;                                       }
 097B 8068              xjmp L162
 097D           L161:
 097D                   .dbline 508
 097D           ;                                       else if ((param[0] == 'c') || (param[0] == 'C'))
 097D 62D000            mov REG[0xd0],>__r0
 0980 5201              mov A,[X+1]
 0982 5300              mov [__r1],A
 0984 5200              mov A,[X+0]
 0986 60D4              mov REG[0xd4],A
 0988 3E00              mvi A,[__r1]
 098A 5300              mov [__r1],A
 098C 550000            mov [__r0],0
 098F 3C0000            cmp [__r0],0
 0992 B005              jnz X47
 0994 3963              cmp A,99
 0996 A00E              jz L168
 0998           X47:
 0998 62D000            mov REG[0xd0],>__r0
 099B 3C0000            cmp [__r0],0
 099E B045              jnz L166
 09A0 3C0043            cmp [__r1],67
 09A3 B040              jnz L166
 09A5           X48:
 09A5           L168:
 09A5                   .dbline 509
 09A5           ;                                       {
 09A5                   .dbline 510
 09A5           ;                                               COMP_SERIAL_CmdReset();
 09A5 10                push X
 09A6 7C0000            xcall _COMP_SERIAL_CmdReset
 09A9 20                pop X
 09AA                   .dbline 511
 09AA           ;                                               if(pingModule(ID))
 09AA 62D000            mov REG[0xd0],>__r0
 09AD 5204              mov A,[X+4]
 09AF 5300              mov [__r1],A
 09B1 5000              mov A,0
 09B3 08                push A
 09B4 5100              mov A,[__r1]
 09B6 08                push A
 09B7 7C0061            xcall _pingModule
 09BA 38FE              add SP,-2
 09BC 62D000            mov REG[0xd0],>__r0
 09BF 3C0000            cmp [__r0],0
 09C2 B006              jnz X49
 09C4 3C0000            cmp [__r1],0
 09C7 A01C              jz L169
 09C9           X49:
 09C9                   .dbline 512
 09C9           ;                                               {       
 09C9                   .dbline 513
 09C9           ;                                                       configToggle(PC_MODE);
 09C9 5000              mov A,0
 09CB 08                push A
 09CC 5002              mov A,2
 09CE 08                push A
 09CF 918D              xcall _configToggle
 09D1 38FE              add SP,-2
 09D3                   .dbline 515
 09D3           ;                                                                                               
 09D3           ;                                                       COMP_SERIAL_PutChar(PARAM[1]);
 09D3 10                push X
 09D4 62D000            mov REG[0xd0],>_PARAM
 09D7 5101              mov A,[_PARAM+1]
 09D9 7C0000            xcall _COMP_SERIAL_PutChar
 09DC 20                pop X
 09DD                   .dbline 516
 09DD           ;                                                       COMP_SERIAL_PutChar('\n');
 09DD 10                push X
 09DE 500A              mov A,10
 09E0 7C0000            xcall _COMP_SERIAL_PutChar
 09E3 20                pop X
 09E4                   .dbline 517
 09E4           ;                                               }
 09E4           L169:
 09E4                   .dbline 518
 09E4           ;                                       }
 09E4           L166:
 09E4           L162:
 09E4           L146:
 09E4           L128:
 09E4                   .dbline 519
 09E4           ;                               }
 09E4           L125:
 09E4                   .dbline 520
 09E4           ;                       }
 09E4           L123:
 09E4                   .dbline 521
 09E4           ;               }
 09E4           L120:
 09E4           L102:
 09E4           L99:
 09E4                   .dbline 522
 09E4           ;       }
 09E4           L96:
 09E4                   .dbline 524
 09E4           ;       
 09E4           ;       if(STATE != PC_MODE)
 09E4 62D000            mov REG[0xd0],>_STATE
 09E7 3C0000            cmp [_STATE],0
 09EA B006              jnz X50
 09EC 3C0102            cmp [_STATE+1],2
 09EF A00D              jz L172
 09F1           X50:
 09F1                   .dbline 525
 09F1           ;       {
 09F1                   .dbline 526
 09F1           ;               configToggle(PC_MODE);
 09F1 5000              mov A,0
 09F3 08                push A
 09F4 5002              mov A,2
 09F6 08                push A
 09F7 9165              xcall _configToggle
 09F9 38FE              add SP,-2
 09FB                   .dbline 527
 09FB           ;       }
 09FB 800A              xjmp L173
 09FD           L172:
 09FD                   .dbline 529
 09FD           ;       else
 09FD           ;       {
 09FD                   .dbline 530
 09FD           ;               TIMEOUT = 0;
 09FD 62D000            mov REG[0xd0],>_TIMEOUT
 0A00 550100            mov [_TIMEOUT+1],0
 0A03 550000            mov [_TIMEOUT],0
 0A06                   .dbline 531
 0A06           ;       }
 0A06           L173:
 0A06                   .dbline -2
 0A06           L95:
 0A06 38F8              add SP,-8
 0A08 20                pop X
 0A09                   .dbline 0 ; func end
 0A09 7F                ret
 0A0A                   .dbsym l tempByte 7 c
 0A0A                   .dbsym l angle 5 A[2:2]c
 0A0A                   .dbsym l ID 4 c
 0A0A                   .dbsym l total 2 I
 0A0A                   .dbsym l param 0 pc
 0A0A                   .dbend
 0A0A                   .dbfunc e servoInstruction _servoInstruction fV
 0A0A           ;          total -> X+1
 0A0A           ;       checksum -> X+0
 0A0A           ;          value -> X-8
 0A0A           ;        address -> X-7
 0A0A           ;    instruction -> X-6
 0A0A           ;         length -> X-5
 0A0A           ;             id -> X-4
 0A0A           _servoInstruction::
 0A0A                   .dbline -1
 0A0A 10                push X
 0A0B 4F                mov X,SP
 0A0C 3803              add SP,3
 0A0E                   .dbline 537
 0A0E           ; }
 0A0E           ; 
 0A0E           ; // This function receives a destination, command length, instruction type, address, and value.
 0A0E           ; // With these parameters, the function sends a packet to the communication bus.
 0A0E           ; void servoInstruction(char id, char length, char instruction, char address, char value)
 0A0E           ; {
 0A0E                   .dbline 541
 0A0E           ;       char checksum;
 0A0E           ;       int total;
 0A0E           ;       
 0A0E           ;       total = id + length + instruction + address + value;
 0A0E 62D000            mov REG[0xd0],>__r0
 0A11 52FB              mov A,[X-5]
 0A13 5300              mov [__r1],A
 0A15 550000            mov [__r0],0
 0A18 52FC              mov A,[X-4]
 0A1A 0200              add A,[__r1]
 0A1C 5300              mov [__r1],A
 0A1E 5000              mov A,0
 0A20 0A00              adc A,[__r0]
 0A22 5300              mov [__r0],A
 0A24 52FA              mov A,[X-6]
 0A26 0400              add [__r1],A
 0A28 0E0000            adc [__r0],0
 0A2B 52F9              mov A,[X-7]
 0A2D 0400              add [__r1],A
 0A2F 0E0000            adc [__r0],0
 0A32 52F8              mov A,[X-8]
 0A34 5300              mov [__r3],A
 0A36 550000            mov [__r2],0
 0A39 5100              mov A,[__r1]
 0A3B 0200              add A,[__r3]
 0A3D 5402              mov [X+2],A
 0A3F 5100              mov A,[__r0]
 0A41 0A00              adc A,[__r2]
 0A43 5401              mov [X+1],A
 0A45                   .dbline 544
 0A45           ;       
 0A45           ;       // Calculate the checksum value for our servo communication.
 0A45           ;       checksum = 255-(total%256);
 0A45 5001              mov A,1
 0A47 08                push A
 0A48 5000              mov A,0
 0A4A 08                push A
 0A4B 5201              mov A,[X+1]
 0A4D 08                push A
 0A4E 5202              mov A,[X+2]
 0A50 08                push A
 0A51 7C0000            xcall __divmod_16X16_16
 0A54 38FE              add SP,-2
 0A56 18                pop A
 0A57 5300              mov [__r1],A
 0A59 18                pop A
 0A5A 50FF              mov A,-1
 0A5C 1200              sub A,[__r1]
 0A5E 5400              mov [X+0],A
 0A60                   .dbline 547
 0A60           ;       
 0A60           ;       // Talk to the servo.
 0A60           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0A60 10                push X
 0A61 50FF              mov A,-1
 0A63 7C0000            xcall _TX_REPEATER_PutChar
 0A66 20                pop X
 0A67                   .dbline 548
 0A67           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0A67 10                push X
 0A68 50FF              mov A,-1
 0A6A 7C0000            xcall _TX_REPEATER_PutChar
 0A6D 20                pop X
 0A6E                   .dbline 549
 0A6E           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0A6E 10                push X
 0A6F 52FC              mov A,[X-4]
 0A71 7C0000            xcall _TX_REPEATER_PutChar
 0A74 20                pop X
 0A75                   .dbline 550
 0A75           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0A75 10                push X
 0A76 52FB              mov A,[X-5]
 0A78 7C0000            xcall _TX_REPEATER_PutChar
 0A7B 20                pop X
 0A7C                   .dbline 551
 0A7C           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0A7C 10                push X
 0A7D 52FA              mov A,[X-6]
 0A7F 7C0000            xcall _TX_REPEATER_PutChar
 0A82 20                pop X
 0A83                   .dbline 552
 0A83           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0A83 10                push X
 0A84 52F9              mov A,[X-7]
 0A86 7C0000            xcall _TX_REPEATER_PutChar
 0A89 20                pop X
 0A8A                   .dbline 553
 0A8A           ;       TX_REPEATER_PutChar(value);                     // The value to write or number of bytes to read.
 0A8A 10                push X
 0A8B 52F8              mov A,[X-8]
 0A8D 7C0000            xcall _TX_REPEATER_PutChar
 0A90 20                pop X
 0A91                   .dbline 554
 0A91           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0A91 10                push X
 0A92 5200              mov A,[X+0]
 0A94 7C0000            xcall _TX_REPEATER_PutChar
 0A97 20                pop X
 0A98           L175:
 0A98                   .dbline 557
 0A98           ;       
 0A98           ;       // Wait for the transmission to finish.
 0A98           ;       while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0A98           L176:
 0A98                   .dbline 557
 0A98 10                push X
 0A99 7C0000            xcall _TX_REPEATER_bReadTxStatus
 0A9C 62D000            mov REG[0xd0],>__r0
 0A9F 20                pop X
 0AA0 5300              mov [__r0],A
 0AA2 470020            tst [__r0],32
 0AA5 AFF2              jz L175
 0AA7                   .dbline 560
 0AA7           ;       
 0AA7           ;       // Make completely sure we're done.
 0AA7           ;       xmitWait();
 0AA7 930B              xcall _xmitWait
 0AA9                   .dbline -2
 0AA9           L174:
 0AA9 38FD              add SP,-3
 0AAB 20                pop X
 0AAC                   .dbline 0 ; func end
 0AAC 7F                ret
 0AAD                   .dbsym l total 1 I
 0AAD                   .dbsym l checksum 0 c
 0AAD                   .dbsym l value -8 c
 0AAD                   .dbsym l address -7 c
 0AAD                   .dbsym l instruction -6 c
 0AAD                   .dbsym l length -5 c
 0AAD                   .dbsym l id -4 c
 0AAD                   .dbend
 0AAD                   .dbfunc e longServoInstruction _longServoInstruction fV
 0AAD           ;          total -> X+1
 0AAD           ;       checksum -> X+0
 0AAD           ;         value2 -> X-9
 0AAD           ;         value1 -> X-8
 0AAD           ;        address -> X-7
 0AAD           ;    instruction -> X-6
 0AAD           ;         length -> X-5
 0AAD           ;             id -> X-4
 0AAD           _longServoInstruction::
 0AAD                   .dbline -1
 0AAD 10                push X
 0AAE 4F                mov X,SP
 0AAF 3803              add SP,3
 0AB1                   .dbline 565
 0AB1           ; }
 0AB1           ; 
 0AB1           ; // This function receives a destination, command length, instruction type, address, and two values.
 0AB1           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
 0AB1           ; {
 0AB1                   .dbline 569
 0AB1           ;       char checksum;
 0AB1           ;       int total;
 0AB1           ;       
 0AB1           ;       total = id + length + instruction + address + value1 + value2;
 0AB1 62D000            mov REG[0xd0],>__r0
 0AB4 52FB              mov A,[X-5]
 0AB6 5300              mov [__r1],A
 0AB8 550000            mov [__r0],0
 0ABB 52FC              mov A,[X-4]
 0ABD 0200              add A,[__r1]
 0ABF 5300              mov [__r1],A
 0AC1 5000              mov A,0
 0AC3 0A00              adc A,[__r0]
 0AC5 5300              mov [__r0],A
 0AC7 52FA              mov A,[X-6]
 0AC9 0400              add [__r1],A
 0ACB 0E0000            adc [__r0],0
 0ACE 52F9              mov A,[X-7]
 0AD0 0400              add [__r1],A
 0AD2 0E0000            adc [__r0],0
 0AD5 52F8              mov A,[X-8]
 0AD7 0400              add [__r1],A
 0AD9 0E0000            adc [__r0],0
 0ADC 52F7              mov A,[X-9]
 0ADE 5300              mov [__r3],A
 0AE0 550000            mov [__r2],0
 0AE3 5100              mov A,[__r1]
 0AE5 0200              add A,[__r3]
 0AE7 5402              mov [X+2],A
 0AE9 5100              mov A,[__r0]
 0AEB 0A00              adc A,[__r2]
 0AED 5401              mov [X+1],A
 0AEF                   .dbline 572
 0AEF           ;       
 0AEF           ;       // Calculate the checksum value for our servo communication.
 0AEF           ;       checksum = 255-(total%256);
 0AEF 5001              mov A,1
 0AF1 08                push A
 0AF2 5000              mov A,0
 0AF4 08                push A
 0AF5 5201              mov A,[X+1]
 0AF7 08                push A
 0AF8 5202              mov A,[X+2]
 0AFA 08                push A
 0AFB 7C0000            xcall __divmod_16X16_16
 0AFE 38FE              add SP,-2
 0B00 18                pop A
 0B01 5300              mov [__r1],A
 0B03 18                pop A
 0B04 50FF              mov A,-1
 0B06 1200              sub A,[__r1]
 0B08 5400              mov [X+0],A
 0B0A                   .dbline 575
 0B0A           ;       
 0B0A           ;       // Talk to the servo.
 0B0A           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0B0A 10                push X
 0B0B 50FF              mov A,-1
 0B0D 7C0000            xcall _TX_REPEATER_PutChar
 0B10 20                pop X
 0B11                   .dbline 576
 0B11           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0B11 10                push X
 0B12 50FF              mov A,-1
 0B14 7C0000            xcall _TX_REPEATER_PutChar
 0B17 20                pop X
 0B18                   .dbline 577
 0B18           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0B18 10                push X
 0B19 52FC              mov A,[X-4]
 0B1B 7C0000            xcall _TX_REPEATER_PutChar
 0B1E 20                pop X
 0B1F                   .dbline 578
 0B1F           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0B1F 10                push X
 0B20 52FB              mov A,[X-5]
 0B22 7C0000            xcall _TX_REPEATER_PutChar
 0B25 20                pop X
 0B26                   .dbline 579
 0B26           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0B26 10                push X
 0B27 52FA              mov A,[X-6]
 0B29 7C0000            xcall _TX_REPEATER_PutChar
 0B2C 20                pop X
 0B2D                   .dbline 580
 0B2D           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0B2D 10                push X
 0B2E 52F9              mov A,[X-7]
 0B30 7C0000            xcall _TX_REPEATER_PutChar
 0B33 20                pop X
 0B34                   .dbline 581
 0B34           ;       TX_REPEATER_PutChar(value1);            // The first value to write.
 0B34 10                push X
 0B35 52F8              mov A,[X-8]
 0B37 7C0000            xcall _TX_REPEATER_PutChar
 0B3A 20                pop X
 0B3B                   .dbline 582
 0B3B           ;       TX_REPEATER_PutChar(value2);            // The first value to write.
 0B3B 10                push X
 0B3C 52F7              mov A,[X-9]
 0B3E 7C0000            xcall _TX_REPEATER_PutChar
 0B41 20                pop X
 0B42                   .dbline 583
 0B42           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0B42 10                push X
 0B43 5200              mov A,[X+0]
 0B45 7C0000            xcall _TX_REPEATER_PutChar
 0B48 20                pop X
 0B49           L179:
 0B49                   .dbline 586
 0B49           ;       
 0B49           ;       // Wait for the transmission to finish.
 0B49           ;       while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0B49           L180:
 0B49                   .dbline 586
 0B49 10                push X
 0B4A 7C0000            xcall _TX_REPEATER_bReadTxStatus
 0B4D 62D000            mov REG[0xd0],>__r0
 0B50 20                pop X
 0B51 5300              mov [__r0],A
 0B53 470020            tst [__r0],32
 0B56 AFF2              jz L179
 0B58                   .dbline 589
 0B58           ;       
 0B58           ;       // Make completely sure we're done.
 0B58           ;       xmitWait();
 0B58 925A              xcall _xmitWait
 0B5A                   .dbline -2
 0B5A           L178:
 0B5A 38FD              add SP,-3
 0B5C 20                pop X
 0B5D                   .dbline 0 ; func end
 0B5D 7F                ret
 0B5E                   .dbsym l total 1 I
 0B5E                   .dbsym l checksum 0 c
 0B5E                   .dbsym l value2 -9 c
 0B5E                   .dbsym l value1 -8 c
 0B5E                   .dbsym l address -7 c
 0B5E                   .dbsym l instruction -6 c
 0B5E                   .dbsym l length -5 c
 0B5E                   .dbsym l id -4 c
 0B5E                   .dbend
 0B5E                   .dbfunc e configToggle _configToggle fV
 0B5E           ;           mode -> X-5
 0B5E           _configToggle::
 0B5E                   .dbline -1
 0B5E 10                push X
 0B5F 4F                mov X,SP
 0B60                   .dbline 595
 0B60           ; }
 0B60           ; 
 0B60           ; // This function allows the program to pass an RX or TX mode flag for switching between modes on the
 0B60           ; // half duplex UART serial communication line.
 0B60           ; void configToggle(int mode)
 0B60           ; {
 0B60                   .dbline 597
 0B60           ;       // Disconnect from the global bus and leave the pin high.
 0B60           ;       PRT0DR |= 0b10000000;
 0B60 430080            or REG[0],-128
 0B63                   .dbline 598
 0B63           ;       PRT0GS &= 0b01111111;
 0B63 41027F            and REG[0x2],127
 0B66                   .dbline 602
 0B66           ; 
 0B66           ;       // Unload the configuration of the current state.
 0B66           ;       // If there is no state, blindly wipe all configurations.
 0B66           ;       if(STATE)
 0B66 62D000            mov REG[0xd0],>_STATE
 0B69 3C0000            cmp [_STATE],0
 0B6C B006              jnz X51
 0B6E 3C0100            cmp [_STATE+1],0
 0B71 A010              jz L183
 0B73           X51:
 0B73                   .dbline 603
 0B73           ;       {
 0B73                   .dbline 604
 0B73           ;               unloadConfig(STATE);
 0B73 62D000            mov REG[0xd0],>_STATE
 0B76 5100              mov A,[_STATE]
 0B78 08                push A
 0B79 5101              mov A,[_STATE+1]
 0B7B 08                push A
 0B7C 90D9              xcall _unloadConfig
 0B7E 38FE              add SP,-2
 0B80                   .dbline 605
 0B80           ;       }
 0B80 8003              xjmp L184
 0B82           L183:
 0B82                   .dbline 607
 0B82           ;       else
 0B82           ;       {
 0B82                   .dbline 608
 0B82           ;               unloadAllConfigs();
 0B82 90C9              xcall _unloadAllConfigs
 0B84                   .dbline 609
 0B84           ;       }
 0B84           L184:
 0B84                   .dbline 611
 0B84           ;       
 0B84           ;       if(mode == PC_MODE)
 0B84 3DFB00            cmp [X-5],0
 0B87 B032              jnz L185
 0B89 3DFC02            cmp [X-4],2
 0B8C B02D              jnz L185
 0B8E           X52:
 0B8E                   .dbline 612
 0B8E           ;       {
 0B8E                   .dbline 613
 0B8E           ;               LoadConfig_pc_listener();
 0B8E 7C0000            xcall _LoadConfig_pc_listener
 0B91                   .dbline 616
 0B91           ;               
 0B91           ;               //COMP_SERIAL_CmdReset();                                               // Initializes the RX buffer
 0B91           ;               COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
 0B91 10                push X
 0B92 5001              mov A,1
 0B94 7C0000            xcall _COMP_SERIAL_IntCntl
 0B97 20                pop X
 0B98                   .dbline 617
 0B98           ;               COMP_SERIAL_Start(UART_PARITY_NONE);                    // Starts the UART.
 0B98 10                push X
 0B99 5000              mov A,0
 0B9B 7C0000            xcall _COMP_SERIAL_Start
 0B9E 20                pop X
 0B9F                   .dbline 619
 0B9F           ;               
 0B9F           ;               TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);             // Start the TX repeater.
 0B9F 10                push X
 0BA0 5000              mov A,0
 0BA2 7C0000            xcall _TX_REPEATER_Start
 0BA5 20                pop X
 0BA6                   .dbline 621
 0BA6           ;               
 0BA6           ;               TIMEOUT = 0;
 0BA6 62D000            mov REG[0xd0],>_TIMEOUT
 0BA9 550100            mov [_TIMEOUT+1],0
 0BAC 550000            mov [_TIMEOUT],0
 0BAF                   .dbline 622
 0BAF           ;               STATE = PC_MODE;
 0BAF 62D000            mov REG[0xd0],>_STATE
 0BB2 550102            mov [_STATE+1],2
 0BB5 550000            mov [_STATE],0
 0BB8                   .dbline 623
 0BB8           ;       }
 0BB8 807A              xjmp L186
 0BBA           L185:
 0BBA                   .dbline 624
 0BBA           ;       else if(mode == RX_MODE)
 0BBA 3DFB00            cmp [X-5],0
 0BBD B02C              jnz L187
 0BBF 3DFC01            cmp [X-4],1
 0BC2 B027              jnz L187
 0BC4           X53:
 0BC4                   .dbline 625
 0BC4           ;       {
 0BC4                   .dbline 626
 0BC4           ;               LoadConfig_receiver_config();
 0BC4 7C0000            xcall _LoadConfig_receiver_config
 0BC7                   .dbline 631
 0BC7           ;               
 0BC7           ;               // Clear the buffer.
 0BC7           ;               //RECEIVE_CmdReset();
 0BC7           ;               // Start the receiver.
 0BC7           ;               RECEIVE_Start(RECEIVE_PARITY_NONE);
 0BC7 10                push X
 0BC8 5000              mov A,0
 0BCA 7C0000            xcall _RECEIVE_Start
 0BCD 20                pop X
 0BCE                   .dbline 634
 0BCE           ;               
 0BCE           ;               // Start response timeout timer and enable its interrupt routine.
 0BCE           ;               TIMEOUT = 0;
 0BCE 62D000            mov REG[0xd0],>_TIMEOUT
 0BD1 550100            mov [_TIMEOUT+1],0
 0BD4 550000            mov [_TIMEOUT],0
 0BD7                   .dbline 635
 0BD7           ;               RX_TIMEOUT_EnableInt();
 0BD7 10                push X
 0BD8 7C0000            xcall _RX_TIMEOUT_EnableInt
 0BDB                   .dbline 636
 0BDB           ;               RX_TIMEOUT_Start();
 0BDB 7C0000            xcall _RX_TIMEOUT_Start
 0BDE 20                pop X
 0BDF                   .dbline 638
 0BDF           ;               
 0BDF           ;               STATE = RX_MODE;
 0BDF 62D000            mov REG[0xd0],>_STATE
 0BE2 550101            mov [_STATE+1],1
 0BE5 550000            mov [_STATE],0
 0BE8                   .dbline 639
 0BE8           ;       }
 0BE8 804A              xjmp L188
 0BEA           L187:
 0BEA                   .dbline 640
 0BEA           ;       else if(mode == TX_MODE)
 0BEA 3DFB00            cmp [X-5],0
 0BED B045              jnz L189
 0BEF 3DFC00            cmp [X-4],0
 0BF2 B040              jnz L189
 0BF4           X54:
 0BF4                   .dbline 641
 0BF4           ;       {
 0BF4                   .dbline 642
 0BF4           ;               LoadConfig_transmitter_config();
 0BF4 7C0000            xcall _LoadConfig_transmitter_config
 0BF7                   .dbline 644
 0BF7           ;               // Start the transmitter.
 0BF7           ;               TRANSMIT_Start(TRANSMIT_PARITY_NONE);
 0BF7 10                push X
 0BF8 5000              mov A,0
 0BFA 7C0000            xcall _TRANSMIT_Start
 0BFD 20                pop X
 0BFE                   .dbline 646
 0BFE           ;               
 0BFE           ;               TIMEOUT = 0;
 0BFE 62D000            mov REG[0xd0],>_TIMEOUT
 0C01 550100            mov [_TIMEOUT+1],0
 0C04 550000            mov [_TIMEOUT],0
 0C07                   .dbline 647
 0C07           ;               TX_TIMEOUT_EnableInt(); // Make sure interrupts are enabled.
 0C07 10                push X
 0C08 7C0000            xcall _TX_TIMEOUT_EnableInt
 0C0B                   .dbline 648
 0C0B           ;               TX_TIMEOUT_Start();             // Start the timer.
 0C0B 7C0000            xcall _TX_TIMEOUT_Start
 0C0E 20                pop X
 0C0F           L191:
 0C0F                   .dbline 651
 0C0F           ;               
 0C0F           ;               while(!TIMEOUT)
 0C0F           ;               {
 0C0F                   .dbline 654
 0C0F           ;                       // Do nothing while we wait for one timeout period.
 0C0F           ;                       // This is to allow everyone to get in the right configuration.
 0C0F           ;               }
 0C0F           L192:
 0C0F                   .dbline 650
 0C0F 62D000            mov REG[0xd0],>_TIMEOUT
 0C12 3C0000            cmp [_TIMEOUT],0
 0C15 B006              jnz X55
 0C17 3C0100            cmp [_TIMEOUT+1],0
 0C1A AFF4              jz L191
 0C1C           X55:
 0C1C                   .dbline 656
 0C1C           ;               
 0C1C           ;               TX_TIMEOUT_Stop();              // Stop the timer.
 0C1C 10                push X
 0C1D 7C0000            xcall _TX_TIMEOUT_Stop
 0C20 20                pop X
 0C21                   .dbline 657
 0C21           ;               TIMEOUT = 0;                    // Reset the timeout flag.
 0C21 62D000            mov REG[0xd0],>_TIMEOUT
 0C24 550100            mov [_TIMEOUT+1],0
 0C27 550000            mov [_TIMEOUT],0
 0C2A                   .dbline 659
 0C2A           ;               
 0C2A           ;               STATE = TX_MODE;
 0C2A 62D000            mov REG[0xd0],>_STATE
 0C2D 550100            mov [_STATE+1],0
 0C30 550000            mov [_STATE],0
 0C33                   .dbline 660
 0C33           ;       }
 0C33           L189:
 0C33           L188:
 0C33           L186:
 0C33                   .dbline 665
 0C33           ;       
 0C33           ;       // Make sure to keep the LED on (active low).
 0C33           ;       //PRT2DR &= 0b11111110;
 0C33           ;       
 0C33           ;       if(STATE == TX_MODE)
 0C33 62D000            mov REG[0xd0],>_STATE
 0C36 3C0000            cmp [_STATE],0
 0C39 B00B              jnz L194
 0C3B 3C0100            cmp [_STATE+1],0
 0C3E B006              jnz L194
 0C40           X56:
 0C40                   .dbline 666
 0C40           ;       {
 0C40                   .dbline 667
 0C40           ;               PRT1DR |= 0b00000001;
 0C40 430401            or REG[0x4],1
 0C43                   .dbline 668
 0C43           ;       }
 0C43 8004              xjmp L195
 0C45           L194:
 0C45                   .dbline 670
 0C45           ;       else
 0C45           ;       {
 0C45                   .dbline 671
 0C45           ;               PRT1DR &= 0b11111110;
 0C45 4104FE            and REG[0x4],-2
 0C48                   .dbline 673
 0C48           ;               
 0C48           ;       }
 0C48           L195:
 0C48                   .dbline 676
 0C48           ;       
 0C48           ;       // Reconnect to the global bus.
 0C48           ;       PRT0GS |= 0b10000000;
 0C48 430280            or REG[0x2],-128
 0C4B                   .dbline -2
 0C4B           L182:
 0C4B 20                pop X
 0C4C                   .dbline 0 ; func end
 0C4C 7F                ret
 0C4D                   .dbsym l mode -5 I
 0C4D                   .dbend
 0C4D                   .dbfunc e unloadAllConfigs _unloadAllConfigs fV
 0C4D           _unloadAllConfigs::
 0C4D                   .dbline -1
 0C4D                   .dbline 682
 0C4D           ; }
 0C4D           ; 
 0C4D           ; // This function blindly unloads all user configurations. This will be called once,
 0C4D           ; // when the system initially has no known state.
 0C4D           ; void unloadAllConfigs(void)
 0C4D           ; {
 0C4D                   .dbline 683
 0C4D           ;       UnloadConfig_pc_listener();
 0C4D 7C0000            xcall _UnloadConfig_pc_listener
 0C50                   .dbline 684
 0C50           ;       UnloadConfig_receiver_config();
 0C50 7C0000            xcall _UnloadConfig_receiver_config
 0C53                   .dbline 685
 0C53           ;       UnloadConfig_transmitter_config();
 0C53 7C0000            xcall _UnloadConfig_transmitter_config
 0C56                   .dbline -2
 0C56           L196:
 0C56                   .dbline 0 ; func end
 0C56 7F                ret
 0C57                   .dbend
 0C57                   .dbfunc e unloadConfig _unloadConfig fV
 0C57           ;     config_num -> X-5
 0C57           _unloadConfig::
 0C57                   .dbline -1
 0C57 10                push X
 0C58 4F                mov X,SP
 0C59                   .dbline 691
 0C59           ; }
 0C59           ; 
 0C59           ; // This function unloads the configuration corresponding to the config number passed to it.
 0C59           ; // We do this instead of unloadAllConfigs to cut down on set up time.
 0C59           ; void unloadConfig(int config_num)
 0C59           ; {
 0C59                   .dbline 692
 0C59           ;       if(config_num == PC_MODE)
 0C59 3DFB00            cmp [X-5],0
 0C5C B00B              jnz L198
 0C5E 3DFC02            cmp [X-4],2
 0C61 B006              jnz L198
 0C63           X57:
 0C63                   .dbline 693
 0C63           ;       {
 0C63                   .dbline 694
 0C63           ;               UnloadConfig_pc_listener();
 0C63 7C0000            xcall _UnloadConfig_pc_listener
 0C66                   .dbline 695
 0C66           ;       }
 0C66 801D              xjmp L199
 0C68           L198:
 0C68                   .dbline 696
 0C68           ;       else if(config_num == RX_MODE)
 0C68 3DFB00            cmp [X-5],0
 0C6B B00B              jnz L200
 0C6D 3DFC01            cmp [X-4],1
 0C70 B006              jnz L200
 0C72           X58:
 0C72                   .dbline 697
 0C72           ;       {
 0C72                   .dbline 698
 0C72           ;               UnloadConfig_receiver_config();
 0C72 7C0000            xcall _UnloadConfig_receiver_config
 0C75                   .dbline 699
 0C75           ;       }
 0C75 800E              xjmp L201
 0C77           L200:
 0C77                   .dbline 700
 0C77           ;       else if(config_num == TX_MODE)
 0C77 3DFB00            cmp [X-5],0
 0C7A B009              jnz L202
 0C7C 3DFC00            cmp [X-4],0
 0C7F B004              jnz L202
 0C81           X59:
 0C81                   .dbline 701
 0C81           ;       {
 0C81                   .dbline 702
 0C81           ;               UnloadConfig_transmitter_config();
 0C81 7C0000            xcall _UnloadConfig_transmitter_config
 0C84                   .dbline 703
 0C84           ;       }
 0C84           L202:
 0C84           L201:
 0C84           L199:
 0C84                   .dbline -2
 0C84           L197:
 0C84 20                pop X
 0C85                   .dbline 0 ; func end
 0C85 7F                ret
 0C86                   .dbsym l config_num -5 I
 0C86                   .dbend
 0C86                   .dbfunc e initializeSlaves _initializeSlaves fV
 0C86           ;   num_timeouts -> X+0
 0C86           _initializeSlaves::
 0C86                   .dbline -1
 0C86 10                push X
 0C87 4F                mov X,SP
 0C88 3802              add SP,2
 0C8A                   .dbline 707
 0C8A           ; }
 0C8A           ; 
 0C8A           ; void initializeSlaves(void)
 0C8A           ; {
 0C8A                   .dbline 708
 0C8A           ;       int num_timeouts = 0;
 0C8A 560100            mov [X+1],0
 0C8D 560000            mov [X+0],0
 0C90                   .dbline 710
 0C90           ;       
 0C90           ;       sayHello();
 0C90 7C036D            xcall _sayHello
 0C93 80FE              xjmp L206
 0C95           L205:
 0C95                   .dbline 715
 0C95           ;       
 0C95           ;       // This loop continuously probes and listens at intervals
 0C95           ;       // set by the RX_TIMEOUT_DURATION variable.
 0C95           ;       while(num_timeouts < MAX_TIMEOUTS)
 0C95           ;       {                                       
 0C95                   .dbline 716
 0C95           ;               if(validTransmission())
 0C95 7C03C3            xcall _validTransmission
 0C98 62D000            mov REG[0xd0],>__r0
 0C9B 3C0000            cmp [__r0],0
 0C9E B006              jnz X60
 0CA0 3C0000            cmp [__r1],0
 0CA3 A0C8              jz L208
 0CA5           X60:
 0CA5                   .dbline 717
 0CA5           ;               {
 0CA5                   .dbline 718
 0CA5           ;                       if(COMMAND_TYPE == HELLO_BYTE)  // Someone else is out there!
 0CA5 62D000            mov REG[0xd0],>_COMMAND_TYPE
 0CA8 3C00C8            cmp [_COMMAND_TYPE],-56
 0CAB B0E6              jnz L209
 0CAD                   .dbline 719
 0CAD           ;                       {
 0CAD                   .dbline 721
 0CAD           ;                               // If this is for me, assign them an ID.
 0CAD           ;                               if(COMMAND_DESTINATION == MASTER_ID)
 0CAD 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0CB0 3C0000            cmp [_COMMAND_DESTINATION],0
 0CB3 B0DE              jnz L209
 0CB5                   .dbline 722
 0CB5           ;                               {
 0CB5                   .dbline 723
 0CB5           ;                                       NUM_MODULES++;                  // Increment the number of modules connected.
 0CB5 62D000            mov REG[0xd0],>_NUM_MODULES
 0CB8 7601              inc [_NUM_MODULES+1]
 0CBA 0E0000            adc [_NUM_MODULES],0
 0CBD                   .dbline 724
 0CBD           ;                                       num_timeouts = 0;               // Reset number of timeouts since we found someone.
 0CBD 560100            mov [X+1],0
 0CC0 560000            mov [X+0],0
 0CC3                   .dbline 726
 0CC3           ;               
 0CC3           ;                                       if(!assignID(NUM_MODULES))
 0CC3 5100              mov A,[_NUM_MODULES]
 0CC5 08                push A
 0CC6 5101              mov A,[_NUM_MODULES+1]
 0CC8 08                push A
 0CC9 7C0150            xcall _assignID
 0CCC 38FE              add SP,-2
 0CCE 62D000            mov REG[0xd0],>__r0
 0CD1 3C0000            cmp [__r0],0
 0CD4 B0BD              jnz L209
 0CD6 3C0000            cmp [__r1],0
 0CD9 B0B8              jnz L209
 0CDB           X61:
 0CDB                   .dbline 727
 0CDB           ;                                       {
 0CDB                   .dbline 731
 0CDB           ;                                               // If the module did not respond that the ID was assigned,
 0CDB           ;                                               // make an effort to ping it in case that transmission was lost
 0CDB           ;                                               // before ultimately deciding that the module didn't configure.
 0CDB           ;                                               if(!pingModule(NUM_MODULES))
 0CDB 62D000            mov REG[0xd0],>_NUM_MODULES
 0CDE 5100              mov A,[_NUM_MODULES]
 0CE0 08                push A
 0CE1 5101              mov A,[_NUM_MODULES+1]
 0CE3 08                push A
 0CE4 7C0061            xcall _pingModule
 0CE7 38FE              add SP,-2
 0CE9 62D000            mov REG[0xd0],>__r0
 0CEC 3C0000            cmp [__r0],0
 0CEF B0A2              jnz L209
 0CF1 3C0000            cmp [__r1],0
 0CF4 B09D              jnz L209
 0CF6           X62:
 0CF6                   .dbline 732
 0CF6           ;                                               {
 0CF6                   .dbline 733
 0CF6           ;                                                       if(!pingModule(NUM_MODULES))
 0CF6 62D000            mov REG[0xd0],>_NUM_MODULES
 0CF9 5100              mov A,[_NUM_MODULES]
 0CFB 08                push A
 0CFC 5101              mov A,[_NUM_MODULES+1]
 0CFE 08                push A
 0CFF 7C0061            xcall _pingModule
 0D02 38FE              add SP,-2
 0D04 62D000            mov REG[0xd0],>__r0
 0D07 3C0000            cmp [__r0],0
 0D0A B087              jnz L209
 0D0C 3C0000            cmp [__r1],0
 0D0F B082              jnz L209
 0D11           X63:
 0D11                   .dbline 734
 0D11           ;                                                       {
 0D11                   .dbline 735
 0D11           ;                                                               if(!pingModule(NUM_MODULES))
 0D11 62D000            mov REG[0xd0],>_NUM_MODULES
 0D14 5100              mov A,[_NUM_MODULES]
 0D16 08                push A
 0D17 5101              mov A,[_NUM_MODULES+1]
 0D19 08                push A
 0D1A 7C0061            xcall _pingModule
 0D1D 38FE              add SP,-2
 0D1F 62D000            mov REG[0xd0],>__r0
 0D22 3C0000            cmp [__r0],0
 0D25 B06C              jnz L209
 0D27 3C0000            cmp [__r1],0
 0D2A B067              jnz L209
 0D2C           X64:
 0D2C                   .dbline 736
 0D2C           ;                                                               {
 0D2C                   .dbline 737
 0D2C           ;                                                                       if(!pingModule(NUM_MODULES))
 0D2C 62D000            mov REG[0xd0],>_NUM_MODULES
 0D2F 5100              mov A,[_NUM_MODULES]
 0D31 08                push A
 0D32 5101              mov A,[_NUM_MODULES+1]
 0D34 08                push A
 0D35 7C0061            xcall _pingModule
 0D38 38FE              add SP,-2
 0D3A 62D000            mov REG[0xd0],>__r0
 0D3D 3C0000            cmp [__r0],0
 0D40 B051              jnz L209
 0D42 3C0000            cmp [__r1],0
 0D45 B04C              jnz L209
 0D47           X65:
 0D47                   .dbline 738
 0D47           ;                                                                       {
 0D47                   .dbline 739
 0D47           ;                                                                               if(!pingModule(NUM_MODULES))
 0D47 62D000            mov REG[0xd0],>_NUM_MODULES
 0D4A 5100              mov A,[_NUM_MODULES]
 0D4C 08                push A
 0D4D 5101              mov A,[_NUM_MODULES+1]
 0D4F 08                push A
 0D50 7C0061            xcall _pingModule
 0D53 38FE              add SP,-2
 0D55 62D000            mov REG[0xd0],>__r0
 0D58 3C0000            cmp [__r0],0
 0D5B B036              jnz L209
 0D5D 3C0000            cmp [__r1],0
 0D60 B031              jnz L209
 0D62           X66:
 0D62                   .dbline 740
 0D62           ;                                                                               {
 0D62                   .dbline 741
 0D62           ;                                                                                       NUM_MODULES--;
 0D62 62D000            mov REG[0xd0],>_NUM_MODULES
 0D65 7A01              dec [_NUM_MODULES+1]
 0D67 1E0000            sbb [_NUM_MODULES],0
 0D6A                   .dbline 742
 0D6A           ;                                                                               }
 0D6A                   .dbline 743
 0D6A           ;                                                                       }
 0D6A                   .dbline 744
 0D6A           ;                                                               }
 0D6A                   .dbline 745
 0D6A           ;                                                       }
 0D6A                   .dbline 746
 0D6A           ;                                               }
 0D6A                   .dbline 747
 0D6A           ;                                       }
 0D6A                   .dbline 748
 0D6A           ;                               }
 0D6A                   .dbline 749
 0D6A           ;                       }
 0D6A                   .dbline 750
 0D6A           ;               }
 0D6A 8027              xjmp L209
 0D6C           L208:
 0D6C                   .dbline 751
 0D6C           ;               else if(TIMEOUT >= RX_TIMEOUT_DURATION)
 0D6C 62D000            mov REG[0xd0],>_TIMEOUT
 0D6F 5101              mov A,[_TIMEOUT+1]
 0D71 1105              sub A,5
 0D73 5100              mov A,[_TIMEOUT]
 0D75 3180              xor A,-128
 0D77 1980              sbb A,(0 ^ 0x80)
 0D79 C018              jc L226
 0D7B           X67:
 0D7B                   .dbline 752
 0D7B           ;               {       
 0D7B                   .dbline 753
 0D7B           ;                       num_timeouts++;
 0D7B 7701              inc [X+1]
 0D7D 0F0000            adc [X+0],0
 0D80                   .dbline 756
 0D80           ;                       
 0D80           ;                       // If we are not maxed out on modules, look for more.
 0D80           ;                       if(NUM_MODULES < MAX_MODULES)
 0D80 62D000            mov REG[0xd0],>_NUM_MODULES
 0D83 5101              mov A,[_NUM_MODULES+1]
 0D85 11FA              sub A,-6
 0D87 5100              mov A,[_NUM_MODULES]
 0D89 3180              xor A,-128
 0D8B 1980              sbb A,(0 ^ 0x80)
 0D8D D004              jnc L228
 0D8F           X68:
 0D8F                   .dbline 757
 0D8F           ;                       {
 0D8F                   .dbline 758
 0D8F           ;                               sayHello();
 0D8F 7C036D            xcall _sayHello
 0D92                   .dbline 759
 0D92           ;                       }
 0D92           L228:
 0D92                   .dbline 760
 0D92           ;               }
 0D92           L226:
 0D92           L209:
 0D92                   .dbline 761
 0D92           ;       }
 0D92           L206:
 0D92                   .dbline 714
 0D92 5201              mov A,[X+1]
 0D94 1105              sub A,5
 0D96 5200              mov A,[X+0]
 0D98 3180              xor A,-128
 0D9A 1980              sbb A,(0 ^ 0x80)
 0D9C CEF8              jc L205
 0D9E           X69:
 0D9E                   .dbline 763
 0D9E           ;       
 0D9E           ;       configToggle(RX_MODE);
 0D9E 5000              mov A,0
 0DA0 08                push A
 0DA1 5001              mov A,1
 0DA3 08                push A
 0DA4 9DB8              xcall _configToggle
 0DA6                   .dbline 766
 0DA6           ;       
 0DA6           ;       // Switch back to PC mode.
 0DA6           ;       configToggle(PC_MODE);
 0DA6 5000              mov A,0
 0DA8 08                push A
 0DA9 5002              mov A,2
 0DAB 08                push A
 0DAC 9DB0              xcall _configToggle
 0DAE 38FC              add SP,-4
 0DB0                   .dbline -2
 0DB0           L204:
 0DB0 38FE              add SP,-2
 0DB2 20                pop X
 0DB3                   .dbline 0 ; func end
 0DB3 7F                ret
 0DB4                   .dbsym l num_timeouts 0 I
 0DB4                   .dbend
 0DB4                   .dbfunc e xmitWait _xmitWait fV
 0DB4           ;              i -> X+0
 0DB4           _xmitWait::
 0DB4                   .dbline -1
 0DB4 10                push X
 0DB5 4F                mov X,SP
 0DB6 3802              add SP,2
 0DB8                   .dbline 770
 0DB8           ; }
 0DB8           ; 
 0DB8           ; void xmitWait(void)
 0DB8           ; {
 0DB8                   .dbline 773
 0DB8           ;       int i;
 0DB8           ;       
 0DB8           ;       for(i = 0; i < 25; i++)
 0DB8 560100            mov [X+1],0
 0DBB 560000            mov [X+0],0
 0DBE           L231:
 0DBE                   .dbline 774
 0DBE           ;       {
 0DBE                   .dbline 776
 0DBE           ;               // Sit here and spin for about 50 microseconds.
 0DBE           ;       }
 0DBE           L232:
 0DBE                   .dbline 773
 0DBE 7701              inc [X+1]
 0DC0 0F0000            adc [X+0],0
 0DC3                   .dbline 773
 0DC3 5201              mov A,[X+1]
 0DC5 1119              sub A,25
 0DC7 5200              mov A,[X+0]
 0DC9 3180              xor A,-128
 0DCB 1980              sbb A,(0 ^ 0x80)
 0DCD CFF0              jc L231
 0DCF           X70:
 0DCF                   .dbline -2
 0DCF           L230:
 0DCF 38FE              add SP,-2
 0DD1 20                pop X
 0DD2                   .dbline 0 ; func end
 0DD2 7F                ret
 0DD3                   .dbsym l i 0 I
 0DD3                   .dbend
 0DD3                   .dbfunc e TX_TIMEOUT_ISR _TX_TIMEOUT_ISR fV
 0DD3           _TX_TIMEOUT_ISR::
 0DD3                   .dbline -1
 0DD3 71C0              or F,-64
 0DD5 08                push A
 0DD6 5DD0              mov A,REG[0xd0]
 0DD8 08                push A
 0DD9                   .dbline 780
 0DD9           ; }
 0DD9           ; 
 0DD9           ; void TX_TIMEOUT_ISR(void)
 0DD9           ; {     
 0DD9                   .dbline 781
 0DD9           ;       TIMEOUT++;
 0DD9 62D000            mov REG[0xd0],>_TIMEOUT
 0DDC 7601              inc [_TIMEOUT+1]
 0DDE 0E0000            adc [_TIMEOUT],0
 0DE1                   .dbline 783
 0DE1           ;       
 0DE1           ;       M8C_ClearIntFlag(INT_CLR0,TX_TIMEOUT_INT_MASK);
 0DE1 62DAFD            mov REG[0xda],-3
 0DE4                   .dbline -2
 0DE4           L235:
 0DE4 18                pop A
 0DE5 60D0              mov REG[208],A
 0DE7 18                pop A
 0DE8                   .dbline 0 ; func end
 0DE8 7E                reti
 0DE9                   .dbend
 0DE9                   .dbfunc e RX_TIMEOUT_ISR _RX_TIMEOUT_ISR fV
 0DE9           _RX_TIMEOUT_ISR::
 0DE9                   .dbline -1
 0DE9 71C0              or F,-64
 0DEB 08                push A
 0DEC 5DD0              mov A,REG[0xd0]
 0DEE 08                push A
 0DEF                   .dbline 787
 0DEF           ; }
 0DEF           ; 
 0DEF           ; void RX_TIMEOUT_ISR(void)
 0DEF           ; {     
 0DEF                   .dbline 788
 0DEF           ;       TIMEOUT++;
 0DEF 62D000            mov REG[0xd0],>_TIMEOUT
 0DF2 7601              inc [_TIMEOUT+1]
 0DF4 0E0000            adc [_TIMEOUT],0
 0DF7                   .dbline 790
 0DF7           ;       
 0DF7           ;       M8C_ClearIntFlag(INT_CLR0,RX_TIMEOUT_INT_MASK);
 0DF7 62DAFD            mov REG[0xda],-3
 0DFA                   .dbline -2
 0DFA           L236:
 0DFA 18                pop A
 0DFB 60D0              mov REG[208],A
 0DFD 18                pop A
 0DFE                   .dbline 0 ; func end
 0DFE 7E                reti
 0DFF                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _STATE::
 0000 0000              .byte 0,0
 0002                   .dbsym e STATE _STATE I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _PARAM::
 0000 00000000000000000000      .byte 0,0,0,0,0,0,0,0,0,0
 000A                   .dbsym e PARAM _PARAM A[10:10]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_TYPE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_TYPE _COMMAND_TYPE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_DESTINATION::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_DESTINATION _COMMAND_DESTINATION c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_SOURCE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_SOURCE _COMMAND_SOURCE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _NUM_MODULES::
 0000 0000              .byte 0,0
 0002                   .dbsym e NUM_MODULES _NUM_MODULES I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _TIMEOUT::
 0000 0000              .byte 0,0
 0002                   .dbsym e TIMEOUT _TIMEOUT I
                        .area lit(rom, con, rel)
 0000           L42:
 0000 4D6F64756C65732100        .byte 'M,'o,'d,'u,'l,'e,'s,33,0
