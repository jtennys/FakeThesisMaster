 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;          angle -> X+4
 0000           ;  softwareReset -> X+2
 0000           ;      tempValue -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3808              add SP,8
 0004                   .dbline 97
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>              // part specific constants and macros
 0004           ; #include "PSoCAPI.h"          // PSoC API definitions for all User Modules
 0004           ; #include "psocdynamic.h"
 0004           ; #include <stdlib.h>
 0004           ; #include <string.h>
 0004           ; #pragma interrupt_handler TX_TIMEOUT_ISR
 0004           ; #pragma interrupt_handler RX_TIMEOUT_ISR
 0004           ; 
 0004           ; // These defines are used as parameters of the configToggle function.
 0004           ; // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
 0004           ; #define               PC_MODE                                         (2)
 0004           ; #define               RX_MODE                                         (1)
 0004           ; #define               TX_MODE                                         (0)
 0004           ; 
 0004           ; // These defines are used as comparisons to find what port the newest module is connected to.
 0004           ; #define               PORT_1                                          ('1')
 0004           ; #define               PORT_2                                          ('2')
 0004           ; #define               PORT_3                                          ('3')
 0004           ; #define               PORT_4                                          ('4')
 0004           ; 
 0004           ; // These defines are used as transmission indicators.
 0004           ; #define               START_TRANSMIT                          (252)   // Indicates the beginning of a transmission.
 0004           ; #define               END_TRANSMIT                            (253)   // Indicates the end of a transmission.
 0004           ; #define               HELLO_BYTE                                      (200)   // Indicates master is ready to talk.
 0004           ; #define               ID_ASSIGNMENT                           (201)   // Indicates an ID assignment from the master.
 0004           ; #define               ID_ASSIGN_OK                            (202)   // Indicates an ID assignment is acknowledged.
 0004           ; #define               PING                                            (203)   // Indicates that someone is pinging someone else.
 0004           ; #define               CLEAR_CONFIG                            (204)   // Indicates that the master is asking for a config clear.
 0004           ; #define               CONFIG_CLEARED                          (205)   // Indicates that a module has cleared its own config.
 0004           ; #define               MASTER_ID                                       (0)             // The master node's ID.
 0004           ; #define               BROADCAST                                       (254)   // The broadcast ID for talking to all nodes.
 0004           ; #define               BLANK_MODULE_ID                         (251)   // This is the ID of an unconfigured module.
 0004           ; 
 0004           ; // These defines are used to fill in the instruction we are using on the servo.
 0004           ; #define               PING_SERVO                                      (1)             // This is the instruction number for ping.
 0004           ; #define               READ_SERVO                                      (2)             // This is the instruction number for a read.
 0004           ; #define               WRITE_SERVO                                     (3)             // This is the instruction number for a write.
 0004           ; #define               RESET_SERVO                                     (6)             // This is the instruction to reset the servo EEPROM.
 0004           ; 
 0004           ; // These defines are used for transmission timing.
 0004           ; #define       RX_TIMEOUT_DURATION                     (5)             // This is receive wait time in 1 ms units.
 0004           ; 
 0004           ; // These defines are used for the initial probing stage, where receive waits are longer to make
 0004           ; // sure of transmission failure or success.
 0004           ; #define               BOOT_TIMEOUT                            (200)   // This is boot wait time in 1 ms units.
 0004           ; #define               MAX_TIMEOUTS                            (10)    // Number of timeouts allowed before hello mode exit.
 0004           ; 
 0004           ; // This is the maximum number of allowable modules per branch out from the master
 0004           ; #define               MAX_MODULES                                     (250)
 0004           ; 
 0004           ; #define               SERVO_START                                     (255)
 0004           ; 
 0004           ; // This function receives a mode identifier as a parameter and toggles the
 0004           ; // system configuration between receive and transmit modes for half duplex UART.
 0004           ; void configToggle(int mode);
 0004           ; 
 0004           ; // This function pings the index passed to it. Returns 1 on success, 0 on fail.
 0004           ; int pingModule(int module_id);
 0004           ; 
 0004           ; // This function assigns an ID to a module.
 0004           ; int assignID(int assigned_ID);
 0004           ; 
 0004           ; int validTransmission(void);
 0004           ; 
 0004           ; void decodeTransmission(void);
 0004           ; 
 0004           ; void sayHello(void);
 0004           ; 
 0004           ; void servoInstruction(char id, char length, char instruction, char address, char value);
 0004           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
 0004           ; 
 0004           ; int clearConfig(int module_id);
 0004           ; // This function checks the current mode and unloads the configuration for that mode.
 0004           ; void unloadAllConfigs(void);
 0004           ; // This function unloads the configuration corresponding to the number passed to it.
 0004           ; void unloadConfig(int config_num);
 0004           ; // Initialization function for the slave module controllers.
 0004           ; void initializeSlaves(void);
 0004           ; // Static wait time of approximately 50 microseconds for use after starting a transmission.
 0004           ; void xmitWait(void);
 0004           ; 
 0004           ; // This flag is set if there is a timeout.
 0004           ; int TIMEOUT;
 0004           ; 
 0004           ; int NUM_MODULES;                      // Stores the number of modules that have been discovered.
 0004           ; char COMMAND_SOURCE;          // Stores who the current command is from.
 0004           ; char COMMAND_DESTINATION;     // Stores who the current command is for.
 0004           ; char COMMAND_TYPE;                    // Stores the type of command that was just read.
 0004           ; char PARAM[10];                               // Stores a parameters that accompanies the command (if any).
 0004           ; int STATE;                                    // Stores the current configuration state of the system.
 0004           ; 
 0004           ; void main()
 0004           ; {     
 0004                   .dbline 98
 0004           ;       int tempValue = 0;
 0004 560100            mov [X+1],0
 0007 560000            mov [X+0],0
 000A                   .dbline 99
 000A           ;       int softwareReset = 0;
 000A 560300            mov [X+3],0
 000D 560200            mov [X+2],0
 0010                   .dbline 100
 0010           ;       float angle = 0;
 0010 560400            mov [X+4],0
 0013 560500            mov [X+5],0
 0016 560600            mov [X+6],0
 0019 560700            mov [X+7],0
 001C                   .dbline 102
 001C           ;       
 001C           ;       NUM_MODULES = 0;
 001C 62D000            mov REG[0xd0],>_NUM_MODULES
 001F 550100            mov [_NUM_MODULES+1],0
 0022 550000            mov [_NUM_MODULES],0
 0025                   .dbline 104
 0025           ;       
 0025           ;       M8C_EnableGInt;                 // Turn on global interrupts for the transmission timeout timer.
 0025 7101                      or  F, 01h
 0027           
 0027                   .dbline 105
 0027           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); //activate GPIO ISR
 0027 43E020            or REG[0xe0],32
 002A                   .dbline 107
 002A           ;       
 002A           ;       unloadAllConfigs();
 002A 7C0CA1            xcall _unloadAllConfigs
 002D                   .dbline 109
 002D           ; 
 002D           ;       configToggle(RX_MODE);
 002D 5000              mov A,0
 002F 08                push A
 0030 5001              mov A,1
 0032 08                push A
 0033 7C0BB2            xcall _configToggle
 0036 38FE              add SP,-2
 0038           L2:
 0038                   .dbline 112
 0038           ;               
 0038           ;       // Sit and wait for the worst case setup time to occur.
 0038           ;       while(TIMEOUT < BOOT_TIMEOUT) { }
 0038                   .dbline 112
 0038           L3:
 0038                   .dbline 112
 0038 62D000            mov REG[0xd0],>_TIMEOUT
 003B 5101              mov A,[_TIMEOUT+1]
 003D 11C8              sub A,-56
 003F 5100              mov A,[_TIMEOUT]
 0041 3180              xor A,-128
 0043 1980              sbb A,(0 ^ 0x80)
 0045 CFF2              jc L2
 0047           X1:
 0047                   .dbline 115
 0047           ;               
 0047           ;       // Initialize all of the slave modules.
 0047           ;       initializeSlaves();
 0047 7C0CDA            xcall _initializeSlaves
 004A 800F              xjmp L6
 004C           L5:
 004C                   .dbline 118
 004C           ;       
 004C           ;       while(1)
 004C           ;       {       
 004C                   .dbline 119
 004C           ;               if(COMP_SERIAL_bCmdCheck())
 004C 10                push X
 004D 7C0000            xcall _COMP_SERIAL_bCmdCheck
 0050 62D000            mov REG[0xd0],>__r0
 0053 20                pop X
 0054 3900              cmp A,0
 0056 A003              jz L8
 0058                   .dbline 120
 0058           ;               {
 0058                   .dbline 121
 0058           ;                       decodeTransmission();
 0058 941D              xcall _decodeTransmission
 005A                   .dbline 122
 005A           ;               }
 005A           L8:
 005A                   .dbline 123
 005A           ;       }
 005A           L6:
 005A                   .dbline 117
 005A 8FF1              xjmp L5
 005C           X0:
 005C                   .dbline -2
 005C           L1:
 005C 38F8              add SP,-8
 005E 20                pop X
 005F                   .dbline 0 ; func end
 005F 8FFF              jmp .
 0061                   .dbsym l angle 4 D
 0061                   .dbsym l softwareReset 2 I
 0061                   .dbsym l tempValue 0 I
 0061                   .dbend
 0061                   .dbfunc e pingModule _pingModule fI
 0061           ;       response -> X+0
 0061           ;      module_id -> X-5
 0061           _pingModule::
 0061                   .dbline -1
 0061 10                push X
 0062 4F                mov X,SP
 0063 3802              add SP,2
 0065                   .dbline 127
 0065           ; }
 0065           ; 
 0065           ; int pingModule(int module_id)
 0065           ; {
 0065                   .dbline 128
 0065           ;       int response = 0;
 0065 560100            mov [X+1],0
 0068 560000            mov [X+0],0
 006B                   .dbline 130
 006B           ;       
 006B           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 006B 5000              mov A,0
 006D 08                push A
 006E 08                push A
 006F 7C0BB2            xcall _configToggle
 0072 38FE              add SP,-2
 0074                   .dbline 133
 0074           ;                       
 0074           ;       // Transmit a hello.
 0074           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0074 10                push X
 0075 50FC              mov A,-4
 0077 7C0000            xcall _TRANSMIT_PutChar
 007A 20                pop X
 007B                   .dbline 134
 007B           ;       TRANSMIT_PutChar(START_TRANSMIT);
 007B 10                push X
 007C 50FC              mov A,-4
 007E 7C0000            xcall _TRANSMIT_PutChar
 0081 20                pop X
 0082                   .dbline 135
 0082           ;       TRANSMIT_PutChar(MASTER_ID);
 0082 10                push X
 0083 5000              mov A,0
 0085 7C0000            xcall _TRANSMIT_PutChar
 0088 20                pop X
 0089                   .dbline 136
 0089           ;       TRANSMIT_PutChar(module_id);
 0089 62D000            mov REG[0xd0],>__r0
 008C 52FC              mov A,[X-4]
 008E 10                push X
 008F 7C0000            xcall _TRANSMIT_PutChar
 0092 20                pop X
 0093                   .dbline 137
 0093           ;       TRANSMIT_PutChar(PING);
 0093 10                push X
 0094 50CB              mov A,-53
 0096 7C0000            xcall _TRANSMIT_PutChar
 0099 20                pop X
 009A                   .dbline 138
 009A           ;       TRANSMIT_PutChar(END_TRANSMIT);
 009A 10                push X
 009B 50FD              mov A,-3
 009D 7C0000            xcall _TRANSMIT_PutChar
 00A0 20                pop X
 00A1                   .dbline 139
 00A1           ;       TRANSMIT_PutChar(END_TRANSMIT);
 00A1 10                push X
 00A2 50FD              mov A,-3
 00A4 7C0000            xcall _TRANSMIT_PutChar
 00A7 20                pop X
 00A8           L11:
 00A8                   .dbline 142
 00A8           ;       
 00A8           ;       // Wait for the transmission to finish.
 00A8           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 00A8           L12:
 00A8                   .dbline 142
 00A8 10                push X
 00A9 7C0000            xcall _TRANSMIT_bReadTxStatus
 00AC 62D000            mov REG[0xd0],>__r0
 00AF 20                pop X
 00B0 5300              mov [__r0],A
 00B2 470020            tst [__r0],32
 00B5 AFF2              jz L11
 00B7                   .dbline 144
 00B7           ;       
 00B7           ;       xmitWait();
 00B7 7C0E0C            xcall _xmitWait
 00BA                   .dbline 146
 00BA           ;       
 00BA           ;       configToggle(RX_MODE);  // Listen for the response.
 00BA 5000              mov A,0
 00BC 08                push A
 00BD 5001              mov A,1
 00BF 08                push A
 00C0 7C0BB2            xcall _configToggle
 00C3 38FE              add SP,-2
 00C5                   .dbline 148
 00C5           ;       
 00C5           ;       RX_TIMEOUT_Stop();
 00C5 10                push X
 00C6 7C0000            xcall _RX_TIMEOUT_Stop
 00C9 20                pop X
 00CA                   .dbline 149
 00CA           ;       TIMEOUT = 0;
 00CA 62D000            mov REG[0xd0],>_TIMEOUT
 00CD 550100            mov [_TIMEOUT+1],0
 00D0 550000            mov [_TIMEOUT],0
 00D3                   .dbline 150
 00D3           ;       RX_TIMEOUT_Start();
 00D3 10                push X
 00D4 7C0000            xcall _RX_TIMEOUT_Start
 00D7 20                pop X
 00D8 8048              xjmp L15
 00DA           L14:
 00DA                   .dbline 153
 00DA           ;       
 00DA           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 00DA           ;       {
 00DA                   .dbline 154
 00DA           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 00DA 10                push X
 00DB 7C0000            xcall _RECEIVE_cReadChar
 00DE 62D000            mov REG[0xd0],>__r0
 00E1 20                pop X
 00E2 39FC              cmp A,-4
 00E4 B03C              jnz L17
 00E6                   .dbline 155
 00E6           ;               {       
 00E6                   .dbline 156
 00E6           ;                       if(validTransmission())
 00E6 9300              xcall _validTransmission
 00E8 62D000            mov REG[0xd0],>__r0
 00EB 3C0000            cmp [__r0],0
 00EE B006              jnz X2
 00F0 3C0000            cmp [__r1],0
 00F3 A02D              jz L19
 00F5           X2:
 00F5                   .dbline 157
 00F5           ;                       {
 00F5                   .dbline 158
 00F5           ;                               if(COMMAND_TYPE == PING)        // This is the response we are looking for.
 00F5 62D000            mov REG[0xd0],>_COMMAND_TYPE
 00F8 3C00CB            cmp [_COMMAND_TYPE],-53
 00FB B025              jnz L21
 00FD                   .dbline 159
 00FD           ;                               {
 00FD                   .dbline 161
 00FD           ;                                       // If this is for me, check who it was from.
 00FD           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 00FD 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0100 3C0000            cmp [_COMMAND_DESTINATION],0
 0103 B01D              jnz L23
 0105                   .dbline 162
 0105           ;                                       {
 0105                   .dbline 163
 0105           ;                                               if(COMMAND_SOURCE == module_id)
 0105 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 0108 5100              mov A,[_COMMAND_SOURCE]
 010A 62D000            mov REG[0xd0],>__r0
 010D 5300              mov [__r1],A
 010F 5000              mov A,0
 0111 3BFB              cmp A,[X-5]
 0113 B00D              jnz L25
 0115 5100              mov A,[__r1]
 0117 3BFC              cmp A,[X-4]
 0119 B007              jnz L25
 011B           X3:
 011B                   .dbline 164
 011B           ;                                               {
 011B                   .dbline 165
 011B           ;                                                       response = 1;
 011B 560101            mov [X+1],1
 011E 560000            mov [X+0],0
 0121                   .dbline 166
 0121           ;                                               }
 0121           L25:
 0121                   .dbline 167
 0121           ;                                       }
 0121           L23:
 0121                   .dbline 168
 0121           ;                               }
 0121           L21:
 0121                   .dbline 169
 0121           ;                       }
 0121           L19:
 0121                   .dbline 170
 0121           ;               }
 0121           L17:
 0121                   .dbline 171
 0121           ;       }
 0121           L15:
 0121                   .dbline 152
 0121 62D000            mov REG[0xd0],>_TIMEOUT
 0124 5101              mov A,[_TIMEOUT+1]
 0126 1105              sub A,5
 0128 5100              mov A,[_TIMEOUT]
 012A 3180              xor A,-128
 012C 1980              sbb A,(0 ^ 0x80)
 012E D00B              jnc L27
 0130           X4:
 0130 3D0000            cmp [X+0],0
 0133 B006              jnz X5
 0135 3D0100            cmp [X+1],0
 0138 AFA1              jz L14
 013A           X5:
 013A           L27:
 013A                   .dbline 173
 013A           ;       
 013A           ;       RX_TIMEOUT_Stop();
 013A 10                push X
 013B 7C0000            xcall _RX_TIMEOUT_Stop
 013E 20                pop X
 013F                   .dbline 174
 013F           ;       TIMEOUT = 0;
 013F 62D000            mov REG[0xd0],>_TIMEOUT
 0142 550100            mov [_TIMEOUT+1],0
 0145 550000            mov [_TIMEOUT],0
 0148                   .dbline 175
 0148           ;       RX_TIMEOUT_Start();
 0148 10                push X
 0149 7C0000            xcall _RX_TIMEOUT_Start
 014C 20                pop X
 014D                   .dbline 177
 014D           ;       
 014D           ;       return response;
 014D 62D000            mov REG[0xd0],>__r0
 0150 5201              mov A,[X+1]
 0152 5300              mov [__r1],A
 0154 5200              mov A,[X+0]
 0156 5300              mov [__r0],A
 0158                   .dbline -2
 0158           L10:
 0158 38FE              add SP,-2
 015A 20                pop X
 015B                   .dbline 0 ; func end
 015B 7F                ret
 015C                   .dbsym l response 0 I
 015C                   .dbsym l module_id -5 I
 015C                   .dbend
 015C                   .dbfunc e assignID _assignID fI
 015C           ;        success -> X+0
 015C           ;    assigned_ID -> X-5
 015C           _assignID::
 015C                   .dbline -1
 015C 10                push X
 015D 4F                mov X,SP
 015E 3802              add SP,2
 0160                   .dbline 181
 0160           ; }
 0160           ; 
 0160           ; int assignID(int assigned_ID)
 0160           ; {
 0160                   .dbline 182
 0160           ;       int success = 0;                // Stores 0 on fail, 1 on success.
 0160 560100            mov [X+1],0
 0163 560000            mov [X+0],0
 0166                   .dbline 184
 0166           ;       
 0166           ;       configToggle(TX_MODE);  // Switch to TX mode.
 0166 5000              mov A,0
 0168 08                push A
 0169 08                push A
 016A 7C0BB2            xcall _configToggle
 016D 38FE              add SP,-2
 016F                   .dbline 187
 016F           ; 
 016F           ;       // Transmit the assignment.
 016F           ;       TRANSMIT_PutChar(START_TRANSMIT);
 016F 10                push X
 0170 50FC              mov A,-4
 0172 7C0000            xcall _TRANSMIT_PutChar
 0175 20                pop X
 0176                   .dbline 188
 0176           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0176 10                push X
 0177 50FC              mov A,-4
 0179 7C0000            xcall _TRANSMIT_PutChar
 017C 20                pop X
 017D                   .dbline 189
 017D           ;       TRANSMIT_PutChar(MASTER_ID);
 017D 10                push X
 017E 5000              mov A,0
 0180 7C0000            xcall _TRANSMIT_PutChar
 0183 20                pop X
 0184                   .dbline 190
 0184           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 0184 10                push X
 0185 50FB              mov A,-5
 0187 7C0000            xcall _TRANSMIT_PutChar
 018A 20                pop X
 018B                   .dbline 191
 018B           ;       TRANSMIT_PutChar(ID_ASSIGNMENT);
 018B 10                push X
 018C 50C9              mov A,-55
 018E 7C0000            xcall _TRANSMIT_PutChar
 0191 20                pop X
 0192                   .dbline 192
 0192           ;       TRANSMIT_PutChar(assigned_ID);
 0192 62D000            mov REG[0xd0],>__r0
 0195 52FC              mov A,[X-4]
 0197 10                push X
 0198 7C0000            xcall _TRANSMIT_PutChar
 019B 20                pop X
 019C                   .dbline 193
 019C           ;       TRANSMIT_PutChar(END_TRANSMIT);
 019C 10                push X
 019D 50FD              mov A,-3
 019F 7C0000            xcall _TRANSMIT_PutChar
 01A2 20                pop X
 01A3                   .dbline 194
 01A3           ;       TRANSMIT_PutChar(END_TRANSMIT);
 01A3 10                push X
 01A4 50FD              mov A,-3
 01A6 7C0000            xcall _TRANSMIT_PutChar
 01A9 20                pop X
 01AA           L29:
 01AA                   .dbline 197
 01AA           ;       
 01AA           ;       // Wait for the transmission to finish.
 01AA           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 01AA           L30:
 01AA                   .dbline 197
 01AA 10                push X
 01AB 7C0000            xcall _TRANSMIT_bReadTxStatus
 01AE 62D000            mov REG[0xd0],>__r0
 01B1 20                pop X
 01B2 5300              mov [__r0],A
 01B4 470020            tst [__r0],32
 01B7 AFF2              jz L29
 01B9                   .dbline 199
 01B9           ;       
 01B9           ;       xmitWait();
 01B9 7C0E0C            xcall _xmitWait
 01BC                   .dbline 201
 01BC           ;       
 01BC           ;       configToggle(RX_MODE);  // Switch back to receive mode.
 01BC 5000              mov A,0
 01BE 08                push A
 01BF 5001              mov A,1
 01C1 08                push A
 01C2 7C0BB2            xcall _configToggle
 01C5 38FE              add SP,-2
 01C7                   .dbline 203
 01C7           ;       
 01C7           ;       RX_TIMEOUT_Stop();
 01C7 10                push X
 01C8 7C0000            xcall _RX_TIMEOUT_Stop
 01CB 20                pop X
 01CC                   .dbline 204
 01CC           ;       TIMEOUT = 0;
 01CC 62D000            mov REG[0xd0],>_TIMEOUT
 01CF 550100            mov [_TIMEOUT+1],0
 01D2 550000            mov [_TIMEOUT],0
 01D5                   .dbline 205
 01D5           ;       RX_TIMEOUT_Start();
 01D5 10                push X
 01D6 7C0000            xcall _RX_TIMEOUT_Start
 01D9 20                pop X
 01DA 8048              xjmp L33
 01DC           L32:
 01DC                   .dbline 208
 01DC           ;       
 01DC           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
 01DC           ;       {
 01DC                   .dbline 209
 01DC           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 01DC 10                push X
 01DD 7C0000            xcall _RECEIVE_cReadChar
 01E0 62D000            mov REG[0xd0],>__r0
 01E3 20                pop X
 01E4 39FC              cmp A,-4
 01E6 B03C              jnz L35
 01E8                   .dbline 210
 01E8           ;               {       
 01E8                   .dbline 211
 01E8           ;                       if(validTransmission())
 01E8 91FE              xcall _validTransmission
 01EA 62D000            mov REG[0xd0],>__r0
 01ED 3C0000            cmp [__r0],0
 01F0 B006              jnz X6
 01F2 3C0000            cmp [__r1],0
 01F5 A02D              jz L37
 01F7           X6:
 01F7                   .dbline 212
 01F7           ;                       {
 01F7                   .dbline 213
 01F7           ;                               if(COMMAND_TYPE == ID_ASSIGN_OK)        // This is the response we are looking for.
 01F7 62D000            mov REG[0xd0],>_COMMAND_TYPE
 01FA 3C00CA            cmp [_COMMAND_TYPE],-54
 01FD B025              jnz L39
 01FF                   .dbline 214
 01FF           ;                               {
 01FF                   .dbline 216
 01FF           ;                                       // If this is for me, check who it was from.
 01FF           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 01FF 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0202 3C0000            cmp [_COMMAND_DESTINATION],0
 0205 B01D              jnz L41
 0207                   .dbline 217
 0207           ;                                       {
 0207                   .dbline 218
 0207           ;                                               if(COMMAND_SOURCE == assigned_ID)
 0207 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 020A 5100              mov A,[_COMMAND_SOURCE]
 020C 62D000            mov REG[0xd0],>__r0
 020F 5300              mov [__r1],A
 0211 5000              mov A,0
 0213 3BFB              cmp A,[X-5]
 0215 B00D              jnz L43
 0217 5100              mov A,[__r1]
 0219 3BFC              cmp A,[X-4]
 021B B007              jnz L43
 021D           X7:
 021D                   .dbline 219
 021D           ;                                               {
 021D                   .dbline 220
 021D           ;                                                       success = 1;
 021D 560101            mov [X+1],1
 0220 560000            mov [X+0],0
 0223                   .dbline 221
 0223           ;                                               }
 0223           L43:
 0223                   .dbline 222
 0223           ;                                       }
 0223           L41:
 0223                   .dbline 223
 0223           ;                               }
 0223           L39:
 0223                   .dbline 224
 0223           ;                       }
 0223           L37:
 0223                   .dbline 225
 0223           ;               }
 0223           L35:
 0223                   .dbline 226
 0223           ;       }
 0223           L33:
 0223                   .dbline 207
 0223 62D000            mov REG[0xd0],>_TIMEOUT
 0226 5101              mov A,[_TIMEOUT+1]
 0228 1105              sub A,5
 022A 5100              mov A,[_TIMEOUT]
 022C 3180              xor A,-128
 022E 1980              sbb A,(0 ^ 0x80)
 0230 D00B              jnc L45
 0232           X8:
 0232 3D0000            cmp [X+0],0
 0235 B006              jnz X9
 0237 3D0100            cmp [X+1],0
 023A AFA1              jz L32
 023C           X9:
 023C           L45:
 023C                   .dbline 228
 023C           ;       
 023C           ;       LCD_1_Start();
 023C 10                push X
 023D 7C0000            xcall _LCD_1_Start
 0240 20                pop X
 0241                   .dbline 229
 0241           ;       LCD_1_Position(0,0);
 0241 10                push X
 0242 5000              mov A,0
 0244 5C                mov X,A
 0245 7C0000            xcall _LCD_1_Position
 0248 20                pop X
 0249                   .dbline 230
 0249           ;       LCD_1_PrHexInt(NUM_MODULES);
 0249 10                push X
 024A 62D000            mov REG[0xd0],>_NUM_MODULES
 024D 5100              mov A,[_NUM_MODULES]
 024F 08                push A
 0250 5101              mov A,[_NUM_MODULES+1]
 0252 20                pop X
 0253 7C0000            xcall _LCD_1_PrHexInt
 0256 20                pop X
 0257                   .dbline 231
 0257           ;       LCD_1_Position(0,5);
 0257 10                push X
 0258 5705              mov X,5
 025A 5000              mov A,0
 025C 7C0000            xcall _LCD_1_Position
 025F 20                pop X
 0260                   .dbline 232
 0260           ;       LCD_1_PrCString("Modules!");
 0260 10                push X
 0261 5000              mov A,>L46
 0263 08                push A
 0264 5000              mov A,<L46
 0266 5C                mov X,A
 0267 18                pop A
 0268 7C0000            xcall _LCD_1_PrCString
 026B                   .dbline 234
 026B           ;       
 026B           ;       RX_TIMEOUT_Stop();
 026B 7C0000            xcall _RX_TIMEOUT_Stop
 026E 20                pop X
 026F                   .dbline 235
 026F           ;       TIMEOUT = 0;
 026F 62D000            mov REG[0xd0],>_TIMEOUT
 0272 550100            mov [_TIMEOUT+1],0
 0275 550000            mov [_TIMEOUT],0
 0278                   .dbline 236
 0278           ;       RX_TIMEOUT_Start();
 0278 10                push X
 0279 7C0000            xcall _RX_TIMEOUT_Start
 027C 20                pop X
 027D                   .dbline 238
 027D           ;       
 027D           ;       return success;
 027D 62D000            mov REG[0xd0],>__r0
 0280 5201              mov A,[X+1]
 0282 5300              mov [__r1],A
 0284 5200              mov A,[X+0]
 0286 5300              mov [__r0],A
 0288                   .dbline -2
 0288           L28:
 0288 38FE              add SP,-2
 028A 20                pop X
 028B                   .dbline 0 ; func end
 028B 7F                ret
 028C                   .dbsym l success 0 I
 028C                   .dbsym l assigned_ID -5 I
 028C                   .dbend
 028C                   .dbfunc e clearConfig _clearConfig fI
 028C           ;       response -> X+0
 028C           ;      module_id -> X-5
 028C           _clearConfig::
 028C                   .dbline -1
 028C 10                push X
 028D 4F                mov X,SP
 028E 3802              add SP,2
 0290                   .dbline 242
 0290           ; }
 0290           ; 
 0290           ; int clearConfig(int module_id)
 0290           ; {
 0290                   .dbline 243
 0290           ;       int response = 0;
 0290 560100            mov [X+1],0
 0293 560000            mov [X+0],0
 0296                   .dbline 245
 0296           ;       
 0296           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 0296 5000              mov A,0
 0298 08                push A
 0299 08                push A
 029A 7C0BB2            xcall _configToggle
 029D 38FE              add SP,-2
 029F                   .dbline 248
 029F           ;                       
 029F           ;       // Transmit a hello.
 029F           ;       TRANSMIT_PutChar(START_TRANSMIT);
 029F 10                push X
 02A0 50FC              mov A,-4
 02A2 7C0000            xcall _TRANSMIT_PutChar
 02A5 20                pop X
 02A6                   .dbline 249
 02A6           ;       TRANSMIT_PutChar(START_TRANSMIT);
 02A6 10                push X
 02A7 50FC              mov A,-4
 02A9 7C0000            xcall _TRANSMIT_PutChar
 02AC 20                pop X
 02AD                   .dbline 250
 02AD           ;       TRANSMIT_PutChar(MASTER_ID);
 02AD 10                push X
 02AE 5000              mov A,0
 02B0 7C0000            xcall _TRANSMIT_PutChar
 02B3 20                pop X
 02B4                   .dbline 251
 02B4           ;       TRANSMIT_PutChar(module_id);
 02B4 62D000            mov REG[0xd0],>__r0
 02B7 52FC              mov A,[X-4]
 02B9 10                push X
 02BA 7C0000            xcall _TRANSMIT_PutChar
 02BD 20                pop X
 02BE                   .dbline 252
 02BE           ;       TRANSMIT_PutChar(CLEAR_CONFIG);
 02BE 10                push X
 02BF 50CC              mov A,-52
 02C1 7C0000            xcall _TRANSMIT_PutChar
 02C4 20                pop X
 02C5                   .dbline 253
 02C5           ;       TRANSMIT_PutChar(END_TRANSMIT);
 02C5 10                push X
 02C6 50FD              mov A,-3
 02C8 7C0000            xcall _TRANSMIT_PutChar
 02CB 20                pop X
 02CC                   .dbline 254
 02CC           ;       TRANSMIT_PutChar(END_TRANSMIT);
 02CC 10                push X
 02CD 50FD              mov A,-3
 02CF 7C0000            xcall _TRANSMIT_PutChar
 02D2 20                pop X
 02D3           L48:
 02D3                   .dbline 257
 02D3           ;       
 02D3           ;       // Wait for the transmission to finish.
 02D3           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 02D3           L49:
 02D3                   .dbline 257
 02D3 10                push X
 02D4 7C0000            xcall _TRANSMIT_bReadTxStatus
 02D7 62D000            mov REG[0xd0],>__r0
 02DA 20                pop X
 02DB 5300              mov [__r0],A
 02DD 470020            tst [__r0],32
 02E0 AFF2              jz L48
 02E2                   .dbline 259
 02E2           ;       
 02E2           ;       xmitWait();
 02E2 7C0E0C            xcall _xmitWait
 02E5                   .dbline 261
 02E5           ;       
 02E5           ;       configToggle(RX_MODE);  // Listen for the response.
 02E5 5000              mov A,0
 02E7 08                push A
 02E8 5001              mov A,1
 02EA 08                push A
 02EB 7C0BB2            xcall _configToggle
 02EE 38FE              add SP,-2
 02F0                   .dbline 263
 02F0           ;       
 02F0           ;       if(module_id != BROADCAST)
 02F0 3DFB00            cmp [X-5],0
 02F3 B006              jnz X10
 02F5 3DFCFE            cmp [X-4],-2
 02F8 A089              jz L51
 02FA           X10:
 02FA                   .dbline 264
 02FA           ;       {
 02FA                   .dbline 265
 02FA           ;               RX_TIMEOUT_Stop();
 02FA 10                push X
 02FB 7C0000            xcall _RX_TIMEOUT_Stop
 02FE 20                pop X
 02FF                   .dbline 266
 02FF           ;               TIMEOUT = 0;
 02FF 62D000            mov REG[0xd0],>_TIMEOUT
 0302 550100            mov [_TIMEOUT+1],0
 0305 550000            mov [_TIMEOUT],0
 0308                   .dbline 267
 0308           ;               RX_TIMEOUT_Start();
 0308 10                push X
 0309 7C0000            xcall _RX_TIMEOUT_Start
 030C 20                pop X
 030D 8048              xjmp L54
 030F           L53:
 030F                   .dbline 270
 030F           ;               
 030F           ;               while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 030F           ;               {
 030F                   .dbline 271
 030F           ;                       if(RECEIVE_cReadChar() == START_TRANSMIT)
 030F 10                push X
 0310 7C0000            xcall _RECEIVE_cReadChar
 0313 62D000            mov REG[0xd0],>__r0
 0316 20                pop X
 0317 39FC              cmp A,-4
 0319 B03C              jnz L56
 031B                   .dbline 272
 031B           ;                       {       
 031B                   .dbline 273
 031B           ;                               if(validTransmission())
 031B 90CB              xcall _validTransmission
 031D 62D000            mov REG[0xd0],>__r0
 0320 3C0000            cmp [__r0],0
 0323 B006              jnz X11
 0325 3C0000            cmp [__r1],0
 0328 A02D              jz L58
 032A           X11:
 032A                   .dbline 274
 032A           ;                               {
 032A                   .dbline 275
 032A           ;                                       if(COMMAND_TYPE == CONFIG_CLEARED)      // This is the response we are looking for.
 032A 62D000            mov REG[0xd0],>_COMMAND_TYPE
 032D 3C00CD            cmp [_COMMAND_TYPE],-51
 0330 B025              jnz L60
 0332                   .dbline 276
 0332           ;                                       {
 0332                   .dbline 278
 0332           ;                                               // If this is for me, check who it was from.
 0332           ;                                               if(COMMAND_DESTINATION == MASTER_ID)
 0332 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0335 3C0000            cmp [_COMMAND_DESTINATION],0
 0338 B01D              jnz L62
 033A                   .dbline 279
 033A           ;                                               {
 033A                   .dbline 280
 033A           ;                                                       if(COMMAND_SOURCE == module_id)
 033A 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 033D 5100              mov A,[_COMMAND_SOURCE]
 033F 62D000            mov REG[0xd0],>__r0
 0342 5300              mov [__r1],A
 0344 5000              mov A,0
 0346 3BFB              cmp A,[X-5]
 0348 B00D              jnz L64
 034A 5100              mov A,[__r1]
 034C 3BFC              cmp A,[X-4]
 034E B007              jnz L64
 0350           X12:
 0350                   .dbline 281
 0350           ;                                                       {
 0350                   .dbline 282
 0350           ;                                                               response = 1;
 0350 560101            mov [X+1],1
 0353 560000            mov [X+0],0
 0356                   .dbline 283
 0356           ;                                                       }
 0356           L64:
 0356                   .dbline 284
 0356           ;                                               }
 0356           L62:
 0356                   .dbline 285
 0356           ;                                       }
 0356           L60:
 0356                   .dbline 286
 0356           ;                               }
 0356           L58:
 0356                   .dbline 287
 0356           ;                       }
 0356           L56:
 0356                   .dbline 288
 0356           ;               }
 0356           L54:
 0356                   .dbline 269
 0356 62D000            mov REG[0xd0],>_TIMEOUT
 0359 5101              mov A,[_TIMEOUT+1]
 035B 1105              sub A,5
 035D 5100              mov A,[_TIMEOUT]
 035F 3180              xor A,-128
 0361 1980              sbb A,(0 ^ 0x80)
 0363 D00B              jnc L66
 0365           X13:
 0365 3D0000            cmp [X+0],0
 0368 B006              jnz X14
 036A 3D0100            cmp [X+1],0
 036D AFA1              jz L53
 036F           X14:
 036F           L66:
 036F                   .dbline 290
 036F           ;               
 036F           ;               RX_TIMEOUT_Stop();
 036F 10                push X
 0370 7C0000            xcall _RX_TIMEOUT_Stop
 0373 20                pop X
 0374                   .dbline 291
 0374           ;               TIMEOUT = 0;
 0374 62D000            mov REG[0xd0],>_TIMEOUT
 0377 550100            mov [_TIMEOUT+1],0
 037A 550000            mov [_TIMEOUT],0
 037D                   .dbline 292
 037D           ;               RX_TIMEOUT_Start();
 037D 10                push X
 037E 7C0000            xcall _RX_TIMEOUT_Start
 0381 20                pop X
 0382                   .dbline 293
 0382           ;       }
 0382           L51:
 0382                   .dbline 295
 0382           ;       
 0382           ;       return response;
 0382 62D000            mov REG[0xd0],>__r0
 0385 5201              mov A,[X+1]
 0387 5300              mov [__r1],A
 0389 5200              mov A,[X+0]
 038B 5300              mov [__r0],A
 038D                   .dbline -2
 038D           L47:
 038D 38FE              add SP,-2
 038F 20                pop X
 0390                   .dbline 0 ; func end
 0390 7F                ret
 0391                   .dbsym l response 0 I
 0391                   .dbsym l module_id -5 I
 0391                   .dbend
 0391                   .dbfunc e sayHello _sayHello fV
 0391           _sayHello::
 0391                   .dbline -1
 0391                   .dbline 300
 0391           ; }
 0391           ; 
 0391           ; // This function transmits a hello message.
 0391           ; void sayHello(void)
 0391           ; {
 0391                   .dbline 301
 0391           ;       configToggle(TX_MODE);                          // Toggle into TX mode.
 0391 5000              mov A,0
 0393 08                push A
 0394 08                push A
 0395 7C0BB2            xcall _configToggle
 0398 38FE              add SP,-2
 039A                   .dbline 304
 039A           ;                       
 039A           ;       // Transmit a hello.
 039A           ;       TRANSMIT_PutChar(START_TRANSMIT);
 039A 10                push X
 039B 50FC              mov A,-4
 039D 7C0000            xcall _TRANSMIT_PutChar
 03A0 20                pop X
 03A1                   .dbline 305
 03A1           ;       TRANSMIT_PutChar(START_TRANSMIT);
 03A1 10                push X
 03A2 50FC              mov A,-4
 03A4 7C0000            xcall _TRANSMIT_PutChar
 03A7 20                pop X
 03A8                   .dbline 306
 03A8           ;       TRANSMIT_PutChar(MASTER_ID);
 03A8 10                push X
 03A9 5000              mov A,0
 03AB 7C0000            xcall _TRANSMIT_PutChar
 03AE 20                pop X
 03AF                   .dbline 307
 03AF           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 03AF 10                push X
 03B0 50FB              mov A,-5
 03B2 7C0000            xcall _TRANSMIT_PutChar
 03B5 20                pop X
 03B6                   .dbline 308
 03B6           ;       TRANSMIT_PutChar(HELLO_BYTE);
 03B6 10                push X
 03B7 50C8              mov A,-56
 03B9 7C0000            xcall _TRANSMIT_PutChar
 03BC 20                pop X
 03BD                   .dbline 309
 03BD           ;       TRANSMIT_PutChar(END_TRANSMIT);
 03BD 10                push X
 03BE 50FD              mov A,-3
 03C0 7C0000            xcall _TRANSMIT_PutChar
 03C3 20                pop X
 03C4                   .dbline 310
 03C4           ;       TRANSMIT_PutChar(END_TRANSMIT);
 03C4 10                push X
 03C5 50FD              mov A,-3
 03C7 7C0000            xcall _TRANSMIT_PutChar
 03CA 20                pop X
 03CB           L68:
 03CB                   .dbline 313
 03CB           ;       
 03CB           ;       // Wait for the transmission to finish.
 03CB           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 03CB           L69:
 03CB                   .dbline 313
 03CB 10                push X
 03CC 7C0000            xcall _TRANSMIT_bReadTxStatus
 03CF 62D000            mov REG[0xd0],>__r0
 03D2 20                pop X
 03D3 5300              mov [__r0],A
 03D5 470020            tst [__r0],32
 03D8 AFF2              jz L68
 03DA                   .dbline 315
 03DA           ;       
 03DA           ;       xmitWait();
 03DA 7C0E0C            xcall _xmitWait
 03DD                   .dbline 317
 03DD           ;       
 03DD           ;       configToggle(RX_MODE);                          // Listen for the response.
 03DD 5000              mov A,0
 03DF 08                push A
 03E0 5001              mov A,1
 03E2 08                push A
 03E3 97CD              xcall _configToggle
 03E5 38FE              add SP,-2
 03E7                   .dbline -2
 03E7           L67:
 03E7                   .dbline 0 ; func end
 03E7 7F                ret
 03E8                   .dbend
 03E8                   .dbfunc e validTransmission _validTransmission fI
 03E8           ; valid_transmit -> X+2
 03E8           ;              i -> X+0
 03E8           _validTransmission::
 03E8                   .dbline -1
 03E8 10                push X
 03E9 4F                mov X,SP
 03EA 3804              add SP,4
 03EC                   .dbline 322
 03EC           ; }
 03EC           ; 
 03EC           ; // This function returns whether or not a valid transmission has been received.
 03EC           ; int validTransmission(void)
 03EC           ; {
 03EC                   .dbline 323
 03EC           ;       int valid_transmit = 0;
 03EC 560300            mov [X+3],0
 03EF 560200            mov [X+2],0
 03F2                   .dbline 324
 03F2           ;       int i = 0;
 03F2 560100            mov [X+1],0
 03F5 560000            mov [X+0],0
 03F8                   .dbline 326
 03F8           ;       
 03F8           ;       if(RECEIVE_cGetChar() == START_TRANSMIT)
 03F8 10                push X
 03F9 7C0000            xcall _RECEIVE_cGetChar
 03FC 62D000            mov REG[0xd0],>__r0
 03FF 20                pop X
 0400 39FC              cmp A,-4
 0402 B065              jnz L72
 0404                   .dbline 327
 0404           ;       {
 0404                   .dbline 328
 0404           ;               COMMAND_SOURCE = RECEIVE_cGetChar();
 0404 10                push X
 0405 7C0000            xcall _RECEIVE_cGetChar
 0408 20                pop X
 0409 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 040C 5300              mov [_COMMAND_SOURCE],A
 040E                   .dbline 329
 040E           ;               COMMAND_DESTINATION = RECEIVE_cGetChar();
 040E 10                push X
 040F 7C0000            xcall _RECEIVE_cGetChar
 0412 20                pop X
 0413 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0416 5300              mov [_COMMAND_DESTINATION],A
 0418                   .dbline 330
 0418           ;               COMMAND_TYPE = RECEIVE_cGetChar();
 0418 10                push X
 0419 7C0000            xcall _RECEIVE_cGetChar
 041C 20                pop X
 041D 62D000            mov REG[0xd0],>_COMMAND_TYPE
 0420 5300              mov [_COMMAND_TYPE],A
 0422                   .dbline 331
 0422           ;               PARAM[0] = RECEIVE_cGetChar();
 0422 10                push X
 0423 7C0000            xcall _RECEIVE_cGetChar
 0426 20                pop X
 0427 62D000            mov REG[0xd0],>_PARAM
 042A 5300              mov [_PARAM],A
 042C 8020              xjmp L75
 042E           L74:
 042E                   .dbline 334
 042E           ;               
 042E           ;               while(PARAM[i] != END_TRANSMIT)
 042E           ;               {
 042E                   .dbline 335
 042E           ;                       i++;
 042E 7701              inc [X+1]
 0430 0F0000            adc [X+0],0
 0433                   .dbline 336
 0433           ;                       PARAM[i] = RECEIVE_cGetChar();
 0433 10                push X
 0434 7C0000            xcall _RECEIVE_cGetChar
 0437 62D000            mov REG[0xd0],>__r0
 043A 20                pop X
 043B 5300              mov [__r0],A
 043D 5201              mov A,[X+1]
 043F 0100              add A,<_PARAM
 0441 5300              mov [__r3],A
 0443 5200              mov A,[X+0]
 0445 0900              adc A,>_PARAM
 0447 60D5              mov REG[0xd5],A
 0449 5100              mov A,[__r0]
 044B 3F00              mvi [__r3],A
 044D                   .dbline 337
 044D           ;               }
 044D           L75:
 044D                   .dbline 333
 044D 62D000            mov REG[0xd0],>__r0
 0450 5201              mov A,[X+1]
 0452 0100              add A,<_PARAM
 0454 5300              mov [__r1],A
 0456 5200              mov A,[X+0]
 0458 0900              adc A,>_PARAM
 045A 60D4              mov REG[0xd4],A
 045C 3E00              mvi A,[__r1]
 045E 39FD              cmp A,-3
 0460 BFCD              jnz L74
 0462                   .dbline 339
 0462           ;               
 0462           ;               valid_transmit = 1;
 0462 560301            mov [X+3],1
 0465 560200            mov [X+2],0
 0468                   .dbline 340
 0468           ;       }
 0468           L72:
 0468                   .dbline 342
 0468           ;       
 0468           ;       return valid_transmit;
 0468 62D000            mov REG[0xd0],>__r0
 046B 5203              mov A,[X+3]
 046D 5300              mov [__r1],A
 046F 5202              mov A,[X+2]
 0471 5300              mov [__r0],A
 0473                   .dbline -2
 0473           L71:
 0473 38FC              add SP,-4
 0475 20                pop X
 0476                   .dbline 0 ; func end
 0476 7F                ret
 0477                   .dbsym l valid_transmit 2 I
 0477                   .dbsym l i 0 I
 0477                   .dbend
 0477                   .dbfunc e decodeTransmission _decodeTransmission fV
 0477           ;       tempByte -> X+7
 0477           ;          angle -> X+5
 0477           ;             ID -> X+4
 0477           ;          total -> X+2
 0477           ;          param -> X+0
 0477           _decodeTransmission::
 0477                   .dbline -1
 0477 10                push X
 0478 4F                mov X,SP
 0479 3808              add SP,8
 047B                   .dbline 347
 047B           ; }
 047B           ; 
 047B           ; // This function decodes the transmission and takes the correct action.
 047B           ; void decodeTransmission(void)
 047B           ; {
 047B                   .dbline 352
 047B           ;       char* param;
 047B           ;       char ID;
 047B           ;       char tempByte;
 047B           ;       char angle[2];
 047B           ;       int total = 0;
 047B 560300            mov [X+3],0
 047E 560200            mov [X+2],0
 0481                   .dbline 354
 0481           ;       
 0481           ;       if(param = COMP_SERIAL_szGetParam())
 0481 10                push X
 0482 7C0000            xcall _COMP_SERIAL_szGetParam
 0485 62D000            mov REG[0xd0],>__r0
 0488 5300              mov [__r0],A
 048A 5A00              mov [__r1],X
 048C 20                pop X
 048D 5100              mov A,[__r1]
 048F 5401              mov [X+1],A
 0491 5100              mov A,[__r0]
 0493 5400              mov [X+0],A
 0495 3C0000            cmp [__r0],0
 0498 B006              jnz X15
 049A 3C0000            cmp [__r1],0
 049D A5B8              jz L78
 049F           X15:
 049F                   .dbline 355
 049F           ;       {
 049F                   .dbline 356
 049F           ;               if((param[0] == 'n') || (param[0] == 'N'))
 049F 62D000            mov REG[0xd0],>__r0
 04A2 5201              mov A,[X+1]
 04A4 5300              mov [__r1],A
 04A6 5200              mov A,[X+0]
 04A8 60D4              mov REG[0xd4],A
 04AA 3E00              mvi A,[__r1]
 04AC 5300              mov [__r1],A
 04AE 550000            mov [__r0],0
 04B1 3C0000            cmp [__r0],0
 04B4 B005              jnz X16
 04B6 396E              cmp A,110
 04B8 A00E              jz L82
 04BA           X16:
 04BA 62D000            mov REG[0xd0],>__r0
 04BD 3C0000            cmp [__r0],0
 04C0 B03A              jnz L80
 04C2 3C004E            cmp [__r1],78
 04C5 B035              jnz L80
 04C7           X17:
 04C7           L82:
 04C7                   .dbline 357
 04C7           ;               {
 04C7                   .dbline 358
 04C7           ;                       COMP_SERIAL_CmdReset();
 04C7 10                push X
 04C8 7C0000            xcall _COMP_SERIAL_CmdReset
 04CB 20                pop X
 04CC                   .dbline 359
 04CC           ;                       itoa(param,NUM_MODULES,10);
 04CC 5000              mov A,0
 04CE 08                push A
 04CF 500A              mov A,10
 04D1 08                push A
 04D2 62D000            mov REG[0xd0],>_NUM_MODULES
 04D5 5100              mov A,[_NUM_MODULES]
 04D7 08                push A
 04D8 5101              mov A,[_NUM_MODULES+1]
 04DA 08                push A
 04DB 5200              mov A,[X+0]
 04DD 08                push A
 04DE 5201              mov A,[X+1]
 04E0 08                push A
 04E1 7C0000            xcall _itoa
 04E4 38FA              add SP,-6
 04E6                   .dbline 360
 04E6           ;                       COMP_SERIAL_PutString(param);
 04E6 10                push X
 04E7 5200              mov A,[X+0]
 04E9 08                push A
 04EA 5201              mov A,[X+1]
 04EC 5C                mov X,A
 04ED 18                pop A
 04EE 7C0000            xcall _COMP_SERIAL_PutString
 04F1 20                pop X
 04F2                   .dbline 361
 04F2           ;                       COMP_SERIAL_PutChar('\n');
 04F2 10                push X
 04F3 500A              mov A,10
 04F5 7C0000            xcall _COMP_SERIAL_PutChar
 04F8 20                pop X
 04F9                   .dbline 362
 04F9           ;               }
 04F9 855C              xjmp L81
 04FB           L80:
 04FB                   .dbline 363
 04FB           ;               else if((param[0] == 'w') || (param[0] == 'W'))
 04FB 62D000            mov REG[0xd0],>__r0
 04FE 5201              mov A,[X+1]
 0500 5300              mov [__r1],A
 0502 5200              mov A,[X+0]
 0504 60D4              mov REG[0xd4],A
 0506 3E00              mvi A,[__r1]
 0508 5300              mov [__r1],A
 050A 550000            mov [__r0],0
 050D 3C0000            cmp [__r0],0
 0510 B005              jnz X18
 0512 3977              cmp A,119
 0514 A00E              jz L85
 0516           X18:
 0516 62D000            mov REG[0xd0],>__r0
 0519 3C0000            cmp [__r0],0
 051C B16B              jnz L83
 051E 3C0057            cmp [__r1],87
 0521 B166              jnz L83
 0523           X19:
 0523           L85:
 0523                   .dbline 364
 0523           ;               {
 0523                   .dbline 365
 0523           ;                       if(param = COMP_SERIAL_szGetParam())
 0523 10                push X
 0524 7C0000            xcall _COMP_SERIAL_szGetParam
 0527 62D000            mov REG[0xd0],>__r0
 052A 5300              mov [__r0],A
 052C 5A00              mov [__r1],X
 052E 20                pop X
 052F 5100              mov A,[__r1]
 0531 5401              mov [X+1],A
 0533 5100              mov A,[__r0]
 0535 5400              mov [X+0],A
 0537 3C0000            cmp [__r0],0
 053A B006              jnz X20
 053C 3C0000            cmp [__r1],0
 053F A516              jz L84
 0541           X20:
 0541                   .dbline 366
 0541           ;                       {
 0541                   .dbline 367
 0541           ;                               ID = atoi(param);
 0541 5200              mov A,[X+0]
 0543 08                push A
 0544 5201              mov A,[X+1]
 0546 08                push A
 0547 7C0000            xcall _atoi
 054A 38FE              add SP,-2
 054C 62D000            mov REG[0xd0],>__r0
 054F 5100              mov A,[__r1]
 0551 5404              mov [X+4],A
 0553                   .dbline 368
 0553           ;                               if(param = COMP_SERIAL_szGetParam())
 0553 10                push X
 0554 7C0000            xcall _COMP_SERIAL_szGetParam
 0557 62D000            mov REG[0xd0],>__r0
 055A 5300              mov [__r0],A
 055C 5A00              mov [__r1],X
 055E 20                pop X
 055F 5100              mov A,[__r1]
 0561 5401              mov [X+1],A
 0563 5100              mov A,[__r0]
 0565 5400              mov [X+0],A
 0567 3C0000            cmp [__r0],0
 056A B006              jnz X21
 056C 3C0000            cmp [__r1],0
 056F A4E6              jz L84
 0571           X21:
 0571                   .dbline 369
 0571           ;                               {
 0571                   .dbline 370
 0571           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 0571 62D000            mov REG[0xd0],>__r0
 0574 5201              mov A,[X+1]
 0576 5300              mov [__r1],A
 0578 5200              mov A,[X+0]
 057A 60D4              mov REG[0xd4],A
 057C 3E00              mvi A,[__r1]
 057E 5300              mov [__r1],A
 0580 550000            mov [__r0],0
 0583 3C0000            cmp [__r0],0
 0586 B005              jnz X22
 0588 3961              cmp A,97
 058A A00E              jz L92
 058C           X22:
 058C 62D000            mov REG[0xd0],>__r0
 058F 3C0000            cmp [__r0],0
 0592 B089              jnz L90
 0594 3C0041            cmp [__r1],65
 0597 B084              jnz L90
 0599           X23:
 0599           L92:
 0599                   .dbline 371
 0599           ;                                       {
 0599                   .dbline 372
 0599           ;                                               if(param = COMP_SERIAL_szGetParam())
 0599 10                push X
 059A 7C0000            xcall _COMP_SERIAL_szGetParam
 059D 62D000            mov REG[0xd0],>__r0
 05A0 5300              mov [__r0],A
 05A2 5A00              mov [__r1],X
 05A4 20                pop X
 05A5 5100              mov A,[__r1]
 05A7 5401              mov [X+1],A
 05A9 5100              mov A,[__r0]
 05AB 5400              mov [X+0],A
 05AD 3C0000            cmp [__r0],0
 05B0 B006              jnz X24
 05B2 3C0000            cmp [__r1],0
 05B5 A4A0              jz L84
 05B7           X24:
 05B7                   .dbline 373
 05B7           ;                                               {
 05B7                   .dbline 374
 05B7           ;                                                       COMP_SERIAL_CmdReset();
 05B7 10                push X
 05B8 7C0000            xcall _COMP_SERIAL_CmdReset
 05BB 20                pop X
 05BC                   .dbline 375
 05BC           ;                                                       total = atoi(param);
 05BC 5200              mov A,[X+0]
 05BE 08                push A
 05BF 5201              mov A,[X+1]
 05C1 08                push A
 05C2 7C0000            xcall _atoi
 05C5 38FE              add SP,-2
 05C7 62D000            mov REG[0xd0],>__r0
 05CA 5100              mov A,[__r1]
 05CC 5403              mov [X+3],A
 05CE 5100              mov A,[__r0]
 05D0 5402              mov [X+2],A
 05D2                   .dbline 376
 05D2           ;                                                       angle[0] = total%256;
 05D2 5001              mov A,1
 05D4 08                push A
 05D5 5000              mov A,0
 05D7 08                push A
 05D8 5202              mov A,[X+2]
 05DA 08                push A
 05DB 5203              mov A,[X+3]
 05DD 08                push A
 05DE 7C0000            xcall __divmod_16X16_16
 05E1 38FE              add SP,-2
 05E3 18                pop A
 05E4 5300              mov [__r1],A
 05E6 18                pop A
 05E7 5100              mov A,[__r1]
 05E9 5405              mov [X+5],A
 05EB                   .dbline 377
 05EB           ;                                                       angle[1] = total/256;
 05EB 5001              mov A,1
 05ED 08                push A
 05EE 5000              mov A,0
 05F0 08                push A
 05F1 5202              mov A,[X+2]
 05F3 08                push A
 05F4 5203              mov A,[X+3]
 05F6 08                push A
 05F7 7C0000            xcall __divmod_16X16_16
 05FA 18                pop A
 05FB 5300              mov [__r1],A
 05FD 18                pop A
 05FE 38FE              add SP,-2
 0600 5100              mov A,[__r1]
 0602 5406              mov [X+6],A
 0604                   .dbline 378
 0604           ;                                                       longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
 0604 5206              mov A,[X+6]
 0606 08                push A
 0607 5205              mov A,[X+5]
 0609 08                push A
 060A 501E              mov A,30
 060C 08                push A
 060D 5003              mov A,3
 060F 08                push A
 0610 5005              mov A,5
 0612 08                push A
 0613 5204              mov A,[X+4]
 0615 08                push A
 0616 94F8              xcall _longServoInstruction
 0618 38FA              add SP,-6
 061A                   .dbline 379
 061A           ;                                               }
 061A                   .dbline 380
 061A           ;                                       }
 061A 843B              xjmp L84
 061C           L90:
 061C                   .dbline 381
 061C           ;                                       else if((param[0] == 'p') || (param[0] == 'P'))
 061C 62D000            mov REG[0xd0],>__r0
 061F 5201              mov A,[X+1]
 0621 5300              mov [__r1],A
 0623 5200              mov A,[X+0]
 0625 60D4              mov REG[0xd4],A
 0627 3E00              mvi A,[__r1]
 0629 5300              mov [__r1],A
 062B 550000            mov [__r0],0
 062E 3C0000            cmp [__r0],0
 0631 B005              jnz X25
 0633 3970              cmp A,112
 0635 A00E              jz L99
 0637           X25:
 0637 62D000            mov REG[0xd0],>__r0
 063A 3C0000            cmp [__r0],0
 063D B418              jnz L84
 063F 3C0050            cmp [__r1],80
 0642 B413              jnz L84
 0644           X26:
 0644           L99:
 0644                   .dbline 382
 0644           ;                                       {
 0644                   .dbline 383
 0644           ;                                               if(param = COMP_SERIAL_szGetParam())
 0644 10                push X
 0645 7C0000            xcall _COMP_SERIAL_szGetParam
 0648 62D000            mov REG[0xd0],>__r0
 064B 5300              mov [__r0],A
 064D 5A00              mov [__r1],X
 064F 20                pop X
 0650 5100              mov A,[__r1]
 0652 5401              mov [X+1],A
 0654 5100              mov A,[__r0]
 0656 5400              mov [X+0],A
 0658 3C0000            cmp [__r0],0
 065B B006              jnz X27
 065D 3C0000            cmp [__r1],0
 0660 A3F5              jz L84
 0662           X27:
 0662                   .dbline 384
 0662           ;                                               {
 0662                   .dbline 385
 0662           ;                                                       COMP_SERIAL_CmdReset();
 0662 10                push X
 0663 7C0000            xcall _COMP_SERIAL_CmdReset
 0666 20                pop X
 0667                   .dbline 386
 0667           ;                                                       servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
 0667 5200              mov A,[X+0]
 0669 08                push A
 066A 5201              mov A,[X+1]
 066C 08                push A
 066D 7C0000            xcall _atoi
 0670 62D000            mov REG[0xd0],>__r0
 0673 5100              mov A,[__r1]
 0675 08                push A
 0676 5018              mov A,24
 0678 08                push A
 0679 5003              mov A,3
 067B 08                push A
 067C 5004              mov A,4
 067E 08                push A
 067F 5204              mov A,[X+4]
 0681 08                push A
 0682 93F8              xcall _servoInstruction
 0684 38F9              add SP,-7
 0686                   .dbline 387
 0686           ;                                               }
 0686                   .dbline 388
 0686           ;                                       }
 0686                   .dbline 389
 0686           ;                               }
 0686                   .dbline 390
 0686           ;                       }
 0686                   .dbline 391
 0686           ;               }
 0686 83CF              xjmp L84
 0688           L83:
 0688                   .dbline 392
 0688           ;               else if((param[0] == 'r') || (param[0] == 'R'))
 0688 62D000            mov REG[0xd0],>__r0
 068B 5201              mov A,[X+1]
 068D 5300              mov [__r1],A
 068F 5200              mov A,[X+0]
 0691 60D4              mov REG[0xd4],A
 0693 3E00              mvi A,[__r1]
 0695 5300              mov [__r1],A
 0697 550000            mov [__r0],0
 069A 3C0000            cmp [__r0],0
 069D B005              jnz X28
 069F 3972              cmp A,114
 06A1 A00E              jz L104
 06A3           X28:
 06A3 62D000            mov REG[0xd0],>__r0
 06A6 3C0000            cmp [__r0],0
 06A9 B3AC              jnz L102
 06AB 3C0052            cmp [__r1],82
 06AE B3A7              jnz L102
 06B0           X29:
 06B0           L104:
 06B0                   .dbline 393
 06B0           ;               {                       
 06B0                   .dbline 394
 06B0           ;                       if(param = COMP_SERIAL_szGetParam())
 06B0 10                push X
 06B1 7C0000            xcall _COMP_SERIAL_szGetParam
 06B4 62D000            mov REG[0xd0],>__r0
 06B7 5300              mov [__r0],A
 06B9 5A00              mov [__r1],X
 06BB 20                pop X
 06BC 5100              mov A,[__r1]
 06BE 5401              mov [X+1],A
 06C0 5100              mov A,[__r0]
 06C2 5400              mov [X+0],A
 06C4 3C0000            cmp [__r0],0
 06C7 B006              jnz X30
 06C9 3C0000            cmp [__r1],0
 06CC A389              jz L105
 06CE           X30:
 06CE                   .dbline 395
 06CE           ;                       {
 06CE                   .dbline 396
 06CE           ;                               ID = atoi(param);
 06CE 5200              mov A,[X+0]
 06D0 08                push A
 06D1 5201              mov A,[X+1]
 06D3 08                push A
 06D4 7C0000            xcall _atoi
 06D7 38FE              add SP,-2
 06D9 62D000            mov REG[0xd0],>__r0
 06DC 5100              mov A,[__r1]
 06DE 5404              mov [X+4],A
 06E0                   .dbline 397
 06E0           ;                               if(param = COMP_SERIAL_szGetParam())
 06E0 10                push X
 06E1 7C0000            xcall _COMP_SERIAL_szGetParam
 06E4 62D000            mov REG[0xd0],>__r0
 06E7 5300              mov [__r0],A
 06E9 5A00              mov [__r1],X
 06EB 20                pop X
 06EC 5100              mov A,[__r1]
 06EE 5401              mov [X+1],A
 06F0 5100              mov A,[__r0]
 06F2 5400              mov [X+0],A
 06F4 3C0000            cmp [__r0],0
 06F7 B006              jnz X31
 06F9 3C0000            cmp [__r1],0
 06FC A359              jz L107
 06FE           X31:
 06FE                   .dbline 398
 06FE           ;                               {
 06FE                   .dbline 399
 06FE           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 06FE 62D000            mov REG[0xd0],>__r0
 0701 5201              mov A,[X+1]
 0703 5300              mov [__r1],A
 0705 5200              mov A,[X+0]
 0707 60D4              mov REG[0xd4],A
 0709 3E00              mvi A,[__r1]
 070B 5300              mov [__r1],A
 070D 550000            mov [__r0],0
 0710 3C0000            cmp [__r0],0
 0713 B005              jnz X32
 0715 3961              cmp A,97
 0717 A00E              jz L111
 0719           X32:
 0719 62D000            mov REG[0xd0],>__r0
 071C 3C0000            cmp [__r0],0
 071F B0CC              jnz L109
 0721 3C0041            cmp [__r1],65
 0724 B0C7              jnz L109
 0726           X33:
 0726           L111:
 0726                   .dbline 400
 0726           ;                                       {
 0726                   .dbline 401
 0726           ;                                               COMP_SERIAL_CmdReset();
 0726 10                push X
 0727 7C0000            xcall _COMP_SERIAL_CmdReset
 072A 20                pop X
 072B                   .dbline 402
 072B           ;                                               servoInstruction(ID,4,READ_SERVO,36,2);
 072B 5002              mov A,2
 072D 08                push A
 072E 5024              mov A,36
 0730 08                push A
 0731 5002              mov A,2
 0733 08                push A
 0734 5004              mov A,4
 0736 08                push A
 0737 5204              mov A,[X+4]
 0739 08                push A
 073A 9340              xcall _servoInstruction
 073C                   .dbline 403
 073C           ;                                               configToggle(RX_MODE);
 073C 5000              mov A,0
 073E 08                push A
 073F 5001              mov A,1
 0741 08                push A
 0742 946E              xcall _configToggle
 0744 38F9              add SP,-7
 0746 8094              xjmp L113
 0748           L112:
 0748                   .dbline 407
 0748           ;                                                       
 0748           ;                                               // Loop until we read a response or time out.
 0748           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0748           ;                                               {
 0748                   .dbline 408
 0748           ;                                                       if(RECEIVE_cReadChar() == SERVO_START)
 0748 10                push X
 0749 7C0000            xcall _RECEIVE_cReadChar
 074C 62D000            mov REG[0xd0],>__r0
 074F 20                pop X
 0750 39FF              cmp A,-1
 0752 B088              jnz L115
 0754                   .dbline 409
 0754           ;                                                       {
 0754                   .dbline 410
 0754           ;                                                               if(RECEIVE_cGetChar() == SERVO_START)
 0754 10                push X
 0755 7C0000            xcall _RECEIVE_cGetChar
 0758 62D000            mov REG[0xd0],>__r0
 075B 20                pop X
 075C 39FF              cmp A,-1
 075E B07C              jnz L117
 0760                   .dbline 411
 0760           ;                                                               {
 0760                   .dbline 412
 0760           ;                                                                       if(RECEIVE_cGetChar() == ID)
 0760 10                push X
 0761 7C0000            xcall _RECEIVE_cGetChar
 0764 62D000            mov REG[0xd0],>__r0
 0767 20                pop X
 0768 3B04              cmp A,[X+4]
 076A B070              jnz L119
 076C                   .dbline 413
 076C           ;                                                                       {
 076C                   .dbline 414
 076C           ;                                                                               if(RECEIVE_cGetChar() == 4)
 076C 10                push X
 076D 7C0000            xcall _RECEIVE_cGetChar
 0770 62D000            mov REG[0xd0],>__r0
 0773 20                pop X
 0774 3904              cmp A,4
 0776 B064              jnz L121
 0778                   .dbline 415
 0778           ;                                                                               {
 0778                   .dbline 416
 0778           ;                                                                                       if(RECEIVE_cGetChar() == 0)
 0778 10                push X
 0779 7C0000            xcall _RECEIVE_cGetChar
 077C 62D000            mov REG[0xd0],>__r0
 077F 20                pop X
 0780 3900              cmp A,0
 0782 B058              jnz L123
 0784                   .dbline 417
 0784           ;                                                                                       {
 0784                   .dbline 418
 0784           ;                                                                                               angle[0] = RECEIVE_cGetChar();
 0784 10                push X
 0785 7C0000            xcall _RECEIVE_cGetChar
 0788 62D000            mov REG[0xd0],>__r0
 078B 20                pop X
 078C 5405              mov [X+5],A
 078E                   .dbline 419
 078E           ;                                                                                               angle[1] = RECEIVE_cGetChar();
 078E 10                push X
 078F 7C0000            xcall _RECEIVE_cGetChar
 0792 62D000            mov REG[0xd0],>__r0
 0795 20                pop X
 0796 5406              mov [X+6],A
 0798                   .dbline 421
 0798           ;                                                                                               
 0798           ;                                                                                               configToggle(PC_MODE);
 0798 5000              mov A,0
 079A 08                push A
 079B 5002              mov A,2
 079D 08                push A
 079E 9412              xcall _configToggle
 07A0                   .dbline 423
 07A0           ;                                                                                               
 07A0           ;                                                                                               total = ((angle[1])*256) + angle[0];
 07A0 5205              mov A,[X+5]
 07A2 5403              mov [X+3],A
 07A4 5206              mov A,[X+6]
 07A6 5402              mov [X+2],A
 07A8                   .dbline 424
 07A8           ;                                                                                               itoa(param,total,10);
 07A8 5000              mov A,0
 07AA 08                push A
 07AB 500A              mov A,10
 07AD 08                push A
 07AE 5202              mov A,[X+2]
 07B0 08                push A
 07B1 5203              mov A,[X+3]
 07B3 08                push A
 07B4 5200              mov A,[X+0]
 07B6 08                push A
 07B7 5201              mov A,[X+1]
 07B9 08                push A
 07BA 7C0000            xcall _itoa
 07BD 38F8              add SP,-8
 07BF                   .dbline 425
 07BF           ;                                                                                               COMP_SERIAL_PutString(param);
 07BF 10                push X
 07C0 5200              mov A,[X+0]
 07C2 08                push A
 07C3 5201              mov A,[X+1]
 07C5 5C                mov X,A
 07C6 18                pop A
 07C7 7C0000            xcall _COMP_SERIAL_PutString
 07CA 20                pop X
 07CB                   .dbline 426
 07CB           ;                                                                                               COMP_SERIAL_PutChar('\n');
 07CB 10                push X
 07CC 500A              mov A,10
 07CE 7C0000            xcall _COMP_SERIAL_PutChar
 07D1 20                pop X
 07D2                   .dbline 428
 07D2           ; 
 07D2           ;                                                                                               TIMEOUT = RX_TIMEOUT_DURATION;
 07D2 62D000            mov REG[0xd0],>_TIMEOUT
 07D5 550105            mov [_TIMEOUT+1],5
 07D8 550000            mov [_TIMEOUT],0
 07DB                   .dbline 429
 07DB           ;                                                                                       }
 07DB           L123:
 07DB                   .dbline 430
 07DB           ;                                                                               }
 07DB           L121:
 07DB                   .dbline 431
 07DB           ;                                                                       }
 07DB           L119:
 07DB                   .dbline 432
 07DB           ;                                                               }
 07DB           L117:
 07DB                   .dbline 433
 07DB           ;                                                       }
 07DB           L115:
 07DB                   .dbline 434
 07DB           ;                                               }
 07DB           L113:
 07DB                   .dbline 406
 07DB 62D000            mov REG[0xd0],>_TIMEOUT
 07DE 5101              mov A,[_TIMEOUT+1]
 07E0 1105              sub A,5
 07E2 5100              mov A,[_TIMEOUT]
 07E4 3180              xor A,-128
 07E6 1980              sbb A,(0 ^ 0x80)
 07E8 CF5F              jc L112
 07EA           X34:
 07EA                   .dbline 435
 07EA           ;                                       }
 07EA 826B              xjmp L110
 07EC           L109:
 07EC                   .dbline 436
 07EC           ;                                       else if ((param[0] == 'p') || (param[0] == 'P'))
 07EC 62D000            mov REG[0xd0],>__r0
 07EF 5201              mov A,[X+1]
 07F1 5300              mov [__r1],A
 07F3 5200              mov A,[X+0]
 07F5 60D4              mov REG[0xd4],A
 07F7 3E00              mvi A,[__r1]
 07F9 5300              mov [__r1],A
 07FB 550000            mov [__r0],0
 07FE 3C0000            cmp [__r0],0
 0801 B005              jnz X35
 0803 3970              cmp A,112
 0805 A00E              jz L129
 0807           X35:
 0807 62D000            mov REG[0xd0],>__r0
 080A 3C0000            cmp [__r0],0
 080D B0A5              jnz L127
 080F 3C0050            cmp [__r1],80
 0812 B0A0              jnz L127
 0814           X36:
 0814           L129:
 0814                   .dbline 437
 0814           ;                                       {
 0814                   .dbline 438
 0814           ;                                               COMP_SERIAL_CmdReset();
 0814 10                push X
 0815 7C0000            xcall _COMP_SERIAL_CmdReset
 0818 20                pop X
 0819                   .dbline 439
 0819           ;                                               servoInstruction(ID,4,READ_SERVO,24,1);
 0819 5001              mov A,1
 081B 08                push A
 081C 5018              mov A,24
 081E 08                push A
 081F 5002              mov A,2
 0821 08                push A
 0822 5004              mov A,4
 0824 08                push A
 0825 5204              mov A,[X+4]
 0827 08                push A
 0828 9252              xcall _servoInstruction
 082A                   .dbline 440
 082A           ;                                               configToggle(RX_MODE);
 082A 5000              mov A,0
 082C 08                push A
 082D 5001              mov A,1
 082F 08                push A
 0830 9380              xcall _configToggle
 0832 38F9              add SP,-7
 0834 806D              xjmp L131
 0836           L130:
 0836                   .dbline 444
 0836           ;                                                       
 0836           ;                                               // Loop until we read a response or time out.
 0836           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0836           ;                                               {
 0836                   .dbline 445
 0836           ;                                                       if(RECEIVE_cReadChar() == SERVO_START)
 0836 10                push X
 0837 7C0000            xcall _RECEIVE_cReadChar
 083A 62D000            mov REG[0xd0],>__r0
 083D 20                pop X
 083E 39FF              cmp A,-1
 0840 B061              jnz L133
 0842                   .dbline 446
 0842           ;                                                       {
 0842                   .dbline 447
 0842           ;                                                               if(RECEIVE_cGetChar() == SERVO_START)
 0842 10                push X
 0843 7C0000            xcall _RECEIVE_cGetChar
 0846 62D000            mov REG[0xd0],>__r0
 0849 20                pop X
 084A 39FF              cmp A,-1
 084C B055              jnz L135
 084E                   .dbline 448
 084E           ;                                                               {
 084E                   .dbline 449
 084E           ;                                                                       if(RECEIVE_cGetChar() == ID)
 084E 10                push X
 084F 7C0000            xcall _RECEIVE_cGetChar
 0852 62D000            mov REG[0xd0],>__r0
 0855 20                pop X
 0856 3B04              cmp A,[X+4]
 0858 B049              jnz L137
 085A                   .dbline 450
 085A           ;                                                                       {
 085A                   .dbline 451
 085A           ;                                                                               if(RECEIVE_cGetChar() == 3)
 085A 10                push X
 085B 7C0000            xcall _RECEIVE_cGetChar
 085E 62D000            mov REG[0xd0],>__r0
 0861 20                pop X
 0862 3903              cmp A,3
 0864 B03D              jnz L139
 0866                   .dbline 452
 0866           ;                                                                               {
 0866                   .dbline 453
 0866           ;                                                                                       if(RECEIVE_cGetChar() == 0)
 0866 10                push X
 0867 7C0000            xcall _RECEIVE_cGetChar
 086A 62D000            mov REG[0xd0],>__r0
 086D 20                pop X
 086E 3900              cmp A,0
 0870 B031              jnz L141
 0872                   .dbline 454
 0872           ;                                                                                       {
 0872                   .dbline 455
 0872           ;                                                                                               tempByte = RECEIVE_cGetChar();
 0872 10                push X
 0873 7C0000            xcall _RECEIVE_cGetChar
 0876 62D000            mov REG[0xd0],>__r0
 0879 20                pop X
 087A 5407              mov [X+7],A
 087C                   .dbline 457
 087C           ;                                                                                               
 087C           ;                                                                                               configToggle(PC_MODE);
 087C 5000              mov A,0
 087E 08                push A
 087F 5002              mov A,2
 0881 08                push A
 0882 932E              xcall _configToggle
 0884 38FE              add SP,-2
 0886                   .dbline 460
 0886           ;                                                                                               
 0886           ;                                                                                               // Convert tempByte to an ascii value and send.
 0886           ;                                                                                               COMP_SERIAL_PutChar(tempByte + 48);
 0886 62D000            mov REG[0xd0],>__r0
 0889 5207              mov A,[X+7]
 088B 0130              add A,48
 088D 10                push X
 088E 7C0000            xcall _COMP_SERIAL_PutChar
 0891 20                pop X
 0892                   .dbline 461
 0892           ;                                                                                               COMP_SERIAL_PutChar('\n');
 0892 10                push X
 0893 500A              mov A,10
 0895 7C0000            xcall _COMP_SERIAL_PutChar
 0898 20                pop X
 0899                   .dbline 463
 0899           ; 
 0899           ;                                                                                               TIMEOUT = RX_TIMEOUT_DURATION;
 0899 62D000            mov REG[0xd0],>_TIMEOUT
 089C 550105            mov [_TIMEOUT+1],5
 089F 550000            mov [_TIMEOUT],0
 08A2                   .dbline 464
 08A2           ;                                                                                       }
 08A2           L141:
 08A2                   .dbline 465
 08A2           ;                                                                               }
 08A2           L139:
 08A2                   .dbline 466
 08A2           ;                                                                       }
 08A2           L137:
 08A2                   .dbline 467
 08A2           ;                                                               }
 08A2           L135:
 08A2                   .dbline 468
 08A2           ;                                                       }
 08A2           L133:
 08A2                   .dbline 469
 08A2           ;                                               }
 08A2           L131:
 08A2                   .dbline 443
 08A2 62D000            mov REG[0xd0],>_TIMEOUT
 08A5 5101              mov A,[_TIMEOUT+1]
 08A7 1105              sub A,5
 08A9 5100              mov A,[_TIMEOUT]
 08AB 3180              xor A,-128
 08AD 1980              sbb A,(0 ^ 0x80)
 08AF CF86              jc L130
 08B1           X37:
 08B1                   .dbline 470
 08B1           ;                                       }
 08B1 81A4              xjmp L128
 08B3           L127:
 08B3                   .dbline 471
 08B3           ;                                       else if ((param[0] == 'l') || (param[0] == 'L'))
 08B3 62D000            mov REG[0xd0],>__r0
 08B6 5201              mov A,[X+1]
 08B8 5300              mov [__r1],A
 08BA 5200              mov A,[X+0]
 08BC 60D4              mov REG[0xd4],A
 08BE 3E00              mvi A,[__r1]
 08C0 5300              mov [__r1],A
 08C2 550000            mov [__r0],0
 08C5 3C0000            cmp [__r0],0
 08C8 B005              jnz X38
 08CA 396C              cmp A,108
 08CC A00E              jz L145
 08CE           X38:
 08CE 62D000            mov REG[0xd0],>__r0
 08D1 3C0000            cmp [__r0],0
 08D4 B099              jnz L143
 08D6 3C004C            cmp [__r1],76
 08D9 B094              jnz L143
 08DB           X39:
 08DB           L145:
 08DB                   .dbline 472
 08DB           ;                                       {
 08DB                   .dbline 473
 08DB           ;                                               if(pingModule(ID))
 08DB 62D000            mov REG[0xd0],>__r0
 08DE 5204              mov A,[X+4]
 08E0 5300              mov [__r1],A
 08E2 5000              mov A,0
 08E4 08                push A
 08E5 5100              mov A,[__r1]
 08E7 08                push A
 08E8 7C0061            xcall _pingModule
 08EB 38FE              add SP,-2
 08ED 62D000            mov REG[0xd0],>__r0
 08F0 3C0000            cmp [__r0],0
 08F3 B006              jnz X40
 08F5 3C0000            cmp [__r1],0
 08F8 A15D              jz L144
 08FA           X40:
 08FA                   .dbline 474
 08FA           ;                                               {
 08FA                   .dbline 475
 08FA           ;                                                       configToggle(PC_MODE);
 08FA 5000              mov A,0
 08FC 08                push A
 08FD 5002              mov A,2
 08FF 08                push A
 0900 92B0              xcall _configToggle
 0902                   .dbline 477
 0902           ;                                                                                               
 0902           ;                                                       total = ((PARAM[0])*256) + PARAM[1];
 0902 62D000            mov REG[0xd0],>_PARAM
 0905 5101              mov A,[_PARAM+1]
 0907 5403              mov [X+3],A
 0909 5100              mov A,[_PARAM]
 090B 5402              mov [X+2],A
 090D                   .dbline 478
 090D           ;                                                       itoa(param,total,10);
 090D 5000              mov A,0
 090F 08                push A
 0910 500A              mov A,10
 0912 08                push A
 0913 5202              mov A,[X+2]
 0915 08                push A
 0916 5203              mov A,[X+3]
 0918 08                push A
 0919 5200              mov A,[X+0]
 091B 08                push A
 091C 5201              mov A,[X+1]
 091E 08                push A
 091F 7C0000            xcall _itoa
 0922 38F8              add SP,-8
 0924                   .dbline 479
 0924           ;                                                       COMP_SERIAL_PutString(param);
 0924 10                push X
 0925 5200              mov A,[X+0]
 0927 08                push A
 0928 5201              mov A,[X+1]
 092A 5C                mov X,A
 092B 18                pop A
 092C 7C0000            xcall _COMP_SERIAL_PutString
 092F 20                pop X
 0930                   .dbline 480
 0930           ;                                                       COMP_SERIAL_PutChar('\n');
 0930 10                push X
 0931 500A              mov A,10
 0933 7C0000            xcall _COMP_SERIAL_PutChar
 0936 20                pop X
 0937                   .dbline 482
 0937           ;                                                       
 0937           ;                                                       total = ((PARAM[2])*256) + PARAM[3];
 0937 62D000            mov REG[0xd0],>_PARAM
 093A 5103              mov A,[_PARAM+3]
 093C 5403              mov [X+3],A
 093E 5102              mov A,[_PARAM+2]
 0940 5402              mov [X+2],A
 0942                   .dbline 483
 0942           ;                                                       itoa(param,total,10);
 0942 5000              mov A,0
 0944 08                push A
 0945 500A              mov A,10
 0947 08                push A
 0948 5202              mov A,[X+2]
 094A 08                push A
 094B 5203              mov A,[X+3]
 094D 08                push A
 094E 5200              mov A,[X+0]
 0950 08                push A
 0951 5201              mov A,[X+1]
 0953 08                push A
 0954 7C0000            xcall _itoa
 0957 38FA              add SP,-6
 0959                   .dbline 484
 0959           ;                                                       COMP_SERIAL_PutString(param);
 0959 10                push X
 095A 5200              mov A,[X+0]
 095C 08                push A
 095D 5201              mov A,[X+1]
 095F 5C                mov X,A
 0960 18                pop A
 0961 7C0000            xcall _COMP_SERIAL_PutString
 0964 20                pop X
 0965                   .dbline 485
 0965           ;                                                       COMP_SERIAL_PutChar('\n');
 0965 10                push X
 0966 500A              mov A,10
 0968 7C0000            xcall _COMP_SERIAL_PutChar
 096B 20                pop X
 096C                   .dbline 486
 096C           ;                                               }
 096C                   .dbline 487
 096C           ;                                       }
 096C 80E9              xjmp L144
 096E           L143:
 096E                   .dbline 488
 096E           ;                                       else if ((param[0] == 'o') || (param[0] == 'O'))
 096E 62D000            mov REG[0xd0],>__r0
 0971 5201              mov A,[X+1]
 0973 5300              mov [__r1],A
 0975 5200              mov A,[X+0]
 0977 60D4              mov REG[0xd4],A
 0979 3E00              mvi A,[__r1]
 097B 5300              mov [__r1],A
 097D 550000            mov [__r0],0
 0980 3C0000            cmp [__r0],0
 0983 B005              jnz X41
 0985 396F              cmp A,111
 0987 A00E              jz L153
 0989           X41:
 0989 62D000            mov REG[0xd0],>__r0
 098C 3C0000            cmp [__r0],0
 098F B064              jnz L151
 0991 3C004F            cmp [__r1],79
 0994 B05F              jnz L151
 0996           X42:
 0996           L153:
 0996                   .dbline 489
 0996           ;                                       {
 0996                   .dbline 490
 0996           ;                                               if(pingModule(ID))
 0996 62D000            mov REG[0xd0],>__r0
 0999 5204              mov A,[X+4]
 099B 5300              mov [__r1],A
 099D 5000              mov A,0
 099F 08                push A
 09A0 5100              mov A,[__r1]
 09A2 08                push A
 09A3 7C0061            xcall _pingModule
 09A6 38FE              add SP,-2
 09A8 62D000            mov REG[0xd0],>__r0
 09AB 3C0000            cmp [__r0],0
 09AE B006              jnz X43
 09B0 3C0000            cmp [__r1],0
 09B3 A0A2              jz L152
 09B5           X43:
 09B5                   .dbline 491
 09B5           ;                                               {
 09B5                   .dbline 492
 09B5           ;                                                       configToggle(PC_MODE);
 09B5 5000              mov A,0
 09B7 08                push A
 09B8 5002              mov A,2
 09BA 08                push A
 09BB 91F5              xcall _configToggle
 09BD                   .dbline 494
 09BD           ;                                                                                               
 09BD           ;                                                       total = ((PARAM[4])*256) + PARAM[5];
 09BD 62D000            mov REG[0xd0],>_PARAM
 09C0 5105              mov A,[_PARAM+5]
 09C2 5403              mov [X+3],A
 09C4 5104              mov A,[_PARAM+4]
 09C6 5402              mov [X+2],A
 09C8                   .dbline 495
 09C8           ;                                                       itoa(param,total,10);
 09C8 5000              mov A,0
 09CA 08                push A
 09CB 500A              mov A,10
 09CD 08                push A
 09CE 5202              mov A,[X+2]
 09D0 08                push A
 09D1 5203              mov A,[X+3]
 09D3 08                push A
 09D4 5200              mov A,[X+0]
 09D6 08                push A
 09D7 5201              mov A,[X+1]
 09D9 08                push A
 09DA 7C0000            xcall _itoa
 09DD 38F8              add SP,-8
 09DF                   .dbline 496
 09DF           ;                                                       COMP_SERIAL_PutString(param);
 09DF 10                push X
 09E0 5200              mov A,[X+0]
 09E2 08                push A
 09E3 5201              mov A,[X+1]
 09E5 5C                mov X,A
 09E6 18                pop A
 09E7 7C0000            xcall _COMP_SERIAL_PutString
 09EA 20                pop X
 09EB                   .dbline 497
 09EB           ;                                                       COMP_SERIAL_PutChar('\n');
 09EB 10                push X
 09EC 500A              mov A,10
 09EE 7C0000            xcall _COMP_SERIAL_PutChar
 09F1 20                pop X
 09F2                   .dbline 498
 09F2           ;                                               }
 09F2                   .dbline 499
 09F2           ;                                       }
 09F2 8063              xjmp L152
 09F4           L151:
 09F4                   .dbline 500
 09F4           ;                                       else if ((param[0] == 'c') || (param[0] == 'C'))
 09F4 62D000            mov REG[0xd0],>__r0
 09F7 5201              mov A,[X+1]
 09F9 5300              mov [__r1],A
 09FB 5200              mov A,[X+0]
 09FD 60D4              mov REG[0xd4],A
 09FF 3E00              mvi A,[__r1]
 0A01 5300              mov [__r1],A
 0A03 550000            mov [__r0],0
 0A06 3C0000            cmp [__r0],0
 0A09 B005              jnz X44
 0A0B 3963              cmp A,99
 0A0D A00E              jz L160
 0A0F           X44:
 0A0F 62D000            mov REG[0xd0],>__r0
 0A12 3C0000            cmp [__r0],0
 0A15 B040              jnz L158
 0A17 3C0043            cmp [__r1],67
 0A1A B03B              jnz L158
 0A1C           X45:
 0A1C           L160:
 0A1C                   .dbline 501
 0A1C           ;                                       {
 0A1C                   .dbline 502
 0A1C           ;                                               if(pingModule(ID))
 0A1C 62D000            mov REG[0xd0],>__r0
 0A1F 5204              mov A,[X+4]
 0A21 5300              mov [__r1],A
 0A23 5000              mov A,0
 0A25 08                push A
 0A26 5100              mov A,[__r1]
 0A28 08                push A
 0A29 7C0061            xcall _pingModule
 0A2C 38FE              add SP,-2
 0A2E 62D000            mov REG[0xd0],>__r0
 0A31 3C0000            cmp [__r0],0
 0A34 B006              jnz X46
 0A36 3C0000            cmp [__r1],0
 0A39 A01C              jz L161
 0A3B           X46:
 0A3B                   .dbline 503
 0A3B           ;                                               {
 0A3B                   .dbline 504
 0A3B           ;                                                       configToggle(PC_MODE);
 0A3B 5000              mov A,0
 0A3D 08                push A
 0A3E 5002              mov A,2
 0A40 08                push A
 0A41 916F              xcall _configToggle
 0A43 38FE              add SP,-2
 0A45                   .dbline 506
 0A45           ;                                                                                               
 0A45           ;                                                       COMP_SERIAL_PutChar(PARAM[6]);
 0A45 10                push X
 0A46 62D000            mov REG[0xd0],>_PARAM
 0A49 5106              mov A,[_PARAM+6]
 0A4B 7C0000            xcall _COMP_SERIAL_PutChar
 0A4E 20                pop X
 0A4F                   .dbline 507
 0A4F           ;                                                       COMP_SERIAL_PutChar('\n');
 0A4F 10                push X
 0A50 500A              mov A,10
 0A52 7C0000            xcall _COMP_SERIAL_PutChar
 0A55 20                pop X
 0A56                   .dbline 508
 0A56           ;                                               }
 0A56           L161:
 0A56                   .dbline 509
 0A56           ;                                       }
 0A56           L158:
 0A56           L152:
 0A56           L144:
 0A56           L128:
 0A56           L110:
 0A56                   .dbline 510
 0A56           ;                               }
 0A56           L107:
 0A56                   .dbline 511
 0A56           ;                       }
 0A56           L105:
 0A56                   .dbline 512
 0A56           ;               }
 0A56           L102:
 0A56           L84:
 0A56           L81:
 0A56                   .dbline 513
 0A56           ;       }
 0A56           L78:
 0A56                   .dbline 515
 0A56           ;       
 0A56           ;       if(STATE != PC_MODE)
 0A56 62D000            mov REG[0xd0],>_STATE
 0A59 3C0000            cmp [_STATE],0
 0A5C B006              jnz X47
 0A5E 3C0102            cmp [_STATE+1],2
 0A61 A00D              jz L164
 0A63           X47:
 0A63                   .dbline 516
 0A63           ;       {
 0A63                   .dbline 517
 0A63           ;               configToggle(PC_MODE);
 0A63 5000              mov A,0
 0A65 08                push A
 0A66 5002              mov A,2
 0A68 08                push A
 0A69 9147              xcall _configToggle
 0A6B 38FE              add SP,-2
 0A6D                   .dbline 518
 0A6D           ;       }
 0A6D 800A              xjmp L165
 0A6F           L164:
 0A6F                   .dbline 520
 0A6F           ;       else
 0A6F           ;       {
 0A6F                   .dbline 521
 0A6F           ;               TIMEOUT = 0;
 0A6F 62D000            mov REG[0xd0],>_TIMEOUT
 0A72 550100            mov [_TIMEOUT+1],0
 0A75 550000            mov [_TIMEOUT],0
 0A78                   .dbline 522
 0A78           ;       }
 0A78           L165:
 0A78                   .dbline -2
 0A78           L77:
 0A78 38F8              add SP,-8
 0A7A 20                pop X
 0A7B                   .dbline 0 ; func end
 0A7B 7F                ret
 0A7C                   .dbsym l tempByte 7 c
 0A7C                   .dbsym l angle 5 A[2:2]c
 0A7C                   .dbsym l ID 4 c
 0A7C                   .dbsym l total 2 I
 0A7C                   .dbsym l param 0 pc
 0A7C                   .dbend
 0A7C                   .dbfunc e servoInstruction _servoInstruction fV
 0A7C           ;          total -> X+1
 0A7C           ;       checksum -> X+0
 0A7C           ;          value -> X-8
 0A7C           ;        address -> X-7
 0A7C           ;    instruction -> X-6
 0A7C           ;         length -> X-5
 0A7C           ;             id -> X-4
 0A7C           _servoInstruction::
 0A7C                   .dbline -1
 0A7C 10                push X
 0A7D 4F                mov X,SP
 0A7E 3803              add SP,3
 0A80                   .dbline 528
 0A80           ; }
 0A80           ; 
 0A80           ; // This function receives a destination, command length, instruction type, address, and value.
 0A80           ; // With these parameters, the function sends a packet to the communication bus.
 0A80           ; void servoInstruction(char id, char length, char instruction, char address, char value)
 0A80           ; {
 0A80                   .dbline 532
 0A80           ;       char checksum;
 0A80           ;       int total;
 0A80           ;       
 0A80           ;       total = id + length + instruction + address + value;
 0A80 62D000            mov REG[0xd0],>__r0
 0A83 52FB              mov A,[X-5]
 0A85 5300              mov [__r1],A
 0A87 550000            mov [__r0],0
 0A8A 52FC              mov A,[X-4]
 0A8C 0200              add A,[__r1]
 0A8E 5300              mov [__r1],A
 0A90 5000              mov A,0
 0A92 0A00              adc A,[__r0]
 0A94 5300              mov [__r0],A
 0A96 52FA              mov A,[X-6]
 0A98 0400              add [__r1],A
 0A9A 0E0000            adc [__r0],0
 0A9D 52F9              mov A,[X-7]
 0A9F 0400              add [__r1],A
 0AA1 0E0000            adc [__r0],0
 0AA4 52F8              mov A,[X-8]
 0AA6 5300              mov [__r3],A
 0AA8 550000            mov [__r2],0
 0AAB 5100              mov A,[__r1]
 0AAD 0200              add A,[__r3]
 0AAF 5402              mov [X+2],A
 0AB1 5100              mov A,[__r0]
 0AB3 0A00              adc A,[__r2]
 0AB5 5401              mov [X+1],A
 0AB7                   .dbline 535
 0AB7           ;       
 0AB7           ;       // Calculate the checksum value for our servo communication.
 0AB7           ;       checksum = 255-(total%256);
 0AB7 5001              mov A,1
 0AB9 08                push A
 0ABA 5000              mov A,0
 0ABC 08                push A
 0ABD 5201              mov A,[X+1]
 0ABF 08                push A
 0AC0 5202              mov A,[X+2]
 0AC2 08                push A
 0AC3 7C0000            xcall __divmod_16X16_16
 0AC6 38FE              add SP,-2
 0AC8 18                pop A
 0AC9 5300              mov [__r1],A
 0ACB 18                pop A
 0ACC 50FF              mov A,-1
 0ACE 1200              sub A,[__r1]
 0AD0 5400              mov [X+0],A
 0AD2                   .dbline 538
 0AD2           ;       
 0AD2           ;       // Talk to the servo.
 0AD2           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0AD2 10                push X
 0AD3 50FF              mov A,-1
 0AD5 7C0000            xcall _TX_REPEATER_PutChar
 0AD8 20                pop X
 0AD9                   .dbline 539
 0AD9           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0AD9 10                push X
 0ADA 50FF              mov A,-1
 0ADC 7C0000            xcall _TX_REPEATER_PutChar
 0ADF 20                pop X
 0AE0                   .dbline 540
 0AE0           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0AE0 10                push X
 0AE1 52FC              mov A,[X-4]
 0AE3 7C0000            xcall _TX_REPEATER_PutChar
 0AE6 20                pop X
 0AE7                   .dbline 541
 0AE7           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0AE7 10                push X
 0AE8 52FB              mov A,[X-5]
 0AEA 7C0000            xcall _TX_REPEATER_PutChar
 0AED 20                pop X
 0AEE                   .dbline 542
 0AEE           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0AEE 10                push X
 0AEF 52FA              mov A,[X-6]
 0AF1 7C0000            xcall _TX_REPEATER_PutChar
 0AF4 20                pop X
 0AF5                   .dbline 543
 0AF5           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0AF5 10                push X
 0AF6 52F9              mov A,[X-7]
 0AF8 7C0000            xcall _TX_REPEATER_PutChar
 0AFB 20                pop X
 0AFC                   .dbline 544
 0AFC           ;       TX_REPEATER_PutChar(value);                     // The value to write or number of bytes to read.
 0AFC 10                push X
 0AFD 52F8              mov A,[X-8]
 0AFF 7C0000            xcall _TX_REPEATER_PutChar
 0B02 20                pop X
 0B03                   .dbline 545
 0B03           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0B03 10                push X
 0B04 5200              mov A,[X+0]
 0B06 7C0000            xcall _TX_REPEATER_PutChar
 0B09 20                pop X
 0B0A                   .dbline 551
 0B0A           ;       
 0B0A           ;       // Wait for the transmission to finish.
 0B0A           ;       //while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0B0A           ;       
 0B0A           ;       // Make completely sure we're done.
 0B0A           ;       xmitWait();
 0B0A 9300              xcall _xmitWait
 0B0C                   .dbline -2
 0B0C           L166:
 0B0C 38FD              add SP,-3
 0B0E 20                pop X
 0B0F                   .dbline 0 ; func end
 0B0F 7F                ret
 0B10                   .dbsym l total 1 I
 0B10                   .dbsym l checksum 0 c
 0B10                   .dbsym l value -8 c
 0B10                   .dbsym l address -7 c
 0B10                   .dbsym l instruction -6 c
 0B10                   .dbsym l length -5 c
 0B10                   .dbsym l id -4 c
 0B10                   .dbend
 0B10                   .dbfunc e longServoInstruction _longServoInstruction fV
 0B10           ;          total -> X+1
 0B10           ;       checksum -> X+0
 0B10           ;         value2 -> X-9
 0B10           ;         value1 -> X-8
 0B10           ;        address -> X-7
 0B10           ;    instruction -> X-6
 0B10           ;         length -> X-5
 0B10           ;             id -> X-4
 0B10           _longServoInstruction::
 0B10                   .dbline -1
 0B10 10                push X
 0B11 4F                mov X,SP
 0B12 3803              add SP,3
 0B14                   .dbline 556
 0B14           ; }
 0B14           ; 
 0B14           ; // This function receives a destination, command length, instruction type, address, and two values.
 0B14           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
 0B14           ; {
 0B14                   .dbline 560
 0B14           ;       char checksum;
 0B14           ;       int total;
 0B14           ;       
 0B14           ;       total = id + length + instruction + address + value1 + value2;
 0B14 62D000            mov REG[0xd0],>__r0
 0B17 52FB              mov A,[X-5]
 0B19 5300              mov [__r1],A
 0B1B 550000            mov [__r0],0
 0B1E 52FC              mov A,[X-4]
 0B20 0200              add A,[__r1]
 0B22 5300              mov [__r1],A
 0B24 5000              mov A,0
 0B26 0A00              adc A,[__r0]
 0B28 5300              mov [__r0],A
 0B2A 52FA              mov A,[X-6]
 0B2C 0400              add [__r1],A
 0B2E 0E0000            adc [__r0],0
 0B31 52F9              mov A,[X-7]
 0B33 0400              add [__r1],A
 0B35 0E0000            adc [__r0],0
 0B38 52F8              mov A,[X-8]
 0B3A 0400              add [__r1],A
 0B3C 0E0000            adc [__r0],0
 0B3F 52F7              mov A,[X-9]
 0B41 5300              mov [__r3],A
 0B43 550000            mov [__r2],0
 0B46 5100              mov A,[__r1]
 0B48 0200              add A,[__r3]
 0B4A 5402              mov [X+2],A
 0B4C 5100              mov A,[__r0]
 0B4E 0A00              adc A,[__r2]
 0B50 5401              mov [X+1],A
 0B52                   .dbline 563
 0B52           ;       
 0B52           ;       // Calculate the checksum value for our servo communication.
 0B52           ;       checksum = 255-(total%256);
 0B52 5001              mov A,1
 0B54 08                push A
 0B55 5000              mov A,0
 0B57 08                push A
 0B58 5201              mov A,[X+1]
 0B5A 08                push A
 0B5B 5202              mov A,[X+2]
 0B5D 08                push A
 0B5E 7C0000            xcall __divmod_16X16_16
 0B61 38FE              add SP,-2
 0B63 18                pop A
 0B64 5300              mov [__r1],A
 0B66 18                pop A
 0B67 50FF              mov A,-1
 0B69 1200              sub A,[__r1]
 0B6B 5400              mov [X+0],A
 0B6D                   .dbline 566
 0B6D           ;       
 0B6D           ;       // Talk to the servo.
 0B6D           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0B6D 10                push X
 0B6E 50FF              mov A,-1
 0B70 7C0000            xcall _TX_REPEATER_PutChar
 0B73 20                pop X
 0B74                   .dbline 567
 0B74           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0B74 10                push X
 0B75 50FF              mov A,-1
 0B77 7C0000            xcall _TX_REPEATER_PutChar
 0B7A 20                pop X
 0B7B                   .dbline 568
 0B7B           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0B7B 10                push X
 0B7C 52FC              mov A,[X-4]
 0B7E 7C0000            xcall _TX_REPEATER_PutChar
 0B81 20                pop X
 0B82                   .dbline 569
 0B82           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0B82 10                push X
 0B83 52FB              mov A,[X-5]
 0B85 7C0000            xcall _TX_REPEATER_PutChar
 0B88 20                pop X
 0B89                   .dbline 570
 0B89           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0B89 10                push X
 0B8A 52FA              mov A,[X-6]
 0B8C 7C0000            xcall _TX_REPEATER_PutChar
 0B8F 20                pop X
 0B90                   .dbline 571
 0B90           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0B90 10                push X
 0B91 52F9              mov A,[X-7]
 0B93 7C0000            xcall _TX_REPEATER_PutChar
 0B96 20                pop X
 0B97                   .dbline 572
 0B97           ;       TX_REPEATER_PutChar(value1);            // The first value to write.
 0B97 10                push X
 0B98 52F8              mov A,[X-8]
 0B9A 7C0000            xcall _TX_REPEATER_PutChar
 0B9D 20                pop X
 0B9E                   .dbline 573
 0B9E           ;       TX_REPEATER_PutChar(value2);            // The first value to write.
 0B9E 10                push X
 0B9F 52F7              mov A,[X-9]
 0BA1 7C0000            xcall _TX_REPEATER_PutChar
 0BA4 20                pop X
 0BA5                   .dbline 574
 0BA5           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0BA5 10                push X
 0BA6 5200              mov A,[X+0]
 0BA8 7C0000            xcall _TX_REPEATER_PutChar
 0BAB 20                pop X
 0BAC                   .dbline 580
 0BAC           ;       
 0BAC           ;       // Wait for the transmission to finish.
 0BAC           ;       //while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0BAC           ;       
 0BAC           ;       // Make completely sure we're done.
 0BAC           ;       xmitWait();
 0BAC 925E              xcall _xmitWait
 0BAE                   .dbline -2
 0BAE           L167:
 0BAE 38FD              add SP,-3
 0BB0 20                pop X
 0BB1                   .dbline 0 ; func end
 0BB1 7F                ret
 0BB2                   .dbsym l total 1 I
 0BB2                   .dbsym l checksum 0 c
 0BB2                   .dbsym l value2 -9 c
 0BB2                   .dbsym l value1 -8 c
 0BB2                   .dbsym l address -7 c
 0BB2                   .dbsym l instruction -6 c
 0BB2                   .dbsym l length -5 c
 0BB2                   .dbsym l id -4 c
 0BB2                   .dbend
 0BB2                   .dbfunc e configToggle _configToggle fV
 0BB2           ;           mode -> X-5
 0BB2           _configToggle::
 0BB2                   .dbline -1
 0BB2 10                push X
 0BB3 4F                mov X,SP
 0BB4                   .dbline 586
 0BB4           ; }
 0BB4           ; 
 0BB4           ; // This function allows the program to pass an RX or TX mode flag for switching between modes on the
 0BB4           ; // half duplex UART serial communication line.
 0BB4           ; void configToggle(int mode)
 0BB4           ; {
 0BB4                   .dbline 588
 0BB4           ;       // Disconnect from the global bus and leave the pin high.
 0BB4           ;       PRT0DR |= 0b10000000;
 0BB4 430080            or REG[0],-128
 0BB7                   .dbline 589
 0BB7           ;       PRT0GS &= 0b01111111;
 0BB7 41027F            and REG[0x2],127
 0BBA                   .dbline 593
 0BBA           ; 
 0BBA           ;       // Unload the configuration of the current state.
 0BBA           ;       // If there is no state, blindly wipe all configurations.
 0BBA           ;       if(STATE)
 0BBA 62D000            mov REG[0xd0],>_STATE
 0BBD 3C0000            cmp [_STATE],0
 0BC0 B006              jnz X48
 0BC2 3C0100            cmp [_STATE+1],0
 0BC5 A010              jz L169
 0BC7           X48:
 0BC7                   .dbline 594
 0BC7           ;       {
 0BC7                   .dbline 595
 0BC7           ;               unloadConfig(STATE);
 0BC7 62D000            mov REG[0xd0],>_STATE
 0BCA 5100              mov A,[_STATE]
 0BCC 08                push A
 0BCD 5101              mov A,[_STATE+1]
 0BCF 08                push A
 0BD0 90D9              xcall _unloadConfig
 0BD2 38FE              add SP,-2
 0BD4                   .dbline 596
 0BD4           ;       }
 0BD4 8003              xjmp L170
 0BD6           L169:
 0BD6                   .dbline 598
 0BD6           ;       else
 0BD6           ;       {
 0BD6                   .dbline 599
 0BD6           ;               unloadAllConfigs();
 0BD6 90C9              xcall _unloadAllConfigs
 0BD8                   .dbline 600
 0BD8           ;       }
 0BD8           L170:
 0BD8                   .dbline 602
 0BD8           ;       
 0BD8           ;       if(mode == PC_MODE)
 0BD8 3DFB00            cmp [X-5],0
 0BDB B032              jnz L171
 0BDD 3DFC02            cmp [X-4],2
 0BE0 B02D              jnz L171
 0BE2           X49:
 0BE2                   .dbline 603
 0BE2           ;       {
 0BE2                   .dbline 604
 0BE2           ;               LoadConfig_pc_listener();
 0BE2 7C0000            xcall _LoadConfig_pc_listener
 0BE5                   .dbline 607
 0BE5           ;               
 0BE5           ;               //COMP_SERIAL_CmdReset();                                               // Initializes the RX buffer
 0BE5           ;               COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
 0BE5 10                push X
 0BE6 5001              mov A,1
 0BE8 7C0000            xcall _COMP_SERIAL_IntCntl
 0BEB 20                pop X
 0BEC                   .dbline 608
 0BEC           ;               COMP_SERIAL_Start(UART_PARITY_NONE);                    // Starts the UART.
 0BEC 10                push X
 0BED 5000              mov A,0
 0BEF 7C0000            xcall _COMP_SERIAL_Start
 0BF2 20                pop X
 0BF3                   .dbline 610
 0BF3           ;               
 0BF3           ;               TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);             // Start the TX repeater.
 0BF3 10                push X
 0BF4 5000              mov A,0
 0BF6 7C0000            xcall _TX_REPEATER_Start
 0BF9 20                pop X
 0BFA                   .dbline 612
 0BFA           ;               
 0BFA           ;               TIMEOUT = 0;
 0BFA 62D000            mov REG[0xd0],>_TIMEOUT
 0BFD 550100            mov [_TIMEOUT+1],0
 0C00 550000            mov [_TIMEOUT],0
 0C03                   .dbline 613
 0C03           ;               STATE = PC_MODE;
 0C03 62D000            mov REG[0xd0],>_STATE
 0C06 550102            mov [_STATE+1],2
 0C09 550000            mov [_STATE],0
 0C0C                   .dbline 614
 0C0C           ;       }
 0C0C 807A              xjmp L172
 0C0E           L171:
 0C0E                   .dbline 615
 0C0E           ;       else if(mode == RX_MODE)
 0C0E 3DFB00            cmp [X-5],0
 0C11 B02C              jnz L173
 0C13 3DFC01            cmp [X-4],1
 0C16 B027              jnz L173
 0C18           X50:
 0C18                   .dbline 616
 0C18           ;       {
 0C18                   .dbline 617
 0C18           ;               LoadConfig_receiver_config();
 0C18 7C0000            xcall _LoadConfig_receiver_config
 0C1B                   .dbline 622
 0C1B           ;               
 0C1B           ;               // Clear the buffer.
 0C1B           ;               //RECEIVE_CmdReset();
 0C1B           ;               // Start the receiver.
 0C1B           ;               RECEIVE_Start(RECEIVE_PARITY_NONE);
 0C1B 10                push X
 0C1C 5000              mov A,0
 0C1E 7C0000            xcall _RECEIVE_Start
 0C21 20                pop X
 0C22                   .dbline 625
 0C22           ;               
 0C22           ;               // Start response timeout timer and enable its interrupt routine.
 0C22           ;               TIMEOUT = 0;
 0C22 62D000            mov REG[0xd0],>_TIMEOUT
 0C25 550100            mov [_TIMEOUT+1],0
 0C28 550000            mov [_TIMEOUT],0
 0C2B                   .dbline 626
 0C2B           ;               RX_TIMEOUT_EnableInt();
 0C2B 10                push X
 0C2C 7C0000            xcall _RX_TIMEOUT_EnableInt
 0C2F                   .dbline 627
 0C2F           ;               RX_TIMEOUT_Start();
 0C2F 7C0000            xcall _RX_TIMEOUT_Start
 0C32 20                pop X
 0C33                   .dbline 629
 0C33           ;               
 0C33           ;               STATE = RX_MODE;
 0C33 62D000            mov REG[0xd0],>_STATE
 0C36 550101            mov [_STATE+1],1
 0C39 550000            mov [_STATE],0
 0C3C                   .dbline 630
 0C3C           ;       }
 0C3C 804A              xjmp L174
 0C3E           L173:
 0C3E                   .dbline 631
 0C3E           ;       else if(mode == TX_MODE)
 0C3E 3DFB00            cmp [X-5],0
 0C41 B045              jnz L175
 0C43 3DFC00            cmp [X-4],0
 0C46 B040              jnz L175
 0C48           X51:
 0C48                   .dbline 632
 0C48           ;       {
 0C48                   .dbline 633
 0C48           ;               LoadConfig_transmitter_config();
 0C48 7C0000            xcall _LoadConfig_transmitter_config
 0C4B                   .dbline 635
 0C4B           ;               // Start the transmitter.
 0C4B           ;               TRANSMIT_Start(TRANSMIT_PARITY_NONE);
 0C4B 10                push X
 0C4C 5000              mov A,0
 0C4E 7C0000            xcall _TRANSMIT_Start
 0C51 20                pop X
 0C52                   .dbline 637
 0C52           ;               
 0C52           ;               TIMEOUT = 0;
 0C52 62D000            mov REG[0xd0],>_TIMEOUT
 0C55 550100            mov [_TIMEOUT+1],0
 0C58 550000            mov [_TIMEOUT],0
 0C5B                   .dbline 638
 0C5B           ;               TX_TIMEOUT_EnableInt(); // Make sure interrupts are enabled.
 0C5B 10                push X
 0C5C 7C0000            xcall _TX_TIMEOUT_EnableInt
 0C5F                   .dbline 639
 0C5F           ;               TX_TIMEOUT_Start();             // Start the timer.
 0C5F 7C0000            xcall _TX_TIMEOUT_Start
 0C62 20                pop X
 0C63           L177:
 0C63                   .dbline 642
 0C63           ;               
 0C63           ;               while(!TIMEOUT)
 0C63           ;               {
 0C63                   .dbline 645
 0C63           ;                       // Do nothing while we wait for one timeout period.
 0C63           ;                       // This is to allow everyone to get in the right configuration.
 0C63           ;               }
 0C63           L178:
 0C63                   .dbline 641
 0C63 62D000            mov REG[0xd0],>_TIMEOUT
 0C66 3C0000            cmp [_TIMEOUT],0
 0C69 B006              jnz X52
 0C6B 3C0100            cmp [_TIMEOUT+1],0
 0C6E AFF4              jz L177
 0C70           X52:
 0C70                   .dbline 647
 0C70           ;               
 0C70           ;               TX_TIMEOUT_Stop();              // Stop the timer.
 0C70 10                push X
 0C71 7C0000            xcall _TX_TIMEOUT_Stop
 0C74 20                pop X
 0C75                   .dbline 648
 0C75           ;               TIMEOUT = 0;                    // Reset the timeout flag.
 0C75 62D000            mov REG[0xd0],>_TIMEOUT
 0C78 550100            mov [_TIMEOUT+1],0
 0C7B 550000            mov [_TIMEOUT],0
 0C7E                   .dbline 650
 0C7E           ;               
 0C7E           ;               STATE = TX_MODE;
 0C7E 62D000            mov REG[0xd0],>_STATE
 0C81 550100            mov [_STATE+1],0
 0C84 550000            mov [_STATE],0
 0C87                   .dbline 651
 0C87           ;       }
 0C87           L175:
 0C87           L174:
 0C87           L172:
 0C87                   .dbline 656
 0C87           ;       
 0C87           ;       // Make sure to keep the LED on (active low).
 0C87           ;       //PRT2DR &= 0b11111110;
 0C87           ;       
 0C87           ;       if(STATE == TX_MODE)
 0C87 62D000            mov REG[0xd0],>_STATE
 0C8A 3C0000            cmp [_STATE],0
 0C8D B00B              jnz L180
 0C8F 3C0100            cmp [_STATE+1],0
 0C92 B006              jnz L180
 0C94           X53:
 0C94                   .dbline 657
 0C94           ;       {
 0C94                   .dbline 658
 0C94           ;               PRT1DR |= 0b00000001;
 0C94 430401            or REG[0x4],1
 0C97                   .dbline 659
 0C97           ;       }
 0C97 8004              xjmp L181
 0C99           L180:
 0C99                   .dbline 661
 0C99           ;       else
 0C99           ;       {
 0C99                   .dbline 662
 0C99           ;               PRT1DR &= 0b11111110;
 0C99 4104FE            and REG[0x4],-2
 0C9C                   .dbline 664
 0C9C           ;               
 0C9C           ;       }
 0C9C           L181:
 0C9C                   .dbline 667
 0C9C           ;       
 0C9C           ;       // Reconnect to the global bus.
 0C9C           ;       PRT0GS |= 0b10000000;
 0C9C 430280            or REG[0x2],-128
 0C9F                   .dbline -2
 0C9F           L168:
 0C9F 20                pop X
 0CA0                   .dbline 0 ; func end
 0CA0 7F                ret
 0CA1                   .dbsym l mode -5 I
 0CA1                   .dbend
 0CA1                   .dbfunc e unloadAllConfigs _unloadAllConfigs fV
 0CA1           _unloadAllConfigs::
 0CA1                   .dbline -1
 0CA1                   .dbline 673
 0CA1           ; }
 0CA1           ; 
 0CA1           ; // This function blindly unloads all user configurations. This will be called once,
 0CA1           ; // when the system initially has no known state.
 0CA1           ; void unloadAllConfigs(void)
 0CA1           ; {
 0CA1                   .dbline 674
 0CA1           ;       UnloadConfig_pc_listener();
 0CA1 7C0000            xcall _UnloadConfig_pc_listener
 0CA4                   .dbline 675
 0CA4           ;       UnloadConfig_receiver_config();
 0CA4 7C0000            xcall _UnloadConfig_receiver_config
 0CA7                   .dbline 676
 0CA7           ;       UnloadConfig_transmitter_config();
 0CA7 7C0000            xcall _UnloadConfig_transmitter_config
 0CAA                   .dbline -2
 0CAA           L182:
 0CAA                   .dbline 0 ; func end
 0CAA 7F                ret
 0CAB                   .dbend
 0CAB                   .dbfunc e unloadConfig _unloadConfig fV
 0CAB           ;     config_num -> X-5
 0CAB           _unloadConfig::
 0CAB                   .dbline -1
 0CAB 10                push X
 0CAC 4F                mov X,SP
 0CAD                   .dbline 682
 0CAD           ; }
 0CAD           ; 
 0CAD           ; // This function unloads the configuration corresponding to the config number passed to it.
 0CAD           ; // We do this instead of unloadAllConfigs to cut down on set up time.
 0CAD           ; void unloadConfig(int config_num)
 0CAD           ; {
 0CAD                   .dbline 683
 0CAD           ;       if(config_num == PC_MODE)
 0CAD 3DFB00            cmp [X-5],0
 0CB0 B00B              jnz L184
 0CB2 3DFC02            cmp [X-4],2
 0CB5 B006              jnz L184
 0CB7           X54:
 0CB7                   .dbline 684
 0CB7           ;       {
 0CB7                   .dbline 685
 0CB7           ;               UnloadConfig_pc_listener();
 0CB7 7C0000            xcall _UnloadConfig_pc_listener
 0CBA                   .dbline 686
 0CBA           ;       }
 0CBA 801D              xjmp L185
 0CBC           L184:
 0CBC                   .dbline 687
 0CBC           ;       else if(config_num == RX_MODE)
 0CBC 3DFB00            cmp [X-5],0
 0CBF B00B              jnz L186
 0CC1 3DFC01            cmp [X-4],1
 0CC4 B006              jnz L186
 0CC6           X55:
 0CC6                   .dbline 688
 0CC6           ;       {
 0CC6                   .dbline 689
 0CC6           ;               UnloadConfig_receiver_config();
 0CC6 7C0000            xcall _UnloadConfig_receiver_config
 0CC9                   .dbline 690
 0CC9           ;       }
 0CC9 800E              xjmp L187
 0CCB           L186:
 0CCB                   .dbline 691
 0CCB           ;       else if(config_num == TX_MODE)
 0CCB 3DFB00            cmp [X-5],0
 0CCE B009              jnz L188
 0CD0 3DFC00            cmp [X-4],0
 0CD3 B004              jnz L188
 0CD5           X56:
 0CD5                   .dbline 692
 0CD5           ;       {
 0CD5                   .dbline 693
 0CD5           ;               UnloadConfig_transmitter_config();
 0CD5 7C0000            xcall _UnloadConfig_transmitter_config
 0CD8                   .dbline 694
 0CD8           ;       }
 0CD8           L188:
 0CD8           L187:
 0CD8           L185:
 0CD8                   .dbline -2
 0CD8           L183:
 0CD8 20                pop X
 0CD9                   .dbline 0 ; func end
 0CD9 7F                ret
 0CDA                   .dbsym l config_num -5 I
 0CDA                   .dbend
 0CDA                   .dbfunc e initializeSlaves _initializeSlaves fV
 0CDA           ;   num_timeouts -> X+0
 0CDA           _initializeSlaves::
 0CDA                   .dbline -1
 0CDA 10                push X
 0CDB 4F                mov X,SP
 0CDC 3802              add SP,2
 0CDE                   .dbline 698
 0CDE           ; }
 0CDE           ; 
 0CDE           ; void initializeSlaves(void)
 0CDE           ; {
 0CDE                   .dbline 699
 0CDE           ;       int num_timeouts = 0;
 0CDE 560100            mov [X+1],0
 0CE1 560000            mov [X+0],0
 0CE4                   .dbline 701
 0CE4           ;       
 0CE4           ;       sayHello();
 0CE4 7C0391            xcall _sayHello
 0CE7 810A              xjmp L192
 0CE9           L191:
 0CE9                   .dbline 706
 0CE9           ;       
 0CE9           ;       // This loop continuously probes and listens at intervals
 0CE9           ;       // set by the RX_TIMEOUT_DURATION variable.
 0CE9           ;       while(num_timeouts < MAX_TIMEOUTS)
 0CE9           ;       {                                       
 0CE9                   .dbline 707
 0CE9           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 0CE9 10                push X
 0CEA 7C0000            xcall _RECEIVE_cReadChar
 0CED 62D000            mov REG[0xd0],>__r0
 0CF0 20                pop X
 0CF1 39FC              cmp A,-4
 0CF3 B0D8              jnz L194
 0CF5                   .dbline 708
 0CF5           ;               {       
 0CF5                   .dbline 709
 0CF5           ;                       if(validTransmission())
 0CF5 7C03E8            xcall _validTransmission
 0CF8 62D000            mov REG[0xd0],>__r0
 0CFB 3C0000            cmp [__r0],0
 0CFE B006              jnz X57
 0D00 3C0000            cmp [__r1],0
 0D03 A0EE              jz L195
 0D05           X57:
 0D05                   .dbline 710
 0D05           ;                       {
 0D05                   .dbline 711
 0D05           ;                               if(COMMAND_TYPE == HELLO_BYTE)  // Someone else is out there!
 0D05 62D000            mov REG[0xd0],>_COMMAND_TYPE
 0D08 3C00C8            cmp [_COMMAND_TYPE],-56
 0D0B B0E6              jnz L195
 0D0D                   .dbline 712
 0D0D           ;                               {
 0D0D                   .dbline 714
 0D0D           ;                                       // If this is for me, assign them an ID.
 0D0D           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 0D0D 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0D10 3C0000            cmp [_COMMAND_DESTINATION],0
 0D13 B0DE              jnz L195
 0D15                   .dbline 715
 0D15           ;                                       {
 0D15                   .dbline 716
 0D15           ;                                               NUM_MODULES++;                  // Increment the number of modules connected.
 0D15 62D000            mov REG[0xd0],>_NUM_MODULES
 0D18 7601              inc [_NUM_MODULES+1]
 0D1A 0E0000            adc [_NUM_MODULES],0
 0D1D                   .dbline 717
 0D1D           ;                                               num_timeouts = 0;               // Reset number of timeouts since we found someone.
 0D1D 560100            mov [X+1],0
 0D20 560000            mov [X+0],0
 0D23                   .dbline 719
 0D23           ;                       
 0D23           ;                                               if(!assignID(NUM_MODULES))
 0D23 5100              mov A,[_NUM_MODULES]
 0D25 08                push A
 0D26 5101              mov A,[_NUM_MODULES+1]
 0D28 08                push A
 0D29 7C015C            xcall _assignID
 0D2C 38FE              add SP,-2
 0D2E 62D000            mov REG[0xd0],>__r0
 0D31 3C0000            cmp [__r0],0
 0D34 B0BD              jnz L195
 0D36 3C0000            cmp [__r1],0
 0D39 B0B8              jnz L195
 0D3B           X58:
 0D3B                   .dbline 720
 0D3B           ;                                               {
 0D3B                   .dbline 724
 0D3B           ;                                                       // If the module did not respond that the ID was assigned,
 0D3B           ;                                                       // make an effort to ping it in case that transmission was lost
 0D3B           ;                                                       // before ultimately deciding that the module didn't configure.
 0D3B           ;                                                       if(!pingModule(NUM_MODULES))
 0D3B 62D000            mov REG[0xd0],>_NUM_MODULES
 0D3E 5100              mov A,[_NUM_MODULES]
 0D40 08                push A
 0D41 5101              mov A,[_NUM_MODULES+1]
 0D43 08                push A
 0D44 7C0061            xcall _pingModule
 0D47 38FE              add SP,-2
 0D49 62D000            mov REG[0xd0],>__r0
 0D4C 3C0000            cmp [__r0],0
 0D4F B0A2              jnz L195
 0D51 3C0000            cmp [__r1],0
 0D54 B09D              jnz L195
 0D56           X59:
 0D56                   .dbline 725
 0D56           ;                                                       {
 0D56                   .dbline 726
 0D56           ;                                                               if(!pingModule(NUM_MODULES))
 0D56 62D000            mov REG[0xd0],>_NUM_MODULES
 0D59 5100              mov A,[_NUM_MODULES]
 0D5B 08                push A
 0D5C 5101              mov A,[_NUM_MODULES+1]
 0D5E 08                push A
 0D5F 7C0061            xcall _pingModule
 0D62 38FE              add SP,-2
 0D64 62D000            mov REG[0xd0],>__r0
 0D67 3C0000            cmp [__r0],0
 0D6A B087              jnz L195
 0D6C 3C0000            cmp [__r1],0
 0D6F B082              jnz L195
 0D71           X60:
 0D71                   .dbline 727
 0D71           ;                                                               {
 0D71                   .dbline 728
 0D71           ;                                                                       if(!pingModule(NUM_MODULES))
 0D71 62D000            mov REG[0xd0],>_NUM_MODULES
 0D74 5100              mov A,[_NUM_MODULES]
 0D76 08                push A
 0D77 5101              mov A,[_NUM_MODULES+1]
 0D79 08                push A
 0D7A 7C0061            xcall _pingModule
 0D7D 38FE              add SP,-2
 0D7F 62D000            mov REG[0xd0],>__r0
 0D82 3C0000            cmp [__r0],0
 0D85 B06C              jnz L195
 0D87 3C0000            cmp [__r1],0
 0D8A B067              jnz L195
 0D8C           X61:
 0D8C                   .dbline 729
 0D8C           ;                                                                       {
 0D8C                   .dbline 730
 0D8C           ;                                                                               if(!pingModule(NUM_MODULES))
 0D8C 62D000            mov REG[0xd0],>_NUM_MODULES
 0D8F 5100              mov A,[_NUM_MODULES]
 0D91 08                push A
 0D92 5101              mov A,[_NUM_MODULES+1]
 0D94 08                push A
 0D95 7C0061            xcall _pingModule
 0D98 38FE              add SP,-2
 0D9A 62D000            mov REG[0xd0],>__r0
 0D9D 3C0000            cmp [__r0],0
 0DA0 B051              jnz L195
 0DA2 3C0000            cmp [__r1],0
 0DA5 B04C              jnz L195
 0DA7           X62:
 0DA7                   .dbline 731
 0DA7           ;                                                                               {
 0DA7                   .dbline 732
 0DA7           ;                                                                                       if(!pingModule(NUM_MODULES))
 0DA7 62D000            mov REG[0xd0],>_NUM_MODULES
 0DAA 5100              mov A,[_NUM_MODULES]
 0DAC 08                push A
 0DAD 5101              mov A,[_NUM_MODULES+1]
 0DAF 08                push A
 0DB0 7C0061            xcall _pingModule
 0DB3 38FE              add SP,-2
 0DB5 62D000            mov REG[0xd0],>__r0
 0DB8 3C0000            cmp [__r0],0
 0DBB B036              jnz L195
 0DBD 3C0000            cmp [__r1],0
 0DC0 B031              jnz L195
 0DC2           X63:
 0DC2                   .dbline 733
 0DC2           ;                                                                                       {
 0DC2                   .dbline 734
 0DC2           ;                                                                                               NUM_MODULES--;
 0DC2 62D000            mov REG[0xd0],>_NUM_MODULES
 0DC5 7A01              dec [_NUM_MODULES+1]
 0DC7 1E0000            sbb [_NUM_MODULES],0
 0DCA                   .dbline 735
 0DCA           ;                                                                                       }
 0DCA                   .dbline 736
 0DCA           ;                                                                               }
 0DCA                   .dbline 737
 0DCA           ;                                                                       }
 0DCA                   .dbline 738
 0DCA           ;                                                               }
 0DCA                   .dbline 739
 0DCA           ;                                                       }
 0DCA                   .dbline 740
 0DCA           ;                                               }
 0DCA                   .dbline 741
 0DCA           ;                                       }
 0DCA                   .dbline 742
 0DCA           ;                               }
 0DCA                   .dbline 743
 0DCA           ;                       }
 0DCA                   .dbline 744
 0DCA           ;               }
 0DCA 8027              xjmp L195
 0DCC           L194:
 0DCC                   .dbline 745
 0DCC           ;               else if(TIMEOUT >= RX_TIMEOUT_DURATION)
 0DCC 62D000            mov REG[0xd0],>_TIMEOUT
 0DCF 5101              mov A,[_TIMEOUT+1]
 0DD1 1105              sub A,5
 0DD3 5100              mov A,[_TIMEOUT]
 0DD5 3180              xor A,-128
 0DD7 1980              sbb A,(0 ^ 0x80)
 0DD9 C018              jc L214
 0DDB           X64:
 0DDB                   .dbline 746
 0DDB           ;               {       
 0DDB                   .dbline 747
 0DDB           ;                       num_timeouts++;
 0DDB 7701              inc [X+1]
 0DDD 0F0000            adc [X+0],0
 0DE0                   .dbline 750
 0DE0           ;                       
 0DE0           ;                       // If we are not maxed out on modules, look for more.
 0DE0           ;                       if(NUM_MODULES < MAX_MODULES)
 0DE0 62D000            mov REG[0xd0],>_NUM_MODULES
 0DE3 5101              mov A,[_NUM_MODULES+1]
 0DE5 11FA              sub A,-6
 0DE7 5100              mov A,[_NUM_MODULES]
 0DE9 3180              xor A,-128
 0DEB 1980              sbb A,(0 ^ 0x80)
 0DED D004              jnc L216
 0DEF           X65:
 0DEF                   .dbline 751
 0DEF           ;                       {
 0DEF                   .dbline 752
 0DEF           ;                               sayHello();
 0DEF 7C0391            xcall _sayHello
 0DF2                   .dbline 753
 0DF2           ;                       }
 0DF2           L216:
 0DF2                   .dbline 754
 0DF2           ;               }
 0DF2           L214:
 0DF2           L195:
 0DF2                   .dbline 755
 0DF2           ;       }
 0DF2           L192:
 0DF2                   .dbline 705
 0DF2 5201              mov A,[X+1]
 0DF4 110A              sub A,10
 0DF6 5200              mov A,[X+0]
 0DF8 3180              xor A,-128
 0DFA 1980              sbb A,(0 ^ 0x80)
 0DFC CEEC              jc L191
 0DFE           X66:
 0DFE                   .dbline 758
 0DFE           ;       
 0DFE           ;       // Switch back to PC mode.
 0DFE           ;       configToggle(PC_MODE);
 0DFE 5000              mov A,0
 0E00 08                push A
 0E01 5002              mov A,2
 0E03 08                push A
 0E04 9DAC              xcall _configToggle
 0E06 38FE              add SP,-2
 0E08                   .dbline -2
 0E08           L190:
 0E08 38FE              add SP,-2
 0E0A 20                pop X
 0E0B                   .dbline 0 ; func end
 0E0B 7F                ret
 0E0C                   .dbsym l num_timeouts 0 I
 0E0C                   .dbend
 0E0C                   .dbfunc e xmitWait _xmitWait fV
 0E0C           ;              i -> X+0
 0E0C           _xmitWait::
 0E0C                   .dbline -1
 0E0C 10                push X
 0E0D 4F                mov X,SP
 0E0E 3802              add SP,2
 0E10                   .dbline 762
 0E10           ; }
 0E10           ; 
 0E10           ; void xmitWait(void)
 0E10           ; {
 0E10                   .dbline 765
 0E10           ;       int i;
 0E10           ;       
 0E10           ;       for(i = 0; i < 25; i++)
 0E10 560100            mov [X+1],0
 0E13 560000            mov [X+0],0
 0E16           L219:
 0E16                   .dbline 766
 0E16           ;       {
 0E16                   .dbline 768
 0E16           ;               // Sit here and spin for about 50 microseconds.
 0E16           ;       }
 0E16           L220:
 0E16                   .dbline 765
 0E16 7701              inc [X+1]
 0E18 0F0000            adc [X+0],0
 0E1B                   .dbline 765
 0E1B 5201              mov A,[X+1]
 0E1D 1119              sub A,25
 0E1F 5200              mov A,[X+0]
 0E21 3180              xor A,-128
 0E23 1980              sbb A,(0 ^ 0x80)
 0E25 CFF0              jc L219
 0E27           X67:
 0E27                   .dbline -2
 0E27           L218:
 0E27 38FE              add SP,-2
 0E29 20                pop X
 0E2A                   .dbline 0 ; func end
 0E2A 7F                ret
 0E2B                   .dbsym l i 0 I
 0E2B                   .dbend
 0E2B                   .dbfunc e TX_TIMEOUT_ISR _TX_TIMEOUT_ISR fV
 0E2B           _TX_TIMEOUT_ISR::
 0E2B                   .dbline -1
 0E2B 71C0              or F,-64
 0E2D 08                push A
 0E2E 5DD0              mov A,REG[0xd0]
 0E30 08                push A
 0E31                   .dbline 772
 0E31           ; }
 0E31           ; 
 0E31           ; void TX_TIMEOUT_ISR(void)
 0E31           ; {     
 0E31                   .dbline 773
 0E31           ;       TIMEOUT++;
 0E31 62D000            mov REG[0xd0],>_TIMEOUT
 0E34 7601              inc [_TIMEOUT+1]
 0E36 0E0000            adc [_TIMEOUT],0
 0E39                   .dbline 775
 0E39           ;       
 0E39           ;       M8C_ClearIntFlag(INT_CLR0,TX_TIMEOUT_INT_MASK);
 0E39 62DAFD            mov REG[0xda],-3
 0E3C                   .dbline -2
 0E3C           L223:
 0E3C 18                pop A
 0E3D 60D0              mov REG[208],A
 0E3F 18                pop A
 0E40                   .dbline 0 ; func end
 0E40 7E                reti
 0E41                   .dbend
 0E41                   .dbfunc e RX_TIMEOUT_ISR _RX_TIMEOUT_ISR fV
 0E41           _RX_TIMEOUT_ISR::
 0E41                   .dbline -1
 0E41 71C0              or F,-64
 0E43 08                push A
 0E44 5DD0              mov A,REG[0xd0]
 0E46 08                push A
 0E47                   .dbline 779
 0E47           ; }
 0E47           ; 
 0E47           ; void RX_TIMEOUT_ISR(void)
 0E47           ; {     
 0E47                   .dbline 780
 0E47           ;       TIMEOUT++;
 0E47 62D000            mov REG[0xd0],>_TIMEOUT
 0E4A 7601              inc [_TIMEOUT+1]
 0E4C 0E0000            adc [_TIMEOUT],0
 0E4F                   .dbline 782
 0E4F           ;       
 0E4F           ;       M8C_ClearIntFlag(INT_CLR0,RX_TIMEOUT_INT_MASK);
 0E4F 62DAFD            mov REG[0xda],-3
 0E52                   .dbline -2
 0E52           L224:
 0E52 18                pop A
 0E53 60D0              mov REG[208],A
 0E55 18                pop A
 0E56                   .dbline 0 ; func end
 0E56 7E                reti
 0E57                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _STATE::
 0000 0000              .byte 0,0
 0002                   .dbsym e STATE _STATE I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _PARAM::
 0000 00000000000000000000      .byte 0,0,0,0,0,0,0,0,0,0
 000A                   .dbsym e PARAM _PARAM A[10:10]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_TYPE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_TYPE _COMMAND_TYPE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_DESTINATION::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_DESTINATION _COMMAND_DESTINATION c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_SOURCE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_SOURCE _COMMAND_SOURCE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _NUM_MODULES::
 0000 0000              .byte 0,0
 0002                   .dbsym e NUM_MODULES _NUM_MODULES I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _TIMEOUT::
 0000 0000              .byte 0,0
 0002                   .dbsym e TIMEOUT _TIMEOUT I
                        .area lit(rom, con, rel)
 0000           L46:
 0000 4D6F64756C65732100        .byte 'M,'o,'d,'u,'l,'e,'s,33,0
