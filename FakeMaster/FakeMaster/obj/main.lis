 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;          angle -> X+4
 0000           ;  softwareReset -> X+2
 0000           ;      tempValue -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3808              add SP,8
 0004                   .dbline 97
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>              // part specific constants and macros
 0004           ; #include "PSoCAPI.h"          // PSoC API definitions for all User Modules
 0004           ; #include "psocdynamic.h"
 0004           ; #include <stdlib.h>
 0004           ; #include <string.h>
 0004           ; #pragma interrupt_handler TX_TIMEOUT_ISR
 0004           ; #pragma interrupt_handler RX_TIMEOUT_ISR
 0004           ; 
 0004           ; // These defines are used as parameters of the configToggle function.
 0004           ; // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
 0004           ; #define               PC_MODE                                         (2)
 0004           ; #define               RX_MODE                                         (1)
 0004           ; #define               TX_MODE                                         (0)
 0004           ; 
 0004           ; // These defines are used as comparisons to find what port the newest module is connected to.
 0004           ; #define               PORT_1                                          ('1')
 0004           ; #define               PORT_2                                          ('2')
 0004           ; #define               PORT_3                                          ('3')
 0004           ; #define               PORT_4                                          ('4')
 0004           ; 
 0004           ; // These defines are used as transmission indicators.
 0004           ; #define               START_TRANSMIT                          (252)   // Indicates the beginning of a transmission.
 0004           ; #define               END_TRANSMIT                            (253)   // Indicates the end of a transmission.
 0004           ; #define               HELLO_BYTE                                      (200)   // Indicates master is ready to talk.
 0004           ; #define               ID_ASSIGNMENT                           (201)   // Indicates an ID assignment from the master.
 0004           ; #define               ID_ASSIGN_OK                            (202)   // Indicates an ID assignment is acknowledged.
 0004           ; #define               PING                                            (203)   // Indicates that someone is pinging someone else.
 0004           ; #define               CLEAR_CONFIG                            (204)   // Indicates that the master is asking for a config clear.
 0004           ; #define               CONFIG_CLEARED                          (205)   // Indicates that a module has cleared its own config.
 0004           ; #define               MASTER_ID                                       (0)             // The master node's ID.
 0004           ; #define               BROADCAST                                       (254)   // The broadcast ID for talking to all nodes.
 0004           ; #define               BLANK_MODULE_ID                         (251)   // This is the ID of an unconfigured module.
 0004           ; 
 0004           ; // These defines are used to fill in the instruction we are using on the servo.
 0004           ; #define               PING_SERVO                                      (1)             // This is the instruction number for ping.
 0004           ; #define               READ_SERVO                                      (2)             // This is the instruction number for a read.
 0004           ; #define               WRITE_SERVO                                     (3)             // This is the instruction number for a write.
 0004           ; #define               RESET_SERVO                                     (6)             // This is the instruction to reset the servo EEPROM.
 0004           ; 
 0004           ; // These defines are used for transmission timing.
 0004           ; #define       RX_TIMEOUT_DURATION                     (5)             // This is receive wait time in 1 ms units.
 0004           ; 
 0004           ; // These defines are used for the initial probing stage, where receive waits are longer to make
 0004           ; // sure of transmission failure or success.
 0004           ; #define               BOOT_TIMEOUT                            (200)   // This is boot wait time in 1 ms units.
 0004           ; #define               MAX_TIMEOUTS                            (10)    // Number of timeouts allowed before hello mode exit.
 0004           ; 
 0004           ; // This is the maximum number of allowable modules per branch out from the master
 0004           ; #define               MAX_MODULES                                     (250)
 0004           ; 
 0004           ; #define               SERVO_START                                     (255)
 0004           ; 
 0004           ; // This function receives a mode identifier as a parameter and toggles the
 0004           ; // system configuration between receive and transmit modes for half duplex UART.
 0004           ; void configToggle(int mode);
 0004           ; 
 0004           ; // This function pings the index passed to it. Returns 1 on success, 0 on fail.
 0004           ; int pingModule(int module_id);
 0004           ; 
 0004           ; // This function assigns an ID to a module.
 0004           ; int assignID(int assigned_ID);
 0004           ; 
 0004           ; int validTransmission(void);
 0004           ; 
 0004           ; void decodeTransmission(void);
 0004           ; 
 0004           ; void sayHello(void);
 0004           ; 
 0004           ; void servoInstruction(char id, char length, char instruction, char address, char value);
 0004           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
 0004           ; 
 0004           ; int clearConfig(int module_id);
 0004           ; // This function checks the current mode and unloads the configuration for that mode.
 0004           ; void unloadAllConfigs(void);
 0004           ; // This function unloads the configuration corresponding to the number passed to it.
 0004           ; void unloadConfig(int config_num);
 0004           ; // Initialization function for the slave module controllers.
 0004           ; void initializeSlaves(void);
 0004           ; // Static wait time of approximately 50 microseconds for use after starting a transmission.
 0004           ; void xmitWait(void);
 0004           ; 
 0004           ; // This flag is set if there is a timeout.
 0004           ; int TIMEOUT;
 0004           ; 
 0004           ; int NUM_MODULES;                      // Stores the number of modules that have been discovered.
 0004           ; char COMMAND_SOURCE;          // Stores who the current command is from.
 0004           ; char COMMAND_DESTINATION;     // Stores who the current command is for.
 0004           ; char COMMAND_TYPE;                    // Stores the type of command that was just read.
 0004           ; char PARAM[10];                               // Stores a parameters that accompanies the command (if any).
 0004           ; int STATE;                                    // Stores the current configuration state of the system.
 0004           ; 
 0004           ; void main()
 0004           ; {     
 0004                   .dbline 98
 0004           ;       int tempValue = 0;
 0004 560100            mov [X+1],0
 0007 560000            mov [X+0],0
 000A                   .dbline 99
 000A           ;       int softwareReset = 0;
 000A 560300            mov [X+3],0
 000D 560200            mov [X+2],0
 0010                   .dbline 100
 0010           ;       float angle = 0;
 0010 560400            mov [X+4],0
 0013 560500            mov [X+5],0
 0016 560600            mov [X+6],0
 0019 560700            mov [X+7],0
 001C                   .dbline 102
 001C           ;       
 001C           ;       NUM_MODULES = 0;
 001C 62D000            mov REG[0xd0],>_NUM_MODULES
 001F 550100            mov [_NUM_MODULES+1],0
 0022 550000            mov [_NUM_MODULES],0
 0025                   .dbline 104
 0025           ;       
 0025           ;       M8C_EnableGInt;                 // Turn on global interrupts for the transmission timeout timer.
 0025 7101                      or  F, 01h
 0027           
 0027                   .dbline 105
 0027           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); //activate GPIO ISR
 0027 43E020            or REG[0xe0],32
 002A                   .dbline 107
 002A           ;       
 002A           ;       unloadAllConfigs();
 002A 7C0BEE            xcall _unloadAllConfigs
 002D                   .dbline 109
 002D           ; 
 002D           ;       configToggle(RX_MODE);
 002D 5000              mov A,0
 002F 08                push A
 0030 5001              mov A,1
 0032 08                push A
 0033 7C0AFF            xcall _configToggle
 0036 38FE              add SP,-2
 0038           L2:
 0038                   .dbline 112
 0038           ;               
 0038           ;       // Sit and wait for the worst case setup time to occur.
 0038           ;       while(TIMEOUT < BOOT_TIMEOUT) { }
 0038                   .dbline 112
 0038           L3:
 0038                   .dbline 112
 0038 62D000            mov REG[0xd0],>_TIMEOUT
 003B 5101              mov A,[_TIMEOUT+1]
 003D 11C8              sub A,-56
 003F 5100              mov A,[_TIMEOUT]
 0041 3180              xor A,-128
 0043 1980              sbb A,(0 ^ 0x80)
 0045 CFF2              jc L2
 0047           X1:
 0047                   .dbline 115
 0047           ;               
 0047           ;       // Initialize all of the slave modules.
 0047           ;       initializeSlaves();
 0047 7C0C27            xcall _initializeSlaves
 004A 800F              xjmp L6
 004C           L5:
 004C                   .dbline 118
 004C           ;       
 004C           ;       while(1)
 004C           ;       {       
 004C                   .dbline 119
 004C           ;               if(COMP_SERIAL_bCmdCheck())
 004C 10                push X
 004D 7C0000            xcall _COMP_SERIAL_bCmdCheck
 0050 62D000            mov REG[0xd0],>__r0
 0053 20                pop X
 0054 3900              cmp A,0
 0056 A003              jz L8
 0058                   .dbline 120
 0058           ;               {
 0058                   .dbline 121
 0058           ;                       decodeTransmission();
 0058 941C              xcall _decodeTransmission
 005A                   .dbline 122
 005A           ;               }
 005A           L8:
 005A                   .dbline 123
 005A           ;       }
 005A           L6:
 005A                   .dbline 117
 005A 8FF1              xjmp L5
 005C           X0:
 005C                   .dbline -2
 005C           L1:
 005C 38F8              add SP,-8
 005E 20                pop X
 005F                   .dbline 0 ; func end
 005F 8FFF              jmp .
 0061                   .dbsym l angle 4 D
 0061                   .dbsym l softwareReset 2 I
 0061                   .dbsym l tempValue 0 I
 0061                   .dbend
 0061                   .dbfunc e pingModule _pingModule fI
 0061           ;       response -> X+0
 0061           ;      module_id -> X-5
 0061           _pingModule::
 0061                   .dbline -1
 0061 10                push X
 0062 4F                mov X,SP
 0063 3802              add SP,2
 0065                   .dbline 127
 0065           ; }
 0065           ; 
 0065           ; int pingModule(int module_id)
 0065           ; {
 0065                   .dbline 128
 0065           ;       int response = 0;
 0065 560100            mov [X+1],0
 0068 560000            mov [X+0],0
 006B                   .dbline 130
 006B           ;       
 006B           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 006B 5000              mov A,0
 006D 08                push A
 006E 08                push A
 006F 7C0AFF            xcall _configToggle
 0072 38FE              add SP,-2
 0074                   .dbline 133
 0074           ;                       
 0074           ;       // Transmit a hello.
 0074           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0074 10                push X
 0075 50FC              mov A,-4
 0077 7C0000            xcall _TRANSMIT_PutChar
 007A 20                pop X
 007B                   .dbline 134
 007B           ;       TRANSMIT_PutChar(START_TRANSMIT);
 007B 10                push X
 007C 50FC              mov A,-4
 007E 7C0000            xcall _TRANSMIT_PutChar
 0081 20                pop X
 0082                   .dbline 135
 0082           ;       TRANSMIT_PutChar(MASTER_ID);
 0082 10                push X
 0083 5000              mov A,0
 0085 7C0000            xcall _TRANSMIT_PutChar
 0088 20                pop X
 0089                   .dbline 136
 0089           ;       TRANSMIT_PutChar(module_id);
 0089 62D000            mov REG[0xd0],>__r0
 008C 52FC              mov A,[X-4]
 008E 10                push X
 008F 7C0000            xcall _TRANSMIT_PutChar
 0092 20                pop X
 0093                   .dbline 137
 0093           ;       TRANSMIT_PutChar(PING);
 0093 10                push X
 0094 50CB              mov A,-53
 0096 7C0000            xcall _TRANSMIT_PutChar
 0099 20                pop X
 009A                   .dbline 138
 009A           ;       TRANSMIT_PutChar(END_TRANSMIT);
 009A 10                push X
 009B 50FD              mov A,-3
 009D 7C0000            xcall _TRANSMIT_PutChar
 00A0 20                pop X
 00A1                   .dbline 139
 00A1           ;       TRANSMIT_PutChar(END_TRANSMIT);
 00A1 10                push X
 00A2 50FD              mov A,-3
 00A4 7C0000            xcall _TRANSMIT_PutChar
 00A7 20                pop X
 00A8           L11:
 00A8                   .dbline 142
 00A8           ;       
 00A8           ;       // Wait for the transmission to finish.
 00A8           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 00A8           L12:
 00A8                   .dbline 142
 00A8 10                push X
 00A9 7C0000            xcall _TRANSMIT_bReadTxStatus
 00AC 62D000            mov REG[0xd0],>__r0
 00AF 20                pop X
 00B0 5300              mov [__r0],A
 00B2 470020            tst [__r0],32
 00B5 AFF2              jz L11
 00B7                   .dbline 144
 00B7           ;       
 00B7           ;       xmitWait();
 00B7 7C0D59            xcall _xmitWait
 00BA                   .dbline 146
 00BA           ;       
 00BA           ;       configToggle(RX_MODE);  // Listen for the response.
 00BA 5000              mov A,0
 00BC 08                push A
 00BD 5001              mov A,1
 00BF 08                push A
 00C0 7C0AFF            xcall _configToggle
 00C3 38FE              add SP,-2
 00C5                   .dbline 148
 00C5           ;       
 00C5           ;       RX_TIMEOUT_Stop();
 00C5 10                push X
 00C6 7C0000            xcall _RX_TIMEOUT_Stop
 00C9 20                pop X
 00CA                   .dbline 149
 00CA           ;       TIMEOUT = 0;
 00CA 62D000            mov REG[0xd0],>_TIMEOUT
 00CD 550100            mov [_TIMEOUT+1],0
 00D0 550000            mov [_TIMEOUT],0
 00D3                   .dbline 150
 00D3           ;       RX_TIMEOUT_Start();
 00D3 10                push X
 00D4 7C0000            xcall _RX_TIMEOUT_Start
 00D7 20                pop X
 00D8 8048              xjmp L15
 00DA           L14:
 00DA                   .dbline 153
 00DA           ;       
 00DA           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 00DA           ;       {
 00DA                   .dbline 154
 00DA           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 00DA 10                push X
 00DB 7C0000            xcall _RECEIVE_cReadChar
 00DE 62D000            mov REG[0xd0],>__r0
 00E1 20                pop X
 00E2 39FC              cmp A,-4
 00E4 B03C              jnz L17
 00E6                   .dbline 155
 00E6           ;               {       
 00E6                   .dbline 156
 00E6           ;                       if(validTransmission())
 00E6 92FF              xcall _validTransmission
 00E8 62D000            mov REG[0xd0],>__r0
 00EB 3C0000            cmp [__r0],0
 00EE B006              jnz X2
 00F0 3C0000            cmp [__r1],0
 00F3 A02D              jz L19
 00F5           X2:
 00F5                   .dbline 157
 00F5           ;                       {
 00F5                   .dbline 158
 00F5           ;                               if(COMMAND_TYPE == PING)        // This is the response we are looking for.
 00F5 62D000            mov REG[0xd0],>_COMMAND_TYPE
 00F8 3C00CB            cmp [_COMMAND_TYPE],-53
 00FB B025              jnz L21
 00FD                   .dbline 159
 00FD           ;                               {
 00FD                   .dbline 161
 00FD           ;                                       // If this is for me, check who it was from.
 00FD           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 00FD 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0100 3C0000            cmp [_COMMAND_DESTINATION],0
 0103 B01D              jnz L23
 0105                   .dbline 162
 0105           ;                                       {
 0105                   .dbline 163
 0105           ;                                               if(COMMAND_SOURCE == module_id)
 0105 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 0108 5100              mov A,[_COMMAND_SOURCE]
 010A 62D000            mov REG[0xd0],>__r0
 010D 5300              mov [__r1],A
 010F 5000              mov A,0
 0111 3BFB              cmp A,[X-5]
 0113 B00D              jnz L25
 0115 5100              mov A,[__r1]
 0117 3BFC              cmp A,[X-4]
 0119 B007              jnz L25
 011B           X3:
 011B                   .dbline 164
 011B           ;                                               {
 011B                   .dbline 165
 011B           ;                                                       response = 1;
 011B 560101            mov [X+1],1
 011E 560000            mov [X+0],0
 0121                   .dbline 166
 0121           ;                                               }
 0121           L25:
 0121                   .dbline 167
 0121           ;                                       }
 0121           L23:
 0121                   .dbline 168
 0121           ;                               }
 0121           L21:
 0121                   .dbline 169
 0121           ;                       }
 0121           L19:
 0121                   .dbline 170
 0121           ;               }
 0121           L17:
 0121                   .dbline 171
 0121           ;       }
 0121           L15:
 0121                   .dbline 152
 0121 62D000            mov REG[0xd0],>_TIMEOUT
 0124 5101              mov A,[_TIMEOUT+1]
 0126 1105              sub A,5
 0128 5100              mov A,[_TIMEOUT]
 012A 3180              xor A,-128
 012C 1980              sbb A,(0 ^ 0x80)
 012E D00B              jnc L27
 0130           X4:
 0130 3D0000            cmp [X+0],0
 0133 B006              jnz X5
 0135 3D0100            cmp [X+1],0
 0138 AFA1              jz L14
 013A           X5:
 013A           L27:
 013A                   .dbline 173
 013A           ;       
 013A           ;       RX_TIMEOUT_Stop();
 013A 10                push X
 013B 7C0000            xcall _RX_TIMEOUT_Stop
 013E 20                pop X
 013F                   .dbline 174
 013F           ;       TIMEOUT = 0;
 013F 62D000            mov REG[0xd0],>_TIMEOUT
 0142 550100            mov [_TIMEOUT+1],0
 0145 550000            mov [_TIMEOUT],0
 0148                   .dbline 175
 0148           ;       RX_TIMEOUT_Start();
 0148 10                push X
 0149 7C0000            xcall _RX_TIMEOUT_Start
 014C 20                pop X
 014D                   .dbline 177
 014D           ;       
 014D           ;       return response;
 014D 62D000            mov REG[0xd0],>__r0
 0150 5201              mov A,[X+1]
 0152 5300              mov [__r1],A
 0154 5200              mov A,[X+0]
 0156 5300              mov [__r0],A
 0158                   .dbline -2
 0158           L10:
 0158 38FE              add SP,-2
 015A 20                pop X
 015B                   .dbline 0 ; func end
 015B 7F                ret
 015C                   .dbsym l response 0 I
 015C                   .dbsym l module_id -5 I
 015C                   .dbend
 015C                   .dbfunc e assignID _assignID fI
 015C           ;        success -> X+0
 015C           ;    assigned_ID -> X-5
 015C           _assignID::
 015C                   .dbline -1
 015C 10                push X
 015D 4F                mov X,SP
 015E 3802              add SP,2
 0160                   .dbline 181
 0160           ; }
 0160           ; 
 0160           ; int assignID(int assigned_ID)
 0160           ; {
 0160                   .dbline 182
 0160           ;       int success = 0;                // Stores 0 on fail, 1 on success.
 0160 560100            mov [X+1],0
 0163 560000            mov [X+0],0
 0166                   .dbline 184
 0166           ;       
 0166           ;       configToggle(TX_MODE);  // Switch to TX mode.
 0166 5000              mov A,0
 0168 08                push A
 0169 08                push A
 016A 7C0AFF            xcall _configToggle
 016D 38FE              add SP,-2
 016F                   .dbline 187
 016F           ; 
 016F           ;       // Transmit the assignment.
 016F           ;       TRANSMIT_PutChar(START_TRANSMIT);
 016F 10                push X
 0170 50FC              mov A,-4
 0172 7C0000            xcall _TRANSMIT_PutChar
 0175 20                pop X
 0176                   .dbline 188
 0176           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0176 10                push X
 0177 50FC              mov A,-4
 0179 7C0000            xcall _TRANSMIT_PutChar
 017C 20                pop X
 017D                   .dbline 189
 017D           ;       TRANSMIT_PutChar(MASTER_ID);
 017D 10                push X
 017E 5000              mov A,0
 0180 7C0000            xcall _TRANSMIT_PutChar
 0183 20                pop X
 0184                   .dbline 190
 0184           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 0184 10                push X
 0185 50FB              mov A,-5
 0187 7C0000            xcall _TRANSMIT_PutChar
 018A 20                pop X
 018B                   .dbline 191
 018B           ;       TRANSMIT_PutChar(ID_ASSIGNMENT);
 018B 10                push X
 018C 50C9              mov A,-55
 018E 7C0000            xcall _TRANSMIT_PutChar
 0191 20                pop X
 0192                   .dbline 192
 0192           ;       TRANSMIT_PutChar(assigned_ID);
 0192 62D000            mov REG[0xd0],>__r0
 0195 52FC              mov A,[X-4]
 0197 10                push X
 0198 7C0000            xcall _TRANSMIT_PutChar
 019B 20                pop X
 019C                   .dbline 193
 019C           ;       TRANSMIT_PutChar(END_TRANSMIT);
 019C 10                push X
 019D 50FD              mov A,-3
 019F 7C0000            xcall _TRANSMIT_PutChar
 01A2 20                pop X
 01A3                   .dbline 194
 01A3           ;       TRANSMIT_PutChar(END_TRANSMIT);
 01A3 10                push X
 01A4 50FD              mov A,-3
 01A6 7C0000            xcall _TRANSMIT_PutChar
 01A9 20                pop X
 01AA           L29:
 01AA                   .dbline 197
 01AA           ;       
 01AA           ;       // Wait for the transmission to finish.
 01AA           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 01AA           L30:
 01AA                   .dbline 197
 01AA 10                push X
 01AB 7C0000            xcall _TRANSMIT_bReadTxStatus
 01AE 62D000            mov REG[0xd0],>__r0
 01B1 20                pop X
 01B2 5300              mov [__r0],A
 01B4 470020            tst [__r0],32
 01B7 AFF2              jz L29
 01B9                   .dbline 199
 01B9           ;       
 01B9           ;       xmitWait();
 01B9 7C0D59            xcall _xmitWait
 01BC                   .dbline 201
 01BC           ;       
 01BC           ;       configToggle(RX_MODE);  // Switch back to receive mode.
 01BC 5000              mov A,0
 01BE 08                push A
 01BF 5001              mov A,1
 01C1 08                push A
 01C2 7C0AFF            xcall _configToggle
 01C5 38FE              add SP,-2
 01C7                   .dbline 203
 01C7           ;       
 01C7           ;       RX_TIMEOUT_Stop();
 01C7 10                push X
 01C8 7C0000            xcall _RX_TIMEOUT_Stop
 01CB 20                pop X
 01CC                   .dbline 204
 01CC           ;       TIMEOUT = 0;
 01CC 62D000            mov REG[0xd0],>_TIMEOUT
 01CF 550100            mov [_TIMEOUT+1],0
 01D2 550000            mov [_TIMEOUT],0
 01D5                   .dbline 205
 01D5           ;       RX_TIMEOUT_Start();
 01D5 10                push X
 01D6 7C0000            xcall _RX_TIMEOUT_Start
 01D9 20                pop X
 01DA 8048              xjmp L33
 01DC           L32:
 01DC                   .dbline 208
 01DC           ;       
 01DC           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
 01DC           ;       {
 01DC                   .dbline 209
 01DC           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 01DC 10                push X
 01DD 7C0000            xcall _RECEIVE_cReadChar
 01E0 62D000            mov REG[0xd0],>__r0
 01E3 20                pop X
 01E4 39FC              cmp A,-4
 01E6 B03C              jnz L35
 01E8                   .dbline 210
 01E8           ;               {       
 01E8                   .dbline 211
 01E8           ;                       if(validTransmission())
 01E8 91FD              xcall _validTransmission
 01EA 62D000            mov REG[0xd0],>__r0
 01ED 3C0000            cmp [__r0],0
 01F0 B006              jnz X6
 01F2 3C0000            cmp [__r1],0
 01F5 A02D              jz L37
 01F7           X6:
 01F7                   .dbline 212
 01F7           ;                       {
 01F7                   .dbline 213
 01F7           ;                               if(COMMAND_TYPE == ID_ASSIGN_OK)        // This is the response we are looking for.
 01F7 62D000            mov REG[0xd0],>_COMMAND_TYPE
 01FA 3C00CA            cmp [_COMMAND_TYPE],-54
 01FD B025              jnz L39
 01FF                   .dbline 214
 01FF           ;                               {
 01FF                   .dbline 216
 01FF           ;                                       // If this is for me, check who it was from.
 01FF           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 01FF 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0202 3C0000            cmp [_COMMAND_DESTINATION],0
 0205 B01D              jnz L41
 0207                   .dbline 217
 0207           ;                                       {
 0207                   .dbline 218
 0207           ;                                               if(COMMAND_SOURCE == assigned_ID)
 0207 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 020A 5100              mov A,[_COMMAND_SOURCE]
 020C 62D000            mov REG[0xd0],>__r0
 020F 5300              mov [__r1],A
 0211 5000              mov A,0
 0213 3BFB              cmp A,[X-5]
 0215 B00D              jnz L43
 0217 5100              mov A,[__r1]
 0219 3BFC              cmp A,[X-4]
 021B B007              jnz L43
 021D           X7:
 021D                   .dbline 219
 021D           ;                                               {
 021D                   .dbline 220
 021D           ;                                                       success = 1;
 021D 560101            mov [X+1],1
 0220 560000            mov [X+0],0
 0223                   .dbline 221
 0223           ;                                               }
 0223           L43:
 0223                   .dbline 222
 0223           ;                                       }
 0223           L41:
 0223                   .dbline 223
 0223           ;                               }
 0223           L39:
 0223                   .dbline 224
 0223           ;                       }
 0223           L37:
 0223                   .dbline 225
 0223           ;               }
 0223           L35:
 0223                   .dbline 226
 0223           ;       }
 0223           L33:
 0223                   .dbline 207
 0223 62D000            mov REG[0xd0],>_TIMEOUT
 0226 5101              mov A,[_TIMEOUT+1]
 0228 1105              sub A,5
 022A 5100              mov A,[_TIMEOUT]
 022C 3180              xor A,-128
 022E 1980              sbb A,(0 ^ 0x80)
 0230 D00B              jnc L45
 0232           X8:
 0232 3D0000            cmp [X+0],0
 0235 B006              jnz X9
 0237 3D0100            cmp [X+1],0
 023A AFA1              jz L32
 023C           X9:
 023C           L45:
 023C                   .dbline 228
 023C           ;       
 023C           ;       LCD_1_Start();
 023C 10                push X
 023D 7C0000            xcall _LCD_1_Start
 0240 20                pop X
 0241                   .dbline 229
 0241           ;       LCD_1_Position(0,0);
 0241 10                push X
 0242 5000              mov A,0
 0244 5C                mov X,A
 0245 7C0000            xcall _LCD_1_Position
 0248 20                pop X
 0249                   .dbline 230
 0249           ;       LCD_1_PrHexInt(NUM_MODULES);
 0249 10                push X
 024A 62D000            mov REG[0xd0],>_NUM_MODULES
 024D 5100              mov A,[_NUM_MODULES]
 024F 08                push A
 0250 5101              mov A,[_NUM_MODULES+1]
 0252 20                pop X
 0253 7C0000            xcall _LCD_1_PrHexInt
 0256 20                pop X
 0257                   .dbline 231
 0257           ;       LCD_1_Position(0,5);
 0257 10                push X
 0258 5705              mov X,5
 025A 5000              mov A,0
 025C 7C0000            xcall _LCD_1_Position
 025F 20                pop X
 0260                   .dbline 232
 0260           ;       LCD_1_PrCString("Modules!");
 0260 10                push X
 0261 5000              mov A,>L46
 0263 08                push A
 0264 5000              mov A,<L46
 0266 5C                mov X,A
 0267 18                pop A
 0268 7C0000            xcall _LCD_1_PrCString
 026B                   .dbline 234
 026B           ;       
 026B           ;       RX_TIMEOUT_Stop();
 026B 7C0000            xcall _RX_TIMEOUT_Stop
 026E 20                pop X
 026F                   .dbline 235
 026F           ;       TIMEOUT = 0;
 026F 62D000            mov REG[0xd0],>_TIMEOUT
 0272 550100            mov [_TIMEOUT+1],0
 0275 550000            mov [_TIMEOUT],0
 0278                   .dbline 236
 0278           ;       RX_TIMEOUT_Start();
 0278 10                push X
 0279 7C0000            xcall _RX_TIMEOUT_Start
 027C 20                pop X
 027D                   .dbline 238
 027D           ;       
 027D           ;       return success;
 027D 62D000            mov REG[0xd0],>__r0
 0280 5201              mov A,[X+1]
 0282 5300              mov [__r1],A
 0284 5200              mov A,[X+0]
 0286 5300              mov [__r0],A
 0288                   .dbline -2
 0288           L28:
 0288 38FE              add SP,-2
 028A 20                pop X
 028B                   .dbline 0 ; func end
 028B 7F                ret
 028C                   .dbsym l success 0 I
 028C                   .dbsym l assigned_ID -5 I
 028C                   .dbend
 028C                   .dbfunc e clearConfig _clearConfig fI
 028C           ;       response -> X+0
 028C           ;      module_id -> X-5
 028C           _clearConfig::
 028C                   .dbline -1
 028C 10                push X
 028D 4F                mov X,SP
 028E 3802              add SP,2
 0290                   .dbline 242
 0290           ; }
 0290           ; 
 0290           ; int clearConfig(int module_id)
 0290           ; {
 0290                   .dbline 243
 0290           ;       int response = 0;
 0290 560100            mov [X+1],0
 0293 560000            mov [X+0],0
 0296                   .dbline 245
 0296           ;       
 0296           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 0296 5000              mov A,0
 0298 08                push A
 0299 08                push A
 029A 7C0AFF            xcall _configToggle
 029D 38FE              add SP,-2
 029F                   .dbline 248
 029F           ;                       
 029F           ;       // Transmit a hello.
 029F           ;       TRANSMIT_PutChar(START_TRANSMIT);
 029F 10                push X
 02A0 50FC              mov A,-4
 02A2 7C0000            xcall _TRANSMIT_PutChar
 02A5 20                pop X
 02A6                   .dbline 249
 02A6           ;       TRANSMIT_PutChar(START_TRANSMIT);
 02A6 10                push X
 02A7 50FC              mov A,-4
 02A9 7C0000            xcall _TRANSMIT_PutChar
 02AC 20                pop X
 02AD                   .dbline 250
 02AD           ;       TRANSMIT_PutChar(MASTER_ID);
 02AD 10                push X
 02AE 5000              mov A,0
 02B0 7C0000            xcall _TRANSMIT_PutChar
 02B3 20                pop X
 02B4                   .dbline 251
 02B4           ;       TRANSMIT_PutChar(module_id);
 02B4 62D000            mov REG[0xd0],>__r0
 02B7 52FC              mov A,[X-4]
 02B9 10                push X
 02BA 7C0000            xcall _TRANSMIT_PutChar
 02BD 20                pop X
 02BE                   .dbline 252
 02BE           ;       TRANSMIT_PutChar(CLEAR_CONFIG);
 02BE 10                push X
 02BF 50CC              mov A,-52
 02C1 7C0000            xcall _TRANSMIT_PutChar
 02C4 20                pop X
 02C5                   .dbline 253
 02C5           ;       TRANSMIT_PutChar(END_TRANSMIT);
 02C5 10                push X
 02C6 50FD              mov A,-3
 02C8 7C0000            xcall _TRANSMIT_PutChar
 02CB 20                pop X
 02CC                   .dbline 254
 02CC           ;       TRANSMIT_PutChar(END_TRANSMIT);
 02CC 10                push X
 02CD 50FD              mov A,-3
 02CF 7C0000            xcall _TRANSMIT_PutChar
 02D2 20                pop X
 02D3           L48:
 02D3                   .dbline 257
 02D3           ;       
 02D3           ;       // Wait for the transmission to finish.
 02D3           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 02D3           L49:
 02D3                   .dbline 257
 02D3 10                push X
 02D4 7C0000            xcall _TRANSMIT_bReadTxStatus
 02D7 62D000            mov REG[0xd0],>__r0
 02DA 20                pop X
 02DB 5300              mov [__r0],A
 02DD 470020            tst [__r0],32
 02E0 AFF2              jz L48
 02E2                   .dbline 259
 02E2           ;       
 02E2           ;       xmitWait();
 02E2 7C0D59            xcall _xmitWait
 02E5                   .dbline 261
 02E5           ;       
 02E5           ;       configToggle(RX_MODE);  // Listen for the response.
 02E5 5000              mov A,0
 02E7 08                push A
 02E8 5001              mov A,1
 02EA 08                push A
 02EB 7C0AFF            xcall _configToggle
 02EE 38FE              add SP,-2
 02F0                   .dbline 263
 02F0           ;       
 02F0           ;       if(module_id != BROADCAST)
 02F0 3DFB00            cmp [X-5],0
 02F3 B006              jnz X10
 02F5 3DFCFE            cmp [X-4],-2
 02F8 A089              jz L51
 02FA           X10:
 02FA                   .dbline 264
 02FA           ;       {
 02FA                   .dbline 265
 02FA           ;               RX_TIMEOUT_Stop();
 02FA 10                push X
 02FB 7C0000            xcall _RX_TIMEOUT_Stop
 02FE 20                pop X
 02FF                   .dbline 266
 02FF           ;               TIMEOUT = 0;
 02FF 62D000            mov REG[0xd0],>_TIMEOUT
 0302 550100            mov [_TIMEOUT+1],0
 0305 550000            mov [_TIMEOUT],0
 0308                   .dbline 267
 0308           ;               RX_TIMEOUT_Start();
 0308 10                push X
 0309 7C0000            xcall _RX_TIMEOUT_Start
 030C 20                pop X
 030D 8048              xjmp L54
 030F           L53:
 030F                   .dbline 270
 030F           ;               
 030F           ;               while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 030F           ;               {
 030F                   .dbline 271
 030F           ;                       if(RECEIVE_cReadChar() == START_TRANSMIT)
 030F 10                push X
 0310 7C0000            xcall _RECEIVE_cReadChar
 0313 62D000            mov REG[0xd0],>__r0
 0316 20                pop X
 0317 39FC              cmp A,-4
 0319 B03C              jnz L56
 031B                   .dbline 272
 031B           ;                       {       
 031B                   .dbline 273
 031B           ;                               if(validTransmission())
 031B 90CA              xcall _validTransmission
 031D 62D000            mov REG[0xd0],>__r0
 0320 3C0000            cmp [__r0],0
 0323 B006              jnz X11
 0325 3C0000            cmp [__r1],0
 0328 A02D              jz L58
 032A           X11:
 032A                   .dbline 274
 032A           ;                               {
 032A                   .dbline 275
 032A           ;                                       if(COMMAND_TYPE == CONFIG_CLEARED)      // This is the response we are looking for.
 032A 62D000            mov REG[0xd0],>_COMMAND_TYPE
 032D 3C00CD            cmp [_COMMAND_TYPE],-51
 0330 B025              jnz L60
 0332                   .dbline 276
 0332           ;                                       {
 0332                   .dbline 278
 0332           ;                                               // If this is for me, check who it was from.
 0332           ;                                               if(COMMAND_DESTINATION == MASTER_ID)
 0332 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0335 3C0000            cmp [_COMMAND_DESTINATION],0
 0338 B01D              jnz L62
 033A                   .dbline 279
 033A           ;                                               {
 033A                   .dbline 280
 033A           ;                                                       if(COMMAND_SOURCE == module_id)
 033A 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 033D 5100              mov A,[_COMMAND_SOURCE]
 033F 62D000            mov REG[0xd0],>__r0
 0342 5300              mov [__r1],A
 0344 5000              mov A,0
 0346 3BFB              cmp A,[X-5]
 0348 B00D              jnz L64
 034A 5100              mov A,[__r1]
 034C 3BFC              cmp A,[X-4]
 034E B007              jnz L64
 0350           X12:
 0350                   .dbline 281
 0350           ;                                                       {
 0350                   .dbline 282
 0350           ;                                                               response = 1;
 0350 560101            mov [X+1],1
 0353 560000            mov [X+0],0
 0356                   .dbline 283
 0356           ;                                                       }
 0356           L64:
 0356                   .dbline 284
 0356           ;                                               }
 0356           L62:
 0356                   .dbline 285
 0356           ;                                       }
 0356           L60:
 0356                   .dbline 286
 0356           ;                               }
 0356           L58:
 0356                   .dbline 287
 0356           ;                       }
 0356           L56:
 0356                   .dbline 288
 0356           ;               }
 0356           L54:
 0356                   .dbline 269
 0356 62D000            mov REG[0xd0],>_TIMEOUT
 0359 5101              mov A,[_TIMEOUT+1]
 035B 1105              sub A,5
 035D 5100              mov A,[_TIMEOUT]
 035F 3180              xor A,-128
 0361 1980              sbb A,(0 ^ 0x80)
 0363 D00B              jnc L66
 0365           X13:
 0365 3D0000            cmp [X+0],0
 0368 B006              jnz X14
 036A 3D0100            cmp [X+1],0
 036D AFA1              jz L53
 036F           X14:
 036F           L66:
 036F                   .dbline 290
 036F           ;               
 036F           ;               RX_TIMEOUT_Stop();
 036F 10                push X
 0370 7C0000            xcall _RX_TIMEOUT_Stop
 0373 20                pop X
 0374                   .dbline 291
 0374           ;               TIMEOUT = 0;
 0374 62D000            mov REG[0xd0],>_TIMEOUT
 0377 550100            mov [_TIMEOUT+1],0
 037A 550000            mov [_TIMEOUT],0
 037D                   .dbline 292
 037D           ;               RX_TIMEOUT_Start();
 037D 10                push X
 037E 7C0000            xcall _RX_TIMEOUT_Start
 0381 20                pop X
 0382                   .dbline 293
 0382           ;       }
 0382           L51:
 0382                   .dbline 295
 0382           ;       
 0382           ;       return response;
 0382 62D000            mov REG[0xd0],>__r0
 0385 5201              mov A,[X+1]
 0387 5300              mov [__r1],A
 0389 5200              mov A,[X+0]
 038B 5300              mov [__r0],A
 038D                   .dbline -2
 038D           L47:
 038D 38FE              add SP,-2
 038F 20                pop X
 0390                   .dbline 0 ; func end
 0390 7F                ret
 0391                   .dbsym l response 0 I
 0391                   .dbsym l module_id -5 I
 0391                   .dbend
 0391                   .dbfunc e sayHello _sayHello fV
 0391           _sayHello::
 0391                   .dbline -1
 0391                   .dbline 300
 0391           ; }
 0391           ; 
 0391           ; // This function transmits a hello message.
 0391           ; void sayHello(void)
 0391           ; {
 0391                   .dbline 301
 0391           ;       configToggle(TX_MODE);                          // Toggle into TX mode.
 0391 5000              mov A,0
 0393 08                push A
 0394 08                push A
 0395 9768              xcall _configToggle
 0397 38FE              add SP,-2
 0399                   .dbline 304
 0399           ;                       
 0399           ;       // Transmit a hello.
 0399           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0399 10                push X
 039A 50FC              mov A,-4
 039C 7C0000            xcall _TRANSMIT_PutChar
 039F 20                pop X
 03A0                   .dbline 305
 03A0           ;       TRANSMIT_PutChar(START_TRANSMIT);
 03A0 10                push X
 03A1 50FC              mov A,-4
 03A3 7C0000            xcall _TRANSMIT_PutChar
 03A6 20                pop X
 03A7                   .dbline 306
 03A7           ;       TRANSMIT_PutChar(MASTER_ID);
 03A7 10                push X
 03A8 5000              mov A,0
 03AA 7C0000            xcall _TRANSMIT_PutChar
 03AD 20                pop X
 03AE                   .dbline 307
 03AE           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 03AE 10                push X
 03AF 50FB              mov A,-5
 03B1 7C0000            xcall _TRANSMIT_PutChar
 03B4 20                pop X
 03B5                   .dbline 308
 03B5           ;       TRANSMIT_PutChar(HELLO_BYTE);
 03B5 10                push X
 03B6 50C8              mov A,-56
 03B8 7C0000            xcall _TRANSMIT_PutChar
 03BB 20                pop X
 03BC                   .dbline 309
 03BC           ;       TRANSMIT_PutChar(END_TRANSMIT);
 03BC 10                push X
 03BD 50FD              mov A,-3
 03BF 7C0000            xcall _TRANSMIT_PutChar
 03C2 20                pop X
 03C3                   .dbline 310
 03C3           ;       TRANSMIT_PutChar(END_TRANSMIT);
 03C3 10                push X
 03C4 50FD              mov A,-3
 03C6 7C0000            xcall _TRANSMIT_PutChar
 03C9 20                pop X
 03CA           L68:
 03CA                   .dbline 313
 03CA           ;       
 03CA           ;       // Wait for the transmission to finish.
 03CA           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 03CA           L69:
 03CA                   .dbline 313
 03CA 10                push X
 03CB 7C0000            xcall _TRANSMIT_bReadTxStatus
 03CE 62D000            mov REG[0xd0],>__r0
 03D1 20                pop X
 03D2 5300              mov [__r0],A
 03D4 470020            tst [__r0],32
 03D7 AFF2              jz L68
 03D9                   .dbline 315
 03D9           ;       
 03D9           ;       xmitWait();
 03D9 7C0D59            xcall _xmitWait
 03DC                   .dbline 317
 03DC           ;       
 03DC           ;       configToggle(RX_MODE);                          // Listen for the response.
 03DC 5000              mov A,0
 03DE 08                push A
 03DF 5001              mov A,1
 03E1 08                push A
 03E2 971B              xcall _configToggle
 03E4 38FE              add SP,-2
 03E6                   .dbline -2
 03E6           L67:
 03E6                   .dbline 0 ; func end
 03E6 7F                ret
 03E7                   .dbend
 03E7                   .dbfunc e validTransmission _validTransmission fI
 03E7           ; valid_transmit -> X+2
 03E7           ;              i -> X+0
 03E7           _validTransmission::
 03E7                   .dbline -1
 03E7 10                push X
 03E8 4F                mov X,SP
 03E9 3804              add SP,4
 03EB                   .dbline 322
 03EB           ; }
 03EB           ; 
 03EB           ; // This function returns whether or not a valid transmission has been received.
 03EB           ; int validTransmission(void)
 03EB           ; {
 03EB                   .dbline 323
 03EB           ;       int valid_transmit = 0;
 03EB 560300            mov [X+3],0
 03EE 560200            mov [X+2],0
 03F1                   .dbline 324
 03F1           ;       int i = 0;
 03F1 560100            mov [X+1],0
 03F4 560000            mov [X+0],0
 03F7                   .dbline 326
 03F7           ;       
 03F7           ;       if(RECEIVE_cGetChar() == START_TRANSMIT)
 03F7 10                push X
 03F8 7C0000            xcall _RECEIVE_cGetChar
 03FB 62D000            mov REG[0xd0],>__r0
 03FE 20                pop X
 03FF 39FC              cmp A,-4
 0401 B065              jnz L72
 0403                   .dbline 327
 0403           ;       {
 0403                   .dbline 328
 0403           ;               COMMAND_SOURCE = RECEIVE_cGetChar();
 0403 10                push X
 0404 7C0000            xcall _RECEIVE_cGetChar
 0407 20                pop X
 0408 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 040B 5300              mov [_COMMAND_SOURCE],A
 040D                   .dbline 329
 040D           ;               COMMAND_DESTINATION = RECEIVE_cGetChar();
 040D 10                push X
 040E 7C0000            xcall _RECEIVE_cGetChar
 0411 20                pop X
 0412 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0415 5300              mov [_COMMAND_DESTINATION],A
 0417                   .dbline 330
 0417           ;               COMMAND_TYPE = RECEIVE_cGetChar();
 0417 10                push X
 0418 7C0000            xcall _RECEIVE_cGetChar
 041B 20                pop X
 041C 62D000            mov REG[0xd0],>_COMMAND_TYPE
 041F 5300              mov [_COMMAND_TYPE],A
 0421                   .dbline 331
 0421           ;               PARAM[0] = RECEIVE_cGetChar();
 0421 10                push X
 0422 7C0000            xcall _RECEIVE_cGetChar
 0425 20                pop X
 0426 62D000            mov REG[0xd0],>_PARAM
 0429 5300              mov [_PARAM],A
 042B 8020              xjmp L75
 042D           L74:
 042D                   .dbline 334
 042D           ;               
 042D           ;               while(PARAM[i] != END_TRANSMIT)
 042D           ;               {
 042D                   .dbline 335
 042D           ;                       i++;
 042D 7701              inc [X+1]
 042F 0F0000            adc [X+0],0
 0432                   .dbline 336
 0432           ;                       PARAM[i] = RECEIVE_cGetChar();
 0432 10                push X
 0433 7C0000            xcall _RECEIVE_cGetChar
 0436 62D000            mov REG[0xd0],>__r0
 0439 20                pop X
 043A 5300              mov [__r0],A
 043C 5201              mov A,[X+1]
 043E 0100              add A,<_PARAM
 0440 5300              mov [__r3],A
 0442 5200              mov A,[X+0]
 0444 0900              adc A,>_PARAM
 0446 60D5              mov REG[0xd5],A
 0448 5100              mov A,[__r0]
 044A 3F00              mvi [__r3],A
 044C                   .dbline 337
 044C           ;               }
 044C           L75:
 044C                   .dbline 333
 044C 62D000            mov REG[0xd0],>__r0
 044F 5201              mov A,[X+1]
 0451 0100              add A,<_PARAM
 0453 5300              mov [__r1],A
 0455 5200              mov A,[X+0]
 0457 0900              adc A,>_PARAM
 0459 60D4              mov REG[0xd4],A
 045B 3E00              mvi A,[__r1]
 045D 39FD              cmp A,-3
 045F BFCD              jnz L74
 0461                   .dbline 339
 0461           ;               
 0461           ;               valid_transmit = 1;
 0461 560301            mov [X+3],1
 0464 560200            mov [X+2],0
 0467                   .dbline 340
 0467           ;       }
 0467           L72:
 0467                   .dbline 342
 0467           ;       
 0467           ;       return valid_transmit;
 0467 62D000            mov REG[0xd0],>__r0
 046A 5203              mov A,[X+3]
 046C 5300              mov [__r1],A
 046E 5202              mov A,[X+2]
 0470 5300              mov [__r0],A
 0472                   .dbline -2
 0472           L71:
 0472 38FC              add SP,-4
 0474 20                pop X
 0475                   .dbline 0 ; func end
 0475 7F                ret
 0476                   .dbsym l valid_transmit 2 I
 0476                   .dbsym l i 0 I
 0476                   .dbend
 0476                   .dbfunc e decodeTransmission _decodeTransmission fV
 0476           ;       tempByte -> X+7
 0476           ;          angle -> X+5
 0476           ;             ID -> X+4
 0476           ;          total -> X+2
 0476           ;          param -> X+0
 0476           _decodeTransmission::
 0476                   .dbline -1
 0476 10                push X
 0477 4F                mov X,SP
 0478 3808              add SP,8
 047A                   .dbline 347
 047A           ; }
 047A           ; 
 047A           ; // This function decodes the transmission and takes the correct action.
 047A           ; void decodeTransmission(void)
 047A           ; {
 047A                   .dbline 352
 047A           ;       char* param;
 047A           ;       char ID;
 047A           ;       char tempByte;
 047A           ;       char angle[2];
 047A           ;       int total = 0;
 047A 560300            mov [X+3],0
 047D 560200            mov [X+2],0
 0480                   .dbline 354
 0480           ;       
 0480           ;       if(param = COMP_SERIAL_szGetParam())
 0480 10                push X
 0481 7C0000            xcall _COMP_SERIAL_szGetParam
 0484 62D000            mov REG[0xd0],>__r0
 0487 5300              mov [__r0],A
 0489 5A00              mov [__r1],X
 048B 20                pop X
 048C 5100              mov A,[__r1]
 048E 5401              mov [X+1],A
 0490 5100              mov A,[__r0]
 0492 5400              mov [X+0],A
 0494 3C0000            cmp [__r0],0
 0497 B006              jnz X15
 0499 3C0000            cmp [__r1],0
 049C A506              jz L78
 049E           X15:
 049E                   .dbline 355
 049E           ;       {
 049E                   .dbline 356
 049E           ;               if((param[0] == 'n') || (param[0] == 'N'))
 049E 62D000            mov REG[0xd0],>__r0
 04A1 5201              mov A,[X+1]
 04A3 5300              mov [__r1],A
 04A5 5200              mov A,[X+0]
 04A7 60D4              mov REG[0xd4],A
 04A9 3E00              mvi A,[__r1]
 04AB 5300              mov [__r1],A
 04AD 550000            mov [__r0],0
 04B0 3C0000            cmp [__r0],0
 04B3 B005              jnz X16
 04B5 396E              cmp A,110
 04B7 A00E              jz L82
 04B9           X16:
 04B9 62D000            mov REG[0xd0],>__r0
 04BC 3C0000            cmp [__r0],0
 04BF B03A              jnz L80
 04C1 3C004E            cmp [__r1],78
 04C4 B035              jnz L80
 04C6           X17:
 04C6           L82:
 04C6                   .dbline 357
 04C6           ;               {
 04C6                   .dbline 358
 04C6           ;                       COMP_SERIAL_CmdReset();
 04C6 10                push X
 04C7 7C0000            xcall _COMP_SERIAL_CmdReset
 04CA 20                pop X
 04CB                   .dbline 359
 04CB           ;                       itoa(param,NUM_MODULES,10);
 04CB 5000              mov A,0
 04CD 08                push A
 04CE 500A              mov A,10
 04D0 08                push A
 04D1 62D000            mov REG[0xd0],>_NUM_MODULES
 04D4 5100              mov A,[_NUM_MODULES]
 04D6 08                push A
 04D7 5101              mov A,[_NUM_MODULES+1]
 04D9 08                push A
 04DA 5200              mov A,[X+0]
 04DC 08                push A
 04DD 5201              mov A,[X+1]
 04DF 08                push A
 04E0 7C0000            xcall _itoa
 04E3 38FA              add SP,-6
 04E5                   .dbline 360
 04E5           ;                       COMP_SERIAL_PutString(param);
 04E5 10                push X
 04E6 5200              mov A,[X+0]
 04E8 08                push A
 04E9 5201              mov A,[X+1]
 04EB 5C                mov X,A
 04EC 18                pop A
 04ED 7C0000            xcall _COMP_SERIAL_PutString
 04F0 20                pop X
 04F1                   .dbline 361
 04F1           ;                       COMP_SERIAL_PutChar('\n');
 04F1 10                push X
 04F2 500A              mov A,10
 04F4 7C0000            xcall _COMP_SERIAL_PutChar
 04F7 20                pop X
 04F8                   .dbline 362
 04F8           ;               }
 04F8 84AA              xjmp L81
 04FA           L80:
 04FA                   .dbline 363
 04FA           ;               else if((param[0] == 'w') || (param[0] == 'W'))
 04FA 62D000            mov REG[0xd0],>__r0
 04FD 5201              mov A,[X+1]
 04FF 5300              mov [__r1],A
 0501 5200              mov A,[X+0]
 0503 60D4              mov REG[0xd4],A
 0505 3E00              mvi A,[__r1]
 0507 5300              mov [__r1],A
 0509 550000            mov [__r0],0
 050C 3C0000            cmp [__r0],0
 050F B005              jnz X18
 0511 3977              cmp A,119
 0513 A00E              jz L85
 0515           X18:
 0515 62D000            mov REG[0xd0],>__r0
 0518 3C0000            cmp [__r0],0
 051B B16B              jnz L83
 051D 3C0057            cmp [__r1],87
 0520 B166              jnz L83
 0522           X19:
 0522           L85:
 0522                   .dbline 364
 0522           ;               {
 0522                   .dbline 365
 0522           ;                       if(param = COMP_SERIAL_szGetParam())
 0522 10                push X
 0523 7C0000            xcall _COMP_SERIAL_szGetParam
 0526 62D000            mov REG[0xd0],>__r0
 0529 5300              mov [__r0],A
 052B 5A00              mov [__r1],X
 052D 20                pop X
 052E 5100              mov A,[__r1]
 0530 5401              mov [X+1],A
 0532 5100              mov A,[__r0]
 0534 5400              mov [X+0],A
 0536 3C0000            cmp [__r0],0
 0539 B006              jnz X20
 053B 3C0000            cmp [__r1],0
 053E A464              jz L84
 0540           X20:
 0540                   .dbline 366
 0540           ;                       {
 0540                   .dbline 367
 0540           ;                               ID = atoi(param);
 0540 5200              mov A,[X+0]
 0542 08                push A
 0543 5201              mov A,[X+1]
 0545 08                push A
 0546 7C0000            xcall _atoi
 0549 38FE              add SP,-2
 054B 62D000            mov REG[0xd0],>__r0
 054E 5100              mov A,[__r1]
 0550 5404              mov [X+4],A
 0552                   .dbline 368
 0552           ;                               if(param = COMP_SERIAL_szGetParam())
 0552 10                push X
 0553 7C0000            xcall _COMP_SERIAL_szGetParam
 0556 62D000            mov REG[0xd0],>__r0
 0559 5300              mov [__r0],A
 055B 5A00              mov [__r1],X
 055D 20                pop X
 055E 5100              mov A,[__r1]
 0560 5401              mov [X+1],A
 0562 5100              mov A,[__r0]
 0564 5400              mov [X+0],A
 0566 3C0000            cmp [__r0],0
 0569 B006              jnz X21
 056B 3C0000            cmp [__r1],0
 056E A434              jz L84
 0570           X21:
 0570                   .dbline 369
 0570           ;                               {
 0570                   .dbline 370
 0570           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 0570 62D000            mov REG[0xd0],>__r0
 0573 5201              mov A,[X+1]
 0575 5300              mov [__r1],A
 0577 5200              mov A,[X+0]
 0579 60D4              mov REG[0xd4],A
 057B 3E00              mvi A,[__r1]
 057D 5300              mov [__r1],A
 057F 550000            mov [__r0],0
 0582 3C0000            cmp [__r0],0
 0585 B005              jnz X22
 0587 3961              cmp A,97
 0589 A00E              jz L92
 058B           X22:
 058B 62D000            mov REG[0xd0],>__r0
 058E 3C0000            cmp [__r0],0
 0591 B089              jnz L90
 0593 3C0041            cmp [__r1],65
 0596 B084              jnz L90
 0598           X23:
 0598           L92:
 0598                   .dbline 371
 0598           ;                                       {
 0598                   .dbline 372
 0598           ;                                               if(param = COMP_SERIAL_szGetParam())
 0598 10                push X
 0599 7C0000            xcall _COMP_SERIAL_szGetParam
 059C 62D000            mov REG[0xd0],>__r0
 059F 5300              mov [__r0],A
 05A1 5A00              mov [__r1],X
 05A3 20                pop X
 05A4 5100              mov A,[__r1]
 05A6 5401              mov [X+1],A
 05A8 5100              mov A,[__r0]
 05AA 5400              mov [X+0],A
 05AC 3C0000            cmp [__r0],0
 05AF B006              jnz X24
 05B1 3C0000            cmp [__r1],0
 05B4 A3EE              jz L84
 05B6           X24:
 05B6                   .dbline 373
 05B6           ;                                               {
 05B6                   .dbline 374
 05B6           ;                                                       COMP_SERIAL_CmdReset();
 05B6 10                push X
 05B7 7C0000            xcall _COMP_SERIAL_CmdReset
 05BA 20                pop X
 05BB                   .dbline 375
 05BB           ;                                                       total = atoi(param);
 05BB 5200              mov A,[X+0]
 05BD 08                push A
 05BE 5201              mov A,[X+1]
 05C0 08                push A
 05C1 7C0000            xcall _atoi
 05C4 38FE              add SP,-2
 05C6 62D000            mov REG[0xd0],>__r0
 05C9 5100              mov A,[__r1]
 05CB 5403              mov [X+3],A
 05CD 5100              mov A,[__r0]
 05CF 5402              mov [X+2],A
 05D1                   .dbline 376
 05D1           ;                                                       angle[0] = total%256;
 05D1 5001              mov A,1
 05D3 08                push A
 05D4 5000              mov A,0
 05D6 08                push A
 05D7 5202              mov A,[X+2]
 05D9 08                push A
 05DA 5203              mov A,[X+3]
 05DC 08                push A
 05DD 7C0000            xcall __divmod_16X16_16
 05E0 38FE              add SP,-2
 05E2 18                pop A
 05E3 5300              mov [__r1],A
 05E5 18                pop A
 05E6 5100              mov A,[__r1]
 05E8 5405              mov [X+5],A
 05EA                   .dbline 377
 05EA           ;                                                       angle[1] = total/256;
 05EA 5001              mov A,1
 05EC 08                push A
 05ED 5000              mov A,0
 05EF 08                push A
 05F0 5202              mov A,[X+2]
 05F2 08                push A
 05F3 5203              mov A,[X+3]
 05F5 08                push A
 05F6 7C0000            xcall __divmod_16X16_16
 05F9 18                pop A
 05FA 5300              mov [__r1],A
 05FC 18                pop A
 05FD 38FE              add SP,-2
 05FF 5100              mov A,[__r1]
 0601 5406              mov [X+6],A
 0603                   .dbline 378
 0603           ;                                                       longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
 0603 5206              mov A,[X+6]
 0605 08                push A
 0606 5205              mov A,[X+5]
 0608 08                push A
 0609 501E              mov A,30
 060B 08                push A
 060C 5003              mov A,3
 060E 08                push A
 060F 5005              mov A,5
 0611 08                push A
 0612 5204              mov A,[X+4]
 0614 08                push A
 0615 9446              xcall _longServoInstruction
 0617 38FA              add SP,-6
 0619                   .dbline 379
 0619           ;                                               }
 0619                   .dbline 380
 0619           ;                                       }
 0619 8389              xjmp L84
 061B           L90:
 061B                   .dbline 381
 061B           ;                                       else if((param[0] == 'p') || (param[0] == 'P'))
 061B 62D000            mov REG[0xd0],>__r0
 061E 5201              mov A,[X+1]
 0620 5300              mov [__r1],A
 0622 5200              mov A,[X+0]
 0624 60D4              mov REG[0xd4],A
 0626 3E00              mvi A,[__r1]
 0628 5300              mov [__r1],A
 062A 550000            mov [__r0],0
 062D 3C0000            cmp [__r0],0
 0630 B005              jnz X25
 0632 3970              cmp A,112
 0634 A00E              jz L99
 0636           X25:
 0636 62D000            mov REG[0xd0],>__r0
 0639 3C0000            cmp [__r0],0
 063C B366              jnz L84
 063E 3C0050            cmp [__r1],80
 0641 B361              jnz L84
 0643           X26:
 0643           L99:
 0643                   .dbline 382
 0643           ;                                       {
 0643                   .dbline 383
 0643           ;                                               if(param = COMP_SERIAL_szGetParam())
 0643 10                push X
 0644 7C0000            xcall _COMP_SERIAL_szGetParam
 0647 62D000            mov REG[0xd0],>__r0
 064A 5300              mov [__r0],A
 064C 5A00              mov [__r1],X
 064E 20                pop X
 064F 5100              mov A,[__r1]
 0651 5401              mov [X+1],A
 0653 5100              mov A,[__r0]
 0655 5400              mov [X+0],A
 0657 3C0000            cmp [__r0],0
 065A B006              jnz X27
 065C 3C0000            cmp [__r1],0
 065F A343              jz L84
 0661           X27:
 0661                   .dbline 384
 0661           ;                                               {
 0661                   .dbline 385
 0661           ;                                                       COMP_SERIAL_CmdReset();
 0661 10                push X
 0662 7C0000            xcall _COMP_SERIAL_CmdReset
 0665 20                pop X
 0666                   .dbline 386
 0666           ;                                                       servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
 0666 5200              mov A,[X+0]
 0668 08                push A
 0669 5201              mov A,[X+1]
 066B 08                push A
 066C 7C0000            xcall _atoi
 066F 62D000            mov REG[0xd0],>__r0
 0672 5100              mov A,[__r1]
 0674 08                push A
 0675 5018              mov A,24
 0677 08                push A
 0678 5003              mov A,3
 067A 08                push A
 067B 5004              mov A,4
 067D 08                push A
 067E 5204              mov A,[X+4]
 0680 08                push A
 0681 9346              xcall _servoInstruction
 0683 38F9              add SP,-7
 0685                   .dbline 387
 0685           ;                                               }
 0685                   .dbline 388
 0685           ;                                       }
 0685                   .dbline 389
 0685           ;                               }
 0685                   .dbline 390
 0685           ;                       }
 0685                   .dbline 391
 0685           ;               }
 0685 831D              xjmp L84
 0687           L83:
 0687                   .dbline 392
 0687           ;               else if((param[0] == 'r') || (param[0] == 'R'))
 0687 62D000            mov REG[0xd0],>__r0
 068A 5201              mov A,[X+1]
 068C 5300              mov [__r1],A
 068E 5200              mov A,[X+0]
 0690 60D4              mov REG[0xd4],A
 0692 3E00              mvi A,[__r1]
 0694 5300              mov [__r1],A
 0696 550000            mov [__r0],0
 0699 3C0000            cmp [__r0],0
 069C B005              jnz X28
 069E 3972              cmp A,114
 06A0 A00E              jz L104
 06A2           X28:
 06A2 62D000            mov REG[0xd0],>__r0
 06A5 3C0000            cmp [__r0],0
 06A8 B2FA              jnz L102
 06AA 3C0052            cmp [__r1],82
 06AD B2F5              jnz L102
 06AF           X29:
 06AF           L104:
 06AF                   .dbline 393
 06AF           ;               {                       
 06AF                   .dbline 394
 06AF           ;                       if(param = COMP_SERIAL_szGetParam())
 06AF 10                push X
 06B0 7C0000            xcall _COMP_SERIAL_szGetParam
 06B3 62D000            mov REG[0xd0],>__r0
 06B6 5300              mov [__r0],A
 06B8 5A00              mov [__r1],X
 06BA 20                pop X
 06BB 5100              mov A,[__r1]
 06BD 5401              mov [X+1],A
 06BF 5100              mov A,[__r0]
 06C1 5400              mov [X+0],A
 06C3 3C0000            cmp [__r0],0
 06C6 B006              jnz X30
 06C8 3C0000            cmp [__r1],0
 06CB A2D7              jz L105
 06CD           X30:
 06CD                   .dbline 395
 06CD           ;                       {
 06CD                   .dbline 396
 06CD           ;                               ID = atoi(param);
 06CD 5200              mov A,[X+0]
 06CF 08                push A
 06D0 5201              mov A,[X+1]
 06D2 08                push A
 06D3 7C0000            xcall _atoi
 06D6 38FE              add SP,-2
 06D8 62D000            mov REG[0xd0],>__r0
 06DB 5100              mov A,[__r1]
 06DD 5404              mov [X+4],A
 06DF                   .dbline 397
 06DF           ;                               if(param = COMP_SERIAL_szGetParam())
 06DF 10                push X
 06E0 7C0000            xcall _COMP_SERIAL_szGetParam
 06E3 62D000            mov REG[0xd0],>__r0
 06E6 5300              mov [__r0],A
 06E8 5A00              mov [__r1],X
 06EA 20                pop X
 06EB 5100              mov A,[__r1]
 06ED 5401              mov [X+1],A
 06EF 5100              mov A,[__r0]
 06F1 5400              mov [X+0],A
 06F3 3C0000            cmp [__r0],0
 06F6 B006              jnz X31
 06F8 3C0000            cmp [__r1],0
 06FB A2A7              jz L107
 06FD           X31:
 06FD                   .dbline 398
 06FD           ;                               {
 06FD                   .dbline 399
 06FD           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 06FD 62D000            mov REG[0xd0],>__r0
 0700 5201              mov A,[X+1]
 0702 5300              mov [__r1],A
 0704 5200              mov A,[X+0]
 0706 60D4              mov REG[0xd4],A
 0708 3E00              mvi A,[__r1]
 070A 5300              mov [__r1],A
 070C 550000            mov [__r0],0
 070F 3C0000            cmp [__r0],0
 0712 B005              jnz X32
 0714 3961              cmp A,97
 0716 A00E              jz L111
 0718           X32:
 0718 62D000            mov REG[0xd0],>__r0
 071B 3C0000            cmp [__r0],0
 071E B0CC              jnz L109
 0720 3C0041            cmp [__r1],65
 0723 B0C7              jnz L109
 0725           X33:
 0725           L111:
 0725                   .dbline 400
 0725           ;                                       {
 0725                   .dbline 401
 0725           ;                                               COMP_SERIAL_CmdReset();
 0725 10                push X
 0726 7C0000            xcall _COMP_SERIAL_CmdReset
 0729 20                pop X
 072A                   .dbline 402
 072A           ;                                               servoInstruction(ID,4,READ_SERVO,36,2);
 072A 5002              mov A,2
 072C 08                push A
 072D 5024              mov A,36
 072F 08                push A
 0730 5002              mov A,2
 0732 08                push A
 0733 5004              mov A,4
 0735 08                push A
 0736 5204              mov A,[X+4]
 0738 08                push A
 0739 928E              xcall _servoInstruction
 073B                   .dbline 403
 073B           ;                                               configToggle(RX_MODE);
 073B 5000              mov A,0
 073D 08                push A
 073E 5001              mov A,1
 0740 08                push A
 0741 93BC              xcall _configToggle
 0743 38F9              add SP,-7
 0745 8094              xjmp L113
 0747           L112:
 0747                   .dbline 407
 0747           ;                                                       
 0747           ;                                               // Loop until we read a response or time out.
 0747           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0747           ;                                               {
 0747                   .dbline 408
 0747           ;                                                       if(RECEIVE_cReadChar() == SERVO_START)
 0747 10                push X
 0748 7C0000            xcall _RECEIVE_cReadChar
 074B 62D000            mov REG[0xd0],>__r0
 074E 20                pop X
 074F 39FF              cmp A,-1
 0751 B088              jnz L115
 0753                   .dbline 409
 0753           ;                                                       {
 0753                   .dbline 410
 0753           ;                                                               if(RECEIVE_cGetChar() == SERVO_START)
 0753 10                push X
 0754 7C0000            xcall _RECEIVE_cGetChar
 0757 62D000            mov REG[0xd0],>__r0
 075A 20                pop X
 075B 39FF              cmp A,-1
 075D B07C              jnz L117
 075F                   .dbline 411
 075F           ;                                                               {
 075F                   .dbline 412
 075F           ;                                                                       if(RECEIVE_cGetChar() == ID)
 075F 10                push X
 0760 7C0000            xcall _RECEIVE_cGetChar
 0763 62D000            mov REG[0xd0],>__r0
 0766 20                pop X
 0767 3B04              cmp A,[X+4]
 0769 B070              jnz L119
 076B                   .dbline 413
 076B           ;                                                                       {
 076B                   .dbline 414
 076B           ;                                                                               if(RECEIVE_cGetChar() == 4)
 076B 10                push X
 076C 7C0000            xcall _RECEIVE_cGetChar
 076F 62D000            mov REG[0xd0],>__r0
 0772 20                pop X
 0773 3904              cmp A,4
 0775 B064              jnz L121
 0777                   .dbline 415
 0777           ;                                                                               {
 0777                   .dbline 416
 0777           ;                                                                                       if(RECEIVE_cGetChar() == 0)
 0777 10                push X
 0778 7C0000            xcall _RECEIVE_cGetChar
 077B 62D000            mov REG[0xd0],>__r0
 077E 20                pop X
 077F 3900              cmp A,0
 0781 B058              jnz L123
 0783                   .dbline 417
 0783           ;                                                                                       {
 0783                   .dbline 418
 0783           ;                                                                                               angle[0] = RECEIVE_cGetChar();
 0783 10                push X
 0784 7C0000            xcall _RECEIVE_cGetChar
 0787 62D000            mov REG[0xd0],>__r0
 078A 20                pop X
 078B 5405              mov [X+5],A
 078D                   .dbline 419
 078D           ;                                                                                               angle[1] = RECEIVE_cGetChar();
 078D 10                push X
 078E 7C0000            xcall _RECEIVE_cGetChar
 0791 62D000            mov REG[0xd0],>__r0
 0794 20                pop X
 0795 5406              mov [X+6],A
 0797                   .dbline 421
 0797           ;                                                                                               
 0797           ;                                                                                               configToggle(PC_MODE);
 0797 5000              mov A,0
 0799 08                push A
 079A 5002              mov A,2
 079C 08                push A
 079D 9360              xcall _configToggle
 079F                   .dbline 423
 079F           ;                                                                                               
 079F           ;                                                                                               total = ((angle[1])*256) + angle[0];
 079F 5205              mov A,[X+5]
 07A1 5403              mov [X+3],A
 07A3 5206              mov A,[X+6]
 07A5 5402              mov [X+2],A
 07A7                   .dbline 424
 07A7           ;                                                                                               itoa(param,total,10);
 07A7 5000              mov A,0
 07A9 08                push A
 07AA 500A              mov A,10
 07AC 08                push A
 07AD 5202              mov A,[X+2]
 07AF 08                push A
 07B0 5203              mov A,[X+3]
 07B2 08                push A
 07B3 5200              mov A,[X+0]
 07B5 08                push A
 07B6 5201              mov A,[X+1]
 07B8 08                push A
 07B9 7C0000            xcall _itoa
 07BC 38F8              add SP,-8
 07BE                   .dbline 425
 07BE           ;                                                                                               COMP_SERIAL_PutString(param);
 07BE 10                push X
 07BF 5200              mov A,[X+0]
 07C1 08                push A
 07C2 5201              mov A,[X+1]
 07C4 5C                mov X,A
 07C5 18                pop A
 07C6 7C0000            xcall _COMP_SERIAL_PutString
 07C9 20                pop X
 07CA                   .dbline 426
 07CA           ;                                                                                               COMP_SERIAL_PutChar('\n');
 07CA 10                push X
 07CB 500A              mov A,10
 07CD 7C0000            xcall _COMP_SERIAL_PutChar
 07D0 20                pop X
 07D1                   .dbline 428
 07D1           ; 
 07D1           ;                                                                                               TIMEOUT = RX_TIMEOUT_DURATION;
 07D1 62D000            mov REG[0xd0],>_TIMEOUT
 07D4 550105            mov [_TIMEOUT+1],5
 07D7 550000            mov [_TIMEOUT],0
 07DA                   .dbline 429
 07DA           ;                                                                                       }
 07DA           L123:
 07DA                   .dbline 430
 07DA           ;                                                                               }
 07DA           L121:
 07DA                   .dbline 431
 07DA           ;                                                                       }
 07DA           L119:
 07DA                   .dbline 432
 07DA           ;                                                               }
 07DA           L117:
 07DA                   .dbline 433
 07DA           ;                                                       }
 07DA           L115:
 07DA                   .dbline 434
 07DA           ;                                               }
 07DA           L113:
 07DA                   .dbline 406
 07DA 62D000            mov REG[0xd0],>_TIMEOUT
 07DD 5101              mov A,[_TIMEOUT+1]
 07DF 1105              sub A,5
 07E1 5100              mov A,[_TIMEOUT]
 07E3 3180              xor A,-128
 07E5 1980              sbb A,(0 ^ 0x80)
 07E7 CF5F              jc L112
 07E9           X34:
 07E9                   .dbline 435
 07E9           ;                                       }
 07E9 81B9              xjmp L110
 07EB           L109:
 07EB                   .dbline 436
 07EB           ;                                       else if ((param[0] == 'p') || (param[0] == 'P'))
 07EB 62D000            mov REG[0xd0],>__r0
 07EE 5201              mov A,[X+1]
 07F0 5300              mov [__r1],A
 07F2 5200              mov A,[X+0]
 07F4 60D4              mov REG[0xd4],A
 07F6 3E00              mvi A,[__r1]
 07F8 5300              mov [__r1],A
 07FA 550000            mov [__r0],0
 07FD 3C0000            cmp [__r0],0
 0800 B005              jnz X35
 0802 3970              cmp A,112
 0804 A00E              jz L129
 0806           X35:
 0806 62D000            mov REG[0xd0],>__r0
 0809 3C0000            cmp [__r0],0
 080C B0A5              jnz L127
 080E 3C0050            cmp [__r1],80
 0811 B0A0              jnz L127
 0813           X36:
 0813           L129:
 0813                   .dbline 437
 0813           ;                                       {
 0813                   .dbline 438
 0813           ;                                               COMP_SERIAL_CmdReset();
 0813 10                push X
 0814 7C0000            xcall _COMP_SERIAL_CmdReset
 0817 20                pop X
 0818                   .dbline 439
 0818           ;                                               servoInstruction(ID,4,READ_SERVO,24,1);
 0818 5001              mov A,1
 081A 08                push A
 081B 5018              mov A,24
 081D 08                push A
 081E 5002              mov A,2
 0820 08                push A
 0821 5004              mov A,4
 0823 08                push A
 0824 5204              mov A,[X+4]
 0826 08                push A
 0827 91A0              xcall _servoInstruction
 0829                   .dbline 440
 0829           ;                                               configToggle(RX_MODE);
 0829 5000              mov A,0
 082B 08                push A
 082C 5001              mov A,1
 082E 08                push A
 082F 92CE              xcall _configToggle
 0831 38F9              add SP,-7
 0833 806D              xjmp L131
 0835           L130:
 0835                   .dbline 444
 0835           ;                                                       
 0835           ;                                               // Loop until we read a response or time out.
 0835           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0835           ;                                               {
 0835                   .dbline 445
 0835           ;                                                       if(RECEIVE_cReadChar() == SERVO_START)
 0835 10                push X
 0836 7C0000            xcall _RECEIVE_cReadChar
 0839 62D000            mov REG[0xd0],>__r0
 083C 20                pop X
 083D 39FF              cmp A,-1
 083F B061              jnz L133
 0841                   .dbline 446
 0841           ;                                                       {
 0841                   .dbline 447
 0841           ;                                                               if(RECEIVE_cGetChar() == SERVO_START)
 0841 10                push X
 0842 7C0000            xcall _RECEIVE_cGetChar
 0845 62D000            mov REG[0xd0],>__r0
 0848 20                pop X
 0849 39FF              cmp A,-1
 084B B055              jnz L135
 084D                   .dbline 448
 084D           ;                                                               {
 084D                   .dbline 449
 084D           ;                                                                       if(RECEIVE_cGetChar() == ID)
 084D 10                push X
 084E 7C0000            xcall _RECEIVE_cGetChar
 0851 62D000            mov REG[0xd0],>__r0
 0854 20                pop X
 0855 3B04              cmp A,[X+4]
 0857 B049              jnz L137
 0859                   .dbline 450
 0859           ;                                                                       {
 0859                   .dbline 451
 0859           ;                                                                               if(RECEIVE_cGetChar() == 3)
 0859 10                push X
 085A 7C0000            xcall _RECEIVE_cGetChar
 085D 62D000            mov REG[0xd0],>__r0
 0860 20                pop X
 0861 3903              cmp A,3
 0863 B03D              jnz L139
 0865                   .dbline 452
 0865           ;                                                                               {
 0865                   .dbline 453
 0865           ;                                                                                       if(RECEIVE_cGetChar() == 0)
 0865 10                push X
 0866 7C0000            xcall _RECEIVE_cGetChar
 0869 62D000            mov REG[0xd0],>__r0
 086C 20                pop X
 086D 3900              cmp A,0
 086F B031              jnz L141
 0871                   .dbline 454
 0871           ;                                                                                       {
 0871                   .dbline 455
 0871           ;                                                                                               tempByte = RECEIVE_cGetChar();
 0871 10                push X
 0872 7C0000            xcall _RECEIVE_cGetChar
 0875 62D000            mov REG[0xd0],>__r0
 0878 20                pop X
 0879 5407              mov [X+7],A
 087B                   .dbline 457
 087B           ;                                                                                               
 087B           ;                                                                                               configToggle(PC_MODE);
 087B 5000              mov A,0
 087D 08                push A
 087E 5002              mov A,2
 0880 08                push A
 0881 927C              xcall _configToggle
 0883 38FE              add SP,-2
 0885                   .dbline 460
 0885           ;                                                                                               
 0885           ;                                                                                               // Convert tempByte to an ascii value and send.
 0885           ;                                                                                               COMP_SERIAL_PutChar(tempByte + 48);
 0885 62D000            mov REG[0xd0],>__r0
 0888 5207              mov A,[X+7]
 088A 0130              add A,48
 088C 10                push X
 088D 7C0000            xcall _COMP_SERIAL_PutChar
 0890 20                pop X
 0891                   .dbline 461
 0891           ;                                                                                               COMP_SERIAL_PutChar('\n');
 0891 10                push X
 0892 500A              mov A,10
 0894 7C0000            xcall _COMP_SERIAL_PutChar
 0897 20                pop X
 0898                   .dbline 463
 0898           ; 
 0898           ;                                                                                               TIMEOUT = RX_TIMEOUT_DURATION;
 0898 62D000            mov REG[0xd0],>_TIMEOUT
 089B 550105            mov [_TIMEOUT+1],5
 089E 550000            mov [_TIMEOUT],0
 08A1                   .dbline 464
 08A1           ;                                                                                       }
 08A1           L141:
 08A1                   .dbline 465
 08A1           ;                                                                               }
 08A1           L139:
 08A1                   .dbline 466
 08A1           ;                                                                       }
 08A1           L137:
 08A1                   .dbline 467
 08A1           ;                                                               }
 08A1           L135:
 08A1                   .dbline 468
 08A1           ;                                                       }
 08A1           L133:
 08A1                   .dbline 469
 08A1           ;                                               }
 08A1           L131:
 08A1                   .dbline 443
 08A1 62D000            mov REG[0xd0],>_TIMEOUT
 08A4 5101              mov A,[_TIMEOUT+1]
 08A6 1105              sub A,5
 08A8 5100              mov A,[_TIMEOUT]
 08AA 3180              xor A,-128
 08AC 1980              sbb A,(0 ^ 0x80)
 08AE CF86              jc L130
 08B0           X37:
 08B0                   .dbline 470
 08B0           ;                                       }
 08B0 80F2              xjmp L128
 08B2           L127:
 08B2                   .dbline 471
 08B2           ;                                       else if ((param[0] == 't') || (param[0] == 'T'))
 08B2 62D000            mov REG[0xd0],>__r0
 08B5 5201              mov A,[X+1]
 08B7 5300              mov [__r1],A
 08B9 5200              mov A,[X+0]
 08BB 60D4              mov REG[0xd4],A
 08BD 3E00              mvi A,[__r1]
 08BF 5300              mov [__r1],A
 08C1 550000            mov [__r0],0
 08C4 3C0000            cmp [__r0],0
 08C7 B005              jnz X38
 08C9 3974              cmp A,116
 08CB A00E              jz L145
 08CD           X38:
 08CD 62D000            mov REG[0xd0],>__r0
 08D0 3C0000            cmp [__r0],0
 08D3 B068              jnz L143
 08D5 3C0054            cmp [__r1],84
 08D8 B063              jnz L143
 08DA           X39:
 08DA           L145:
 08DA                   .dbline 472
 08DA           ;                                       {
 08DA                   .dbline 473
 08DA           ;                                               COMP_SERIAL_CmdReset();
 08DA 10                push X
 08DB 7C0000            xcall _COMP_SERIAL_CmdReset
 08DE 20                pop X
 08DF                   .dbline 474
 08DF           ;                                               if(pingModule(ID))
 08DF 62D000            mov REG[0xd0],>__r0
 08E2 5204              mov A,[X+4]
 08E4 5300              mov [__r1],A
 08E6 5000              mov A,0
 08E8 08                push A
 08E9 5100              mov A,[__r1]
 08EB 08                push A
 08EC 7C0061            xcall _pingModule
 08EF 38FE              add SP,-2
 08F1 62D000            mov REG[0xd0],>__r0
 08F4 3C0000            cmp [__r0],0
 08F7 B006              jnz X40
 08F9 3C0000            cmp [__r1],0
 08FC A0A6              jz L144
 08FE           X40:
 08FE                   .dbline 475
 08FE           ;                                               {
 08FE                   .dbline 476
 08FE           ;                                                       configToggle(PC_MODE);
 08FE 5000              mov A,0
 0900 08                push A
 0901 5002              mov A,2
 0903 08                push A
 0904 91F9              xcall _configToggle
 0906                   .dbline 478
 0906           ;                                                                                               
 0906           ;                                                       total = PARAM[0];
 0906 62D000            mov REG[0xd0],>_PARAM
 0909 5100              mov A,[_PARAM]
 090B 5403              mov [X+3],A
 090D 560200            mov [X+2],0
 0910                   .dbline 479
 0910           ;                                                       itoa(param,total,10);
 0910 5000              mov A,0
 0912 08                push A
 0913 500A              mov A,10
 0915 08                push A
 0916 5202              mov A,[X+2]
 0918 08                push A
 0919 5203              mov A,[X+3]
 091B 08                push A
 091C 5200              mov A,[X+0]
 091E 08                push A
 091F 5201              mov A,[X+1]
 0921 08                push A
 0922 7C0000            xcall _itoa
 0925 38F8              add SP,-8
 0927                   .dbline 480
 0927           ;                                                       COMP_SERIAL_PutString(param);
 0927 10                push X
 0928 5200              mov A,[X+0]
 092A 08                push A
 092B 5201              mov A,[X+1]
 092D 5C                mov X,A
 092E 18                pop A
 092F 7C0000            xcall _COMP_SERIAL_PutString
 0932 20                pop X
 0933                   .dbline 481
 0933           ;                                                       COMP_SERIAL_PutChar('\n');
 0933 10                push X
 0934 500A              mov A,10
 0936 7C0000            xcall _COMP_SERIAL_PutChar
 0939 20                pop X
 093A                   .dbline 482
 093A           ;                                               }
 093A                   .dbline 483
 093A           ;                                       }
 093A 8068              xjmp L144
 093C           L143:
 093C                   .dbline 484
 093C           ;                                       else if ((param[0] == 'c') || (param[0] == 'C'))
 093C 62D000            mov REG[0xd0],>__r0
 093F 5201              mov A,[X+1]
 0941 5300              mov [__r1],A
 0943 5200              mov A,[X+0]
 0945 60D4              mov REG[0xd4],A
 0947 3E00              mvi A,[__r1]
 0949 5300              mov [__r1],A
 094B 550000            mov [__r0],0
 094E 3C0000            cmp [__r0],0
 0951 B005              jnz X41
 0953 3963              cmp A,99
 0955 A00E              jz L150
 0957           X41:
 0957 62D000            mov REG[0xd0],>__r0
 095A 3C0000            cmp [__r0],0
 095D B045              jnz L148
 095F 3C0043            cmp [__r1],67
 0962 B040              jnz L148
 0964           X42:
 0964           L150:
 0964                   .dbline 485
 0964           ;                                       {
 0964                   .dbline 486
 0964           ;                                               COMP_SERIAL_CmdReset();
 0964 10                push X
 0965 7C0000            xcall _COMP_SERIAL_CmdReset
 0968 20                pop X
 0969                   .dbline 487
 0969           ;                                               if(pingModule(ID))
 0969 62D000            mov REG[0xd0],>__r0
 096C 5204              mov A,[X+4]
 096E 5300              mov [__r1],A
 0970 5000              mov A,0
 0972 08                push A
 0973 5100              mov A,[__r1]
 0975 08                push A
 0976 7C0061            xcall _pingModule
 0979 38FE              add SP,-2
 097B 62D000            mov REG[0xd0],>__r0
 097E 3C0000            cmp [__r0],0
 0981 B006              jnz X43
 0983 3C0000            cmp [__r1],0
 0986 A01C              jz L151
 0988           X43:
 0988                   .dbline 488
 0988           ;                                               {       
 0988                   .dbline 489
 0988           ;                                                       configToggle(PC_MODE);
 0988 5000              mov A,0
 098A 08                push A
 098B 5002              mov A,2
 098D 08                push A
 098E 916F              xcall _configToggle
 0990 38FE              add SP,-2
 0992                   .dbline 491
 0992           ;                                                                                               
 0992           ;                                                       COMP_SERIAL_PutChar(PARAM[1]);
 0992 10                push X
 0993 62D000            mov REG[0xd0],>_PARAM
 0996 5101              mov A,[_PARAM+1]
 0998 7C0000            xcall _COMP_SERIAL_PutChar
 099B 20                pop X
 099C                   .dbline 492
 099C           ;                                                       COMP_SERIAL_PutChar('\n');
 099C 10                push X
 099D 500A              mov A,10
 099F 7C0000            xcall _COMP_SERIAL_PutChar
 09A2 20                pop X
 09A3                   .dbline 493
 09A3           ;                                               }
 09A3           L151:
 09A3                   .dbline 494
 09A3           ;                                       }
 09A3           L148:
 09A3           L144:
 09A3           L128:
 09A3           L110:
 09A3                   .dbline 495
 09A3           ;                               }
 09A3           L107:
 09A3                   .dbline 496
 09A3           ;                       }
 09A3           L105:
 09A3                   .dbline 497
 09A3           ;               }
 09A3           L102:
 09A3           L84:
 09A3           L81:
 09A3                   .dbline 498
 09A3           ;       }
 09A3           L78:
 09A3                   .dbline 500
 09A3           ;       
 09A3           ;       if(STATE != PC_MODE)
 09A3 62D000            mov REG[0xd0],>_STATE
 09A6 3C0000            cmp [_STATE],0
 09A9 B006              jnz X44
 09AB 3C0102            cmp [_STATE+1],2
 09AE A00D              jz L154
 09B0           X44:
 09B0                   .dbline 501
 09B0           ;       {
 09B0                   .dbline 502
 09B0           ;               configToggle(PC_MODE);
 09B0 5000              mov A,0
 09B2 08                push A
 09B3 5002              mov A,2
 09B5 08                push A
 09B6 9147              xcall _configToggle
 09B8 38FE              add SP,-2
 09BA                   .dbline 503
 09BA           ;       }
 09BA 800A              xjmp L155
 09BC           L154:
 09BC                   .dbline 505
 09BC           ;       else
 09BC           ;       {
 09BC                   .dbline 506
 09BC           ;               TIMEOUT = 0;
 09BC 62D000            mov REG[0xd0],>_TIMEOUT
 09BF 550100            mov [_TIMEOUT+1],0
 09C2 550000            mov [_TIMEOUT],0
 09C5                   .dbline 507
 09C5           ;       }
 09C5           L155:
 09C5                   .dbline -2
 09C5           L77:
 09C5 38F8              add SP,-8
 09C7 20                pop X
 09C8                   .dbline 0 ; func end
 09C8 7F                ret
 09C9                   .dbsym l tempByte 7 c
 09C9                   .dbsym l angle 5 A[2:2]c
 09C9                   .dbsym l ID 4 c
 09C9                   .dbsym l total 2 I
 09C9                   .dbsym l param 0 pc
 09C9                   .dbend
 09C9                   .dbfunc e servoInstruction _servoInstruction fV
 09C9           ;          total -> X+1
 09C9           ;       checksum -> X+0
 09C9           ;          value -> X-8
 09C9           ;        address -> X-7
 09C9           ;    instruction -> X-6
 09C9           ;         length -> X-5
 09C9           ;             id -> X-4
 09C9           _servoInstruction::
 09C9                   .dbline -1
 09C9 10                push X
 09CA 4F                mov X,SP
 09CB 3803              add SP,3
 09CD                   .dbline 513
 09CD           ; }
 09CD           ; 
 09CD           ; // This function receives a destination, command length, instruction type, address, and value.
 09CD           ; // With these parameters, the function sends a packet to the communication bus.
 09CD           ; void servoInstruction(char id, char length, char instruction, char address, char value)
 09CD           ; {
 09CD                   .dbline 517
 09CD           ;       char checksum;
 09CD           ;       int total;
 09CD           ;       
 09CD           ;       total = id + length + instruction + address + value;
 09CD 62D000            mov REG[0xd0],>__r0
 09D0 52FB              mov A,[X-5]
 09D2 5300              mov [__r1],A
 09D4 550000            mov [__r0],0
 09D7 52FC              mov A,[X-4]
 09D9 0200              add A,[__r1]
 09DB 5300              mov [__r1],A
 09DD 5000              mov A,0
 09DF 0A00              adc A,[__r0]
 09E1 5300              mov [__r0],A
 09E3 52FA              mov A,[X-6]
 09E5 0400              add [__r1],A
 09E7 0E0000            adc [__r0],0
 09EA 52F9              mov A,[X-7]
 09EC 0400              add [__r1],A
 09EE 0E0000            adc [__r0],0
 09F1 52F8              mov A,[X-8]
 09F3 5300              mov [__r3],A
 09F5 550000            mov [__r2],0
 09F8 5100              mov A,[__r1]
 09FA 0200              add A,[__r3]
 09FC 5402              mov [X+2],A
 09FE 5100              mov A,[__r0]
 0A00 0A00              adc A,[__r2]
 0A02 5401              mov [X+1],A
 0A04                   .dbline 520
 0A04           ;       
 0A04           ;       // Calculate the checksum value for our servo communication.
 0A04           ;       checksum = 255-(total%256);
 0A04 5001              mov A,1
 0A06 08                push A
 0A07 5000              mov A,0
 0A09 08                push A
 0A0A 5201              mov A,[X+1]
 0A0C 08                push A
 0A0D 5202              mov A,[X+2]
 0A0F 08                push A
 0A10 7C0000            xcall __divmod_16X16_16
 0A13 38FE              add SP,-2
 0A15 18                pop A
 0A16 5300              mov [__r1],A
 0A18 18                pop A
 0A19 50FF              mov A,-1
 0A1B 1200              sub A,[__r1]
 0A1D 5400              mov [X+0],A
 0A1F                   .dbline 523
 0A1F           ;       
 0A1F           ;       // Talk to the servo.
 0A1F           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0A1F 10                push X
 0A20 50FF              mov A,-1
 0A22 7C0000            xcall _TX_REPEATER_PutChar
 0A25 20                pop X
 0A26                   .dbline 524
 0A26           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0A26 10                push X
 0A27 50FF              mov A,-1
 0A29 7C0000            xcall _TX_REPEATER_PutChar
 0A2C 20                pop X
 0A2D                   .dbline 525
 0A2D           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0A2D 10                push X
 0A2E 52FC              mov A,[X-4]
 0A30 7C0000            xcall _TX_REPEATER_PutChar
 0A33 20                pop X
 0A34                   .dbline 526
 0A34           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0A34 10                push X
 0A35 52FB              mov A,[X-5]
 0A37 7C0000            xcall _TX_REPEATER_PutChar
 0A3A 20                pop X
 0A3B                   .dbline 527
 0A3B           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0A3B 10                push X
 0A3C 52FA              mov A,[X-6]
 0A3E 7C0000            xcall _TX_REPEATER_PutChar
 0A41 20                pop X
 0A42                   .dbline 528
 0A42           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0A42 10                push X
 0A43 52F9              mov A,[X-7]
 0A45 7C0000            xcall _TX_REPEATER_PutChar
 0A48 20                pop X
 0A49                   .dbline 529
 0A49           ;       TX_REPEATER_PutChar(value);                     // The value to write or number of bytes to read.
 0A49 10                push X
 0A4A 52F8              mov A,[X-8]
 0A4C 7C0000            xcall _TX_REPEATER_PutChar
 0A4F 20                pop X
 0A50                   .dbline 530
 0A50           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0A50 10                push X
 0A51 5200              mov A,[X+0]
 0A53 7C0000            xcall _TX_REPEATER_PutChar
 0A56 20                pop X
 0A57                   .dbline 536
 0A57           ;       
 0A57           ;       // Wait for the transmission to finish.
 0A57           ;       //while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0A57           ;       
 0A57           ;       // Make completely sure we're done.
 0A57           ;       xmitWait();
 0A57 9300              xcall _xmitWait
 0A59                   .dbline -2
 0A59           L156:
 0A59 38FD              add SP,-3
 0A5B 20                pop X
 0A5C                   .dbline 0 ; func end
 0A5C 7F                ret
 0A5D                   .dbsym l total 1 I
 0A5D                   .dbsym l checksum 0 c
 0A5D                   .dbsym l value -8 c
 0A5D                   .dbsym l address -7 c
 0A5D                   .dbsym l instruction -6 c
 0A5D                   .dbsym l length -5 c
 0A5D                   .dbsym l id -4 c
 0A5D                   .dbend
 0A5D                   .dbfunc e longServoInstruction _longServoInstruction fV
 0A5D           ;          total -> X+1
 0A5D           ;       checksum -> X+0
 0A5D           ;         value2 -> X-9
 0A5D           ;         value1 -> X-8
 0A5D           ;        address -> X-7
 0A5D           ;    instruction -> X-6
 0A5D           ;         length -> X-5
 0A5D           ;             id -> X-4
 0A5D           _longServoInstruction::
 0A5D                   .dbline -1
 0A5D 10                push X
 0A5E 4F                mov X,SP
 0A5F 3803              add SP,3
 0A61                   .dbline 541
 0A61           ; }
 0A61           ; 
 0A61           ; // This function receives a destination, command length, instruction type, address, and two values.
 0A61           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
 0A61           ; {
 0A61                   .dbline 545
 0A61           ;       char checksum;
 0A61           ;       int total;
 0A61           ;       
 0A61           ;       total = id + length + instruction + address + value1 + value2;
 0A61 62D000            mov REG[0xd0],>__r0
 0A64 52FB              mov A,[X-5]
 0A66 5300              mov [__r1],A
 0A68 550000            mov [__r0],0
 0A6B 52FC              mov A,[X-4]
 0A6D 0200              add A,[__r1]
 0A6F 5300              mov [__r1],A
 0A71 5000              mov A,0
 0A73 0A00              adc A,[__r0]
 0A75 5300              mov [__r0],A
 0A77 52FA              mov A,[X-6]
 0A79 0400              add [__r1],A
 0A7B 0E0000            adc [__r0],0
 0A7E 52F9              mov A,[X-7]
 0A80 0400              add [__r1],A
 0A82 0E0000            adc [__r0],0
 0A85 52F8              mov A,[X-8]
 0A87 0400              add [__r1],A
 0A89 0E0000            adc [__r0],0
 0A8C 52F7              mov A,[X-9]
 0A8E 5300              mov [__r3],A
 0A90 550000            mov [__r2],0
 0A93 5100              mov A,[__r1]
 0A95 0200              add A,[__r3]
 0A97 5402              mov [X+2],A
 0A99 5100              mov A,[__r0]
 0A9B 0A00              adc A,[__r2]
 0A9D 5401              mov [X+1],A
 0A9F                   .dbline 548
 0A9F           ;       
 0A9F           ;       // Calculate the checksum value for our servo communication.
 0A9F           ;       checksum = 255-(total%256);
 0A9F 5001              mov A,1
 0AA1 08                push A
 0AA2 5000              mov A,0
 0AA4 08                push A
 0AA5 5201              mov A,[X+1]
 0AA7 08                push A
 0AA8 5202              mov A,[X+2]
 0AAA 08                push A
 0AAB 7C0000            xcall __divmod_16X16_16
 0AAE 38FE              add SP,-2
 0AB0 18                pop A
 0AB1 5300              mov [__r1],A
 0AB3 18                pop A
 0AB4 50FF              mov A,-1
 0AB6 1200              sub A,[__r1]
 0AB8 5400              mov [X+0],A
 0ABA                   .dbline 551
 0ABA           ;       
 0ABA           ;       // Talk to the servo.
 0ABA           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0ABA 10                push X
 0ABB 50FF              mov A,-1
 0ABD 7C0000            xcall _TX_REPEATER_PutChar
 0AC0 20                pop X
 0AC1                   .dbline 552
 0AC1           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0AC1 10                push X
 0AC2 50FF              mov A,-1
 0AC4 7C0000            xcall _TX_REPEATER_PutChar
 0AC7 20                pop X
 0AC8                   .dbline 553
 0AC8           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0AC8 10                push X
 0AC9 52FC              mov A,[X-4]
 0ACB 7C0000            xcall _TX_REPEATER_PutChar
 0ACE 20                pop X
 0ACF                   .dbline 554
 0ACF           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0ACF 10                push X
 0AD0 52FB              mov A,[X-5]
 0AD2 7C0000            xcall _TX_REPEATER_PutChar
 0AD5 20                pop X
 0AD6                   .dbline 555
 0AD6           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0AD6 10                push X
 0AD7 52FA              mov A,[X-6]
 0AD9 7C0000            xcall _TX_REPEATER_PutChar
 0ADC 20                pop X
 0ADD                   .dbline 556
 0ADD           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0ADD 10                push X
 0ADE 52F9              mov A,[X-7]
 0AE0 7C0000            xcall _TX_REPEATER_PutChar
 0AE3 20                pop X
 0AE4                   .dbline 557
 0AE4           ;       TX_REPEATER_PutChar(value1);            // The first value to write.
 0AE4 10                push X
 0AE5 52F8              mov A,[X-8]
 0AE7 7C0000            xcall _TX_REPEATER_PutChar
 0AEA 20                pop X
 0AEB                   .dbline 558
 0AEB           ;       TX_REPEATER_PutChar(value2);            // The first value to write.
 0AEB 10                push X
 0AEC 52F7              mov A,[X-9]
 0AEE 7C0000            xcall _TX_REPEATER_PutChar
 0AF1 20                pop X
 0AF2                   .dbline 559
 0AF2           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0AF2 10                push X
 0AF3 5200              mov A,[X+0]
 0AF5 7C0000            xcall _TX_REPEATER_PutChar
 0AF8 20                pop X
 0AF9                   .dbline 565
 0AF9           ;       
 0AF9           ;       // Wait for the transmission to finish.
 0AF9           ;       //while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0AF9           ;       
 0AF9           ;       // Make completely sure we're done.
 0AF9           ;       xmitWait();
 0AF9 925E              xcall _xmitWait
 0AFB                   .dbline -2
 0AFB           L157:
 0AFB 38FD              add SP,-3
 0AFD 20                pop X
 0AFE                   .dbline 0 ; func end
 0AFE 7F                ret
 0AFF                   .dbsym l total 1 I
 0AFF                   .dbsym l checksum 0 c
 0AFF                   .dbsym l value2 -9 c
 0AFF                   .dbsym l value1 -8 c
 0AFF                   .dbsym l address -7 c
 0AFF                   .dbsym l instruction -6 c
 0AFF                   .dbsym l length -5 c
 0AFF                   .dbsym l id -4 c
 0AFF                   .dbend
 0AFF                   .dbfunc e configToggle _configToggle fV
 0AFF           ;           mode -> X-5
 0AFF           _configToggle::
 0AFF                   .dbline -1
 0AFF 10                push X
 0B00 4F                mov X,SP
 0B01                   .dbline 571
 0B01           ; }
 0B01           ; 
 0B01           ; // This function allows the program to pass an RX or TX mode flag for switching between modes on the
 0B01           ; // half duplex UART serial communication line.
 0B01           ; void configToggle(int mode)
 0B01           ; {
 0B01                   .dbline 573
 0B01           ;       // Disconnect from the global bus and leave the pin high.
 0B01           ;       PRT0DR |= 0b10000000;
 0B01 430080            or REG[0],-128
 0B04                   .dbline 574
 0B04           ;       PRT0GS &= 0b01111111;
 0B04 41027F            and REG[0x2],127
 0B07                   .dbline 578
 0B07           ; 
 0B07           ;       // Unload the configuration of the current state.
 0B07           ;       // If there is no state, blindly wipe all configurations.
 0B07           ;       if(STATE)
 0B07 62D000            mov REG[0xd0],>_STATE
 0B0A 3C0000            cmp [_STATE],0
 0B0D B006              jnz X45
 0B0F 3C0100            cmp [_STATE+1],0
 0B12 A010              jz L159
 0B14           X45:
 0B14                   .dbline 579
 0B14           ;       {
 0B14                   .dbline 580
 0B14           ;               unloadConfig(STATE);
 0B14 62D000            mov REG[0xd0],>_STATE
 0B17 5100              mov A,[_STATE]
 0B19 08                push A
 0B1A 5101              mov A,[_STATE+1]
 0B1C 08                push A
 0B1D 90D9              xcall _unloadConfig
 0B1F 38FE              add SP,-2
 0B21                   .dbline 581
 0B21           ;       }
 0B21 8003              xjmp L160
 0B23           L159:
 0B23                   .dbline 583
 0B23           ;       else
 0B23           ;       {
 0B23                   .dbline 584
 0B23           ;               unloadAllConfigs();
 0B23 90C9              xcall _unloadAllConfigs
 0B25                   .dbline 585
 0B25           ;       }
 0B25           L160:
 0B25                   .dbline 587
 0B25           ;       
 0B25           ;       if(mode == PC_MODE)
 0B25 3DFB00            cmp [X-5],0
 0B28 B032              jnz L161
 0B2A 3DFC02            cmp [X-4],2
 0B2D B02D              jnz L161
 0B2F           X46:
 0B2F                   .dbline 588
 0B2F           ;       {
 0B2F                   .dbline 589
 0B2F           ;               LoadConfig_pc_listener();
 0B2F 7C0000            xcall _LoadConfig_pc_listener
 0B32                   .dbline 592
 0B32           ;               
 0B32           ;               //COMP_SERIAL_CmdReset();                                               // Initializes the RX buffer
 0B32           ;               COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
 0B32 10                push X
 0B33 5001              mov A,1
 0B35 7C0000            xcall _COMP_SERIAL_IntCntl
 0B38 20                pop X
 0B39                   .dbline 593
 0B39           ;               COMP_SERIAL_Start(UART_PARITY_NONE);                    // Starts the UART.
 0B39 10                push X
 0B3A 5000              mov A,0
 0B3C 7C0000            xcall _COMP_SERIAL_Start
 0B3F 20                pop X
 0B40                   .dbline 595
 0B40           ;               
 0B40           ;               TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);             // Start the TX repeater.
 0B40 10                push X
 0B41 5000              mov A,0
 0B43 7C0000            xcall _TX_REPEATER_Start
 0B46 20                pop X
 0B47                   .dbline 597
 0B47           ;               
 0B47           ;               TIMEOUT = 0;
 0B47 62D000            mov REG[0xd0],>_TIMEOUT
 0B4A 550100            mov [_TIMEOUT+1],0
 0B4D 550000            mov [_TIMEOUT],0
 0B50                   .dbline 598
 0B50           ;               STATE = PC_MODE;
 0B50 62D000            mov REG[0xd0],>_STATE
 0B53 550102            mov [_STATE+1],2
 0B56 550000            mov [_STATE],0
 0B59                   .dbline 599
 0B59           ;       }
 0B59 807A              xjmp L162
 0B5B           L161:
 0B5B                   .dbline 600
 0B5B           ;       else if(mode == RX_MODE)
 0B5B 3DFB00            cmp [X-5],0
 0B5E B02C              jnz L163
 0B60 3DFC01            cmp [X-4],1
 0B63 B027              jnz L163
 0B65           X47:
 0B65                   .dbline 601
 0B65           ;       {
 0B65                   .dbline 602
 0B65           ;               LoadConfig_receiver_config();
 0B65 7C0000            xcall _LoadConfig_receiver_config
 0B68                   .dbline 607
 0B68           ;               
 0B68           ;               // Clear the buffer.
 0B68           ;               //RECEIVE_CmdReset();
 0B68           ;               // Start the receiver.
 0B68           ;               RECEIVE_Start(RECEIVE_PARITY_NONE);
 0B68 10                push X
 0B69 5000              mov A,0
 0B6B 7C0000            xcall _RECEIVE_Start
 0B6E 20                pop X
 0B6F                   .dbline 610
 0B6F           ;               
 0B6F           ;               // Start response timeout timer and enable its interrupt routine.
 0B6F           ;               TIMEOUT = 0;
 0B6F 62D000            mov REG[0xd0],>_TIMEOUT
 0B72 550100            mov [_TIMEOUT+1],0
 0B75 550000            mov [_TIMEOUT],0
 0B78                   .dbline 611
 0B78           ;               RX_TIMEOUT_EnableInt();
 0B78 10                push X
 0B79 7C0000            xcall _RX_TIMEOUT_EnableInt
 0B7C                   .dbline 612
 0B7C           ;               RX_TIMEOUT_Start();
 0B7C 7C0000            xcall _RX_TIMEOUT_Start
 0B7F 20                pop X
 0B80                   .dbline 614
 0B80           ;               
 0B80           ;               STATE = RX_MODE;
 0B80 62D000            mov REG[0xd0],>_STATE
 0B83 550101            mov [_STATE+1],1
 0B86 550000            mov [_STATE],0
 0B89                   .dbline 615
 0B89           ;       }
 0B89 804A              xjmp L164
 0B8B           L163:
 0B8B                   .dbline 616
 0B8B           ;       else if(mode == TX_MODE)
 0B8B 3DFB00            cmp [X-5],0
 0B8E B045              jnz L165
 0B90 3DFC00            cmp [X-4],0
 0B93 B040              jnz L165
 0B95           X48:
 0B95                   .dbline 617
 0B95           ;       {
 0B95                   .dbline 618
 0B95           ;               LoadConfig_transmitter_config();
 0B95 7C0000            xcall _LoadConfig_transmitter_config
 0B98                   .dbline 620
 0B98           ;               // Start the transmitter.
 0B98           ;               TRANSMIT_Start(TRANSMIT_PARITY_NONE);
 0B98 10                push X
 0B99 5000              mov A,0
 0B9B 7C0000            xcall _TRANSMIT_Start
 0B9E 20                pop X
 0B9F                   .dbline 622
 0B9F           ;               
 0B9F           ;               TIMEOUT = 0;
 0B9F 62D000            mov REG[0xd0],>_TIMEOUT
 0BA2 550100            mov [_TIMEOUT+1],0
 0BA5 550000            mov [_TIMEOUT],0
 0BA8                   .dbline 623
 0BA8           ;               TX_TIMEOUT_EnableInt(); // Make sure interrupts are enabled.
 0BA8 10                push X
 0BA9 7C0000            xcall _TX_TIMEOUT_EnableInt
 0BAC                   .dbline 624
 0BAC           ;               TX_TIMEOUT_Start();             // Start the timer.
 0BAC 7C0000            xcall _TX_TIMEOUT_Start
 0BAF 20                pop X
 0BB0           L167:
 0BB0                   .dbline 627
 0BB0           ;               
 0BB0           ;               while(!TIMEOUT)
 0BB0           ;               {
 0BB0                   .dbline 630
 0BB0           ;                       // Do nothing while we wait for one timeout period.
 0BB0           ;                       // This is to allow everyone to get in the right configuration.
 0BB0           ;               }
 0BB0           L168:
 0BB0                   .dbline 626
 0BB0 62D000            mov REG[0xd0],>_TIMEOUT
 0BB3 3C0000            cmp [_TIMEOUT],0
 0BB6 B006              jnz X49
 0BB8 3C0100            cmp [_TIMEOUT+1],0
 0BBB AFF4              jz L167
 0BBD           X49:
 0BBD                   .dbline 632
 0BBD           ;               
 0BBD           ;               TX_TIMEOUT_Stop();              // Stop the timer.
 0BBD 10                push X
 0BBE 7C0000            xcall _TX_TIMEOUT_Stop
 0BC1 20                pop X
 0BC2                   .dbline 633
 0BC2           ;               TIMEOUT = 0;                    // Reset the timeout flag.
 0BC2 62D000            mov REG[0xd0],>_TIMEOUT
 0BC5 550100            mov [_TIMEOUT+1],0
 0BC8 550000            mov [_TIMEOUT],0
 0BCB                   .dbline 635
 0BCB           ;               
 0BCB           ;               STATE = TX_MODE;
 0BCB 62D000            mov REG[0xd0],>_STATE
 0BCE 550100            mov [_STATE+1],0
 0BD1 550000            mov [_STATE],0
 0BD4                   .dbline 636
 0BD4           ;       }
 0BD4           L165:
 0BD4           L164:
 0BD4           L162:
 0BD4                   .dbline 641
 0BD4           ;       
 0BD4           ;       // Make sure to keep the LED on (active low).
 0BD4           ;       //PRT2DR &= 0b11111110;
 0BD4           ;       
 0BD4           ;       if(STATE == TX_MODE)
 0BD4 62D000            mov REG[0xd0],>_STATE
 0BD7 3C0000            cmp [_STATE],0
 0BDA B00B              jnz L170
 0BDC 3C0100            cmp [_STATE+1],0
 0BDF B006              jnz L170
 0BE1           X50:
 0BE1                   .dbline 642
 0BE1           ;       {
 0BE1                   .dbline 643
 0BE1           ;               PRT1DR |= 0b00000001;
 0BE1 430401            or REG[0x4],1
 0BE4                   .dbline 644
 0BE4           ;       }
 0BE4 8004              xjmp L171
 0BE6           L170:
 0BE6                   .dbline 646
 0BE6           ;       else
 0BE6           ;       {
 0BE6                   .dbline 647
 0BE6           ;               PRT1DR &= 0b11111110;
 0BE6 4104FE            and REG[0x4],-2
 0BE9                   .dbline 649
 0BE9           ;               
 0BE9           ;       }
 0BE9           L171:
 0BE9                   .dbline 652
 0BE9           ;       
 0BE9           ;       // Reconnect to the global bus.
 0BE9           ;       PRT0GS |= 0b10000000;
 0BE9 430280            or REG[0x2],-128
 0BEC                   .dbline -2
 0BEC           L158:
 0BEC 20                pop X
 0BED                   .dbline 0 ; func end
 0BED 7F                ret
 0BEE                   .dbsym l mode -5 I
 0BEE                   .dbend
 0BEE                   .dbfunc e unloadAllConfigs _unloadAllConfigs fV
 0BEE           _unloadAllConfigs::
 0BEE                   .dbline -1
 0BEE                   .dbline 658
 0BEE           ; }
 0BEE           ; 
 0BEE           ; // This function blindly unloads all user configurations. This will be called once,
 0BEE           ; // when the system initially has no known state.
 0BEE           ; void unloadAllConfigs(void)
 0BEE           ; {
 0BEE                   .dbline 659
 0BEE           ;       UnloadConfig_pc_listener();
 0BEE 7C0000            xcall _UnloadConfig_pc_listener
 0BF1                   .dbline 660
 0BF1           ;       UnloadConfig_receiver_config();
 0BF1 7C0000            xcall _UnloadConfig_receiver_config
 0BF4                   .dbline 661
 0BF4           ;       UnloadConfig_transmitter_config();
 0BF4 7C0000            xcall _UnloadConfig_transmitter_config
 0BF7                   .dbline -2
 0BF7           L172:
 0BF7                   .dbline 0 ; func end
 0BF7 7F                ret
 0BF8                   .dbend
 0BF8                   .dbfunc e unloadConfig _unloadConfig fV
 0BF8           ;     config_num -> X-5
 0BF8           _unloadConfig::
 0BF8                   .dbline -1
 0BF8 10                push X
 0BF9 4F                mov X,SP
 0BFA                   .dbline 667
 0BFA           ; }
 0BFA           ; 
 0BFA           ; // This function unloads the configuration corresponding to the config number passed to it.
 0BFA           ; // We do this instead of unloadAllConfigs to cut down on set up time.
 0BFA           ; void unloadConfig(int config_num)
 0BFA           ; {
 0BFA                   .dbline 668
 0BFA           ;       if(config_num == PC_MODE)
 0BFA 3DFB00            cmp [X-5],0
 0BFD B00B              jnz L174
 0BFF 3DFC02            cmp [X-4],2
 0C02 B006              jnz L174
 0C04           X51:
 0C04                   .dbline 669
 0C04           ;       {
 0C04                   .dbline 670
 0C04           ;               UnloadConfig_pc_listener();
 0C04 7C0000            xcall _UnloadConfig_pc_listener
 0C07                   .dbline 671
 0C07           ;       }
 0C07 801D              xjmp L175
 0C09           L174:
 0C09                   .dbline 672
 0C09           ;       else if(config_num == RX_MODE)
 0C09 3DFB00            cmp [X-5],0
 0C0C B00B              jnz L176
 0C0E 3DFC01            cmp [X-4],1
 0C11 B006              jnz L176
 0C13           X52:
 0C13                   .dbline 673
 0C13           ;       {
 0C13                   .dbline 674
 0C13           ;               UnloadConfig_receiver_config();
 0C13 7C0000            xcall _UnloadConfig_receiver_config
 0C16                   .dbline 675
 0C16           ;       }
 0C16 800E              xjmp L177
 0C18           L176:
 0C18                   .dbline 676
 0C18           ;       else if(config_num == TX_MODE)
 0C18 3DFB00            cmp [X-5],0
 0C1B B009              jnz L178
 0C1D 3DFC00            cmp [X-4],0
 0C20 B004              jnz L178
 0C22           X53:
 0C22                   .dbline 677
 0C22           ;       {
 0C22                   .dbline 678
 0C22           ;               UnloadConfig_transmitter_config();
 0C22 7C0000            xcall _UnloadConfig_transmitter_config
 0C25                   .dbline 679
 0C25           ;       }
 0C25           L178:
 0C25           L177:
 0C25           L175:
 0C25                   .dbline -2
 0C25           L173:
 0C25 20                pop X
 0C26                   .dbline 0 ; func end
 0C26 7F                ret
 0C27                   .dbsym l config_num -5 I
 0C27                   .dbend
 0C27                   .dbfunc e initializeSlaves _initializeSlaves fV
 0C27           ;   num_timeouts -> X+0
 0C27           _initializeSlaves::
 0C27                   .dbline -1
 0C27 10                push X
 0C28 4F                mov X,SP
 0C29 3802              add SP,2
 0C2B                   .dbline 683
 0C2B           ; }
 0C2B           ; 
 0C2B           ; void initializeSlaves(void)
 0C2B           ; {
 0C2B                   .dbline 684
 0C2B           ;       int num_timeouts = 0;
 0C2B 560100            mov [X+1],0
 0C2E 560000            mov [X+0],0
 0C31                   .dbline 686
 0C31           ;       
 0C31           ;       sayHello();
 0C31 7C0391            xcall _sayHello
 0C34 810A              xjmp L182
 0C36           L181:
 0C36                   .dbline 691
 0C36           ;       
 0C36           ;       // This loop continuously probes and listens at intervals
 0C36           ;       // set by the RX_TIMEOUT_DURATION variable.
 0C36           ;       while(num_timeouts < MAX_TIMEOUTS)
 0C36           ;       {                                       
 0C36                   .dbline 692
 0C36           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 0C36 10                push X
 0C37 7C0000            xcall _RECEIVE_cReadChar
 0C3A 62D000            mov REG[0xd0],>__r0
 0C3D 20                pop X
 0C3E 39FC              cmp A,-4
 0C40 B0D8              jnz L184
 0C42                   .dbline 693
 0C42           ;               {       
 0C42                   .dbline 694
 0C42           ;                       if(validTransmission())
 0C42 7C03E7            xcall _validTransmission
 0C45 62D000            mov REG[0xd0],>__r0
 0C48 3C0000            cmp [__r0],0
 0C4B B006              jnz X54
 0C4D 3C0000            cmp [__r1],0
 0C50 A0EE              jz L185
 0C52           X54:
 0C52                   .dbline 695
 0C52           ;                       {
 0C52                   .dbline 696
 0C52           ;                               if(COMMAND_TYPE == HELLO_BYTE)  // Someone else is out there!
 0C52 62D000            mov REG[0xd0],>_COMMAND_TYPE
 0C55 3C00C8            cmp [_COMMAND_TYPE],-56
 0C58 B0E6              jnz L185
 0C5A                   .dbline 697
 0C5A           ;                               {
 0C5A                   .dbline 699
 0C5A           ;                                       // If this is for me, assign them an ID.
 0C5A           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 0C5A 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0C5D 3C0000            cmp [_COMMAND_DESTINATION],0
 0C60 B0DE              jnz L185
 0C62                   .dbline 700
 0C62           ;                                       {
 0C62                   .dbline 701
 0C62           ;                                               NUM_MODULES++;                  // Increment the number of modules connected.
 0C62 62D000            mov REG[0xd0],>_NUM_MODULES
 0C65 7601              inc [_NUM_MODULES+1]
 0C67 0E0000            adc [_NUM_MODULES],0
 0C6A                   .dbline 702
 0C6A           ;                                               num_timeouts = 0;               // Reset number of timeouts since we found someone.
 0C6A 560100            mov [X+1],0
 0C6D 560000            mov [X+0],0
 0C70                   .dbline 704
 0C70           ;                       
 0C70           ;                                               if(!assignID(NUM_MODULES))
 0C70 5100              mov A,[_NUM_MODULES]
 0C72 08                push A
 0C73 5101              mov A,[_NUM_MODULES+1]
 0C75 08                push A
 0C76 7C015C            xcall _assignID
 0C79 38FE              add SP,-2
 0C7B 62D000            mov REG[0xd0],>__r0
 0C7E 3C0000            cmp [__r0],0
 0C81 B0BD              jnz L185
 0C83 3C0000            cmp [__r1],0
 0C86 B0B8              jnz L185
 0C88           X55:
 0C88                   .dbline 705
 0C88           ;                                               {
 0C88                   .dbline 709
 0C88           ;                                                       // If the module did not respond that the ID was assigned,
 0C88           ;                                                       // make an effort to ping it in case that transmission was lost
 0C88           ;                                                       // before ultimately deciding that the module didn't configure.
 0C88           ;                                                       if(!pingModule(NUM_MODULES))
 0C88 62D000            mov REG[0xd0],>_NUM_MODULES
 0C8B 5100              mov A,[_NUM_MODULES]
 0C8D 08                push A
 0C8E 5101              mov A,[_NUM_MODULES+1]
 0C90 08                push A
 0C91 7C0061            xcall _pingModule
 0C94 38FE              add SP,-2
 0C96 62D000            mov REG[0xd0],>__r0
 0C99 3C0000            cmp [__r0],0
 0C9C B0A2              jnz L185
 0C9E 3C0000            cmp [__r1],0
 0CA1 B09D              jnz L185
 0CA3           X56:
 0CA3                   .dbline 710
 0CA3           ;                                                       {
 0CA3                   .dbline 711
 0CA3           ;                                                               if(!pingModule(NUM_MODULES))
 0CA3 62D000            mov REG[0xd0],>_NUM_MODULES
 0CA6 5100              mov A,[_NUM_MODULES]
 0CA8 08                push A
 0CA9 5101              mov A,[_NUM_MODULES+1]
 0CAB 08                push A
 0CAC 7C0061            xcall _pingModule
 0CAF 38FE              add SP,-2
 0CB1 62D000            mov REG[0xd0],>__r0
 0CB4 3C0000            cmp [__r0],0
 0CB7 B087              jnz L185
 0CB9 3C0000            cmp [__r1],0
 0CBC B082              jnz L185
 0CBE           X57:
 0CBE                   .dbline 712
 0CBE           ;                                                               {
 0CBE                   .dbline 713
 0CBE           ;                                                                       if(!pingModule(NUM_MODULES))
 0CBE 62D000            mov REG[0xd0],>_NUM_MODULES
 0CC1 5100              mov A,[_NUM_MODULES]
 0CC3 08                push A
 0CC4 5101              mov A,[_NUM_MODULES+1]
 0CC6 08                push A
 0CC7 7C0061            xcall _pingModule
 0CCA 38FE              add SP,-2
 0CCC 62D000            mov REG[0xd0],>__r0
 0CCF 3C0000            cmp [__r0],0
 0CD2 B06C              jnz L185
 0CD4 3C0000            cmp [__r1],0
 0CD7 B067              jnz L185
 0CD9           X58:
 0CD9                   .dbline 714
 0CD9           ;                                                                       {
 0CD9                   .dbline 715
 0CD9           ;                                                                               if(!pingModule(NUM_MODULES))
 0CD9 62D000            mov REG[0xd0],>_NUM_MODULES
 0CDC 5100              mov A,[_NUM_MODULES]
 0CDE 08                push A
 0CDF 5101              mov A,[_NUM_MODULES+1]
 0CE1 08                push A
 0CE2 7C0061            xcall _pingModule
 0CE5 38FE              add SP,-2
 0CE7 62D000            mov REG[0xd0],>__r0
 0CEA 3C0000            cmp [__r0],0
 0CED B051              jnz L185
 0CEF 3C0000            cmp [__r1],0
 0CF2 B04C              jnz L185
 0CF4           X59:
 0CF4                   .dbline 716
 0CF4           ;                                                                               {
 0CF4                   .dbline 717
 0CF4           ;                                                                                       if(!pingModule(NUM_MODULES))
 0CF4 62D000            mov REG[0xd0],>_NUM_MODULES
 0CF7 5100              mov A,[_NUM_MODULES]
 0CF9 08                push A
 0CFA 5101              mov A,[_NUM_MODULES+1]
 0CFC 08                push A
 0CFD 7C0061            xcall _pingModule
 0D00 38FE              add SP,-2
 0D02 62D000            mov REG[0xd0],>__r0
 0D05 3C0000            cmp [__r0],0
 0D08 B036              jnz L185
 0D0A 3C0000            cmp [__r1],0
 0D0D B031              jnz L185
 0D0F           X60:
 0D0F                   .dbline 718
 0D0F           ;                                                                                       {
 0D0F                   .dbline 719
 0D0F           ;                                                                                               NUM_MODULES--;
 0D0F 62D000            mov REG[0xd0],>_NUM_MODULES
 0D12 7A01              dec [_NUM_MODULES+1]
 0D14 1E0000            sbb [_NUM_MODULES],0
 0D17                   .dbline 720
 0D17           ;                                                                                       }
 0D17                   .dbline 721
 0D17           ;                                                                               }
 0D17                   .dbline 722
 0D17           ;                                                                       }
 0D17                   .dbline 723
 0D17           ;                                                               }
 0D17                   .dbline 724
 0D17           ;                                                       }
 0D17                   .dbline 725
 0D17           ;                                               }
 0D17                   .dbline 726
 0D17           ;                                       }
 0D17                   .dbline 727
 0D17           ;                               }
 0D17                   .dbline 728
 0D17           ;                       }
 0D17                   .dbline 729
 0D17           ;               }
 0D17 8027              xjmp L185
 0D19           L184:
 0D19                   .dbline 730
 0D19           ;               else if(TIMEOUT >= RX_TIMEOUT_DURATION)
 0D19 62D000            mov REG[0xd0],>_TIMEOUT
 0D1C 5101              mov A,[_TIMEOUT+1]
 0D1E 1105              sub A,5
 0D20 5100              mov A,[_TIMEOUT]
 0D22 3180              xor A,-128
 0D24 1980              sbb A,(0 ^ 0x80)
 0D26 C018              jc L204
 0D28           X61:
 0D28                   .dbline 731
 0D28           ;               {       
 0D28                   .dbline 732
 0D28           ;                       num_timeouts++;
 0D28 7701              inc [X+1]
 0D2A 0F0000            adc [X+0],0
 0D2D                   .dbline 735
 0D2D           ;                       
 0D2D           ;                       // If we are not maxed out on modules, look for more.
 0D2D           ;                       if(NUM_MODULES < MAX_MODULES)
 0D2D 62D000            mov REG[0xd0],>_NUM_MODULES
 0D30 5101              mov A,[_NUM_MODULES+1]
 0D32 11FA              sub A,-6
 0D34 5100              mov A,[_NUM_MODULES]
 0D36 3180              xor A,-128
 0D38 1980              sbb A,(0 ^ 0x80)
 0D3A D004              jnc L206
 0D3C           X62:
 0D3C                   .dbline 736
 0D3C           ;                       {
 0D3C                   .dbline 737
 0D3C           ;                               sayHello();
 0D3C 7C0391            xcall _sayHello
 0D3F                   .dbline 738
 0D3F           ;                       }
 0D3F           L206:
 0D3F                   .dbline 739
 0D3F           ;               }
 0D3F           L204:
 0D3F           L185:
 0D3F                   .dbline 740
 0D3F           ;       }
 0D3F           L182:
 0D3F                   .dbline 690
 0D3F 5201              mov A,[X+1]
 0D41 110A              sub A,10
 0D43 5200              mov A,[X+0]
 0D45 3180              xor A,-128
 0D47 1980              sbb A,(0 ^ 0x80)
 0D49 CEEC              jc L181
 0D4B           X63:
 0D4B                   .dbline 743
 0D4B           ;       
 0D4B           ;       // Switch back to PC mode.
 0D4B           ;       configToggle(PC_MODE);
 0D4B 5000              mov A,0
 0D4D 08                push A
 0D4E 5002              mov A,2
 0D50 08                push A
 0D51 9DAC              xcall _configToggle
 0D53 38FE              add SP,-2
 0D55                   .dbline -2
 0D55           L180:
 0D55 38FE              add SP,-2
 0D57 20                pop X
 0D58                   .dbline 0 ; func end
 0D58 7F                ret
 0D59                   .dbsym l num_timeouts 0 I
 0D59                   .dbend
 0D59                   .dbfunc e xmitWait _xmitWait fV
 0D59           ;              i -> X+0
 0D59           _xmitWait::
 0D59                   .dbline -1
 0D59 10                push X
 0D5A 4F                mov X,SP
 0D5B 3802              add SP,2
 0D5D                   .dbline 747
 0D5D           ; }
 0D5D           ; 
 0D5D           ; void xmitWait(void)
 0D5D           ; {
 0D5D                   .dbline 750
 0D5D           ;       int i;
 0D5D           ;       
 0D5D           ;       for(i = 0; i < 25; i++)
 0D5D 560100            mov [X+1],0
 0D60 560000            mov [X+0],0
 0D63           L209:
 0D63                   .dbline 751
 0D63           ;       {
 0D63                   .dbline 753
 0D63           ;               // Sit here and spin for about 50 microseconds.
 0D63           ;       }
 0D63           L210:
 0D63                   .dbline 750
 0D63 7701              inc [X+1]
 0D65 0F0000            adc [X+0],0
 0D68                   .dbline 750
 0D68 5201              mov A,[X+1]
 0D6A 1119              sub A,25
 0D6C 5200              mov A,[X+0]
 0D6E 3180              xor A,-128
 0D70 1980              sbb A,(0 ^ 0x80)
 0D72 CFF0              jc L209
 0D74           X64:
 0D74                   .dbline -2
 0D74           L208:
 0D74 38FE              add SP,-2
 0D76 20                pop X
 0D77                   .dbline 0 ; func end
 0D77 7F                ret
 0D78                   .dbsym l i 0 I
 0D78                   .dbend
 0D78                   .dbfunc e TX_TIMEOUT_ISR _TX_TIMEOUT_ISR fV
 0D78           _TX_TIMEOUT_ISR::
 0D78                   .dbline -1
 0D78 71C0              or F,-64
 0D7A 08                push A
 0D7B 5DD0              mov A,REG[0xd0]
 0D7D 08                push A
 0D7E                   .dbline 757
 0D7E           ; }
 0D7E           ; 
 0D7E           ; void TX_TIMEOUT_ISR(void)
 0D7E           ; {     
 0D7E                   .dbline 758
 0D7E           ;       TIMEOUT++;
 0D7E 62D000            mov REG[0xd0],>_TIMEOUT
 0D81 7601              inc [_TIMEOUT+1]
 0D83 0E0000            adc [_TIMEOUT],0
 0D86                   .dbline 760
 0D86           ;       
 0D86           ;       M8C_ClearIntFlag(INT_CLR0,TX_TIMEOUT_INT_MASK);
 0D86 62DAFD            mov REG[0xda],-3
 0D89                   .dbline -2
 0D89           L213:
 0D89 18                pop A
 0D8A 60D0              mov REG[208],A
 0D8C 18                pop A
 0D8D                   .dbline 0 ; func end
 0D8D 7E                reti
 0D8E                   .dbend
 0D8E                   .dbfunc e RX_TIMEOUT_ISR _RX_TIMEOUT_ISR fV
 0D8E           _RX_TIMEOUT_ISR::
 0D8E                   .dbline -1
 0D8E 71C0              or F,-64
 0D90 08                push A
 0D91 5DD0              mov A,REG[0xd0]
 0D93 08                push A
 0D94                   .dbline 764
 0D94           ; }
 0D94           ; 
 0D94           ; void RX_TIMEOUT_ISR(void)
 0D94           ; {     
 0D94                   .dbline 765
 0D94           ;       TIMEOUT++;
 0D94 62D000            mov REG[0xd0],>_TIMEOUT
 0D97 7601              inc [_TIMEOUT+1]
 0D99 0E0000            adc [_TIMEOUT],0
 0D9C                   .dbline 767
 0D9C           ;       
 0D9C           ;       M8C_ClearIntFlag(INT_CLR0,RX_TIMEOUT_INT_MASK);
 0D9C 62DAFD            mov REG[0xda],-3
 0D9F                   .dbline -2
 0D9F           L214:
 0D9F 18                pop A
 0DA0 60D0              mov REG[208],A
 0DA2 18                pop A
 0DA3                   .dbline 0 ; func end
 0DA3 7E                reti
 0DA4                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _STATE::
 0000 0000              .byte 0,0
 0002                   .dbsym e STATE _STATE I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _PARAM::
 0000 00000000000000000000      .byte 0,0,0,0,0,0,0,0,0,0
 000A                   .dbsym e PARAM _PARAM A[10:10]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_TYPE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_TYPE _COMMAND_TYPE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_DESTINATION::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_DESTINATION _COMMAND_DESTINATION c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _COMMAND_SOURCE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_SOURCE _COMMAND_SOURCE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _NUM_MODULES::
 0000 0000              .byte 0,0
 0002                   .dbsym e NUM_MODULES _NUM_MODULES I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\FAKEMA~1\FAKEMA~1\FAKEMA~1\main.c
 0000           _TIMEOUT::
 0000 0000              .byte 0,0
 0002                   .dbsym e TIMEOUT _TIMEOUT I
                        .area lit(rom, con, rel)
 0000           L46:
 0000 4D6F64756C65732100        .byte 'M,'o,'d,'u,'l,'e,'s,33,0
