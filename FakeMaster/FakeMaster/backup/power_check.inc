;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: POWER_CHECK.inc
;;  Version: 1.1, Updated on 2009/7/10 at 10:41:37
;;  Generated by PSoC Designer 5.0.985.0
;;
;;  DESCRIPTION: Assembler declarations for the ADCINC A/D Converter
;;               User Module with a 1st-order modulator.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
;--------------------------------------------------
; Constants for POWER_CHECK API's.
;--------------------------------------------------

POWER_CHECK_OFF:                equ 00h
POWER_CHECK_LOWPOWER:           equ 01h
POWER_CHECK_MEDPOWER:           equ 02h
POWER_CHECK_HIGHPOWER:          equ 03h

POWER_CHECK_bNUMBITS:           equ 08h
POWER_CHECK_NoAZ:               equ 1
POWER_CHECK_SIGNED_DATA:        equ 0
POWER_CHECK_9_OR_MORE_BITS:     equ ((08h - 1)& 08h)
POWER_CHECK_8_OR_MORE_BITS:     equ ((08h )& 08h)
;--------------------------------------------------
; Register Address Constants for POWER_CHECK
;--------------------------------------------------
POWER_CHECK_ISR_MASK:                  equ 01h
POWER_CHECK_ISR_REG:                   equ 0e1h
POWER_CHECK_CLR_REG:                   equ (((POWER_CHECK_ISR_REG & 038h)/8)^0dfh)

POWER_CHECK_PWMdr0:            equ 20h     ; Period reg
POWER_CHECK_PWMdr1:            equ 21h     ; Down count reg
POWER_CHECK_PWMdr2:            equ 22h     ; Compare reg
POWER_CHECK_PWMcr0:            equ 23h     ; Control reg
POWER_CHECK_PWMfn:             equ 20h     ; Function reg
POWER_CHECK_PWMsl:             equ 21h     ; Input  select reg
POWER_CHECK_PWMos:             equ 22h     ; Output select reg

POWER_CHECK_AtoDcr0:           equ 84h     ; SC Block Control Reg 0
POWER_CHECK_AtoDcr1:           equ 85h     ; SC Block Control Reg 1
POWER_CHECK_AtoDcr2:           equ 86h     ; SC Block Control Reg 2
POWER_CHECK_AtoDcr3:           equ 87h     ; SC Block Control Reg 3

HighByte: equ 0
LowByte:  equ 1

macro POWER_CHECK_fIsDataAvailable_M
   RAM_SETPAGE_CUR >POWER_CHECK_fStatus
   mov A,[POWER_CHECK_fStatus]
endm


macro POWER_CHECK_iGetData_M
   RAM_SETPAGE_CUR >POWER_CHECK_iResult
   mov X,[(POWER_CHECK_iResult + HighByte)]
   mov A,[(POWER_CHECK_iResult + LowByte)]
endm


macro POWER_CHECK_wGetData_M
   POWER_CHECK_iGetData_M
endm


macro POWER_CHECK_cGetData_M
   RAM_SETPAGE_CUR >POWER_CHECK_iResult
   mov A,[(POWER_CHECK_iResult + LowByte)]
endm


macro POWER_CHECK_bGetData_M
   POWER_CHECK_cGetData_M
endm


macro POWER_CHECK_fClearFlag_M
   RAM_SETPAGE_CUR >POWER_CHECK_fStatus
   mov A,[POWER_CHECK_fStatus]
   mov [POWER_CHECK_fStatus],00h
endm


macro POWER_CHECK_iClearFlagGetData_M
   RAM_SETPAGE_CUR >POWER_CHECK_fStatus
  .repeat:
      mov [POWER_CHECK_fStatus],00h
      mov X,[(POWER_CHECK_iResult + HighByte)]
      mov A,[(POWER_CHECK_iResult + LowByte)]
      cmp [POWER_CHECK_fStatus],00h
  .until: jnz .repeat
endm


macro POWER_CHECK_wClearFlagGetData_M
   POWER_CHECK_iClearFlagGetData_M
endm


macro POWER_CHECK_cClearFlagGetData_M
   RAM_SETPAGE_CUR >POWER_CHECK_fStatus
   mov [POWER_CHECK_fStatus],00h
   mov A,[(POWER_CHECK_iResult + LowByte)]
endm


macro POWER_CHECK_bClearFlagGetData_M
   POWER_CHECK_cClearFlagGetData_M
endm

macro POWER_CHECK_ENABLE_INTEGRATOR_M  
   and reg[POWER_CHECK_AtoDcr3],~10h
   IF POWER_CHECK_NoAZ
   and reg[POWER_CHECK_AtoDcr2],~20h
   ENDIF
endm


macro POWER_CHECK_RESET_INTEGRATOR_M  
   IF POWER_CHECK_NoAZ
   or  reg[POWER_CHECK_AtoDcr2],20h
   ENDIF
   or  reg[POWER_CHECK_AtoDcr3],10h
endm


macro POWER_CHECK_STARTADC_M  
   ;Enable PWM interrupt
   mov reg[POWER_CHECK_CLR_REG],~(POWER_CHECK_ISR_MASK)
   or  reg[POWER_CHECK_ISR_REG], (POWER_CHECK_ISR_MASK)
endm


macro POWER_CHECK_STOPADC_M
   ;Disable PWM interrupt  
   and reg[POWER_CHECK_ISR_REG],~(POWER_CHECK_ISR_MASK)
endm


macro POWER_CHECK_WritePulseWidth_M
   mov reg[POWER_CHECK_PWMdr2],A
endm

; end of file POWER_CHECK.inc
